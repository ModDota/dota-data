$> dump_panorama_css_properties
=== align ===
&lt;Needs a description&gt;


=== animation ===
&lt;Needs a description&gt;


=== animation-delay ===
&lt;Needs a description&gt;


=== animation-direction ===
&lt;Needs a description&gt;


=== animation-duration ===
&lt;Needs a description&gt;


=== animation-fill-mode ===
&lt;Needs a description&gt;


=== animation-iteration-count ===
&lt;Needs a description&gt;


=== animation-name ===
&lt;Needs a description&gt;


=== animation-timing-function ===
&lt;Needs a description&gt;


=== background-blur ===
Sets the amount of blur to apply to the contents behind this panel during composition.  Default is no blur, for now Gaussian is the only blur type and takes a horizontal standard deviation, vertical standard deviation, and number of passes.  Good std deviation values are around 0-10, if 10 is still not intense enough consider more passes, but more than one pass is bad for perf.  As shorthand you can specify with just one value, which will be used for the standard deviation in both directions and 1 pass will be set.<br><br><b>Examples:</b><pre>background-blur: gaussian( 2.5 );
background-blur: gaussian( 6, 6, 1 );</pre>


=== background-color ===
Sets the background fill color/gradient/combination for a panel.<br><br><b>Examples:</b><pre>background-color: #FFFFFFFF;
background-color: gradient( linear, 0% 0%, 0% 100%, from( #fbfbfbff ), to( #c0c0c0c0 ) );
background-color: gradient( linear, 0% 0%, 0% 100%, from( #fbfbfbff ), color-stop( 0.3, #ebebebff ), to( #c0c0c0c0 ) );
background-color: gradient( radial, 50% 50%, 0% 0%, 80% 80%, from( #00ff00ff ), to( #0000ffff ) );
background-color: #0d1c22ff, gradient( radial, 100% -0%, 100px -40px, 320% 270%, from( #3a464bff ), color-stop( 0.23, #0d1c22ff ), to( #0d1c22ff ) );</pre>


=== background-color-opacity ===
Sets the background color opacity for a panel (does nothing on its own, but when merged with a full background-color it overrides the opacity).<br><br><b>Examples:</b><pre>background-color-opacity: 0.5;
</pre>


=== background-image ===
Comma separated list of images or movies to draw in the background. Can specify "none" to not draw a background layer. Combined with background-position, background-size and background-repeat values.<br><br><b>Example:</b><pre>background-image: url("file://{images}/default.tga"), url( "file://{movies}/Background1080p.webm" );</pre>


=== background-img-opacity ===
Sets the Opacity of background-image<br><br><b>Examples:</b><pre>background-img-opacity: 0.5;</pre>


=== background-position ===
Controls the horizontal and vertical placement of the background image, with the format: &lt;left|center|right&gt; &lt;horizontal length&gt; &lt;top|center|bottom&gt; &lt;vertical length&gt;<br><br>If length is a percent, the specified location within the image is positioned over that same specified position in the background. If the length is pixels, the top left corner is placed relative to the provided alignment keywords (left, bottom, etc.). See examples for more details.<br><br>If 1 value is specified, the other value is assumed to be center. If 2 values are specified, the first value must be for horizontal placement and the second for vertical.<br><br><b>Examples:</b><pre>// aligns the top left corner of the image with the top left corner of the panel (default)
background-position: 0% 0%;

// centers the image within the background (same as "center center")
background-position: center;

// aligns the bottom right corner of the image with the bottom right corner of the panel (same as "100% 100%")
background-position: right bottom;

// the top left corner of the image is placed 10px to the right of, 40px below the top left corner of the panel
background-position: left 10px top 40px;</pre>


=== background-repeat ===
Controls if the background should be repeated in the horizontal and vertical directions.<br><br>Possible values per direction:<br>"repeat" - (default) Repeated in the specified direction until it fills the panel<br>"space" - Repeated as many times as required to fill the panel w/o being clipped. Space is added between images to to align first and last image with panel edges.<br>"round" - Repeated as many times as required to fill the panel w/o being clipped. The image is resized to align first and last image with panel edges.<br>"no-repeat" - Not repeated<br><br>Possible single values:<br>"repeat-x" - equals "repeat no-repeat"<br>"repeat-y" - equals "no-repeat repeat"<br><br><b>Examples:</b><pre>background-repeat: repeat; // equals "repeat repeat" (default)
background-repeat: repeat space; // repeats horizontally, spaces vertically
background-repeat: no-repeat round; // 1 column of images, scaled to fit evenly</pre>


=== background-size ===
Sets the horizontal and vertical dimensions used to draw the background image. Can be set in pixels, percent, "contains" to size down to panel dimensions or "auto" preserves the image aspect ratio. By default, set to "auto" which preveres the image's original size.<br><br>Multiple background layers can be specified in a comma separated list, which are then combined with background-image, background-position, and background-repeat values.<br><br><b>Examples:</b><pre>background-size: auto; // same as "auto auto" (default)
background-size: 100% 100%; // image fills the panel
background-size: 50% 75%; // image fills 50% of the panel's width, and 75% of the panel's height
background-size: 300px 200px; // image is drawn 300px wide, 200px tall</pre>


=== blur ===
Sets the amount of blur to apply to the panel and all it's children during composition.  Default is no blur, for now Gaussian is the only blur type and takes a horizontal standard deviation, vertical standard deviation, and number of passes.  Good std deviation values are around 0-10, if 10 is still not intense enough consider more passes, but more than one pass is bad for perf.  As shorthand you can specify with just one value, which will be used for the standard deviation in both directions and 1 pass will be set.<br><br><b>Examples:</b><pre>blur: gaussian( 2.5 );
blur: gaussian( 6, 6, 1 );
</pre>


=== border ===
Shorthand for setting panel border. Specify width, style, and color.  Supported styles are: solid, none.<br><br><b>Examples:</b><pre>border: 2px solid #111111FF;</pre>


=== border-bottom ===
Shorthand for setting the bottom panel border. Specify width, style, and color.  Supported styles are: solid, none.<br><br><b>Examples:</b><pre>border-bottom: 2px solid #111111FF;</pre>


=== border-bottom-color ===
Specifies border color for the bottom edge of the panel. <br><br><b>Examples:</b><pre>border-bottom-color: #111111FF;</pre>


=== border-bottom-left-radius ===
Specifies border-radius for bottom-left corner which rounds off border and clips background/foreground content to rounded edge.  Takes 1 or 2 values in px or %, first value is horizontal radii for elliptical corner, second is vertical radii, if only one is specified then horizontal/vertical will both be set and corner will be circular.<br><br><b>Examples:</b><pre>border-bottom-left-radius: 2px 2px;
border-bottom-left-radius: 5%;</pre>


=== border-bottom-right-radius ===
Specifies border-radius for bottom-right corner which rounds off border and clips background/foreground content to rounded edge.  Takes 1 or 2 values in px or %, first value is horizontal radii for elliptical corner, second is vertical radii, if only one is specified then horizontal/vertical will both be set and corner will be circular.<br><br><b>Examples:</b><pre>border-bottom-right-radius: 2px 2px;
border-bottom-right-radius: 5%;</pre>


=== border-bottom-style ===
Specifies border style for the bottom edge of the panel. <br><br><b>Examples:</b><pre>border-bottom-style: solid;</pre>


=== border-bottom-width ===
Specifies border width for the bottom edge of the panel. <br><br><b>Examples:</b><pre>border-bottom-width: 2px;</pre>


=== border-brush ===
EXPERIMENTAL: Sets a more-complex brush for the entire border paint area (ignores normal border color).<br><br><b>Examples:</b><pre>border-brush: gradient( linear, 0% 0%, 0% 100%, from( #fbfbfbff ), to( #c0c0c0c0 ) );
border-brush: gradient( linear, 0% 0%, 0% 100%, from( #fbfbfbff ), color-stop( 0.3, #ebebebff ), to( #c0c0c0c0 ) );
border-brush: gradient( radial, 50% 50%, 0% 0%, 80% 80%, from( #00ff00ff ), to( #0000ffff ) );
</pre>


=== border-color ===
Specifies border color for panel.  If a single color value is set it applies to all sides, if 2 are set the first is top/bottom and the second is left/right, if all four are set then they are top, right, bottom, left in order.<br><br><b>Examples:</b><pre>border-color: #111111FF;
border-color: #FF0000FF #00FF00FF #0000FFFF #00FFFFFF;</pre>


=== border-left ===
Shorthand for setting the left panel border. Specify width, style, and color.  Supported styles are: solid, none.<br><br><b>Examples:</b><pre>border-left: 2px solid #111111FF;</pre>


=== border-left-color ===
Specifies border color for the left edge of the panel. <br><br><b>Examples:</b><pre>border-left-color: #111111FF;</pre>


=== border-left-style ===
Specifies border style for the left edge of the panel. <br><br><b>Examples:</b><pre>border-left-style: solid;</pre>


=== border-left-width ===
Specifies border width for the left edge of the panel. <br><br><b>Examples:</b><pre>border-left-width: 2px;</pre>


=== border-radius ===
Shorthand to set border radius for all corners at once.  Border radius rounds off corners of the panel, adjusting the border to smoothly round and also clipping background image/color and contents to the specified elliptical or circular values.  In this shorthand version you may specify a single value for all raddi, or horizontal / vertical separated by the '/' character.  For both horizontal and vertical you may specify 1 to 4 values in pixels or %, they will be taken in order as top-left, top-right, bottom-right, bottom-left radii values.<br><br><b>Examples:</b><pre>// 2 px circular corners on all sides
border-radius: 2px;
// Perfect circular or elliptical panel (circular if box was square)
border-radius: 50% / 50%;
// 2 px horizontal radii 4px vertical elliptical corners on all sides
border-radius: 2px / 4px;
// All corners fully specified
border-radius: 2px 3px 4px 2px / 2px 3px 3px 2px;</pre>


=== border-right ===
Shorthand for setting the right panel border. Specify width, style, and color.  Supported styles are: solid, none.<br><br><b>Examples:</b><pre>border-right: 2px solid #111111FF;</pre>


=== border-right-color ===
Specifies border color for the right edge of the panel. <br><br><b>Examples:</b><pre>border-right-color: #111111FF;</pre>


=== border-right-style ===
Specifies border style for the right edge of the panel. <br><br><b>Examples:</b><pre>border-right-style: solid;</pre>


=== border-right-width ===
Specifies border width for the right edge of the panel. <br><br><b>Examples:</b><pre>border-right-width: 2px;</pre>


=== border-style ===
Specifies border style for panel.  If a single style value is set it applies to all sides, if 2 are set the first is top/bottom and the second is left/right, if all four are set then they are top, right, bottom, left in order.<br><br><b>Examples:</b><pre>border-style: solid;
border-style: solid none solid none;</pre>


=== border-top ===
Shorthand for setting the top panel border. Specify width, style, and color.  Supported styles are: solid, none.<br><br><b>Examples:</b><pre>border-top: 2px solid #111111FF;</pre>


=== border-top-color ===
Specifies border color for the top edge of the panel. <br><br><b>Examples:</b><pre>border-top-color: #111111FF;</pre>


=== border-top-left-radius ===
Specifies border-radius for top-left corner which rounds off border and clips background/foreground content to rounded edge.  Takes 1 or 2 values in px or %, first value is horizontal radii for elliptical corner, second is vertical radii, if only one is specified then horizontal/vertical will both be set and corner will be circular.<br><br><b>Examples:</b><pre>border-top-left-radius: 2px 2px;
border-top-left-radius: 5%;</pre>


=== border-top-right-radius ===
Specifies border-radius for top-right corner which rounds off border and clips background/foreground content to rounded edge.  Takes 1 or 2 values in px or %, first value is horizontal radii for elliptical corner, second is vertical radii, if only one is specified then horizontal/vertical will both be set and corner will be circular.<br><br><b>Examples:</b><pre>border-top-right-radius: 2px 2px;
border-top-right-radius: 5%;</pre>


=== border-top-style ===
Specifies border style for the top edge of the panel. <br><br><b>Examples:</b><pre>border-top-style: solid;</pre>


=== border-top-width ===
Specifies border width for the top edge of the panel. <br><br><b>Examples:</b><pre>border-top-width: 2px;</pre>


=== border-width ===
Specifies border width for panel.  If a single width value is set it applies to all sides, if 2 are set the first is top/bottom and the second is left/right, if all four are set then they are top, right, bottom, left in order.<br><br><b>Examples:</b><pre>border-width: 1px;'
border-width: 20px 1px 20px 1px;</pre>


=== box-shadow ===
Specifies outer shadows for boxes, or inset shadows/glows.  The shadow shape will match the border box for the panel,so use border-radius to affect rounding.  Syntax takes optional 'inset', optional 'fill' then color, and then horizontal offset pixels, vertical offset pixels, blur radius pixels, and spread distance in pixels. Inset means the shadow is an inner shadow/glow, fill is valid only on outer shadows and means draw the shadow behind the entire box, not clipping it to outside the border area only. A negative blur radius will give a hard-edged look to the shadow, effectively a rounded outline of the same size as the blur.<br><br><b>Examples:</b><pre>box-shadow: #ffffff80 4px 4px 8px 0px; // outer
box-shadow: fill #ffffff80 4px 4px 8px 0px; // outer, filled
box-shadow: inset #333333b0 0px 0px 8px 12px; // inner</pre>


=== brightness ===
Sets the brightness that applies to the panel and all it's children during composition. The value is a multiplier on the HSB brightness value.<br><br><b>Example:</b><pre>brightness: 1.5;</pre>


=== clip ===
Specifies a clip region within the panel, where contents will be clipped at render time. This clipping has no impact on layout, and is fast and supported for transitions/animations. Radial clip mode takes a center point, start angle and angular width of the revealed sector.<br><br><b>Example:</b><pre>clip: rect( 10%, 90%, 90%, 10% );clip: radial( 50% %50, 0deg, 90deg );</pre>


=== color ===
Sets the foreground fill color/gradient/combination for a panel.  This color is the color used to render text within the panel.<br><br><b>Examples:</b><pre>color: #FFFFFFFF;
color: gradient( linear, 0% 0%, 0% 100%, from( #cbcbcbff ), to( #a0a0a0a0 ) );</pre>


=== context-menu-arrow-position ===
Specifies where to point the arrow of a context menu at on this panel. The first value controls how the arrow is positioned horizontally when the context menu is to the top or bottom of the panel, and the second value controls how the arrow is positioned vertically when the context menu is to the left or right of the panel. Default is '50% 50%'.<br><br><b>Example:</b><pre>context-menu-arrow-position: 25% 50%;</pre>


=== context-menu-body-position ===
Specifies where to position the body of a context menu relative to this panel. The first value controls how the body is aligned horizontally when the context menu is to the top or bottom of the panel, and the second value controls how the body is aligned vertically when the context menu is to the left or right of the panel. 0% means left/top aligned, 50% means center/middle aligned, and 100% means right/bottom aligned. Default is '0% 0%'.<br><br><b>Example:</b><pre>context-menu-body-position: 50% 100%;</pre>


=== context-menu-position ===
Specifies where to position a context menu relative to this panel. Valid options include 'left', 'top', 'right', and 'bottom'. List up to 4 positions to determine the order that positions are tried if the context menu doesn't fully fit on screen. Default is 'right left bottom top'. If less than 4 positions are specified, the context menu first tries the opposite of the specified position along the same axis before switching to the other axis.<br><br><b>Examples:</b><pre>context-menu-position: bottom;
context-menu-position: left bottom;</pre>


=== contrast ===
Sets the contrast that applies to the panel and all it's children during composition.<br><br><b>Example:</b><pre>contrast: 1.5;</pre>


=== flow-children ===
&lt;Needs a description&gt;


=== font ===
&lt;Needs a description&gt;


=== font-family ===
Specifies the font face to use.<br><br><b>Examples:</b><pre>font-family: Arial;
font-family: "Comic Sans MS";</pre>


=== font-size ===
Specifies the target font face height in pixels.<br><br><b>Example:</b><pre>font-size: 12;</pre>


=== font-stretch ===
Specifies the font stretch to use. Supported values are normal, condensed, and expanded.<br><br><b>Examples:</b><pre>font-stretch: normal;
font-stretch: condensed;
font-stretch: expanded;</pre>


=== font-style ===
Specifies the font style to use. Supported values are normal, and italic<br><br><b>Example:</b><pre>font-style: normal;</pre>


=== font-weight ===
Specifies the font weight to use. Supported values are light, thin, normal, medium, bold, and black.<br><br><b>Examples:</b><pre>font-weight: normal;
font-weight: bold;
font-weight: thin;</pre>


=== height ===
Sets the height for this panel. Possible values:<br>"fit-children" - Panel size is set to the required size of all children (default)<br>&lt;pixels&gt; - Any fixed pixel value (ex: "100px")<br>&lt;percentage&gt; - Percentage of parent height (ex: "100%")<br>"fill-parent-flow( &lt;weight&gt; )" - Fills to remaining parent width. If multiple children are set to this value, weight is used to determine final height. For example, if three children are set to fill-parent-flow of 1.0 and the parent is 300px tall, each child will be 100px tall. (ex: "fill-parent-flow( 1.0 )" )<br>"width-percentage( &lt;percentage&gt; )" - Percentage of the panel's width, which allows you to enforce a particular aspect ratio.  The width cannot also be height-percentage.


=== horizontal-align ===
&lt;Needs a description&gt;


=== hue-rotation ===
Sets the hue rotation to apply to the panel and all it's children during composition. Default of 0.0 means no adjustment, domain is in degrees.<br><br><b>Example:</b><pre>hue-rotation: 180deg;</pre>


=== img-shadow ===
Specifies image shadows.  The shadow shape will match the image the panel can generate,and this is only meaningful for images.  Syntax takes horizontal offset pixels, vertical offset pixels, blur radius pixels, strength, and then shadow color.<br><br><b>Example:</b><pre>img-shadow: 2px 2px 8px 3.0 #333333b0;</pre>


=== layout-position ===
Sets how the panel is positioned relative to its parent. "static" means position in the default way. "fixed" means position in the default way, but ignoring the parent's scroll offset.<br><br><b>Example:</b><pre>layout-position: fixed;</pre>


=== letter-spacing ===
Sets letter-spacing for text in a string. Possible values:<br>normal - no manual spacing<br>&lt;pixels&gt; - Any fixed pixel value (ex: "1px")


=== line-height ===
Specifies the line height (distance between top edge of line above and line below) to use for text. By default this is 'normal' and a value that matches the font-size reasonably will be used automatically. Unlike the web, we don't have a weird CSS inheritence problem with the 120% vs 1.2 styles.<br><br><b>Example:</b><pre>line-height: normal;line-height: 20px;line-height: 1.2;line-height: 120%;</pre>


=== margin ===
&lt;Needs a description&gt;


=== margin-bottom ===
&lt;Needs a description&gt;


=== margin-left ===
&lt;Needs a description&gt;


=== margin-right ===
&lt;Needs a description&gt;


=== margin-top ===
&lt;Needs a description&gt;


=== max-height ===
&lt;Needs a description&gt;


=== max-width ===
&lt;Needs a description&gt;


=== min-height ===
&lt;Needs a description&gt;


=== min-width ===
&lt;Needs a description&gt;


=== opacity ===
Sets the opacity or amount of transparency applied to the panel and all it's children during composition. Default of 1.0 means fully opaque, 0.0 means fully transparent.<br><br><b>Example:</b><pre>opacity: 0.8;</pre>


=== opacity-brush ===
Sets an opacity brush to apply to the panel and all it's children during composition.<br><br><b>Example:</b><pre>opacity-brush: gradient( linear, 0% 0%, 0% 100%, from( #ffffffff ), to( #ffffff00 ) );</pre>


=== opacity-mask ===
Applies an image as an opacity mask that stretches to the panel bounds and fades out it's content based on the alpha channel. The second float value is an optional opacity value for the mask itself, the image won't interpolate/cross-fade, but you can animate the opacity to fade the mask in/out. The -scroll-up, -scroll-down, and -scroll-up-down varients override the mask and apply only when the various vertical scroll scenarios affect the panel based on the overflow property.<br><br><b>Examples:</b><pre>opacity-mask: url( "file://{images}/upper_row_mask.tga" );
opacity-mask: url( "file://{images}/upper_row_mask.tga" ) 0.5;
opacity-mask-scroll-up: url( "file://{images}/upper_row_mask_up.tga" ) 0.5;
opacity-mask-scroll-down: url( "file://{images}/upper_row_mask_down.tga" ) 0.5;
opacity-mask-scroll-up-down: url( "file://{images}/upper_row_mask_up_down.tga" ) 0.5;</pre>


=== opacity-mask-scroll-down ===



=== opacity-mask-scroll-up ===



=== opacity-mask-scroll-up-down ===



=== overflow ===
Specifies what to do with contents that overflow the available space for the panel. Possible values:<br>"squish" - Children are squished to fit within the panel's bounds if needed (default)<br>"clip" - Children maintain their desired size but their contents are clipped<br>"scroll" - Children maintain their desired size and a scrollbar is added to this panel<br><br>"noclip" - Children maintain their desired size and content is allowed to overflow this panel<br><br><b>Examples:</b><pre>overflow: squish squish; // squishes contents in horizontal and vertical directions
overflow: squish scroll; // scrolls contents in the Y direction</pre>


=== padding ===
&lt;Needs a description&gt;


=== padding-bottom ===
&lt;Needs a description&gt;


=== padding-left ===
&lt;Needs a description&gt;


=== padding-right ===
&lt;Needs a description&gt;


=== padding-top ===
&lt;Needs a description&gt;


=== perspective ===
Sets the perspective depth space available for children of the panel.  Default of 1000 would mean that children at 1000px zpos are right at the viewers eye, -1000px are just out of view distance faded to nothing.<br><br><b>Example:</b><pre>perspective: 1000;</pre>


=== perspective-origin ===
Sets the perspective origin which will be used when transforming children of this panel.  This can be thought of as the camera x/y position relative to the panel.<br><br><b>Example:</b><pre>perspective-origin: 50% 50%;</pre>


=== position ===
Sets the x, y, z position for a panel. Must not be in a flowing layout.<br><br><b>Example:</b><pre>position: 3% 20px 0px;</pre>


=== pre-transform-rotate2d ===
Sets 2 dimensional rotation degrees that apply to the quad for this panel prior to 3 dimensional transforms. This rotation applies without perspective and leaves the panel centered at the same spot as it started.<br><br><b>Example:</b><pre>pre-transform-rotate2d: 45deg;</pre>


=== pre-transform-scale2d ===
Sets 2 dimensional X/Y scale factors that apply to the quad for this panel prior to 3 dimensional transforms. This scaling applies without perspective and leaves the panel centered at the same spot as it started. Default of 1.0 means no scaling, 0.5 would be half size.<br><br><b>Examples:</b><pre>pre-transform-scale2d: 0.8
pre-transform-scale2d: 0.4, 0.6</pre>


=== saturation ===
Sets the amount of saturation to apply to the panel and all it's children during composition.  Default of 1.0 means no adjustment, 0.0 means fully desaturated to gray scale, greater than 1.0 means over-saturation.<br><br><b>Example:</b><pre>saturation: 0.4;</pre>


=== sound ===
Specifies a sound name to play when this selector is applied.<br><br><b>Example:</b><pre>sound: "whoosh_in";</pre>


=== sound-out ===
Specifies a sound name to play when this selector is removed.<br><br><b>Example:</b><pre>sound-out: "whoosh_out";</pre>


=== text-align ===
Specifies the text alignment for text within this panel, defaults to left.<br><br><b>Examples:</b><pre>text-align: left;
text-align: right;
text-align: center;
text-align: justify;
text-align: justify-letter-spacing;</pre>


=== text-decoration ===
Specifies the decoration for text within this panel, defaults to none. Possible values: none, underline, line-through.<br><br><b>Example:</b><pre>text-decoration: underline;</pre>


=== text-decoration-style ===
Specifies the decoration style for text within this panel, defaults to none. Possible values: none, dashed, dotted, wavy.<br><br><b>Example:</b><pre>text-decoration-style: dotted;</pre>


=== text-overflow ===
Controls truncation of text that doesn't fit in a panel.  "clip" means to simply truncate (on char boundaries), "ellipsis" means to end with '...', and "shrink" means lower the font size to fit.  "noclip" allows the text to overflow based on the "overflow" style.
We default to ellipsis, which is contrary to the normal CSS spec.<br><br><b>Examples:</b><pre>text-overflow: ellipsis;
text-overflow: clip;
text-overflow: shrink;
text-overflow: noclip;
</pre>


=== text-shadow ===
Specifies text shadows.  The shadow shape will match the text the panel can generate,and this is only meaningful for labels.  Syntax takes horizontal offset pixels, vertical offset pixels, blur radius pixels, strength, and then shadow color.<br><br><b>Example:</b><pre>text-shadow: 2px 2px 8px 3.0 #333333b0;</pre>


=== text-transform ===
Specifies the transform for text within this panel, defaults to none. Possible values: none, uppercase, lowercase.<br><br><b>Example:</b><pre>text-transform: uppercase;</pre>


=== texture-sampling ===
Controls texture sampling mode for the panel. Set to alpha-only to use the textures alpha data across all 3 color channels, or point for point sampling.<br><br><b>Examples:</b><pre>texture-sampling: normal;
texture-sampling: alpha-only;
texture-sampling: point;</pre>


=== tooltip-arrow-position ===
Specifies where to point the arrow of a tooltip at on this panel. The first value controls how the arrow is positioned horizontally when the tooltip is to the top or bottom of the panel, and the second value controls how the arrow is positioned vertically when the tooltip is to the left or right of the panel. Default is '50% 50%'.<br><br><b>Example:</b><pre>tooltip-arrow-position: 25% 50%;</pre>


=== tooltip-body-position ===
Specifies where to position the body of a tooltip relative to this panel. The first value controls how the body is aligned horizontally when the tooltip is to the top or bottom of the panel, and the second value controls how the body is aligned vertically when the tooltip is to the left or right of the panel. 0% means left/top aligned, 50% means center/middle aligned, and 100% means right/bottom aligned. Default is '0% 0%'.<br><br><b>Example:</b><pre>tooltip-body-position: 50% 100%;</pre>


=== tooltip-position ===
Specifies where to position a tooltip relative to this panel. Valid options include 'left', 'top', 'right', and 'bottom'. List up to 4 positions to determine the order that positions are tried if the tooltip doesn't fully fit on screen. Default is 'right left bottom top'. If less than 4 positions are specified, the tooltip first tries the opposite of the specified position along the same axis before switching to the other axis.<br><br><b>Examples:</b><pre>tooltip-position: bottom;
tooltip-position: left bottom;</pre>


=== transform ===
Sets the transforms to apply to the panel in 2d or 3d space.  You can combine various transforms (comma separated) and they will be applied in order to create a 4x4 3d transform matrix.  The possible operations are: translate3d( x, y, z ), translatex( x ), translatey( y ), translatez( z ), scale3d( x, y, z), rotate3d( x, y, z ), rotatex( x ), rotatey( y ), rotatez( z ).<br><br><b>Examples:</b><pre>transform: translate3d( -100px, -100px, 0px );
transform: rotateZ( -32deg ) rotateX( 30deg ) translate3d( 125px, 520px, 230px );</pre>


=== transform-origin ===
Sets the transform origin about which transforms will be applied.  Default is 50% 50% on the panel so a rotation/scale is centered.<br><br><b>Example:</b><pre>transform-origin: 50% 50%</pre>


=== transition ===
Specifies which properties should transition smoothly to new values if a class/pseudo class changes the styles.  Also specifies duration, timing function, and delay.  Valid timing functions are: ease, ease-in, ease-out, ease-in-out, linear.<br><br><b>Example:</b><pre>transition: position 2.0s ease-in-out 0.0s, perspective-origin 1.2s ease-in-out 0.8s;</pre>


=== transition-delay ===
Specifies the delay in seconds to use for transition properties on this panel, if more than one comma delimited value is specified then the values are applied to each property specified in 'transition-property' in order.  If only one value is specified then it applies to all the properties specified in transition-property.<br><br><b>Examples:</b><pre>transition-delay: 0.0s;
transition-delay: 0.0s, 1.2s;</pre>


=== transition-duration ===
Specifies the durating in seconds to use for transition properties on this panel, if more than one comma delimited value is specified then the values are applied to each property specified in 'transition-property' in order.  If only one value is specified then it applies to all the properties specified in transition-property.<br><br><b>Examples:</b><pre>transition-duration: 2.0s;
transition-duration: 2.0s, 1.2s, 1.2s, 4.0s, 2.0s;</pre>


=== transition-high-framerate ===
Specifies the desire for higher framerate during this transition, if we have control.<br><br><b>Examples:</b><pre>transition-high-framerate: true;
transition-high-framerate: false, true, false;</pre>


=== transition-property ===
Specifies which properties should transition smoothly to new values if a class/pseudo class changes the styles.<br><br><b>Examples:</b><pre>transition: position, transform, background-color;</pre>


=== transition-timing-function ===
Specifies the timing function to use for transition properties on this panel, if more than one comma delimited value is specified then the values are applied to each property specified in 'transition-property' in order.  If only one value is specified then it applies to all the properties specified in transition-property. Valid timing functions are: ease, ease-in, ease-out, ease-in-out, linear.<br><br><b>Examples:</b><pre>transition-timing-function: ease-in-out;
transition-timing-function: ease-in-out, linear;
transition-timing-function: cubic-bezier( 0.785, 0.385, 0.555, 1.505 );</pre>


=== ui-scale ===
Specifies a scale to apply to this panel's layout and all descendants. This scale happens at the layout level ratherthan the bitmap level, so things like text will increase their font size rather than just bitmap scaling. <br><br><b>Examples:</b><pre>ui-scale: 150%; // 150% scaling for X, Y, and Z.
ui-scale: 50% 100% 150%; // 50% scaling for X, 100% for Y. 150% for Z.</pre>


=== ui-scale-x ===
Specifies a scale to apply to this panel's layout and all descendants. This scale happens at the layout level ratherthan the bitmap level, so things like text will increase their font size rather than just bitmap scaling. <br><br><b>Examples:</b><pre>ui-scale: 150%; // 150% scaling for X, Y, and Z.
ui-scale: 50% 100% 150%; // 50% scaling for X, 100% for Y. 150% for Z.</pre>


=== ui-scale-y ===
Specifies a scale to apply to this panel's layout and all descendants. This scale happens at the layout level ratherthan the bitmap level, so things like text will increase their font size rather than just bitmap scaling. <br><br><b>Examples:</b><pre>ui-scale: 150%; // 150% scaling for X, Y, and Z.
ui-scale: 50% 100% 150%; // 50% scaling for X, 100% for Y. 150% for Z.</pre>


=== ui-scale-z ===
Specifies a scale to apply to this panel's layout and all descendants. This scale happens at the layout level ratherthan the bitmap level, so things like text will increase their font size rather than just bitmap scaling. <br><br><b>Examples:</b><pre>ui-scale: 150%; // 150% scaling for X, Y, and Z.
ui-scale: 50% 100% 150%; // 50% scaling for X, 100% for Y. 150% for Z.</pre>


=== vertical-align ===
&lt;Needs a description&gt;


=== visibility ===
Controls if the panel is visible and is included in panel layout. Possible values:<br>"visible" - panel is visible and included in layout (default)<br>"collapse" - panel is invisible and not included in layout


=== wash-color ===
Specifies a 'wash' color, which means a color that will be blended over the panel and all it's children at composition time, tinting them.  The alpha value of the color determines the intensity of the tinting.<br><br><b>Example:</b><pre>wash-color: #39b0d325;</pre>


=== white-space ===
Controls white-space wrapping on rendered text.  "normal" means wrap on whitespace, "nowrap" means do no wrapping at all.<br><br><b>Examples:</b><pre>white-space: normal;
white-space: nowrap;</pre>


=== width ===
Sets the width for this panel. Possible values:<br>"fit-children" - Panel size is set to the required size of all children (default)<br>&lt;pixels&gt; - Any fixed pixel value (ex: "100px")<br>&lt;percentage&gt; - Percentage of parent width (ex: "100%")<br>"fill-parent-flow( &lt;weight&gt; )" - Fills to remaining parent width. If multiple children are set to this value, weight is used to determine final width. For example, if three children are set to fill-parent-flow of 1.0 and the parent is 300px wide, each child will be 100px wide. (ex: "fill-parent-flow( 1.0 )" )<br>"height-percentage( &lt;percentage&gt; )" - Percentage of the panel's height, which allows you to enforce a particular aspect ratio.  The height cannot also be width-percentage.


=== world-blur ===
Sets the amount of blur to apply to the world / backbuffer before drawing.<br><br><b>Examples:</b><pre>world-blur: gaussian( 2.5 );
world-blur: gaussian( 6, 6, 1 );world-blur: mipmapgaussian( 6, 6, 4 );  In this version each gaussian pass is preceded by a quarter area downsample.</pre>


=== x ===
Sets the x, y, z position for a panel. Must not be in a flowing layout.<br><br><b>Example:</b><pre>position: 3% 20px 0px;</pre>


=== y ===
Sets the x, y, z position for a panel. Must not be in a flowing layout.<br><br><b>Example:</b><pre>position: 3% 20px 0px;</pre>


=== z ===
Sets the x, y, z position for a panel. Must not be in a flowing layout.<br><br><b>Example:</b><pre>position: 3% 20px 0px;</pre>


=== z-index ===
Sets the z-index for a panel, panels will be sorted and painted in order within a parent panel.  The sorting first sorts by the z-pos computed from position and transforms, then if panels have matching zpos zindex is used. z-index is different than z-pos in that it doesn't affect rendering perspective, just paint/hit-test ordering. The default z-index value is 0, and any floating point value is accepted.<br><br><b>Example:</b><pre>z-index: 1;</pre>


$> dump_panorama_events
{| class="wikitable"
! Event
! Panel Event
! Description
|-
| <code>AddStyle(string class)</code>
| Yes
| Add a CSS class to a panel.
|-
| <code>AddStyleAfterDelay(string class, float pre-delay)</code>
| Yes
| Add a CSS class to a panel after a specified delay.
|-
| <code>AddStyleToEachChild(string class)</code>
| Yes
| Add a CSS class to all children of this panel.
|-
| <code>AddTimedStyle(string class, float duration, float pre-delay)</code>
| Yes
| Add a class for a specified duration, with optional pre-delay; clears existing timers when called with same class.
|-
| <code>AsyncEvent(float delay, event eventToFire)</code>
| No
| Fire another event after a delay (in seconds).
|-
| <code>DOTADisplayDashboardTip(string string, string optional string)</code>
| No
| Tip to display, panel to attach to (default 'DefaultTipAttachment')
|-
| <code>DOTAHideAbilityTooltip()</code>
| Yes
| Hide the ability tooltip
|-
| <code>DOTAHideBuffTooltip()</code>
| Yes
| Hide the buff tooltip
|-
| <code>DOTAHideDroppedItemTooltip()</code>
| Yes
| Hide the dropped item tooltip
|-
| <code>DOTAHideEconItemTooltip()</code>
| Yes
| Hide the econ item tooltip.
|-
| <code>DOTAHideProfileCardBattleCupTooltip()</code>
| Yes
| Hide the profile card / battle cup tooltip.
|-
| <code>DOTAHideProfileCardTooltip()</code>
| Yes
| Hide the profile card tooltip.
|-
| <code>DOTAHideRankTierTooltip()</code>
| Yes
| Hide the rank tier tooltip.
|-
| <code>DOTAHideRuneTooltip()</code>
| Yes
| Hide the rune tooltip
|-
| <code>DOTAHideTextTooltip()</code>
| Yes
| Hide the text tooltip
|-
| <code>DOTAHideTI10EventGameTooltip()</code>
| Yes
| Hide the ti10 event game tooltip
|-
| <code>DOTAHideTitleImageTextTooltip()</code>
| Yes
| Hide the title image text tooltip.
|-
| <code>DOTAHideTitleTextTooltip()</code>
| Yes
| Hide the title text tooltip.
|-
| <code>DOTALiveStreamUpcoming(uint32 time)</code>
| Yes
| Notify change in RTime32 we expect the stream to start
|-
| <code>DOTALiveStreamVideoLive(bool isLive)</code>
| Yes
| Notify change in video state (is it pointing at a live stream page or not)
|-
| <code>DOTAShowAbilityInventoryItemTooltip(int32 entityIndex, int32 inventorySlot)</code>
| Yes
| Show tooltip for an item in the entityIndex NPC's inventory.
|-
| <code>DOTAShowAbilityShopItemTooltip(string abilityName, string guideName, int32 entityIndex)</code>
| Yes
| Show tooltip for an item in the entityIndex NPC's shop.
|-
| <code>DOTAShowAbilityTooltip(string abilityName)</code>
| Yes
| Show an ability tooltip.
|-
| <code>DOTAShowAbilityTooltipForEntityIndex(string abilityName, int32 entityIndex)</code>
| Yes
| Show an ability tooltip. Level information comes from the entity specified by the entityIndex.
|-
| <code>DOTAShowAbilityTooltipForGuide(string abilityName, string guideName)</code>
| Yes
| Show an ability tooltip annotated with a particular guide's info.
|-
| <code>DOTAShowAbilityTooltipForHero(string abilityName, int32 heroid, bool)</code>
| Yes
| Show an ability tooltip for the specified hero.
|-
| <code>DOTAShowAbilityTooltipForLevel(string abilityName, int32)</code>
| Yes
| Show an ability tooltip for a specific level.
|-
| <code>DOTAShowBuffTooltip(int32 entityIndex, int32 buffSerial, bool bOnEnemy)</code>
| Yes
| Show a buff tooltip for the specified entityIndex + buff serial.
|-
| <code>DOTAShowEconItemTooltip(class item_definition_index_t itemDef, class style_index_t styleIndex, int32 heroID)</code>
| Yes
| Show the econ item tooltip for a given item, style, and hero. Use 0 for the default style, and -1 for the default hero.
|-
| <code>DOTAShowProfileCardBattleCupTooltip(uint64 steamID)</code>
| Yes
| Show the battle cup portion of the user's profile card, if it exists
|-
| <code>DOTAShowProfileCardTooltip(uint64 steamID, bool useProName)</code>
| Yes
| Show a user's profile card. Use pro name determines whether to use their professional team name if applicable.
|-
| <code>DOTAShowRankTierTooltip(uint64 steamID, enum EDOTAPlayerMMRType)</code>
| Yes
| Show the rank tier tooltip for a user
|-
| <code>DOTAShowRuneTooltip(int32 X, int32 Y, int32 RuneType)</code>
| Yes
| Show a rune tooltip in the X Y location for the rune type
|-
| <code>DOTAShowTextTooltip(string text)</code>
| Yes
| Show a tooltip with the given text.
|-
| <code>DOTAShowTextTooltipStyled(string text, string style)</code>
| Yes
| Show a tooltip with the given text. Also apply a CSS class named "style" to allow custom styling.
|-
| <code>DOTAShowTI10EventGameTooltip(struct TI10EventGameTooltipInfo_t const * __ptr64 X)</code>
| Yes
| Show a ti10 event game tooltip
|-
| <code>DOTAShowTitleImageTextTooltip(string title, string imagePath, string text)</code>
| Yes
| Show a tooltip with the given title, image, and text.
|-
| <code>DOTAShowTitleImageTextTooltipStyled(string title, string imagePath, string text, string style)</code>
| Yes
| Show a tooltip with the given title, image, and text. Also apply a CSS class named "style" to allow custom styling.
|-
| <code>DOTAShowTitleTextTooltip(string title, string text)</code>
| Yes
| Show a tooltip with the given title and text.
|-
| <code>DOTAShowTitleTextTooltipStyled(string title, string text, string style)</code>
| Yes
| Show a tooltip with the given title and text. Also apply a CSS class named "style" to allow custom styling.
|-
| <code>DropInputFocus()</code>
| Yes
| Drop focus entirely from the window containing this panel.
|-
| <code>IfHasClassEvent(string class, event eventToFire)</code>
| Yes
| Fire another event if this panel has a given class.
|-
| <code>IfHoverOtherEvent(string otherPanelID, event eventToFire)</code>
| Yes
| Fire another event if currently hovering over a panel with the given ID.
|-
| <code>IfNotHasClassEvent(string class, event eventToFire)</code>
| Yes
| Fire another event if this panel does not have a given class.
|-
| <code>IfNotHoverOtherEvent(string otherPanelID, event eventToFire)</code>
| Yes
| Fire another event if not currently hovering over a panel with the given ID.
|-
| <code>MovePanelDown(int32 repeatCount)</code>
| Yes
| Move down from the panel. By default, this will change the focus position, but other panel types may implement this differently.
|-
| <code>MovePanelLeft(int32 repeatCount)</code>
| Yes
| Move left from the panel. By default, this will change the focus position, but other panel types may implement this differently.
|-
| <code>MovePanelRight(int32 repeatCount)</code>
| Yes
| Move right from the panel. By default, this will change the focus position, but other panel types may implement this differently.
|-
| <code>MovePanelUp(int32 repeatCount)</code>
| Yes
| Move up from the panel. By default, this will change the focus position, but other panel types may implement this differently.
|-
| <code>PageDown()</code>
| No
| Scroll the panel down by one page.
|-
| <code>PageLeft()</code>
| No
| Scroll the panel left by one page.
|-
| <code>PagePanelDown()</code>
| Yes
| Scroll the panel down by one page.
|-
| <code>PagePanelLeft()</code>
| Yes
| Scroll the panel left by one page.
|-
| <code>PagePanelRight()</code>
| Yes
| Scroll the panel left by one page.
|-
| <code>PagePanelUp()</code>
| Yes
| Scroll the panel up by one page.
|-
| <code>PageRight()</code>
| No
| Scroll the panel right by one page.
|-
| <code>PageUp()</code>
| No
| Scroll the panel up by one page.
|-
| <code>RemoveStyle(string class)</code>
| Yes
| Remove a CSS class from a panel.
|-
| <code>RemoveStyleAfterDelay(string class, float pre-delay)</code>
| Yes
| Remove a CSS class from a panel after a specified delay.
|-
| <code>RemoveStyleFromEachChild(string class)</code>
| Yes
| Remove a CSS class from all children of this panel.
|-
| <code>ScrollDown()</code>
| No
| Scroll the panel down by one line.
|-
| <code>ScrollLeft()</code>
| No
| Scroll the panel left by one line.
|-
| <code>ScrollPanelDown()</code>
| Yes
| Scroll the panel down by one line.
|-
| <code>ScrollPanelLeft()</code>
| Yes
| Scroll the panel left by one line.
|-
| <code>ScrollPanelRight()</code>
| Yes
| Scroll the panel right by one line.
|-
| <code>ScrollPanelUp()</code>
| Yes
| Scroll the panel up by one line.
|-
| <code>ScrollRight()</code>
| No
| Scroll the panel right by one line.
|-
| <code>ScrollToBottom()</code>
| Yes
| Scroll this panel to the bottom.
|-
| <code>ScrollToTop()</code>
| Yes
| Scroll this panel to the top.
|-
| <code>ScrollUp()</code>
| No
| Scroll the panel up by one line.
|-
| <code>SetChildPanelsSelected(bool selected)</code>
| Yes
| Set whether any child panels are :selected.
|-
| <code>SetInputFocus()</code>
| Yes
| Set focus to this panel.
|-
| <code>SetPanelEnabled(bool enabled)</code>
| Yes
| Sets whether the given panel is enabled
|-
| <code>SetPanelSelected(bool selected)</code>
| Yes
| Set whether this panel is :selected.
|-
| <code>SwitchStyle(string slot, string class)</code>
| Yes
| Switch which class the panel has for a given attribute slot. Allows easily changing between multiple states.
|-
| <code>TogglePanelSelected()</code>
| Yes
| Toggle whether this panel is :selected.
|-
| <code>ToggleStyle(string class)</code>
| Yes
| Toggle whether a panel has the given CSS class.
|-
| <code>TriggerStyle(string class)</code>
| Yes
| Remove then immediately add back a CSS class from a panel. Useful to re-trigger events like animations or sound effects.
|}
$> cl_panorama_script_help *
Enumeration 'SteamUGCQuery'
	SteamUGCQuery.RankedByVote = 0
	SteamUGCQuery.RankedByPublicationDate = 1
	SteamUGCQuery.AcceptedForGameRankedByAcceptanceDate = 2
	SteamUGCQuery.RankedByTrend = 3
	SteamUGCQuery.FavoritedByFriendsRankedByPublicationDate = 4
	SteamUGCQuery.CreatedByFriendsRankedByPublicationDate = 5
	SteamUGCQuery.RankedByNumTimesReported = 6
	SteamUGCQuery.CreatedByFollowedUsersRankedByPublicationDate = 7
	SteamUGCQuery.NotYetRated = 8
	SteamUGCQuery.RankedByTotalVotesAsc = 9
	SteamUGCQuery.RankedByVotesUp = 10
	SteamUGCQuery.RankedByTextSearch = 11
	SteamUGCQuery.RankedByTotalUniqueSubscriptions = 12
	SteamUGCQuery.RankedByPlaytimeTrend = 13
	SteamUGCQuery.RankedByTotalPlaytime = 14
	SteamUGCQuery.RankedByAveragePlaytimeTrend = 15
	SteamUGCQuery.RankedByLifetimeAveragePlaytime = 16
	SteamUGCQuery.RankedByPlaytimeSessionsTrend = 17
	SteamUGCQuery.RankedByLifetimePlaytimeSessions = 18

Enumeration 'SteamUGCMatchingUGCType'
	SteamUGCMatchingUGCType.Items = 0
	SteamUGCMatchingUGCType.Items_Mtx = 1
	SteamUGCMatchingUGCType.Items_ReadyToUse = 2
	SteamUGCMatchingUGCType.Collections = 3
	SteamUGCMatchingUGCType.Artwork = 4
	SteamUGCMatchingUGCType.Videos = 5
	SteamUGCMatchingUGCType.Screenshots = 6
	SteamUGCMatchingUGCType.AllGuides = 7
	SteamUGCMatchingUGCType.WebGuides = 8
	SteamUGCMatchingUGCType.IntegratedGuides = 9
	SteamUGCMatchingUGCType.UsableInGame = 10
	SteamUGCMatchingUGCType.ControllerBindings = 11
	SteamUGCMatchingUGCType.GameManagedItems = 12
	SteamUGCMatchingUGCType.All = -1

Enumeration 'SteamUniverse'
	SteamUniverse.Invalid = 0
	SteamUniverse.Internal = 3
	SteamUniverse.Dev = 4
	SteamUniverse.Beta = 2
	SteamUniverse.Public = 1

Enumeration 'DOTA_GameState'
	DOTA_GameState.DOTA_GAMERULES_STATE_INIT = 0
	DOTA_GameState.DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD = 1
	DOTA_GameState.DOTA_GAMERULES_STATE_HERO_SELECTION = 3
	DOTA_GameState.DOTA_GAMERULES_STATE_STRATEGY_TIME = 4
	DOTA_GameState.DOTA_GAMERULES_STATE_PRE_GAME = 7
	DOTA_GameState.DOTA_GAMERULES_STATE_GAME_IN_PROGRESS = 8
	DOTA_GameState.DOTA_GAMERULES_STATE_POST_GAME = 9
	DOTA_GameState.DOTA_GAMERULES_STATE_DISCONNECT = 10
	DOTA_GameState.DOTA_GAMERULES_STATE_TEAM_SHOWCASE = 5
	DOTA_GameState.DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP = 2
	DOTA_GameState.DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD = 6
	DOTA_GameState.DOTA_GAMERULES_STATE_LAST = 0

Enumeration 'DOTA_GC_TEAM'
	DOTA_GC_TEAM.DOTA_GC_TEAM_GOOD_GUYS = 0
	DOTA_GC_TEAM.DOTA_GC_TEAM_BAD_GUYS = 1
	DOTA_GC_TEAM.DOTA_GC_TEAM_BROADCASTER = 2
	DOTA_GC_TEAM.DOTA_GC_TEAM_SPECTATOR = 3
	DOTA_GC_TEAM.DOTA_GC_TEAM_PLAYER_POOL = 4
	DOTA_GC_TEAM.DOTA_GC_TEAM_NOTEAM = 5

Enumeration 'DOTAConnectionState_t'
	DOTAConnectionState_t.DOTA_CONNECTION_STATE_UNKNOWN = 0
	DOTAConnectionState_t.DOTA_CONNECTION_STATE_NOT_YET_CONNECTED = 1
	DOTAConnectionState_t.DOTA_CONNECTION_STATE_CONNECTED = 2
	DOTAConnectionState_t.DOTA_CONNECTION_STATE_DISCONNECTED = 3
	DOTAConnectionState_t.DOTA_CONNECTION_STATE_ABANDONED = 4
	DOTAConnectionState_t.DOTA_CONNECTION_STATE_LOADING = 5
	DOTAConnectionState_t.DOTA_CONNECTION_STATE_FAILED = 6

Enumeration 'dotaunitorder_t'
	dotaunitorder_t.DOTA_UNIT_ORDER_NONE = 0
	dotaunitorder_t.DOTA_UNIT_ORDER_MOVE_TO_POSITION = 1
	dotaunitorder_t.DOTA_UNIT_ORDER_MOVE_TO_TARGET = 2
	dotaunitorder_t.DOTA_UNIT_ORDER_ATTACK_MOVE = 3
	dotaunitorder_t.DOTA_UNIT_ORDER_ATTACK_TARGET = 4
	dotaunitorder_t.DOTA_UNIT_ORDER_CAST_POSITION = 5
	dotaunitorder_t.DOTA_UNIT_ORDER_CAST_TARGET = 6
	dotaunitorder_t.DOTA_UNIT_ORDER_CAST_TARGET_TREE = 7
	dotaunitorder_t.DOTA_UNIT_ORDER_CAST_NO_TARGET = 8
	dotaunitorder_t.DOTA_UNIT_ORDER_CAST_TOGGLE = 9
	dotaunitorder_t.DOTA_UNIT_ORDER_HOLD_POSITION = 10
	dotaunitorder_t.DOTA_UNIT_ORDER_TRAIN_ABILITY = 11
	dotaunitorder_t.DOTA_UNIT_ORDER_DROP_ITEM = 12
	dotaunitorder_t.DOTA_UNIT_ORDER_GIVE_ITEM = 13
	dotaunitorder_t.DOTA_UNIT_ORDER_PICKUP_ITEM = 14
	dotaunitorder_t.DOTA_UNIT_ORDER_PICKUP_RUNE = 15
	dotaunitorder_t.DOTA_UNIT_ORDER_PURCHASE_ITEM = 16
	dotaunitorder_t.DOTA_UNIT_ORDER_SELL_ITEM = 17
	dotaunitorder_t.DOTA_UNIT_ORDER_DISASSEMBLE_ITEM = 18
	dotaunitorder_t.DOTA_UNIT_ORDER_MOVE_ITEM = 19
	dotaunitorder_t.DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO = 20
	dotaunitorder_t.DOTA_UNIT_ORDER_STOP = 21
	dotaunitorder_t.DOTA_UNIT_ORDER_TAUNT = 22
	dotaunitorder_t.DOTA_UNIT_ORDER_BUYBACK = 23
	dotaunitorder_t.DOTA_UNIT_ORDER_GLYPH = 24
	dotaunitorder_t.DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH = 25
	dotaunitorder_t.DOTA_UNIT_ORDER_CAST_RUNE = 26
	dotaunitorder_t.DOTA_UNIT_ORDER_PING_ABILITY = 27
	dotaunitorder_t.DOTA_UNIT_ORDER_MOVE_TO_DIRECTION = 28
	dotaunitorder_t.DOTA_UNIT_ORDER_PATROL = 29
	dotaunitorder_t.DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION = 30
	dotaunitorder_t.DOTA_UNIT_ORDER_RADAR = 31
	dotaunitorder_t.DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK = 32
	dotaunitorder_t.DOTA_UNIT_ORDER_CONTINUE = 33
	dotaunitorder_t.DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED = 34
	dotaunitorder_t.DOTA_UNIT_ORDER_CAST_RIVER_PAINT = 35
	dotaunitorder_t.DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT = 36
	dotaunitorder_t.DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN = 37
	dotaunitorder_t.DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH = 38

Enumeration 'DOTA_OVERHEAD_ALERT'
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_GOLD = 0
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_DENY = 1
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_CRITICAL = 2
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_XP = 3
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_BONUS_SPELL_DAMAGE = 4
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_MISS = 5
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_DAMAGE = 6
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_EVADE = 7
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_BLOCK = 8
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_BONUS_POISON_DAMAGE = 9
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_HEAL = 10
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_MANA_ADD = 11
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_MANA_LOSS = 12
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_LAST_HIT_EARLY = 13
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_LAST_HIT_CLOSE = 14
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_LAST_HIT_MISS = 15
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_MAGICAL_BLOCK = 16
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_INCOMING_DAMAGE = 17
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_OUTGOING_DAMAGE = 18
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_DISABLE_RESIST = 19
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_DEATH = 20
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_BLOCKED = 21
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_ITEM_RECEIVED = 22
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_SHARD = 23
	DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_DEADLY_BLOW = 24

Enumeration 'DOTA_HeroPickState'
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_NONE = 0
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_AP_SELECT = 1
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_SD_SELECT = 2
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED = 3
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_RD_SELECT_UNUSED = 4
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_INTRO = 5
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_CAPTAINPICK = 6
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN1 = 7
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN2 = 8
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN3 = 9
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN4 = 10
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN5 = 11
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN6 = 12
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN7 = 13
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN8 = 14
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN9 = 15
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN10 = 16
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN11 = 17
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN12 = 18
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN13 = 19
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_BAN14 = 20
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_SELECT1 = 21
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_SELECT2 = 22
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_SELECT3 = 23
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_SELECT4 = 24
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_SELECT5 = 25
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_SELECT6 = 26
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_SELECT7 = 27
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_SELECT8 = 28
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_SELECT9 = 29
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_SELECT10 = 30
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CM_PICK = 31
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_AR_SELECT = 32
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_MO_SELECT = 33
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_FH_SELECT = 34
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_INTRO = 35
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_CAPTAINPICK = 36
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_BAN1 = 37
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_BAN2 = 38
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_BAN3 = 39
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_BAN4 = 40
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_BAN5 = 41
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_BAN6 = 42
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_SELECT1 = 43
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_SELECT2 = 44
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_SELECT3 = 45
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_SELECT4 = 46
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_SELECT5 = 47
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_SELECT6 = 48
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_SELECT7 = 49
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_SELECT8 = 50
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_SELECT9 = 51
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_SELECT10 = 52
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CD_PICK = 53
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_BD_SELECT = 54
	DOTA_HeroPickState.DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT = 55
	DOTA_HeroPickState.DOTA_HERO_PICK_STATE_ARDM_SELECT = 56
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT = 57
	DOTA_HeroPickState.DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT = 58
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_SELECT_PENALTY = 59
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES = 60
	DOTA_HeroPickState.DOTA_HEROPICK_STATE_COUNT = 61

Enumeration 'DOTATeam_t'
	DOTATeam_t.DOTA_TEAM_FIRST = 2
	DOTATeam_t.DOTA_TEAM_GOODGUYS = 2
	DOTATeam_t.DOTA_TEAM_BADGUYS = 3
	DOTATeam_t.DOTA_TEAM_NEUTRALS = 4
	DOTATeam_t.DOTA_TEAM_NOTEAM = 5
	DOTATeam_t.DOTA_TEAM_CUSTOM_1 = 6
	DOTATeam_t.DOTA_TEAM_CUSTOM_2 = 7
	DOTATeam_t.DOTA_TEAM_CUSTOM_3 = 8
	DOTATeam_t.DOTA_TEAM_CUSTOM_4 = 9
	DOTATeam_t.DOTA_TEAM_CUSTOM_5 = 10
	DOTATeam_t.DOTA_TEAM_CUSTOM_6 = 11
	DOTATeam_t.DOTA_TEAM_CUSTOM_7 = 12
	DOTATeam_t.DOTA_TEAM_CUSTOM_8 = 13
	DOTATeam_t.DOTA_TEAM_COUNT = 14
	DOTATeam_t.DOTA_TEAM_CUSTOM_MIN = 6
	DOTATeam_t.DOTA_TEAM_CUSTOM_MAX = 13
	DOTATeam_t.DOTA_TEAM_CUSTOM_COUNT = 8

Enumeration 'DOTA_RUNES'
	DOTA_RUNES.DOTA_RUNE_INVALID = -1
	DOTA_RUNES.DOTA_RUNE_DOUBLEDAMAGE = 0
	DOTA_RUNES.DOTA_RUNE_HASTE = 1
	DOTA_RUNES.DOTA_RUNE_ILLUSION = 2
	DOTA_RUNES.DOTA_RUNE_INVISIBILITY = 3
	DOTA_RUNES.DOTA_RUNE_REGENERATION = 4
	DOTA_RUNES.DOTA_RUNE_BOUNTY = 5
	DOTA_RUNES.DOTA_RUNE_ARCANE = 6
	DOTA_RUNES.DOTA_RUNE_WATER = 7
	DOTA_RUNES.DOTA_RUNE_COUNT = 8

Enumeration 'DOTA_UNIT_TARGET_TEAM'
	DOTA_UNIT_TARGET_TEAM.DOTA_UNIT_TARGET_TEAM_NONE = 0
	DOTA_UNIT_TARGET_TEAM.DOTA_UNIT_TARGET_TEAM_FRIENDLY = 1
	DOTA_UNIT_TARGET_TEAM.DOTA_UNIT_TARGET_TEAM_ENEMY = 2
	DOTA_UNIT_TARGET_TEAM.DOTA_UNIT_TARGET_TEAM_CUSTOM = 4
	DOTA_UNIT_TARGET_TEAM.DOTA_UNIT_TARGET_TEAM_BOTH = 3

Enumeration 'DOTA_UNIT_TARGET_TYPE'
	DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_NONE = 0
	DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_HERO = 1
	DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_CREEP = 2
	DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_BUILDING = 4
	DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_COURIER = 16
	DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_OTHER = 32
	DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_TREE = 64
	DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_CUSTOM = 128
	DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_BASIC = 18
	DOTA_UNIT_TARGET_TYPE.DOTA_UNIT_TARGET_ALL = 55

Enumeration 'DOTA_UNIT_TARGET_FLAGS'
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_NONE = 0
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_RANGED_ONLY = 2
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_MELEE_ONLY = 4
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_DEAD = 8
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES = 16
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES = 32
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_INVULNERABLE = 64
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE = 128
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_NO_INVIS = 256
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS = 512
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED = 1024
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED = 2048
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED = 4096
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS = 8192
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE = 16384
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_MANA_ONLY = 32768
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP = 65536
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO = 131072
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD = 262144
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED = 524288
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES = 1048576
	DOTA_UNIT_TARGET_FLAGS.DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS = 2097152

Enumeration 'DOTALimits_t'
	DOTALimits_t.DOTA_MAX_PLAYERS = 64 (Max number of players connected to the server including spectators.)
	DOTALimits_t.DOTA_MAX_TEAM = 24 (Max number of players per team.)
	DOTALimits_t.DOTA_MAX_PLAYER_TEAMS = 10 (Max number of player teams supported.)
	DOTALimits_t.DOTA_MAX_TEAM_PLAYERS = 24 (Max number of non-spectator players supported.)
	DOTALimits_t.DOTA_MAX_SPECTATOR_TEAM_SIZE = 40 (How many spectators can watch.)
	DOTALimits_t.DOTA_MAX_SPECTATOR_LOBBY_SIZE = 15 (Max number of viewers in a spectator lobby.)
	DOTALimits_t.DOTA_DEFAULT_MAX_TEAM = 5 (Default number of players per team.)
	DOTALimits_t.DOTA_DEFAULT_MAX_TEAM_PLAYERS = 10 (Default number of non-spectator players supported.)

Enumeration 'DOTAInventoryFlags_t'
	DOTAInventoryFlags_t.DOTA_INVENTORY_ALLOW_NONE = 0
	DOTAInventoryFlags_t.DOTA_INVENTORY_ALLOW_MAIN = 1
	DOTAInventoryFlags_t.DOTA_INVENTORY_ALLOW_STASH = 2
	DOTAInventoryFlags_t.DOTA_INVENTORY_ALLOW_DROP_ON_GROUND = 4
	DOTAInventoryFlags_t.DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN = 8
	DOTAInventoryFlags_t.DOTA_INVENTORY_LIMIT_DROP_ON_GROUND = 16
	DOTAInventoryFlags_t.DOTA_INVENTORY_ALL_ACCESS = 3

Enumeration 'EDOTA_ModifyGold_Reason'
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_Unspecified = 0
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_Death = 1
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_Buyback = 2
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_PurchaseConsumable = 3
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_PurchaseItem = 4
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_AbandonedRedistribute = 5
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_SellItem = 6
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_AbilityCost = 7
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_CheatCommand = 8
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_SelectionPenalty = 9
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_GameTick = 10
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_Building = 11
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_HeroKill = 12
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_CreepKill = 13
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_NeutralKill = 14
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_RoshanKill = 15
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_CourierKill = 16
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_BountyRune = 17
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_SharedGold = 18
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_AbilityGold = 19
	EDOTA_ModifyGold_Reason.DOTA_ModifyGold_WardKill = 20

Enumeration 'DOTAUnitAttackCapability_t'
	DOTAUnitAttackCapability_t.DOTA_UNIT_CAP_NO_ATTACK = 0
	DOTAUnitAttackCapability_t.DOTA_UNIT_CAP_MELEE_ATTACK = 1
	DOTAUnitAttackCapability_t.DOTA_UNIT_CAP_RANGED_ATTACK = 2
	DOTAUnitAttackCapability_t.DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL = 4
	DOTAUnitAttackCapability_t.DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT = 3

Enumeration 'DOTAUnitMoveCapability_t'
	DOTAUnitMoveCapability_t.DOTA_UNIT_CAP_MOVE_NONE = 0
	DOTAUnitMoveCapability_t.DOTA_UNIT_CAP_MOVE_GROUND = 1
	DOTAUnitMoveCapability_t.DOTA_UNIT_CAP_MOVE_FLY = 2

Enumeration 'EShareAbility'
	EShareAbility.ITEM_FULLY_SHAREABLE = 0
	EShareAbility.ITEM_PARTIALLY_SHAREABLE = 1
	EShareAbility.ITEM_NOT_SHAREABLE = 2

Enumeration 'DOTAMusicStatus_t'
	DOTAMusicStatus_t.DOTA_MUSIC_STATUS_NONE = 0
	DOTAMusicStatus_t.DOTA_MUSIC_STATUS_EXPLORATION = 1
	DOTAMusicStatus_t.DOTA_MUSIC_STATUS_BATTLE = 2
	DOTAMusicStatus_t.DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION = 3
	DOTAMusicStatus_t.DOTA_MUSIC_STATUS_DEAD = 4
	DOTAMusicStatus_t.DOTA_MUSIC_STATUS_LAST = 5

Enumeration 'DOTA_ABILITY_BEHAVIOR'
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_NONE = 0
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_HIDDEN = 1
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_PASSIVE = 2
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_NO_TARGET = 4
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_UNIT_TARGET = 8
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_POINT = 16
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_AOE = 32
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE = 64
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_CHANNELLED = 128
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_ITEM = 256
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_TOGGLE = 512
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_DIRECTIONAL = 1024
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_IMMEDIATE = 2048
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_AUTOCAST = 4096
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET = 8192
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT = 16384
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET = 32768
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_AURA = 65536
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_ATTACK = 131072
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT = 262144
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES = 524288
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_UNRESTRICTED = 1048576
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE = 2097152
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL = 4194304
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT = 8388608
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET = 16777216
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK = 33554432
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN = 67108864
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING = 134217728
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_RUNE_TARGET = 268435456
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL = 536870912
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING = 1073741824
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT = 2147483648
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST = 4294967296
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES = 8589934592
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX = 17179869184
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE = 34359738368
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING = 68719476736
	DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE = 137438953472

Enumeration 'DAMAGE_TYPES'
	DAMAGE_TYPES.DAMAGE_TYPE_NONE = 0
	DAMAGE_TYPES.DAMAGE_TYPE_PHYSICAL = 1
	DAMAGE_TYPES.DAMAGE_TYPE_MAGICAL = 2
	DAMAGE_TYPES.DAMAGE_TYPE_PURE = 4
	DAMAGE_TYPES.DAMAGE_TYPE_HP_REMOVAL = 8
	DAMAGE_TYPES.DAMAGE_TYPE_ALL = 7

Enumeration 'ABILITY_TYPES'
	ABILITY_TYPES.ABILITY_TYPE_BASIC = 0
	ABILITY_TYPES.ABILITY_TYPE_ULTIMATE = 1
	ABILITY_TYPES.ABILITY_TYPE_ATTRIBUTES = 2
	ABILITY_TYPES.ABILITY_TYPE_HIDDEN = 3

Enumeration 'SPELL_IMMUNITY_TYPES'
	SPELL_IMMUNITY_TYPES.SPELL_IMMUNITY_NONE = 0
	SPELL_IMMUNITY_TYPES.SPELL_IMMUNITY_ALLIES_YES = 1
	SPELL_IMMUNITY_TYPES.SPELL_IMMUNITY_ALLIES_NO = 2
	SPELL_IMMUNITY_TYPES.SPELL_IMMUNITY_ENEMIES_YES = 3
	SPELL_IMMUNITY_TYPES.SPELL_IMMUNITY_ENEMIES_NO = 4
	SPELL_IMMUNITY_TYPES.SPELL_IMMUNITY_ALLIES_YES_ENEMIES_NO = 5

Enumeration 'DOTADamageFlag_t'
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_NONE = 0
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR = 1
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR = 2
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY = 4
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_BYPASSES_BLOCK = 8
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_REFLECTION = 16
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_HPLOSS = 32
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT = 64
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_NON_LETHAL = 128
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY = 256
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS = 512
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION = 1024
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN = 2048
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL = 4096
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_PROPERTY_FIRE = 8192
	DOTADamageFlag_t.DOTA_DAMAGE_FLAG_IGNORES_BASE_PHYSICAL_ARMOR = 16384

Enumeration 'EDOTA_ModifyXP_Reason'
	EDOTA_ModifyXP_Reason.DOTA_ModifyXP_Unspecified = 0
	EDOTA_ModifyXP_Reason.DOTA_ModifyXP_HeroKill = 1
	EDOTA_ModifyXP_Reason.DOTA_ModifyXP_CreepKill = 2
	EDOTA_ModifyXP_Reason.DOTA_ModifyXP_RoshanKill = 3
	EDOTA_ModifyXP_Reason.DOTA_ModifyXP_TomeOfKnowledge = 4
	EDOTA_ModifyXP_Reason.DOTA_ModifyXP_Outpost = 5
	EDOTA_ModifyXP_Reason.DOTA_ModifyXP_MAX = 6

Enumeration 'GameActivity_t'
	GameActivity_t.ACT_DOTA_IDLE = 1500
	GameActivity_t.ACT_DOTA_IDLE_RARE = 1501
	GameActivity_t.ACT_DOTA_RUN = 1502
	GameActivity_t.ACT_DOTA_ATTACK = 1503
	GameActivity_t.ACT_DOTA_ATTACK2 = 1504
	GameActivity_t.ACT_DOTA_ATTACK_EVENT = 1505
	GameActivity_t.ACT_DOTA_DIE = 1506
	GameActivity_t.ACT_DOTA_FLINCH = 1507
	GameActivity_t.ACT_DOTA_FLAIL = 1508
	GameActivity_t.ACT_DOTA_DISABLED = 1509
	GameActivity_t.ACT_DOTA_CAST_ABILITY_1 = 1510
	GameActivity_t.ACT_DOTA_CAST_ABILITY_2 = 1511
	GameActivity_t.ACT_DOTA_CAST_ABILITY_3 = 1512
	GameActivity_t.ACT_DOTA_CAST_ABILITY_4 = 1513
	GameActivity_t.ACT_DOTA_CAST_ABILITY_5 = 1514
	GameActivity_t.ACT_DOTA_CAST_ABILITY_6 = 1515
	GameActivity_t.ACT_DOTA_OVERRIDE_ABILITY_1 = 1516
	GameActivity_t.ACT_DOTA_OVERRIDE_ABILITY_2 = 1517
	GameActivity_t.ACT_DOTA_OVERRIDE_ABILITY_3 = 1518
	GameActivity_t.ACT_DOTA_OVERRIDE_ABILITY_4 = 1519
	GameActivity_t.ACT_DOTA_CHANNEL_ABILITY_1 = 1520
	GameActivity_t.ACT_DOTA_CHANNEL_ABILITY_2 = 1521
	GameActivity_t.ACT_DOTA_CHANNEL_ABILITY_3 = 1522
	GameActivity_t.ACT_DOTA_CHANNEL_ABILITY_4 = 1523
	GameActivity_t.ACT_DOTA_CHANNEL_ABILITY_5 = 1524
	GameActivity_t.ACT_DOTA_CHANNEL_ABILITY_6 = 1525
	GameActivity_t.ACT_DOTA_CHANNEL_END_ABILITY_1 = 1526
	GameActivity_t.ACT_DOTA_CHANNEL_END_ABILITY_2 = 1527
	GameActivity_t.ACT_DOTA_CHANNEL_END_ABILITY_3 = 1528
	GameActivity_t.ACT_DOTA_CHANNEL_END_ABILITY_4 = 1529
	GameActivity_t.ACT_DOTA_CHANNEL_END_ABILITY_5 = 1530
	GameActivity_t.ACT_DOTA_CHANNEL_END_ABILITY_6 = 1531
	GameActivity_t.ACT_DOTA_CONSTANT_LAYER = 1532
	GameActivity_t.ACT_DOTA_CAPTURE = 1533
	GameActivity_t.ACT_DOTA_SPAWN = 1534
	GameActivity_t.ACT_DOTA_KILLTAUNT = 1535
	GameActivity_t.ACT_DOTA_TAUNT = 1536
	GameActivity_t.ACT_DOTA_THIRST = 1537
	GameActivity_t.ACT_DOTA_CAST_DRAGONBREATH = 1538
	GameActivity_t.ACT_DOTA_ECHO_SLAM = 1539
	GameActivity_t.ACT_DOTA_CAST_ABILITY_1_END = 1540
	GameActivity_t.ACT_DOTA_CAST_ABILITY_2_END = 1541
	GameActivity_t.ACT_DOTA_CAST_ABILITY_3_END = 1542
	GameActivity_t.ACT_DOTA_CAST_ABILITY_4_END = 1543
	GameActivity_t.ACT_MIRANA_LEAP_END = 1544
	GameActivity_t.ACT_WAVEFORM_START = 1545
	GameActivity_t.ACT_WAVEFORM_END = 1546
	GameActivity_t.ACT_DOTA_CAST_ABILITY_ROT = 1547
	GameActivity_t.ACT_DOTA_DIE_SPECIAL = 1548
	GameActivity_t.ACT_DOTA_RATTLETRAP_BATTERYASSAULT = 1549
	GameActivity_t.ACT_DOTA_RATTLETRAP_POWERCOGS = 1550
	GameActivity_t.ACT_DOTA_RATTLETRAP_HOOKSHOT_START = 1551
	GameActivity_t.ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP = 1552
	GameActivity_t.ACT_DOTA_RATTLETRAP_HOOKSHOT_END = 1553
	GameActivity_t.ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE = 1554
	GameActivity_t.ACT_DOTA_TINKER_REARM1 = 1555
	GameActivity_t.ACT_DOTA_TINKER_REARM2 = 1556
	GameActivity_t.ACT_DOTA_TINKER_REARM3 = 1557
	GameActivity_t.ACT_TINY_AVALANCHE = 1558
	GameActivity_t.ACT_TINY_TOSS = 1559
	GameActivity_t.ACT_TINY_GROWL = 1560
	GameActivity_t.ACT_DOTA_WEAVERBUG_ATTACH = 1561
	GameActivity_t.ACT_DOTA_CAST_WILD_AXES_END = 1562
	GameActivity_t.ACT_DOTA_CAST_LIFE_BREAK_START = 1563
	GameActivity_t.ACT_DOTA_CAST_LIFE_BREAK_END = 1564
	GameActivity_t.ACT_DOTA_NIGHTSTALKER_TRANSITION = 1565
	GameActivity_t.ACT_DOTA_LIFESTEALER_RAGE = 1566
	GameActivity_t.ACT_DOTA_LIFESTEALER_OPEN_WOUNDS = 1567
	GameActivity_t.ACT_DOTA_SAND_KING_BURROW_IN = 1568
	GameActivity_t.ACT_DOTA_SAND_KING_BURROW_OUT = 1569
	GameActivity_t.ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK = 1570
	GameActivity_t.ACT_DOTA_WHEEL_LAYER = 1571
	GameActivity_t.ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START = 1572
	GameActivity_t.ACT_DOTA_ALCHEMIST_CONCOCTION = 1573
	GameActivity_t.ACT_DOTA_JAKIRO_LIQUIDFIRE_START = 1574
	GameActivity_t.ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP = 1575
	GameActivity_t.ACT_DOTA_LIFESTEALER_INFEST = 1576
	GameActivity_t.ACT_DOTA_LIFESTEALER_INFEST_END = 1577
	GameActivity_t.ACT_DOTA_LASSO_LOOP = 1578
	GameActivity_t.ACT_DOTA_ALCHEMIST_CONCOCTION_THROW = 1579
	GameActivity_t.ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END = 1580
	GameActivity_t.ACT_DOTA_CAST_COLD_SNAP = 1581
	GameActivity_t.ACT_DOTA_CAST_GHOST_WALK = 1582
	GameActivity_t.ACT_DOTA_CAST_TORNADO = 1583
	GameActivity_t.ACT_DOTA_CAST_EMP = 1584
	GameActivity_t.ACT_DOTA_CAST_ALACRITY = 1585
	GameActivity_t.ACT_DOTA_CAST_CHAOS_METEOR = 1586
	GameActivity_t.ACT_DOTA_CAST_SUN_STRIKE = 1587
	GameActivity_t.ACT_DOTA_CAST_FORGE_SPIRIT = 1588
	GameActivity_t.ACT_DOTA_CAST_ICE_WALL = 1589
	GameActivity_t.ACT_DOTA_CAST_DEAFENING_BLAST = 1590
	GameActivity_t.ACT_DOTA_VICTORY = 1591
	GameActivity_t.ACT_DOTA_DEFEAT = 1592
	GameActivity_t.ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE = 1593
	GameActivity_t.ACT_DOTA_SPIRIT_BREAKER_CHARGE_END = 1594
	GameActivity_t.ACT_DOTA_TELEPORT = 1595
	GameActivity_t.ACT_DOTA_TELEPORT_END = 1596
	GameActivity_t.ACT_DOTA_CAST_REFRACTION = 1597
	GameActivity_t.ACT_DOTA_CAST_ABILITY_7 = 1598
	GameActivity_t.ACT_DOTA_CANCEL_SIREN_SONG = 1599
	GameActivity_t.ACT_DOTA_CHANNEL_ABILITY_7 = 1600
	GameActivity_t.ACT_DOTA_LOADOUT = 1601
	GameActivity_t.ACT_DOTA_FORCESTAFF_END = 1602
	GameActivity_t.ACT_DOTA_POOF_END = 1603
	GameActivity_t.ACT_DOTA_SLARK_POUNCE = 1604
	GameActivity_t.ACT_DOTA_MAGNUS_SKEWER_START = 1605
	GameActivity_t.ACT_DOTA_MAGNUS_SKEWER_END = 1606
	GameActivity_t.ACT_DOTA_MEDUSA_STONE_GAZE = 1607
	GameActivity_t.ACT_DOTA_RELAX_START = 1608
	GameActivity_t.ACT_DOTA_RELAX_LOOP = 1609
	GameActivity_t.ACT_DOTA_RELAX_END = 1610
	GameActivity_t.ACT_DOTA_CENTAUR_STAMPEDE = 1611
	GameActivity_t.ACT_DOTA_BELLYACHE_START = 1612
	GameActivity_t.ACT_DOTA_BELLYACHE_LOOP = 1613
	GameActivity_t.ACT_DOTA_BELLYACHE_END = 1614
	GameActivity_t.ACT_DOTA_ROQUELAIRE_LAND = 1615
	GameActivity_t.ACT_DOTA_ROQUELAIRE_LAND_IDLE = 1616
	GameActivity_t.ACT_DOTA_GREEVIL_CAST = 1617
	GameActivity_t.ACT_DOTA_GREEVIL_OVERRIDE_ABILITY = 1618
	GameActivity_t.ACT_DOTA_GREEVIL_HOOK_START = 1619
	GameActivity_t.ACT_DOTA_GREEVIL_HOOK_END = 1620
	GameActivity_t.ACT_DOTA_GREEVIL_BLINK_BONE = 1621
	GameActivity_t.ACT_DOTA_IDLE_SLEEPING = 1622
	GameActivity_t.ACT_DOTA_INTRO = 1623
	GameActivity_t.ACT_DOTA_GESTURE_POINT = 1624
	GameActivity_t.ACT_DOTA_GESTURE_ACCENT = 1625
	GameActivity_t.ACT_DOTA_SLEEPING_END = 1626
	GameActivity_t.ACT_DOTA_AMBUSH = 1627
	GameActivity_t.ACT_DOTA_ITEM_LOOK = 1628
	GameActivity_t.ACT_DOTA_STARTLE = 1629
	GameActivity_t.ACT_DOTA_FRUSTRATION = 1630
	GameActivity_t.ACT_DOTA_TELEPORT_REACT = 1631
	GameActivity_t.ACT_DOTA_TELEPORT_END_REACT = 1632
	GameActivity_t.ACT_DOTA_SHRUG = 1633
	GameActivity_t.ACT_DOTA_RELAX_LOOP_END = 1634
	GameActivity_t.ACT_DOTA_PRESENT_ITEM = 1635
	GameActivity_t.ACT_DOTA_IDLE_IMPATIENT = 1636
	GameActivity_t.ACT_DOTA_SHARPEN_WEAPON = 1637
	GameActivity_t.ACT_DOTA_SHARPEN_WEAPON_OUT = 1638
	GameActivity_t.ACT_DOTA_IDLE_SLEEPING_END = 1639
	GameActivity_t.ACT_DOTA_BRIDGE_DESTROY = 1640
	GameActivity_t.ACT_DOTA_TAUNT_SNIPER = 1641
	GameActivity_t.ACT_DOTA_DEATH_BY_SNIPER = 1642
	GameActivity_t.ACT_DOTA_LOOK_AROUND = 1643
	GameActivity_t.ACT_DOTA_CAGED_CREEP_RAGE = 1644
	GameActivity_t.ACT_DOTA_CAGED_CREEP_RAGE_OUT = 1645
	GameActivity_t.ACT_DOTA_CAGED_CREEP_SMASH = 1646
	GameActivity_t.ACT_DOTA_CAGED_CREEP_SMASH_OUT = 1647
	GameActivity_t.ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP = 1648
	GameActivity_t.ACT_DOTA_INTRO_LOOP = 1649
	GameActivity_t.ACT_DOTA_BRIDGE_THREAT = 1650
	GameActivity_t.ACT_DOTA_DAGON = 1651
	GameActivity_t.ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START = 1652
	GameActivity_t.ACT_DOTA_CAST_ABILITY_2_ES_ROLL = 1653
	GameActivity_t.ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END = 1654
	GameActivity_t.ACT_DOTA_NIAN_PIN_START = 1655
	GameActivity_t.ACT_DOTA_NIAN_PIN_LOOP = 1656
	GameActivity_t.ACT_DOTA_NIAN_PIN_END = 1657
	GameActivity_t.ACT_DOTA_LEAP_STUN = 1658
	GameActivity_t.ACT_DOTA_LEAP_SWIPE = 1659
	GameActivity_t.ACT_DOTA_NIAN_INTRO_LEAP = 1660
	GameActivity_t.ACT_DOTA_AREA_DENY = 1661
	GameActivity_t.ACT_DOTA_NIAN_PIN_TO_STUN = 1662
	GameActivity_t.ACT_DOTA_RAZE_1 = 1663
	GameActivity_t.ACT_DOTA_RAZE_2 = 1664
	GameActivity_t.ACT_DOTA_RAZE_3 = 1665
	GameActivity_t.ACT_DOTA_UNDYING_DECAY = 1666
	GameActivity_t.ACT_DOTA_UNDYING_SOUL_RIP = 1667
	GameActivity_t.ACT_DOTA_UNDYING_TOMBSTONE = 1668
	GameActivity_t.ACT_DOTA_WHIRLING_AXES_RANGED = 1669
	GameActivity_t.ACT_DOTA_SHALLOW_GRAVE = 1670
	GameActivity_t.ACT_DOTA_COLD_FEET = 1671
	GameActivity_t.ACT_DOTA_ICE_VORTEX = 1672
	GameActivity_t.ACT_DOTA_CHILLING_TOUCH = 1673
	GameActivity_t.ACT_DOTA_ENFEEBLE = 1674
	GameActivity_t.ACT_DOTA_FATAL_BONDS = 1675
	GameActivity_t.ACT_DOTA_MIDNIGHT_PULSE = 1676
	GameActivity_t.ACT_DOTA_ANCESTRAL_SPIRIT = 1677
	GameActivity_t.ACT_DOTA_THUNDER_STRIKE = 1678
	GameActivity_t.ACT_DOTA_KINETIC_FIELD = 1679
	GameActivity_t.ACT_DOTA_STATIC_STORM = 1680
	GameActivity_t.ACT_DOTA_MINI_TAUNT = 1681
	GameActivity_t.ACT_DOTA_ARCTIC_BURN_END = 1682
	GameActivity_t.ACT_DOTA_LOADOUT_RARE = 1683
	GameActivity_t.ACT_DOTA_SWIM = 1684
	GameActivity_t.ACT_DOTA_FLEE = 1685
	GameActivity_t.ACT_DOTA_TROT = 1686
	GameActivity_t.ACT_DOTA_SHAKE = 1687
	GameActivity_t.ACT_DOTA_SWIM_IDLE = 1688
	GameActivity_t.ACT_DOTA_WAIT_IDLE = 1689
	GameActivity_t.ACT_DOTA_GREET = 1690
	GameActivity_t.ACT_DOTA_TELEPORT_COOP_START = 1691
	GameActivity_t.ACT_DOTA_TELEPORT_COOP_WAIT = 1692
	GameActivity_t.ACT_DOTA_TELEPORT_COOP_END = 1693
	GameActivity_t.ACT_DOTA_TELEPORT_COOP_EXIT = 1694
	GameActivity_t.ACT_DOTA_SHOPKEEPER_PET_INTERACT = 1695
	GameActivity_t.ACT_DOTA_ITEM_PICKUP = 1696
	GameActivity_t.ACT_DOTA_ITEM_DROP = 1697
	GameActivity_t.ACT_DOTA_CAPTURE_PET = 1698
	GameActivity_t.ACT_DOTA_PET_WARD_OBSERVER = 1699
	GameActivity_t.ACT_DOTA_PET_WARD_SENTRY = 1700
	GameActivity_t.ACT_DOTA_PET_LEVEL = 1701
	GameActivity_t.ACT_DOTA_CAST_BURROW_END = 1702
	GameActivity_t.ACT_DOTA_LIFESTEALER_ASSIMILATE = 1703
	GameActivity_t.ACT_DOTA_LIFESTEALER_EJECT = 1704
	GameActivity_t.ACT_DOTA_ATTACK_EVENT_BASH = 1705
	GameActivity_t.ACT_DOTA_CAPTURE_RARE = 1706
	GameActivity_t.ACT_DOTA_AW_MAGNETIC_FIELD = 1707
	GameActivity_t.ACT_DOTA_CAST_GHOST_SHIP = 1708
	GameActivity_t.ACT_DOTA_FXANIM = 1709
	GameActivity_t.ACT_DOTA_VICTORY_START = 1710
	GameActivity_t.ACT_DOTA_DEFEAT_START = 1711
	GameActivity_t.ACT_DOTA_DP_SPIRIT_SIPHON = 1712
	GameActivity_t.ACT_DOTA_TRICKS_END = 1713
	GameActivity_t.ACT_DOTA_ES_STONE_CALLER = 1714
	GameActivity_t.ACT_DOTA_MK_STRIKE = 1715
	GameActivity_t.ACT_DOTA_VERSUS = 1716
	GameActivity_t.ACT_DOTA_CAPTURE_CARD = 1717
	GameActivity_t.ACT_DOTA_MK_SPRING_SOAR = 1718
	GameActivity_t.ACT_DOTA_MK_SPRING_END = 1719
	GameActivity_t.ACT_DOTA_MK_TREE_SOAR = 1720
	GameActivity_t.ACT_DOTA_MK_TREE_END = 1721
	GameActivity_t.ACT_DOTA_MK_FUR_ARMY = 1722
	GameActivity_t.ACT_DOTA_MK_SPRING_CAST = 1723
	GameActivity_t.ACT_DOTA_NECRO_GHOST_SHROUD = 1724
	GameActivity_t.ACT_DOTA_OVERRIDE_ARCANA = 1725
	GameActivity_t.ACT_DOTA_SLIDE = 1726
	GameActivity_t.ACT_DOTA_SLIDE_LOOP = 1727
	GameActivity_t.ACT_DOTA_GENERIC_CHANNEL_1 = 1728
	GameActivity_t.ACT_DOTA_GS_SOUL_CHAIN = 1729
	GameActivity_t.ACT_DOTA_GS_INK_CREATURE = 1730
	GameActivity_t.ACT_DOTA_TRANSITION = 1731
	GameActivity_t.ACT_DOTA_BLINK_DAGGER = 1732
	GameActivity_t.ACT_DOTA_BLINK_DAGGER_END = 1733
	GameActivity_t.ACT_DOTA_CUSTOM_TOWER_ATTACK = 1734
	GameActivity_t.ACT_DOTA_CUSTOM_TOWER_IDLE = 1735
	GameActivity_t.ACT_DOTA_CUSTOM_TOWER_DIE = 1736
	GameActivity_t.ACT_DOTA_CAST_COLD_SNAP_ORB = 1737
	GameActivity_t.ACT_DOTA_CAST_GHOST_WALK_ORB = 1738
	GameActivity_t.ACT_DOTA_CAST_TORNADO_ORB = 1739
	GameActivity_t.ACT_DOTA_CAST_EMP_ORB = 1740
	GameActivity_t.ACT_DOTA_CAST_ALACRITY_ORB = 1741
	GameActivity_t.ACT_DOTA_CAST_CHAOS_METEOR_ORB = 1742
	GameActivity_t.ACT_DOTA_CAST_SUN_STRIKE_ORB = 1743
	GameActivity_t.ACT_DOTA_CAST_FORGE_SPIRIT_ORB = 1744
	GameActivity_t.ACT_DOTA_CAST_ICE_WALL_ORB = 1745
	GameActivity_t.ACT_DOTA_CAST_DEAFENING_BLAST_ORB = 1746
	GameActivity_t.ACT_DOTA_NOTICE = 1747
	GameActivity_t.ACT_DOTA_CAST_ABILITY_2_ALLY = 1748
	GameActivity_t.ACT_DOTA_SHUFFLE_L = 1749
	GameActivity_t.ACT_DOTA_SHUFFLE_R = 1750
	GameActivity_t.ACT_DOTA_OVERRIDE_LOADOUT = 1751
	GameActivity_t.ACT_DOTA_TAUNT_SPECIAL = 1752
	GameActivity_t.ACT_DOTA_TELEPORT_START = 1753
	GameActivity_t.ACT_DOTA_GENERIC_CHANNEL_1_START = 1754
	GameActivity_t.ACT_DOTA_CUSTOM_TOWER_IDLE_RARE = 1755
	GameActivity_t.ACT_DOTA_CUSTOM_TOWER_TAUNT = 1756
	GameActivity_t.ACT_DOTA_CUSTOM_TOWER_HIGH_FIVE = 1757

Enumeration 'DOTAMinimapEvent_t'
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK = 2
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK = 4
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_BASE_GLYPHED = 8
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK = 16
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING = 32
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_TEAMMATE_DIED = 64
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE = 128
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED = 256
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_HINT_LOCATION = 512
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING = 1024
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING = 2048
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_RADAR = 4096
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_RADAR_TARGET = 8192
	DOTAMinimapEvent_t.DOTA_MINIMAP_EVENT_MOVE_TO_TARGET = 16384

Enumeration 'DOTASlotType_t'
	DOTASlotType_t.DOTA_LOADOUT_TYPE_INVALID = -1
	DOTASlotType_t.DOTA_LOADOUT_TYPE_WEAPON = 0
	DOTASlotType_t.DOTA_LOADOUT_TYPE_OFFHAND_WEAPON = 1
	DOTASlotType_t.DOTA_LOADOUT_TYPE_WEAPON2 = 2
	DOTASlotType_t.DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2 = 3
	DOTASlotType_t.DOTA_LOADOUT_TYPE_HEAD = 4
	DOTASlotType_t.DOTA_LOADOUT_TYPE_SHOULDER = 5
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ARMS = 6
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ARMOR = 7
	DOTASlotType_t.DOTA_LOADOUT_TYPE_BELT = 8
	DOTASlotType_t.DOTA_LOADOUT_TYPE_NECK = 9
	DOTASlotType_t.DOTA_LOADOUT_TYPE_BACK = 10
	DOTASlotType_t.DOTA_LOADOUT_TYPE_GLOVES = 11
	DOTASlotType_t.DOTA_LOADOUT_TYPE_LEGS = 12
	DOTASlotType_t.DOTA_LOADOUT_TYPE_TAIL = 13
	DOTASlotType_t.DOTA_LOADOUT_TYPE_MISC = 14
	DOTASlotType_t.DOTA_LOADOUT_TYPE_COSTUME = 15
	DOTASlotType_t.DOTA_LOADOUT_TYPE_BODY_HEAD = 16
	DOTASlotType_t.DOTA_LOADOUT_TYPE_MOUNT = 17
	DOTASlotType_t.DOTA_LOADOUT_TYPE_SUMMON = 18
	DOTASlotType_t.DOTA_LOADOUT_TYPE_SHAPESHIFT = 19
	DOTASlotType_t.DOTA_LOADOUT_TYPE_TAUNT = 20
	DOTASlotType_t.DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS = 21
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY_ATTACK = 22
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY1 = 23
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY2 = 24
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY3 = 25
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY4 = 26
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE = 27
	DOTASlotType_t.DOTA_LOADOUT_TYPE_VOICE = 28
	DOTASlotType_t.DOTA_LOADOUT_TYPE_WEAPON_PERSONA_1 = 29
	DOTASlotType_t.DOTA_LOADOUT_TYPE_OFFHAND_WEAPON_PERSONA_1 = 30
	DOTASlotType_t.DOTA_LOADOUT_TYPE_WEAPON2_PERSONA_1 = 31
	DOTASlotType_t.DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2_PERSONA_1 = 32
	DOTASlotType_t.DOTA_LOADOUT_TYPE_HEAD_PERSONA_1 = 33
	DOTASlotType_t.DOTA_LOADOUT_TYPE_SHOULDER_PERSONA_1 = 34
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ARMS_PERSONA_1 = 35
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ARMOR_PERSONA_1 = 36
	DOTASlotType_t.DOTA_LOADOUT_TYPE_BELT_PERSONA_1 = 37
	DOTASlotType_t.DOTA_LOADOUT_TYPE_NECK_PERSONA_1 = 38
	DOTASlotType_t.DOTA_LOADOUT_TYPE_BACK_PERSONA_1 = 39
	DOTASlotType_t.DOTA_LOADOUT_TYPE_LEGS_PERSONA_1 = 40
	DOTASlotType_t.DOTA_LOADOUT_TYPE_GLOVES_PERSONA_1 = 41
	DOTASlotType_t.DOTA_LOADOUT_TYPE_TAIL_PERSONA_1 = 42
	DOTASlotType_t.DOTA_LOADOUT_TYPE_MISC_PERSONA_1 = 43
	DOTASlotType_t.DOTA_LOADOUT_TYPE_BODY_HEAD_PERSONA_1 = 44
	DOTASlotType_t.DOTA_LOADOUT_TYPE_MOUNT_PERSONA_1 = 45
	DOTASlotType_t.DOTA_LOADOUT_TYPE_SUMMON_PERSONA_1 = 46
	DOTASlotType_t.DOTA_LOADOUT_TYPE_SHAPESHIFT_PERSONA_1 = 47
	DOTASlotType_t.DOTA_LOADOUT_TYPE_TAUNT_PERSONA_1 = 48
	DOTASlotType_t.DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS_PERSONA_1 = 49
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY_ATTACK_PERSONA_1 = 50
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY1_PERSONA_1 = 51
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY2_PERSONA_1 = 52
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY3_PERSONA_1 = 53
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY4_PERSONA_1 = 54
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE_PERSONA_1 = 55
	DOTASlotType_t.DOTA_LOADOUT_TYPE_VOICE_PERSONA_1 = 56
	DOTASlotType_t.DOTA_LOADOUT_PERSONA_1_START = 29
	DOTASlotType_t.DOTA_LOADOUT_PERSONA_1_END = 56
	DOTASlotType_t.DOTA_LOADOUT_TYPE_PERSONA_SELECTOR = 57
	DOTASlotType_t.DOTA_LOADOUT_TYPE_COURIER = 58
	DOTASlotType_t.DOTA_LOADOUT_TYPE_ANNOUNCER = 59
	DOTASlotType_t.DOTA_LOADOUT_TYPE_MEGA_KILLS = 60
	DOTASlotType_t.DOTA_LOADOUT_TYPE_MUSIC = 61
	DOTASlotType_t.DOTA_LOADOUT_TYPE_WARD = 62
	DOTASlotType_t.DOTA_LOADOUT_TYPE_HUD_SKIN = 63
	DOTASlotType_t.DOTA_LOADOUT_TYPE_LOADING_SCREEN = 64
	DOTASlotType_t.DOTA_LOADOUT_TYPE_WEATHER = 65
	DOTASlotType_t.DOTA_LOADOUT_TYPE_HEROIC_STATUE = 66
	DOTASlotType_t.DOTA_LOADOUT_TYPE_MULTIKILL_BANNER = 67
	DOTASlotType_t.DOTA_LOADOUT_TYPE_CURSOR_PACK = 68
	DOTASlotType_t.DOTA_LOADOUT_TYPE_TELEPORT_EFFECT = 69
	DOTASlotType_t.DOTA_LOADOUT_TYPE_BLINK_EFFECT = 70
	DOTASlotType_t.DOTA_LOADOUT_TYPE_EMBLEM = 71
	DOTASlotType_t.DOTA_LOADOUT_TYPE_TERRAIN = 72
	DOTASlotType_t.DOTA_LOADOUT_TYPE_RADIANT_CREEPS = 73
	DOTASlotType_t.DOTA_LOADOUT_TYPE_DIRE_CREEPS = 74
	DOTASlotType_t.DOTA_LOADOUT_TYPE_RADIANT_TOWER = 75
	DOTASlotType_t.DOTA_LOADOUT_TYPE_DIRE_TOWER = 76
	DOTASlotType_t.DOTA_LOADOUT_TYPE_VERSUS_SCREEN = 77
	DOTASlotType_t.DOTA_LOADOUT_TYPE_STREAK_EFFECT = 78
	DOTASlotType_t.DOTA_LOADOUT_TYPE_KILL_EFFECT = 79
	DOTASlotType_t.DOTA_LOADOUT_TYPE_DEATH_EFFECT = 80
	DOTASlotType_t.DOTA_LOADOUT_TYPE_HEAD_EFFECT = 81
	DOTASlotType_t.DOTA_LOADOUT_TYPE_MAP_EFFECT = 82
	DOTASlotType_t.DOTA_LOADOUT_TYPE_COURIER_EFFECT = 83
	DOTASlotType_t.DOTA_PLAYER_LOADOUT_START = 58
	DOTASlotType_t.DOTA_PLAYER_LOADOUT_END = 83
	DOTASlotType_t.DOTA_LOADOUT_TYPE_NONE = 84
	DOTASlotType_t.DOTA_LOADOUT_TYPE_COUNT = 85

Enumeration 'modifierfunction'
	modifierfunction.MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE = 0 (GetModifierPreAttack_BonusDamage)
	modifierfunction.MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET = 1 (GetModifierPreAttack_BonusDamage_Target)
	modifierfunction.MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC = 2 (GetModifierPreAttack_BonusDamage_Proc)
	modifierfunction.MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT = 3 (GetModifierPreAttack_BonusDamagePostCrit)
	modifierfunction.MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE = 4 (GetModifierBaseAttack_BonusDamage)
	modifierfunction.MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL = 5 (GetModifierProcAttack_BonusDamage_Physical)
	modifierfunction.MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL = 6 (GetModifierProcAttack_BonusDamage_Magical)
	modifierfunction.MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE = 7 (GetModifierProcAttack_BonusDamage_Pure)
	modifierfunction.MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL_TARGET = 8 (GetModifierProcAttack_BonusDamage_Magical_Target)
	modifierfunction.MODIFIER_PROPERTY_PROCATTACK_FEEDBACK = 9 (GetModifierProcAttack_Feedback)
	modifierfunction.MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE = 10 (GetModifierOverrideAttackDamage)
	modifierfunction.MODIFIER_PROPERTY_PRE_ATTACK = 11 (GetModifierPreAttack)
	modifierfunction.MODIFIER_PROPERTY_INVISIBILITY_LEVEL = 12 (GetModifierInvisibilityLevel)
	modifierfunction.MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION = 13 (GetModifierInvisibilityAttackBehaviorException)
	modifierfunction.MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY = 14 (GetModifierPersistentInvisibility)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT = 15 (GetModifierMoveSpeedBonus_Constant)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE = 16 (GetModifierMoveSpeedOverride)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE = 17 (GetModifierMoveSpeedBonus_Percentage)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE = 18 (GetModifierMoveSpeedBonus_Percentage_Unique)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2 = 19 (GetModifierMoveSpeedBonus_Percentage_Unique_2)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE = 20 (GetModifierMoveSpeedBonus_Special_Boots)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2 = 21 (GetModifierMoveSpeedBonus_Special_Boots_2)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE = 22 (GetModifierMoveSpeedBonus_Constant_Unique)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2 = 23 (GetModifierMoveSpeedBonus_Constant_Unique_2)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE = 24 (GetModifierMoveSpeed_Absolute)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN = 25 (GetModifierMoveSpeed_AbsoluteMin)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX = 26 (GetModifierMoveSpeed_AbsoluteMax)
	modifierfunction.MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT = 27 (GetModifierIgnoreMovespeedLimit)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_LIMIT = 28 (GetModifierMoveSpeed_Limit)
	modifierfunction.MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE = 29 (GetModifierAttackSpeedBaseOverride)
	modifierfunction.MODIFIER_PROPERTY_FIXED_ATTACK_RATE = 30 (GetModifierFixedAttackRate)
	modifierfunction.MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT = 31 (GetModifierAttackSpeedBonus_Constant)
	modifierfunction.MODIFIER_PROPERTY_IGNORE_ATTACKSPEED_LIMIT = 32 (GetModifierAttackSpeed_Limit)
	modifierfunction.MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT = 33 (GetModifierCooldownReduction_Constant)
	modifierfunction.MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT = 34 (GetModifierManacostReduction_Constant)
	modifierfunction.MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT = 35 (GetModifierBaseAttackTimeConstant)
	modifierfunction.MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST = 36 (GetModifierBaseAttackTimeConstant_Adjust)
	modifierfunction.MODIFIER_PROPERTY_BASE_ATTACK_TIME_PERCENTAGE = 37 (GetModifierBaseAttackTimePercentage)
	modifierfunction.MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT = 38 (GetModifierAttackPointConstant)
	modifierfunction.MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE = 39 (GetModifierBonusDamageOutgoing_Percentage)
	modifierfunction.MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE = 40 (GetModifierDamageOutgoing_Percentage)
	modifierfunction.MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION = 41 (GetModifierDamageOutgoing_Percentage_Illusion)
	modifierfunction.MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY = 42 (GetModifierDamageOutgoing_Percentage_Illusion_Amplify)
	modifierfunction.MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE = 43 (GetModifierTotalDamageOutgoing_Percentage)
	modifierfunction.MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_CREEP = 44 (GetModifierSpellAmplify_PercentageCreep)
	modifierfunction.MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE = 45 (GetModifierSpellAmplify_Percentage)
	modifierfunction.MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE = 46 (GetModifierSpellAmplify_PercentageUnique)
	modifierfunction.MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE = 47 (GetModifierHealAmplify_PercentageSource)
	modifierfunction.MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET = 48 (GetModifierHealAmplify_PercentageTarget)
	modifierfunction.MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE = 49 (GetModifierHPRegenAmplify_Percentage)
	modifierfunction.MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE = 50 (GetModifierLifestealRegenAmplify_Percentage)
	modifierfunction.MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE = 51 (GetModifierSpellLifestealRegenAmplify_Percentage)
	modifierfunction.MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE = 52 (GetModifierMPRegenAmplify_Percentage)
	modifierfunction.MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE = 53 (GetModifierManaDrainAmplify_Percentage)
	modifierfunction.MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE = 54 (GetModifierMPRestoreAmplify_Percentage)
	modifierfunction.MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE = 55 (GetModifierBaseDamageOutgoing_Percentage)
	modifierfunction.MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE = 56 (GetModifierBaseDamageOutgoing_PercentageUnique)
	modifierfunction.MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE = 57 (GetModifierIncomingDamage_Percentage)
	modifierfunction.MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE = 58 (GetModifierIncomingPhysicalDamage_Percentage)
	modifierfunction.MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT = 59 (GetModifierIncomingPhysicalDamageConstant)
	modifierfunction.MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT = 60 (GetModifierIncomingSpellDamageConstant)
	modifierfunction.MODIFIER_PROPERTY_EVASION_CONSTANT = 61 (GetModifierEvasion_Constant)
	modifierfunction.MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT = 62 (GetModifierNegativeEvasion_Constant)
	modifierfunction.MODIFIER_PROPERTY_STATUS_RESISTANCE = 63 (GetModifierStatusResistance)
	modifierfunction.MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING = 64 (GetModifierStatusResistanceStacking)
	modifierfunction.MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER = 65 (GetModifierStatusResistanceCaster)
	modifierfunction.MODIFIER_PROPERTY_AVOID_DAMAGE = 66 (GetModifierAvoidDamage)
	modifierfunction.MODIFIER_PROPERTY_AVOID_SPELL = 67 (GetModifierAvoidSpell)
	modifierfunction.MODIFIER_PROPERTY_MISS_PERCENTAGE = 68 (GetModifierMiss_Percentage)
	modifierfunction.MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE = 69 (GetModifierPhysicalArmorBase_Percentage)
	modifierfunction.MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE = 70 (GetModifierPhysicalArmorTotal_Percentage)
	modifierfunction.MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS = 71 (GetModifierPhysicalArmorBonus)
	modifierfunction.MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE = 72 (GetModifierPhysicalArmorBonusUnique)
	modifierfunction.MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE = 73 (GetModifierPhysicalArmorBonusUniqueActive)
	modifierfunction.MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR = 74 (GetModifierIgnorePhysicalArmor)
	modifierfunction.MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION = 75 (GetModifierMagicalResistanceBaseReduction)
	modifierfunction.MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION = 76 (GetModifierMagicalResistanceDirectModification)
	modifierfunction.MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS = 77 (GetModifierMagicalResistanceBonus)
	modifierfunction.MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS = 78 (GetModifierMagicalResistanceBonusIllusions)
	modifierfunction.MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE = 79 (GetModifierMagicalResistanceDecrepifyUnique)
	modifierfunction.MODIFIER_PROPERTY_BASE_MANA_REGEN = 80 (GetModifierBaseRegen)
	modifierfunction.MODIFIER_PROPERTY_MANA_REGEN_CONSTANT = 81 (GetModifierConstantManaRegen)
	modifierfunction.MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE = 82 (GetModifierConstantManaRegenUnique)
	modifierfunction.MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE = 83 (GetModifierTotalPercentageManaRegen)
	modifierfunction.MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT = 84 (GetModifierConstantHealthRegen)
	modifierfunction.MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE = 85 (GetModifierHealthRegenPercentage)
	modifierfunction.MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE = 86 (GetModifierHealthRegenPercentageUnique)
	modifierfunction.MODIFIER_PROPERTY_HEALTH_BONUS = 87 (GetModifierHealthBonus)
	modifierfunction.MODIFIER_PROPERTY_MANA_BONUS = 88 (GetModifierManaBonus)
	modifierfunction.MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS = 89 (GetModifierExtraStrengthBonus)
	modifierfunction.MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS = 90 (GetModifierExtraHealthBonus)
	modifierfunction.MODIFIER_PROPERTY_EXTRA_MANA_BONUS = 91 (GetModifierExtraManaBonus)
	modifierfunction.MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE = 92 (GetModifierExtraHealthPercentage)
	modifierfunction.MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE = 93 (GetModifierExtraManaPercentage)
	modifierfunction.MODIFIER_PROPERTY_STATS_STRENGTH_BONUS = 94 (GetModifierBonusStats_Strength)
	modifierfunction.MODIFIER_PROPERTY_STATS_AGILITY_BONUS = 95 (GetModifierBonusStats_Agility)
	modifierfunction.MODIFIER_PROPERTY_STATS_INTELLECT_BONUS = 96 (GetModifierBonusStats_Intellect)
	modifierfunction.MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE = 97 (GetModifierBonusStats_Strength_Percentage)
	modifierfunction.MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE = 98 (GetModifierBonusStats_Agility_Percentage)
	modifierfunction.MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE = 99 (GetModifierBonusStats_Intellect_Percentage)
	modifierfunction.MODIFIER_PROPERTY_CAST_RANGE_BONUS = 100 (GetModifierCastRangeBonus)
	modifierfunction.MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET = 101 (GetModifierCastRangeBonusTarget)
	modifierfunction.MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING = 102 (GetModifierCastRangeBonusStacking)
	modifierfunction.MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE = 103 (GetModifierAttackRangeOverride)
	modifierfunction.MODIFIER_PROPERTY_ATTACK_RANGE_BONUS = 104 (GetModifierAttackRangeBonus)
	modifierfunction.MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE = 105 (GetModifierAttackRangeBonusUnique)
	modifierfunction.MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE = 106 (GetModifierAttackRangeBonusPercentage)
	modifierfunction.MODIFIER_PROPERTY_MAX_ATTACK_RANGE = 107 (GetModifierMaxAttackRange)
	modifierfunction.MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS = 108 (GetModifierProjectileSpeedBonus)
	modifierfunction.MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE = 109 (GetModifierProjectileSpeedBonusPercentage)
	modifierfunction.MODIFIER_PROPERTY_PROJECTILE_NAME = 110 (GetModifierProjectileName)
	modifierfunction.MODIFIER_PROPERTY_REINCARNATION = 111 (ReincarnateTime)
	modifierfunction.MODIFIER_PROPERTY_RESPAWNTIME = 112 (GetModifierConstantRespawnTime)
	modifierfunction.MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE = 113 (GetModifierPercentageRespawnTime)
	modifierfunction.MODIFIER_PROPERTY_RESPAWNTIME_STACKING = 114 (GetModifierStackingRespawnTime)
	modifierfunction.MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE = 115 (GetModifierPercentageCooldown)
	modifierfunction.MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING = 116 (GetModifierPercentageCooldownOngoing)
	modifierfunction.MODIFIER_PROPERTY_CASTTIME_PERCENTAGE = 117 (GetModifierPercentageCasttime)
	modifierfunction.MODIFIER_PROPERTY_ATTACK_ANIM_TIME_PERCENTAGE = 118 (GetModifierPercentageAttackAnimTime)
	modifierfunction.MODIFIER_PROPERTY_MANACOST_PERCENTAGE = 119 (GetModifierPercentageManacost)
	modifierfunction.MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING = 120 (GetModifierPercentageManacostStacking)
	modifierfunction.MODIFIER_PROPERTY_DEATHGOLDCOST = 121 (GetModifierConstantDeathGoldCost)
	modifierfunction.MODIFIER_PROPERTY_EXP_RATE_BOOST = 122 (GetModifierPercentageExpRateBoost)
	modifierfunction.MODIFIER_PROPERTY_GOLD_RATE_BOOST = 123 (GetModifierPercentageGoldRateBoost)
	modifierfunction.MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE = 124 (GetModifierPreAttack_CriticalStrike)
	modifierfunction.MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE = 125 (GetModifierPreAttack_Target_CriticalStrike)
	modifierfunction.MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK = 126 (GetModifierMagical_ConstantBlock)
	modifierfunction.MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK = 127 (GetModifierPhysical_ConstantBlock)
	modifierfunction.MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL = 128 (GetModifierPhysical_ConstantBlockSpecial)
	modifierfunction.MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR = 129 (GetModifierPhysical_ConstantBlockUnavoidablePreArmor)
	modifierfunction.MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK = 130 (GetModifierTotal_ConstantBlock)
	modifierfunction.MODIFIER_PROPERTY_OVERRIDE_ANIMATION = 131 (GetOverrideAnimation)
	modifierfunction.MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT = 132 (GetOverrideAnimationWeight)
	modifierfunction.MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE = 133 (GetOverrideAnimationRate)
	modifierfunction.MODIFIER_PROPERTY_ABSORB_SPELL = 134 (GetAbsorbSpell)
	modifierfunction.MODIFIER_PROPERTY_REFLECT_SPELL = 135 (GetReflectSpell)
	modifierfunction.MODIFIER_PROPERTY_DISABLE_AUTOATTACK = 136 (GetDisableAutoAttack)
	modifierfunction.MODIFIER_PROPERTY_BONUS_DAY_VISION = 137 (GetBonusDayVision)
	modifierfunction.MODIFIER_PROPERTY_BONUS_NIGHT_VISION = 138 (GetBonusNightVision)
	modifierfunction.MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE = 139 (GetBonusNightVisionUnique)
	modifierfunction.MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE = 140 (GetBonusVisionPercentage)
	modifierfunction.MODIFIER_PROPERTY_FIXED_DAY_VISION = 141 (GetFixedDayVision)
	modifierfunction.MODIFIER_PROPERTY_FIXED_NIGHT_VISION = 142 (GetFixedNightVision)
	modifierfunction.MODIFIER_PROPERTY_MIN_HEALTH = 143 (GetMinHealth)
	modifierfunction.MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL = 144 (GetAbsoluteNoDamagePhysical)
	modifierfunction.MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL = 145 (GetAbsoluteNoDamageMagical)
	modifierfunction.MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE = 146 (GetAbsoluteNoDamagePure)
	modifierfunction.MODIFIER_PROPERTY_IS_ILLUSION = 147 (GetIsIllusion)
	modifierfunction.MODIFIER_PROPERTY_ILLUSION_LABEL = 148 (GetModifierIllusionLabel)
	modifierfunction.MODIFIER_PROPERTY_STRONG_ILLUSION = 149 (GetModifierStrongIllusion)
	modifierfunction.MODIFIER_PROPERTY_SUPER_ILLUSION = 150 (GetModifierSuperIllusion)
	modifierfunction.MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE = 151 (GetModifierSuperIllusionWithUltimate)
	modifierfunction.MODIFIER_PROPERTY_XP_DURING_DEATH = 152 (GetModifierXPDuringDeath)
	modifierfunction.MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE = 153 (GetModifierTurnRate_Percentage)
	modifierfunction.MODIFIER_PROPERTY_TURN_RATE_OVERRIDE = 154 (GetModifierTurnRate_Override)
	modifierfunction.MODIFIER_PROPERTY_DISABLE_HEALING = 155 (GetDisableHealing)
	modifierfunction.MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK = 156 (GetAlwaysAllowAttack)
	modifierfunction.MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK = 157 (GetAllowEtherealAttack)
	modifierfunction.MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL = 158 (GetOverrideAttackMagical)
	modifierfunction.MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH = 159 (GetModifierUnitStatsNeedsRefresh)
	modifierfunction.MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER = 160 (Unused)
	modifierfunction.MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER = 161 (Unused)
	modifierfunction.MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING = 162 (GetModifierUnitDisllowUpgrading)
	modifierfunction.MODIFIER_PROPERTY_DODGE_PROJECTILE = 163 (GetModifierDodgeProjectile)
	modifierfunction.MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK = 164 (GetTriggerCosmeticAndEndAttack)
	modifierfunction.MODIFIER_PROPERTY_MAX_DEBUFF_DURATION = 165 (GetModifierMaxDebuffDuration)
	modifierfunction.MODIFIER_PROPERTY_PRIMARY_STAT_DAMAGE_MULTIPLIER = 166 (GetPrimaryStatDamageMultiplier)
	modifierfunction.MODIFIER_PROPERTY_PREATTACK_DEADLY_BLOW = 167 (GetModifierPreAttack_DeadlyBlow)
	modifierfunction.MODIFIER_PROPERTY_ALWAYS_AUTOATTACK_WHILE_HOLD_POSITION = 168 (GetAlwaysAutoAttackWhileHoldPosition)
	modifierfunction.MODIFIER_EVENT_ON_SPELL_TARGET_READY = 169 (OnSpellTargetReady)
	modifierfunction.MODIFIER_EVENT_ON_ATTACK_RECORD = 170 (OnAttackRecord)
	modifierfunction.MODIFIER_EVENT_ON_ATTACK_START = 171 (OnAttackStart)
	modifierfunction.MODIFIER_EVENT_ON_ATTACK = 172 (OnAttack)
	modifierfunction.MODIFIER_EVENT_ON_ATTACK_LANDED = 173 (OnAttackLanded)
	modifierfunction.MODIFIER_EVENT_ON_ATTACK_FAIL = 174 (OnAttackFail)
	modifierfunction.MODIFIER_EVENT_ON_ATTACK_ALLIED = 175 (OnAttackAllied)
	modifierfunction.MODIFIER_EVENT_ON_PROJECTILE_DODGE = 176 (OnProjectileDodge)
	modifierfunction.MODIFIER_EVENT_ON_ORDER = 177 (OnOrder)
	modifierfunction.MODIFIER_EVENT_ON_UNIT_MOVED = 178 (OnUnitMoved)
	modifierfunction.MODIFIER_EVENT_ON_ABILITY_START = 179 (OnAbilityStart)
	modifierfunction.MODIFIER_EVENT_ON_ABILITY_EXECUTED = 180 (OnAbilityExecuted)
	modifierfunction.MODIFIER_EVENT_ON_ABILITY_FULLY_CAST = 181 (OnAbilityFullyCast)
	modifierfunction.MODIFIER_EVENT_ON_BREAK_INVISIBILITY = 182 (OnBreakInvisibility)
	modifierfunction.MODIFIER_EVENT_ON_ABILITY_END_CHANNEL = 183 (OnAbilityEndChannel)
	modifierfunction.MODIFIER_EVENT_ON_PROCESS_UPGRADE = 184 (Unused)
	modifierfunction.MODIFIER_EVENT_ON_REFRESH = 185 (Unused)
	modifierfunction.MODIFIER_EVENT_ON_TAKEDAMAGE = 186 (OnTakeDamage)
	modifierfunction.MODIFIER_EVENT_ON_DEATH_PREVENTED = 187 (OnDamagePrevented)
	modifierfunction.MODIFIER_EVENT_ON_STATE_CHANGED = 188 (OnStateChanged)
	modifierfunction.MODIFIER_EVENT_ON_ORB_EFFECT = 189 (Unused)
	modifierfunction.MODIFIER_EVENT_ON_PROCESS_CLEAVE = 190 (OnProcessCleave)
	modifierfunction.MODIFIER_EVENT_ON_DAMAGE_CALCULATED = 191 (OnDamageCalculated)
	modifierfunction.MODIFIER_EVENT_ON_ATTACKED = 192 (OnAttacked)
	modifierfunction.MODIFIER_EVENT_ON_DEATH = 193 (OnDeath)
	modifierfunction.MODIFIER_EVENT_ON_RESPAWN = 194 (OnRespawn)
	modifierfunction.MODIFIER_EVENT_ON_SPENT_MANA = 195 (OnSpentMana)
	modifierfunction.MODIFIER_EVENT_ON_TELEPORTING = 196 (OnTeleporting)
	modifierfunction.MODIFIER_EVENT_ON_TELEPORTED = 197 (OnTeleported)
	modifierfunction.MODIFIER_EVENT_ON_SET_LOCATION = 198 (OnSetLocation)
	modifierfunction.MODIFIER_EVENT_ON_HEALTH_GAINED = 199 (OnHealthGained)
	modifierfunction.MODIFIER_EVENT_ON_MANA_GAINED = 200 (OnManaGained)
	modifierfunction.MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT = 201 (OnTakeDamageKillCredit)
	modifierfunction.MODIFIER_EVENT_ON_HERO_KILLED = 202 (OnHeroKilled)
	modifierfunction.MODIFIER_EVENT_ON_HEAL_RECEIVED = 203 (OnHealReceived)
	modifierfunction.MODIFIER_EVENT_ON_BUILDING_KILLED = 204 (OnBuildingKilled)
	modifierfunction.MODIFIER_EVENT_ON_MODEL_CHANGED = 205 (OnModelChanged)
	modifierfunction.MODIFIER_EVENT_ON_MODIFIER_ADDED = 206 (OnModifierAdded)
	modifierfunction.MODIFIER_PROPERTY_TOOLTIP = 207 (OnTooltip)
	modifierfunction.MODIFIER_PROPERTY_MODEL_CHANGE = 208 (GetModifierModelChange)
	modifierfunction.MODIFIER_PROPERTY_MODEL_SCALE = 209 (GetModifierModelScale)
	modifierfunction.MODIFIER_PROPERTY_IS_SCEPTER = 210 (GetModifierScepter)
	modifierfunction.MODIFIER_PROPERTY_IS_SHARD = 211 (GetModifierShard)
	modifierfunction.MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION = 212 (GetModifierRadarCooldownReduction)
	modifierfunction.MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS = 213 (GetActivityTranslationModifiers)
	modifierfunction.MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND = 214 (GetAttackSound)
	modifierfunction.MODIFIER_PROPERTY_LIFETIME_FRACTION = 215 (GetUnitLifetimeFraction)
	modifierfunction.MODIFIER_PROPERTY_PROVIDES_FOW_POSITION = 216 (GetModifierProvidesFOWVision)
	modifierfunction.MODIFIER_PROPERTY_SPELLS_REQUIRE_HP = 217 (GetModifierSpellsRequireHP)
	modifierfunction.MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP = 218 (GetForceDrawOnMinimap)
	modifierfunction.MODIFIER_PROPERTY_DISABLE_TURNING = 219 (GetModifierDisableTurning)
	modifierfunction.MODIFIER_PROPERTY_IGNORE_CAST_ANGLE = 220 (GetModifierIgnoreCastAngle)
	modifierfunction.MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE = 221 (GetModifierChangeAbilityValue)
	modifierfunction.MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL = 222 (GetModifierOverrideAbilitySpecial)
	modifierfunction.MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE = 223 (GetModifierOverrideAbilitySpecialValue)
	modifierfunction.MODIFIER_PROPERTY_ABILITY_LAYOUT = 224 (GetModifierAbilityLayout)
	modifierfunction.MODIFIER_EVENT_ON_DOMINATED = 225 (OnDominated)
	modifierfunction.MODIFIER_PROPERTY_TEMPEST_DOUBLE = 226 (GetModifierTempestDouble)
	modifierfunction.MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE = 227 (PreserveParticlesOnModelChanged)
	modifierfunction.MODIFIER_EVENT_ON_ATTACK_FINISHED = 228 (OnAttackFinished)
	modifierfunction.MODIFIER_PROPERTY_IGNORE_COOLDOWN = 229 (GetModifierIgnoreCooldown)
	modifierfunction.MODIFIER_PROPERTY_CAN_ATTACK_TREES = 230 (GetModifierCanAttackTrees)
	modifierfunction.MODIFIER_PROPERTY_VISUAL_Z_DELTA = 231 (GetVisualZDelta)
	modifierfunction.MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION = 232
	modifierfunction.MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER = 233 (GetModifierNoVisionOfAttacker)
	modifierfunction.MODIFIER_PROPERTY_TOOLTIP2 = 234 (OnTooltip2)
	modifierfunction.MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY = 235 (OnAttackRecordDestroy)
	modifierfunction.MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT = 236 (OnProjectileObstructionHit)
	modifierfunction.MODIFIER_PROPERTY_SUPPRESS_TELEPORT = 237 (GetSuppressTeleport)
	modifierfunction.MODIFIER_EVENT_ON_ATTACK_CANCELLED = 238 (OnAttackCancelled)
	modifierfunction.MODIFIER_PROPERTY_SUPPRESS_CLEAVE = 239 (GetSuppressCleave)
	modifierfunction.MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS = 240 (BotAttackScoreBonus)
	modifierfunction.MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE = 241 (GetModifierAttackSpeedReductionPercentage)
	modifierfunction.MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE = 242 (GetModifierMoveSpeedReductionPercentage)
	modifierfunction.MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET = 243
	modifierfunction.MODIFIER_PROPERTY_ATTACKSPEED_PERCENTAGE = 244 (GetModifierAttackSpeedPercentage)
	modifierfunction.MODIFIER_EVENT_ON_ATTEMPT_PROJECTILE_DODGE = 245 (OnAttemptProjectileDodge)
	modifierfunction.MODIFIER_EVENT_ON_PREDEBUFF_APPLIED = 246 (OnPreDebuffApplied)
	modifierfunction.MODIFIER_FUNCTION_LAST = 247
	modifierfunction.MODIFIER_FUNCTION_INVALID = 255

Enumeration 'modifierstate'
	modifierstate.MODIFIER_STATE_ROOTED = 0
	modifierstate.MODIFIER_STATE_DISARMED = 1
	modifierstate.MODIFIER_STATE_ATTACK_IMMUNE = 2
	modifierstate.MODIFIER_STATE_SILENCED = 3
	modifierstate.MODIFIER_STATE_MUTED = 4
	modifierstate.MODIFIER_STATE_STUNNED = 5
	modifierstate.MODIFIER_STATE_HEXED = 6
	modifierstate.MODIFIER_STATE_INVISIBLE = 7
	modifierstate.MODIFIER_STATE_INVULNERABLE = 8
	modifierstate.MODIFIER_STATE_MAGIC_IMMUNE = 9
	modifierstate.MODIFIER_STATE_PROVIDES_VISION = 10
	modifierstate.MODIFIER_STATE_NIGHTMARED = 11
	modifierstate.MODIFIER_STATE_BLOCK_DISABLED = 12
	modifierstate.MODIFIER_STATE_EVADE_DISABLED = 13
	modifierstate.MODIFIER_STATE_UNSELECTABLE = 14
	modifierstate.MODIFIER_STATE_CANNOT_TARGET_ENEMIES = 15
	modifierstate.MODIFIER_STATE_CANNOT_MISS = 16
	modifierstate.MODIFIER_STATE_SPECIALLY_DENIABLE = 17
	modifierstate.MODIFIER_STATE_FROZEN = 18
	modifierstate.MODIFIER_STATE_COMMAND_RESTRICTED = 19
	modifierstate.MODIFIER_STATE_NOT_ON_MINIMAP = 20
	modifierstate.MODIFIER_STATE_LOW_ATTACK_PRIORITY = 21
	modifierstate.MODIFIER_STATE_NO_HEALTH_BAR = 22
	modifierstate.MODIFIER_STATE_FLYING = 23
	modifierstate.MODIFIER_STATE_NO_UNIT_COLLISION = 24
	modifierstate.MODIFIER_STATE_NO_TEAM_MOVE_TO = 25
	modifierstate.MODIFIER_STATE_NO_TEAM_SELECT = 26
	modifierstate.MODIFIER_STATE_PASSIVES_DISABLED = 27
	modifierstate.MODIFIER_STATE_DOMINATED = 28
	modifierstate.MODIFIER_STATE_BLIND = 29
	modifierstate.MODIFIER_STATE_OUT_OF_GAME = 30
	modifierstate.MODIFIER_STATE_FAKE_ALLY = 31
	modifierstate.MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY = 32
	modifierstate.MODIFIER_STATE_TRUESIGHT_IMMUNE = 33
	modifierstate.MODIFIER_STATE_UNTARGETABLE = 34
	modifierstate.MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS = 35
	modifierstate.MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES = 36
	modifierstate.MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES = 37
	modifierstate.MODIFIER_STATE_UNSLOWABLE = 38
	modifierstate.MODIFIER_STATE_TETHERED = 39
	modifierstate.MODIFIER_STATE_IGNORING_STOP_ORDERS = 40
	modifierstate.MODIFIER_STATE_FEARED = 41
	modifierstate.MODIFIER_STATE_TAUNTED = 42
	modifierstate.MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED = 43
	modifierstate.MODIFIER_STATE_FORCED_FLYING_VISION = 44
	modifierstate.MODIFIER_STATE_ATTACK_ALLIES = 45
	modifierstate.MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS = 46
	modifierstate.MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE = 47
	modifierstate.MODIFIER_STATE_SPECIALLY_UNDENIABLE = 48
	modifierstate.MODIFIER_STATE_LAST = 49

Enumeration 'DOTAModifierAttribute_t'
	DOTAModifierAttribute_t.MODIFIER_ATTRIBUTE_NONE = 0
	DOTAModifierAttribute_t.MODIFIER_ATTRIBUTE_PERMANENT = 1
	DOTAModifierAttribute_t.MODIFIER_ATTRIBUTE_MULTIPLE = 2
	DOTAModifierAttribute_t.MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE = 4
	DOTAModifierAttribute_t.MODIFIER_ATTRIBUTE_AURA_PRIORITY = 8

Enumeration 'Attributes'
	Attributes.DOTA_ATTRIBUTE_STRENGTH = 0
	Attributes.DOTA_ATTRIBUTE_AGILITY = 1
	Attributes.DOTA_ATTRIBUTE_INTELLECT = 2
	Attributes.DOTA_ATTRIBUTE_MAX = 3
	Attributes.DOTA_ATTRIBUTE_INVALID = -1

Enumeration 'ParticleAttachment_t'
	ParticleAttachment_t.PATTACH_INVALID = -1
	ParticleAttachment_t.PATTACH_ABSORIGIN = 0
	ParticleAttachment_t.PATTACH_ABSORIGIN_FOLLOW = 1
	ParticleAttachment_t.PATTACH_CUSTOMORIGIN = 2
	ParticleAttachment_t.PATTACH_CUSTOMORIGIN_FOLLOW = 3
	ParticleAttachment_t.PATTACH_POINT = 4
	ParticleAttachment_t.PATTACH_POINT_FOLLOW = 5
	ParticleAttachment_t.PATTACH_EYES_FOLLOW = 6
	ParticleAttachment_t.PATTACH_OVERHEAD_FOLLOW = 7
	ParticleAttachment_t.PATTACH_WORLDORIGIN = 8
	ParticleAttachment_t.PATTACH_ROOTBONE_FOLLOW = 9
	ParticleAttachment_t.PATTACH_RENDERORIGIN_FOLLOW = 10
	ParticleAttachment_t.PATTACH_MAIN_VIEW = 11
	ParticleAttachment_t.PATTACH_WATERWAKE = 12
	ParticleAttachment_t.PATTACH_CENTER_FOLLOW = 13
	ParticleAttachment_t.PATTACH_CUSTOM_GAME_STATE_1 = 14
	ParticleAttachment_t.PATTACH_HEALTHBAR = 15
	ParticleAttachment_t.MAX_PATTACH_TYPES = 16

Enumeration 'DOTA_MOTION_CONTROLLER_PRIORITY'
	DOTA_MOTION_CONTROLLER_PRIORITY.DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST = 0
	DOTA_MOTION_CONTROLLER_PRIORITY.DOTA_MOTION_CONTROLLER_PRIORITY_LOW = 1
	DOTA_MOTION_CONTROLLER_PRIORITY.DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM = 2
	DOTA_MOTION_CONTROLLER_PRIORITY.DOTA_MOTION_CONTROLLER_PRIORITY_HIGH = 3
	DOTA_MOTION_CONTROLLER_PRIORITY.DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST = 4

Enumeration 'DOTASpeechType_t'
	DOTASpeechType_t.DOTA_SPEECH_USER_INVALID = 0
	DOTASpeechType_t.DOTA_SPEECH_USER_SINGLE = 1
	DOTASpeechType_t.DOTA_SPEECH_USER_TEAM = 2
	DOTASpeechType_t.DOTA_SPEECH_USER_TEAM_NEARBY = 3
	DOTASpeechType_t.DOTA_SPEECH_USER_NEARBY = 4
	DOTASpeechType_t.DOTA_SPEECH_USER_ALL = 5
	DOTASpeechType_t.DOTA_SPEECH_GOOD_TEAM = 6
	DOTASpeechType_t.DOTA_SPEECH_BAD_TEAM = 7
	DOTASpeechType_t.DOTA_SPEECH_SPECTATOR = 8
	DOTASpeechType_t.DOTA_SPEECH_USER_TEAM_NOSPECTATOR = 9
	DOTASpeechType_t.DOTA_SPEECH_RECIPIENT_TYPE_MAX = 10

Enumeration 'DOTAAbilitySpeakTrigger_t'
	DOTAAbilitySpeakTrigger_t.DOTA_ABILITY_SPEAK_START_ACTION_PHASE = 0
	DOTAAbilitySpeakTrigger_t.DOTA_ABILITY_SPEAK_CAST = 1

Enumeration 'DotaCustomUIType_t'
	DotaCustomUIType_t.DOTA_CUSTOM_UI_TYPE_HUD = 0
	DotaCustomUIType_t.DOTA_CUSTOM_UI_TYPE_HERO_SELECTION = 1
	DotaCustomUIType_t.DOTA_CUSTOM_UI_TYPE_PREGAME_STRATEGY = 2
	DotaCustomUIType_t.DOTA_CUSTOM_UI_TYPE_GAME_INFO = 3
	DotaCustomUIType_t.DOTA_CUSTOM_UI_TYPE_GAME_SETUP = 4
	DotaCustomUIType_t.DOTA_CUSTOM_UI_TYPE_FLYOUT_SCOREBOARD = 5
	DotaCustomUIType_t.DOTA_CUSTOM_UI_TYPE_HUD_TOP_BAR = 6
	DotaCustomUIType_t.DOTA_CUSTOM_UI_TYPE_END_SCREEN = 7
	DotaCustomUIType_t.DOTA_CUSTOM_UI_TYPE_COUNT = 8
	DotaCustomUIType_t.DOTA_CUSTOM_UI_TYPE_INVALID = -1

Enumeration 'DotaDefaultUIElement_t'
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVALID = -1
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_TIMEOFDAY = 0
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_HEROES = 1
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD = 2
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_ACTION_PANEL = 3
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_ACTION_MINIMAP = 4
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVENTORY_PANEL = 5
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVENTORY_SHOP = 6
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVENTORY_ITEMS = 7
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVENTORY_QUICKBUY = 8
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVENTORY_COURIER = 9
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVENTORY_PROTECT = 10
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_INVENTORY_GOLD = 11
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS = 12
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_SHOP_COMMONITEMS = 13
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS = 14
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME = 15
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK = 16
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_MENU_BUTTONS = 17
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND = 18
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM = 19
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM = 20
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_BAR_SCORE = 21
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_ENDGAME = 22
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_ENDGAME_CHAT = 23
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_QUICK_STATS = 24
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_PREGAME_STRATEGYUI = 25
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_KILLCAM = 26
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_TOP_BAR = 27
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_CUSTOMUI_BEHIND_HUD_ELEMENTS = 28
	DotaDefaultUIElement_t.DOTA_DEFAULT_UI_ELEMENT_COUNT = 29

Enumeration 'PlayerUltimateStateOrTime_t'
	PlayerUltimateStateOrTime_t.PLAYER_ULTIMATE_STATE_READY = 0
	PlayerUltimateStateOrTime_t.PLAYER_ULTIMATE_STATE_NO_MANA = -1
	PlayerUltimateStateOrTime_t.PLAYER_ULTIMATE_STATE_NOT_LEVELED = -2
	PlayerUltimateStateOrTime_t.PLAYER_ULTIMATE_STATE_HIDDEN = -3

Enumeration 'PlayerOrderIssuer_t'
	PlayerOrderIssuer_t.DOTA_ORDER_ISSUER_SELECTED_UNITS = 0
	PlayerOrderIssuer_t.DOTA_ORDER_ISSUER_CURRENT_UNIT_ONLY = 1
	PlayerOrderIssuer_t.DOTA_ORDER_ISSUER_HERO_ONLY = 2
	PlayerOrderIssuer_t.DOTA_ORDER_ISSUER_PASSED_UNIT_ONLY = 3

Enumeration 'OrderQueueBehavior_t'
	OrderQueueBehavior_t.DOTA_ORDER_QUEUE_DEFAULT = 0
	OrderQueueBehavior_t.DOTA_ORDER_QUEUE_NEVER = 1
	OrderQueueBehavior_t.DOTA_ORDER_QUEUE_ALWAYS = 2

Enumeration 'CLICK_BEHAVIORS'
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_NONE = 0
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_MOVE = 1
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_ATTACK = 2
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_CAST = 3
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_DROP_ITEM = 4
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_DROP_SHOP_ITEM = 5
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_DRAG = 6
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_LEARN_ABILITY = 7
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_PATROL = 8
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_VECTOR_CAST = 9
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_UNUSED = 10
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_RADAR = 11
	CLICK_BEHAVIORS.DOTA_CLICK_BEHAVIOR_LAST = 12

Enumeration 'AbilityLearnResult_t'
	AbilityLearnResult_t.ABILITY_CAN_BE_UPGRADED = 0
	AbilityLearnResult_t.ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE = 1
	AbilityLearnResult_t.ABILITY_CANNOT_BE_UPGRADED_AT_MAX = 2
	AbilityLearnResult_t.ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL = 3
	AbilityLearnResult_t.ABILITY_NOT_LEARNABLE = 4

Enumeration 'DOTAKeybindCommand_t'
	DOTAKeybindCommand_t.DOTA_KEYBIND_NONE = 0
	DOTAKeybindCommand_t.DOTA_KEYBIND_FIRST = 1
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_UP = 1
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_DOWN = 2
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_LEFT = 3
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_RIGHT = 4
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_GRIP = 5
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_YAW_GRIP = 6
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_SAVED_POSITION_1 = 7
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_SAVED_POSITION_2 = 8
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_SAVED_POSITION_3 = 9
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_SAVED_POSITION_4 = 10
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_SAVED_POSITION_5 = 11
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_SAVED_POSITION_6 = 12
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_SAVED_POSITION_7 = 13
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_SAVED_POSITION_8 = 14
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_SAVED_POSITION_9 = 15
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_SAVED_POSITION_10 = 16
	DOTAKeybindCommand_t.DOTA_KEYBIND_HERO_ATTACK = 17
	DOTAKeybindCommand_t.DOTA_KEYBIND_HERO_MOVE = 18
	DOTAKeybindCommand_t.DOTA_KEYBIND_HERO_MOVE_DIRECTION = 19
	DOTAKeybindCommand_t.DOTA_KEYBIND_PATROL = 20
	DOTAKeybindCommand_t.DOTA_KEYBIND_HERO_STOP = 21
	DOTAKeybindCommand_t.DOTA_KEYBIND_HERO_HOLD = 22
	DOTAKeybindCommand_t.DOTA_KEYBIND_HERO_SELECT = 23
	DOTAKeybindCommand_t.DOTA_KEYBIND_COURIER_SELECT = 24
	DOTAKeybindCommand_t.DOTA_KEYBIND_COURIER_DELIVER = 25
	DOTAKeybindCommand_t.DOTA_KEYBIND_COURIER_BURST = 26
	DOTAKeybindCommand_t.DOTA_KEYBIND_COURIER_SHIELD = 27
	DOTAKeybindCommand_t.DOTA_KEYBIND_PAUSE = 28
	DOTAKeybindCommand_t.DOTA_SELECT_ALL = 29
	DOTAKeybindCommand_t.DOTA_SELECT_ALL_OTHERS = 30
	DOTAKeybindCommand_t.DOTA_RECENT_EVENT = 31
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_TEAM = 32
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_GLOBAL = 33
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_TEAM2 = 34
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_GLOBAL2 = 35
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_VOICE_PARTY = 36
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_VOICE_TEAM = 37
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL = 38
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL2 = 39
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL_CARE = 40
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL_BACK = 41
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL_NEED_WARDS = 42
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL_STUN = 43
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL_HELP = 44
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL_GET_PUSH = 45
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL_GOOD_JOB = 46
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL_MISSING = 47
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL_MISSING_TOP = 48
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL_MISSING_MIDDLE = 49
	DOTAKeybindCommand_t.DOTA_KEYBIND_CHAT_WHEEL_MISSING_BOTTOM = 50
	DOTAKeybindCommand_t.DOTA_KEYBIND_HERO_CHAT_WHEEL = 51
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPRAY_WHEEL = 52
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY1 = 53
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY2 = 54
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY3 = 55
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_SECONDARY1 = 56
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_SECONDARY2 = 57
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_ULTIMATE = 58
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY1_QUICKCAST = 59
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY2_QUICKCAST = 60
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY3_QUICKCAST = 61
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_SECONDARY1_QUICKCAST = 62
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_SECONDARY2_QUICKCAST = 63
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_ULTIMATE_QUICKCAST = 64
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY1_EXPLICIT_AUTOCAST = 65
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY2_EXPLICIT_AUTOCAST = 66
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY3_EXPLICIT_AUTOCAST = 67
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_SECONDARY1_EXPLICIT_AUTOCAST = 68
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_SECONDARY2_EXPLICIT_AUTOCAST = 69
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_ULTIMATE_EXPLICIT_AUTOCAST = 70
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY1_QUICKCAST_AUTOCAST = 71
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY2_QUICKCAST_AUTOCAST = 72
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY3_QUICKCAST_AUTOCAST = 73
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_SECONDARY1_QUICKCAST_AUTOCAST = 74
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_SECONDARY2_QUICKCAST_AUTOCAST = 75
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_ULTIMATE_QUICKCAST_AUTOCAST = 76
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY1_AUTOMATIC_AUTOCAST = 77
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY2_AUTOMATIC_AUTOCAST = 78
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_PRIMARY3_AUTOMATIC_AUTOCAST = 79
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_SECONDARY1_AUTOMATIC_AUTOCAST = 80
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_SECONDARY2_AUTOMATIC_AUTOCAST = 81
	DOTAKeybindCommand_t.DOTA_KEYBIND_ABILITY_ULTIMATE_AUTOMATIC_AUTOCAST = 82
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY1 = 83
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY2 = 84
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY3 = 85
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY4 = 86
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY5 = 87
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY6 = 88
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORYTP = 89
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORYNEUTRAL = 90
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY1_QUICKCAST = 91
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY2_QUICKCAST = 92
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY3_QUICKCAST = 93
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY4_QUICKCAST = 94
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY5_QUICKCAST = 95
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY6_QUICKCAST = 96
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORYTP_QUICKCAST = 97
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORYNEUTRAL_QUICKCAST = 98
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY1_AUTOCAST = 99
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY2_AUTOCAST = 100
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY3_AUTOCAST = 101
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY4_AUTOCAST = 102
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY5_AUTOCAST = 103
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY6_AUTOCAST = 104
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORYTP_AUTOCAST = 105
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORYNEUTRAL_AUTOCAST = 106
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY1_QUICKAUTOCAST = 107
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY2_QUICKAUTOCAST = 108
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY3_QUICKAUTOCAST = 109
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY4_QUICKAUTOCAST = 110
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY5_QUICKAUTOCAST = 111
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORY6_QUICKAUTOCAST = 112
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORYTP_QUICKAUTOCAST = 113
	DOTAKeybindCommand_t.DOTA_KEYBIND_INVENTORYNEUTRAL_QUICKAUTOCAST = 114
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUP1 = 115
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUP2 = 116
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUP3 = 117
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUP4 = 118
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUP5 = 119
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUP6 = 120
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUP7 = 121
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUP8 = 122
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUP9 = 123
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUP10 = 124
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUPCYCLE = 125
	DOTAKeybindCommand_t.DOTA_KEYBIND_SELECT_ALLY1 = 126
	DOTAKeybindCommand_t.DOTA_KEYBIND_SELECT_ALLY2 = 127
	DOTAKeybindCommand_t.DOTA_KEYBIND_SELECT_ALLY3 = 128
	DOTAKeybindCommand_t.DOTA_KEYBIND_SELECT_ALLY4 = 129
	DOTAKeybindCommand_t.DOTA_KEYBIND_SELECT_ALLY5 = 130
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_TOGGLE = 131
	DOTAKeybindCommand_t.DOTA_KEYBIND_SCOREBOARD_TOGGLE = 132
	DOTAKeybindCommand_t.DOTA_KEYBIND_SCREENSHOT = 133
	DOTAKeybindCommand_t.DOTA_KEYBIND_ESCAPE = 134
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONSOLE = 135
	DOTAKeybindCommand_t.DOTA_KEYBIND_DEATH_SUMMARY = 136
	DOTAKeybindCommand_t.DOTA_KEYBIND_LEARN_ABILITIES = 137
	DOTAKeybindCommand_t.DOTA_KEYBIND_LEARN_STATS = 138
	DOTAKeybindCommand_t.DOTA_KEYBIND_ACTIVATE_GLYPH = 139
	DOTAKeybindCommand_t.DOTA_KEYBIND_ACTIVATE_RADAR = 140
	DOTAKeybindCommand_t.DOTA_KEYBIND_PURCHASE_QUICKBUY = 141
	DOTAKeybindCommand_t.DOTA_KEYBIND_PURCHASE_STICKY = 142
	DOTAKeybindCommand_t.DOTA_KEYBIND_GRAB_STASH_ITEMS = 143
	DOTAKeybindCommand_t.DOTA_KEYBIND_TOGGLE_AUTOATTACK = 144
	DOTAKeybindCommand_t.DOTA_KEYBIND_TAUNT = 145
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_CONSUMABLES = 146
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_ATTRIBUTES = 147
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_ARMAMENTS = 148
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_ARCANE = 149
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_BASICS = 150
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SUPPORT = 151
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_CASTER = 152
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_WEAPONS = 153
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_ARMOR = 154
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_ARTIFACTS = 155
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SIDE_PAGE_1 = 156
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SIDE_PAGE_2 = 157
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SECRET = 158
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SEARCHBOX = 159
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_1 = 160
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_2 = 161
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_3 = 162
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_4 = 163
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_5 = 164
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_6 = 165
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_7 = 166
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_8 = 167
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_9 = 168
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_10 = 169
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_11 = 170
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_12 = 171
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_13 = 172
	DOTAKeybindCommand_t.DOTA_KEYBIND_SHOP_SLOT_14 = 173
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_UP = 174
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_DOWN = 175
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_LEFT = 176
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_RIGHT = 177
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_GRIP = 178
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_1 = 179
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_2 = 180
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_3 = 181
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_4 = 182
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_5 = 183
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_6 = 184
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_7 = 185
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_8 = 186
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_9 = 187
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_10 = 188
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_UNIT_SELECT = 189
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_HERO_SELECT = 190
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_PAUSE = 191
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_CHAT = 192
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_SCOREBOARD = 193
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_INCREASE_REPLAY_SPEED = 194
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DECREASE_REPLAY_SPEED = 195
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_STATS_HARVEST = 196
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_STATS_ITEM = 197
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_STATS_GOLD = 198
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_STATS_XP = 199
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_STATS_FANTASY = 200
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_STATS_WINCHANCE = 201
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOW_TOGGLEBOTH = 202
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOW_TOGGLERADIENT = 203
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOW_TOGGLEDIRE = 204
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_OPEN_BROADCASTER_MENU = 205
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_KDA = 206
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_LASTHITS_DENIES = 207
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_LEVEL = 208
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_XP_PER_MIN = 209
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_GOLD = 210
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_TOTALGOLD = 211
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_GOLD_PER_MIN = 212
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_BUYBACK = 213
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_NETWORTH = 214
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_FANTASY = 215
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_SORT = 216
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_DROPDOWN_CLOSE = 217
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOCUS_PLAYER_1 = 218
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOCUS_PLAYER_2 = 219
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOCUS_PLAYER_3 = 220
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOCUS_PLAYER_4 = 221
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOCUS_PLAYER_5 = 222
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOCUS_PLAYER_6 = 223
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOCUS_PLAYER_7 = 224
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOCUS_PLAYER_8 = 225
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOCUS_PLAYER_9 = 226
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_FOCUS_PLAYER_10 = 227
	DOTAKeybindCommand_t.DOTA_KEYBIND_SPEC_COACH_VIEWTOGGLE = 228
	DOTAKeybindCommand_t.DOTA_KEYBIND_INSPECTHEROINWORLD = 229
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_ZOOM_IN = 230
	DOTAKeybindCommand_t.DOTA_KEYBIND_CAMERA_ZOOM_OUT = 231
	DOTAKeybindCommand_t.DOTA_KEYBIND_CONTROL_GROUPCYCLEPREV = 232
	DOTAKeybindCommand_t.DOTA_KEYBIND_DOTA_ALT = 233
	DOTAKeybindCommand_t.DOTA_KEYBIND_COUNT = 234

Enumeration 'DOTA_SHOP_TYPE'
	DOTA_SHOP_TYPE.DOTA_SHOP_HOME = 0
	DOTA_SHOP_TYPE.DOTA_SHOP_SIDE = 1
	DOTA_SHOP_TYPE.DOTA_SHOP_SECRET = 2
	DOTA_SHOP_TYPE.DOTA_SHOP_GROUND = 3
	DOTA_SHOP_TYPE.DOTA_SHOP_SIDE2 = 4
	DOTA_SHOP_TYPE.DOTA_SHOP_SECRET2 = 5
	DOTA_SHOP_TYPE.DOTA_SHOP_CUSTOM = 6
	DOTA_SHOP_TYPE.DOTA_SHOP_NEUTRALS = 7
	DOTA_SHOP_TYPE.DOTA_SHOP_NONE = 8

$> script_reload
Initializing script VM...
...done
[{
    "returns":"int",
    "args":[{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"AddFOWViewer",
    "description":"Add temporary vision for a given team, returns a ViewerID ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision)"
  },{
    "returns":"float",
    "args":[{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"AngleDiff",
    "description":"Returns the number of degrees difference between two yaw angles"
  },{
    "returns":"Vector",
    "args":[{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"AnglesToVector",
    "description":"Generate a vector given a QAngles"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"AppendToLogFile",
    "description":"AppendToLogFile is deprecated. Print to the console for logging instead."
  },{
    "returns":"float",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"ApplyDamage",
    "description":"Damage an npc."
  },{
    "returns":"Quaternion",
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"AxisAngleToQuaternion",
    "description":"(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis"
  },{
    "returns":"Vector",
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"CalcClosestPointOnEntityOBB",
    "description":"Compute the closest point on the OBB of an entity."
  },{
    "returns":"float",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CalcDistanceBetweenEntityOBB",
    "description":"Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "returns":"float",
    "name":"CalcDistanceToLineSegment2D",
    "kind":"function"
  },{
    "returns":"void",
    "args":[{
        "type":"ehandle"
      }],
    "kind":"function",
    "name":"CancelEntityIOEvents",
    "description":"Create all I/O events for a particular entity"
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CenterCameraOnUnit",
    "description":"CenterCameraOnUnit( nPlayerId, hUnit ): Centers each players' camera on a unit."
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"ClearTeamCustomHealthbarColor",
    "description":"( teamNumber )"
  },{
    "returns":"handle",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"CreateDamageInfo",
    "description":"(hInflictor, hAttacker, flDamage) - Allocate a damageinfo object, used as an argument to TakeDamage(). Call DestroyDamageInfo( hInfo ) to free the object."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateEffect",
    "description":"Pass table - Inputs: entity, effect"
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"CreateHTTPRequest",
    "description":"Create an HTTP request."
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"CreateHTTPRequestScriptVM",
    "description":"Create an HTTP request."
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateHeroForPlayer",
    "description":"Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero"
  },{
    "returns":"table",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"bool"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"CreateIllusions",
    "description":"Create illusions of the passed hero that belong to passed unit using passed modifier data. ( hOwner, hHeroToCopy, hModiiferKeys, nNumIllusions, nPadding, bScramblePosition, bFindClearSpace ) \nSupported keys: \noutgoing_damage\nincoming_damage\nbounty_base\nbounty_growth\noutgoing_damage_structure\noutgoing_damage_roshan"
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateItem",
    "description":"Create a DOTA item"
  },{
    "returns":"handle",
    "args":[{
        "type":"Vector"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateItemOnPositionForLaunch",
    "description":"Create a physical item at a given location, can start in air (but doesn't clear a space)"
  },{
    "returns":"handle",
    "args":[{
        "type":"Vector"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateItemOnPositionSync",
    "description":"Create a physical item at a given location"
  },{
    "returns":"handle",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"CreateModifierThinker",
    "description":"Create a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker )"
  },{
    "returns":"handle",
    "args":[{
        "type":"Vector"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"CreateRune",
    "description":"Create a rune of the specified type (vLocation, iRuneType)."
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"CreateSceneEntity",
    "description":"Create a scene entity to play the specified scene."
  },{
    "returns":"handle",
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"CreateTempTree",
    "description":"Create a temporary tree, uses a default tree model. (vLocation, flDuration)."
  },{
    "returns":"handle",
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"CreateTempTreeWithModel",
    "description":"Create a temporary tree, specifying the tree model name. (vLocation, flDuration, szModelName)."
  },{
    "returns":"handle",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"CreateTrigger",
    "description":"CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger"
  },{
    "returns":"handle",
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"CreateTriggerRadiusApproximate",
    "description":"CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided"
  },{
    "returns":"handle",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"CreateUniformRandomStream",
    "description":"( iSeed ) - Creates a separate random number stream."
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"CreateUnitByName",
    "description":"Creates a DOTA unit by its dota_npc_units.txt name"
  },{
    "returns":"int",
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateUnitByNameAsync",
    "description":"Creates a DOTA unit by its dota_npc_units.txt name"
  },{
    "returns":"handle",
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"CreateUnitFromTable",
    "description":"Creates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at."
  },{
    "returns":"Vector",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"CrossVectors",
    "description":"(vector,vector) cross product between two vectors"
  },{
    "returns":"int",
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DOTA_SpawnMapAtPosition",
    "description":"Spawn a .vmap at the target location."
  },{
    "returns":"void",
    "args":[],
    "kind":"function",
    "name":"DebugBreak",
    "description":"Breaks in the debugger"
  },{
    "returns":"int",
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"bool"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DebugCreateUnit",
    "description":"Creates a test unit controllable by the specified player."
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawBox",
    "description":"Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawBoxDirection",
    "description":"Draw a debug forward box (cent, min, max, forward, vRgb, a, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawCircle",
    "description":"Draw a debug circle (center, vRgb, a, rad, ztest, duration)"
  },{
    "returns":"void",
    "args":[],
    "kind":"function",
    "name":"DebugDrawClear",
    "description":"Try to clear all the debug overlay info"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawLine",
    "description":"Draw a debug overlay line (origin, target, r, g, b, ztest, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawLine_vCol",
    "description":"Draw a debug line using color vec (start, end, vRgb, a, ztest, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawScreenTextLine",
    "description":"Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawSphere",
    "description":"Draw a debug sphere (center, vRgb, a, rad, ztest, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"string"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawText",
    "description":"Draw text in 3d (origin, text, bViewCheck, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"DebugScreenTextPretty",
    "description":"Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DestroyDamageInfo",
    "description":"Free a damageinfo object that was created with CreateDamageInfo()."
  },{
    "returns":"int",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"DoCleaveAttack",
    "description":"(hAttacker, hTarget, hAbility, fDamage, fRadius, effectName)"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DoEntFire",
    "description":"#EntFire:Generate and entity i/o event"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DoEntFireByInstanceHandle",
    "description":"#EntFireByHandle:Generate and entity i/o event"
  },{
    "returns":"bool",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DoIncludeScript",
    "description":"Execute a script (internal)"
  },{
    "returns":"void",
    "args":[{
        "type":"bool"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"DoScriptAssert",
    "description":"#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog."
  },{
    "returns":"string",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"DoUniqueString",
    "description":"#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "returns":"float",
    "name":"DotProduct",
    "kind":"function"
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      },{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"DropNeutralItemAtPositionForHero",
    "description":"Drop a neutral item for the team of the hero at the given tier."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"EmitAnnouncerSound",
    "description":"Emit an announcer sound for all players."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"EmitAnnouncerSoundForPlayer",
    "description":"Emit an announcer sound for a player."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"EmitAnnouncerSoundForTeam",
    "description":"Emit an announcer sound for a team."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"EmitAnnouncerSoundForTeamOnLocation",
    "description":"Emit an announcer sound for a team at a specific location."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"EmitGlobalSound",
    "description":"Play named sound for all players"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"EmitSoundOn",
    "description":"Play named sound on Entity"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"EmitSoundOnClient",
    "description":"Play named sound only on the client for the passed in player"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"EmitSoundOnEntityForPlayer",
    "description":"Emit a sound on an entity for only a specific player"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"EmitSoundOnLocationForAllies",
    "description":"Emit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"EmitSoundOnLocationForPlayer",
    "description":"Emit a sound on a location for only a specific player"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"EmitSoundOnLocationWithCaster",
    "description":"Emit a sound on a location from a unit. (vLocation, soundName, hCaster)."
  },{
    "returns":"handle",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"EntIndexToHScript",
    "description":"Turn an entity index integer to an HScript representing that entity's script instance."
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"ExecuteOrderFromTable",
    "description":"Issue an order from a script table"
  },{
    "returns":"float",
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"ExponentialDecay",
    "description":"Smooth curve decreasing slower as it approaches zero"
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"FindClearRandomPositionAroundUnit",
    "description":"Finds a clear random position around a given target unit, using the target unit's padded collision radius."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"FindClearSpaceForUnit",
    "description":"Place a unit somewhere not already occupied."
  },{
    "returns":"handle",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"FindSpawnEntityForTeam",
    "description":"Find a spawn point for the given team."
  },{
    "returns":"table",
    "args":[{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"handle"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"FindUnitsInLine",
    "description":"Find units that intersect the given line with the given flags."
  },{
    "returns":"table",
    "args":[{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"handle"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"FindUnitsInRadius",
    "description":"Finds the units in a given radius with the given flags."
  },{
    "returns":"void",
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"FireEntityIOInputNameOnly",
    "description":"Fire Entity's Action Input w/no data"
  },{
    "returns":"void",
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"FireEntityIOInputString",
    "description":"Fire Entity's Action Input with passed String - you own the memory"
  },{
    "returns":"void",
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"FireEntityIOInputVec",
    "description":"Fire Entity's Action Input with passed Vector - you own the memory"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"FireGameEvent",
    "description":"Fire a game event."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"FireGameEventLocal",
    "description":"Fire a game event without broadcasting to the client."
  },{
    "returns":"float",
    "args":[],
    "kind":"function",
    "name":"FrameTime",
    "description":"Get the time spent on the server in the last frame"
  },{
    "returns":"table",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetAbilityKeyValuesByName",
    "description":"Get ability data by ability name."
  },{
    "returns":"string",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetAbilityTextureNameForAbility",
    "description":"Gets the ability texture name for an ability"
  },{
    "returns":"int",
    "args":[],
    "kind":"function",
    "name":"GetActiveSpawnGroupHandle",
    "description":"Returns the currently active spawn group handle"
  },{
    "returns":"string",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetDedicatedServerKey",
    "description":"( version )"
  },{
    "returns":"string",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetDedicatedServerKeyV2",
    "description":"( version )"
  },{
    "returns":"<unknown>",
    "args":[{
        "type":"unsigned"
      }],
    "kind":"function",
    "name":"GetEntityIndexForTreeId",
    "description":"Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE."
  },{
    "returns":"int",
    "args":[],
    "kind":"function",
    "name":"GetFrameCount",
    "description":"Returns the engines current frame count"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"handle"
      }],
    "returns":"float",
    "name":"GetGroundHeight",
    "kind":"function"
  },{
    "returns":"Vector",
    "args":[{
        "type":"Vector"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"GetGroundPosition",
    "description":"Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset."
  },{
    "returns":"int",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetItemCost",
    "description":"Get the cost of an item by name."
  },{
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "returns":"int",
    "name":"GetItemDefOwnedCount",
    "kind":"function"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "returns":"int",
    "name":"GetItemDefQuantity",
    "kind":"function"
  },{
    "returns":"handle",
    "args":[],
    "kind":"function",
    "name":"GetListenServerHost",
    "description":"Get the local player on a listen server."
  },{
    "returns":"table",
    "args":[],
    "kind":"function",
    "name":"GetLobbyEventGameDetails",
    "description":"( )"
  },{
    "returns":"string",
    "args":[],
    "kind":"function",
    "name":"GetMapName",
    "description":"Get the name of the map."
  },{
    "returns":"float",
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetMaxOutputDelay",
    "description":"Get the longest delay for all events attached to an output"
  },{
    "returns":"Vector",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"GetPhysAngularVelocity",
    "description":"Get Angular Velocity for VPHYS or normal object. Returns a vector of the axis of rotation, multiplied by the degrees of rotation per second."
  },{
    "returns":"Vector",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"GetPhysVelocity",
    "description":"Get Velocity for VPHYS or normal object"
  },{
    "returns":"string",
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"GetPotentialNeutralItemDrop",
    "description":"Given the item tier and the team, roll for the name of a valid neutral item drop, considering previous drops and consumables."
  },{
    "returns":"string",
    "args":[],
    "kind":"function",
    "name":"GetSystemDate",
    "description":"Get the current real world date"
  },{
    "returns":"string",
    "args":[],
    "kind":"function",
    "name":"GetSystemTime",
    "description":"Get the current real world time"
  },{
    "returns":"double",
    "args":[],
    "kind":"function",
    "name":"GetSystemTimeMS",
    "description":"Get system time in milliseconds"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "returns":"Vector",
    "name":"GetTargetAOELocation",
    "kind":"function"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "returns":"Vector",
    "name":"GetTargetLinearLocation",
    "kind":"function"
  },{
    "returns":"int",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"GetTeamHeroKills",
    "description":"( int teamID )"
  },{
    "returns":"string",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"GetTeamName",
    "description":"( int teamID )"
  },{
    "returns":"int",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"GetTreeIdForEntityIndex",
    "description":"Given and entity index of a tree, get the tree id for use for use with with unit orders."
  },{
    "returns":"float",
    "args":[],
    "kind":"function",
    "name":"GetWorldMaxX",
    "description":"Gets the world's maximum X position."
  },{
    "returns":"float",
    "args":[],
    "kind":"function",
    "name":"GetWorldMaxY",
    "description":"Gets the world's maximum Y position."
  },{
    "returns":"float",
    "args":[],
    "kind":"function",
    "name":"GetWorldMinX",
    "description":"Gets the world's minimum X position."
  },{
    "returns":"float",
    "args":[],
    "kind":"function",
    "name":"GetWorldMinY",
    "description":"Gets the world's minimum Y position."
  },{
    "returns":"int",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"GetXPNeededToReachNextLevel",
    "description":"Get amount of XP required to reach the next level."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"InitLogFile",
    "description":"InitLogFile is deprecated. Print to the console for logging instead."
  },{
    "returns":"bool",
    "args":[],
    "kind":"function",
    "name":"IsClient",
    "description":"Returns true if this is lua running from the client.dll."
  },{
    "returns":"bool",
    "args":[],
    "kind":"function",
    "name":"IsDedicatedServer",
    "description":"Returns true if this server is a dedicated server."
  },{
    "returns":"bool",
    "args":[],
    "kind":"function",
    "name":"IsInToolsMode",
    "description":"Returns true if this is lua running within tools mode."
  },{
    "returns":"bool",
    "args":[{
        "type":"int"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"IsLocationVisible",
    "description":"Ask fog of war if a location is visible to a certain team (nTeamNumber, vLocation)."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"IsMangoTree",
    "description":"Is this entity a mango tree? (hEntity)."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"IsMarkedForDeletion",
    "description":"Returns true if the entity is valid and marked for deletion."
  },{
    "returns":"bool",
    "args":[],
    "kind":"function",
    "name":"IsServer",
    "description":"Returns true if this is lua running from the server.dll."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"IsUnitInValidPosition",
    "description":"Returns true if the unit is in a valid position in the gridnav."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"IsValidEntity",
    "description":"Checks to see if the given hScript is a valid entity"
  },{
    "returns":"Vector",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"LerpVectors",
    "description":"(vector,vector,float) lerp between two vectors by a float factor returning new vector"
  },{
    "returns":"void",
    "args":[{
        "type":"float"
      }],
    "kind":"function",
    "name":"LimitPathingSearchDepth",
    "description":"Set the limit on the pathfinding search space."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"LinkLuaModifier",
    "description":"Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType)."
  },{
    "returns":"int",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"ListenToGameEvent",
    "description":"Register as a listener for a game event from script."
  },{
    "returns":"table",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"LoadKeyValues",
    "description":"Creates a table from the specified keyvalues text file"
  },{
    "returns":"table",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"LoadKeyValuesFromString",
    "description":"Creates a table from the specified keyvalues string"
  },{
    "returns":"table",
    "args":[],
    "kind":"function",
    "name":"LocalTime",
    "description":"Get the current local time"
  },{
    "returns":"int",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"MakeStringToken",
    "description":"Checks to see if the given hScript is a valid entity"
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"ManuallyTriggerSpawnGroupCompletion",
    "description":"Triggers the creation of entities in a manually-completed spawn group"
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      },{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"MinimapEvent",
    "description":"Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration)."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"Msg",
    "description":"Print a message"
  },{
    "returns":"void",
    "args":[{
        "type":"bool"
      }],
    "kind":"function",
    "name":"PauseGame",
    "description":"Pause or unpause the game."
  },{
    "returns":"handle",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"PlayerInstanceFromIndex",
    "description":"Get a script instance of a player by index."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheEntityFromTable",
    "description":"Precache an entity from KeyValues in table"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheEntityListFromTable",
    "description":"Precache a list of entity KeyValues tables"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheItemByNameAsync",
    "description":"Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheItemByNameSync",
    "description":"Precaches a DOTA item by its dota_npc_items.txt name"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheModel",
    "description":"( modelName, context ) - Manually precache a single model"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheResource",
    "description":"Manually precache a single resource"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"PrecacheUnitByNameAsync",
    "description":"Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"PrecacheUnitByNameSync",
    "description":"Precaches a DOTA unit by its dota_npc_units.txt name"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheUnitFromTableAsync",
    "description":"Precaches a DOTA unit from a table of entity key values."
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheUnitFromTableSync",
    "description":"Precaches a DOTA unit from a table of entity key values."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"PrintLinkedConsoleMessage",
    "description":"Print a console message with a linked console command"
  },{
    "returns":"float",
    "args":[{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"RandomFloat",
    "description":"Get a random float within a range"
  },{
    "returns":"int",
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"RandomInt",
    "description":"Get a random int within a range"
  },{
    "returns":"Vector",
    "args":[{
        "type":"float"
      }],
    "kind":"function",
    "name":"RandomVector",
    "description":"Get a random 2D vector of the given length."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"RegisterCustomAnimationScriptForModel",
    "description":"Register a custom animation script to run when a model loads"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"RegisterSpawnGroupFilterProxy",
    "description":"Create a C proxy for a script-based spawn group filter"
  },{
    "returns":"void",
    "args":[],
    "kind":"function",
    "name":"ReloadMOTD",
    "description":"Reloads the MotD file"
  },{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      }],
    "returns":"float",
    "name":"RemapValClamped",
    "kind":"function"
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"RemoveFOWViewer",
    "description":"Remove temporary vision for a given team ( nTeamID, nViewerID )"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"RemoveSpawnGroupFilterProxy",
    "description":"Remove the C proxy for a script-based spawn group filter"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"ResolveNPCPositions",
    "description":"Check and fix units that have been assigned a position inside collision radius of other NPCs."
  },{
    "returns":"bool",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"RollPercentage",
    "description":"(int nPct)"
  },{
    "returns":"bool",
    "args":[{
        "type":"unsigned"
      },{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"RollPseudoRandomPercentage",
    "description":"( chance, pseudo random id, unit."
  },{
    "returns":"QAngle",
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"RotateOrientation",
    "description":"Rotate a QAngle by another QAngle."
  },{
    "returns":"Vector",
    "args":[{
        "type":"Vector"
      },{
        "type":"QAngle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"RotatePosition",
    "description":"Rotate a Vector around a point."
  },{
    "returns":"Quaternion",
    "args":[{
        "type":"Quaternion"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"RotateQuaternionByAxisAngle",
    "description":"(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis"
  },{
    "returns":"QAngle",
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"RotationDelta",
    "description":"Find the delta between two QAngles."
  },{
    "returns":"Vector",
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"RotationDeltaAsAngularVelocity",
    "description":"converts delta QAngle to an angular velocity Vector"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"Say",
    "description":"Have Entity say string, and teamOnly or not"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"ScreenShake",
    "description":"Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SendOverheadEventMessage",
    "description":"( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_*"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"SendToConsole",
    "description":"Send a string to the console as a client command"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"SendToServerConsole",
    "description":"Send a string to the console as a server command"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"SetOpvarFloatAll",
    "description":"Sets an opvar value for all players"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SetOpvarFloatPlayer",
    "description":"Sets an opvar value for a single player"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"SetPhysAngularVelocity",
    "description":"Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"SetQuestName",
    "description":"Set the current quest name."
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"SetQuestPhase",
    "description":"Set the current quest phase."
  },{
    "returns":"void",
    "args":[{
        "type":"ehandle"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"SetRenderingEnabled",
    "description":"Set rendering on/off for an ehandle"
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"SetTeamCustomHealthbarColor",
    "description":"( teamNumber, r, g, b )"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"ShowCustomHeaderMessage",
    "description":"( const char *pszMessage, int nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"ShowGenericPopup",
    "description":"Show a generic popup dialog for all players."
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"ShowGenericPopupToPlayer",
    "description":"Show a generic popup dialog to a specific player."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"ShowMessage",
    "description":"Print a hud message on all clients"
  },{
    "returns":"handle",
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"SpawnDOTAShopTriggerRadiusApproximate",
    "description":"(Vector vOrigin, float flRadius )"
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"SpawnEffigyOfUnitOrModel",
    "description":"Spawn an effigy of the target unit."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityFromTableAsynchronous",
    "description":"Asynchronously spawns a single entity from a table"
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityFromTableSynchronous",
    "description":"Synchronously spawns a single entity from a table"
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      },{
        "type":"bool"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityGroupFromTable",
    "description":"Hierarchically spawn an entity group from a set of spawn tables."
  },{
    "returns":"int",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityListFromTableAsynchronous",
    "description":"Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete"
  },{
    "returns":"handle",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityListFromTableSynchronous",
    "description":"Synchronously spawn an entity group from a list of spawn tables."
  },{
    "returns":"Quaternion",
    "args":[{
        "type":"Quaternion"
      },{
        "type":"Quaternion"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"SplineQuaternions",
    "description":"(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]"
  },{
    "returns":"Vector",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"SplineVectors",
    "description":"(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StartSoundEvent",
    "description":"Start a sound event"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"StartSoundEventFromPosition",
    "description":"Start a sound event from position"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"StartSoundEventFromPositionReliable",
    "description":"Start a sound event from position with reliable delivery"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"StartSoundEventFromPositionUnreliable",
    "description":"Start a sound event from position with optional delivery"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StartSoundEventReliable",
    "description":"Start a sound event with reliable delivery"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StartSoundEventUnreliable",
    "description":"Start a sound event with optional delivery"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"StopEffect",
    "description":"Pass entity and effect name"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"StopGlobalSound",
    "description":"Stop named sound for all players"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StopListeningToAllGameEvents",
    "description":"Stop listening to all game events within a specific context."
  },{
    "returns":"bool",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"StopListeningToGameEvent",
    "description":"Stop listening to a particular game event."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StopSoundEvent",
    "description":"Stops a sound event with optional delivery"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StopSoundOn",
    "description":"Stop named sound on Entity"
  },{
    "returns":"float",
    "args":[],
    "kind":"function",
    "name":"Time",
    "description":"Get the current server time"
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"TraceCollideable",
    "description":"Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal"
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"TraceHull",
    "description":"Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"TraceLine",
    "description":"Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"UTIL_MessageText",
    "description":"Sends colored text to one client."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"UTIL_MessageTextAll",
    "description":"Sends colored text to all clients."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UTIL_MessageTextAll_WithContext",
    "description":"Sends colored text to all clients. (Valid context keys: player_id, value, team_id)"
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UTIL_MessageText_WithContext",
    "description":"Sends colored text to one client. (Valid context keys: player_id, value, team_id)"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UTIL_Remove",
    "description":"Removes the specified entity"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UTIL_RemoveImmediate",
    "description":"Immediately removes the specified entity"
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"UTIL_ResetMessageText",
    "description":"Clear all message text on one client."
  },{
    "returns":"void",
    "args":[],
    "kind":"function",
    "name":"UTIL_ResetMessageTextAll",
    "description":"Clear all message text from all clients."
  },{
    "returns":"int",
    "args":[{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"UnitFilter",
    "description":"Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"UnloadSpawnGroup",
    "description":"Unload a spawn group by name"
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"UnloadSpawnGroupByHandle",
    "description":"Unload a spawn group by handle"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UpdateEventPoints",
    "description":"( hEventPointData )"
  },{
    "args":[{
        "type":"Vector"
      }],
    "returns":"QAngle",
    "name":"VectorAngles",
    "kind":"function"
  },{
    "returns":"QAngle",
    "args":[{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"VectorToAngles",
    "description":"Get Qangles (with no roll) for a Vector."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"Warning",
    "description":"Print a warning"
  },{
    "returns":"float",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"cvar_getf",
    "description":"Gets the value of the given cvar, as a float."
  },{
    "returns":"bool",
    "args":[{
        "type":"string"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"cvar_setf",
    "description":"Sets the value of the given cvar, as a float."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"rr_AddDecisionRule",
    "description":"Add a rule to the decision database."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"rr_CommitAIResponse",
    "description":"Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)"
  },{
    "returns":"handle",
    "args":[],
    "kind":"function",
    "name":"rr_GetResponseTargets",
    "description":"Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"rr_QueryBestResponse",
    "description":"Params: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found)."
  },{
    "enum":"AbilityLearnResult_t",
    "value":2,
    "kind":"constant",
    "name":"ABILITY_CANNOT_BE_UPGRADED_AT_MAX"
  },{
    "enum":"AbilityLearnResult_t",
    "value":1,
    "kind":"constant",
    "name":"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE"
  },{
    "enum":"AbilityLearnResult_t",
    "value":3,
    "kind":"constant",
    "name":"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL"
  },{
    "enum":"AbilityLearnResult_t",
    "value":0,
    "kind":"constant",
    "name":"ABILITY_CAN_BE_UPGRADED"
  },{
    "enum":"AbilityLearnResult_t",
    "value":4,
    "kind":"constant",
    "name":"ABILITY_NOT_LEARNABLE"
  },{
    "enum":"ABILITY_TYPES",
    "value":2,
    "kind":"constant",
    "name":"ABILITY_TYPE_ATTRIBUTES"
  },{
    "enum":"ABILITY_TYPES",
    "value":0,
    "kind":"constant",
    "name":"ABILITY_TYPE_BASIC"
  },{
    "enum":"ABILITY_TYPES",
    "value":3,
    "kind":"constant",
    "name":"ABILITY_TYPE_HIDDEN"
  },{
    "enum":"ABILITY_TYPES",
    "value":1,
    "kind":"constant",
    "name":"ABILITY_TYPE_ULTIMATE"
  },{
    "value":1,
    "kind":"constant",
    "name":"ACTIVATE_TYPE_DATAUPDATE_CREATION"
  },{
    "value":0,
    "kind":"constant",
    "name":"ACTIVATE_TYPE_INITIAL_CREATION"
  },{
    "value":2,
    "kind":"constant",
    "name":"ACTIVATE_TYPE_ONRESTORE"
  },{
    "value":137,
    "kind":"constant",
    "name":"ACT_180_LEFT"
  },{
    "value":138,
    "kind":"constant",
    "name":"ACT_180_RIGHT"
  },{
    "value":139,
    "kind":"constant",
    "name":"ACT_90_LEFT"
  },{
    "value":140,
    "kind":"constant",
    "name":"ACT_90_RIGHT"
  },{
    "value":48,
    "kind":"constant",
    "name":"ACT_ALIEN_BURROW_IDLE"
  },{
    "value":49,
    "kind":"constant",
    "name":"ACT_ALIEN_BURROW_OUT"
  },{
    "value":968,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_BACK"
  },{
    "value":967,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_FORWARD"
  },{
    "value":969,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_LEFT"
  },{
    "value":970,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_RIGHT"
  },{
    "value":71,
    "kind":"constant",
    "name":"ACT_ARM"
  },{
    "value":178,
    "kind":"constant",
    "name":"ACT_BARNACLE_CHEW"
  },{
    "value":177,
    "kind":"constant",
    "name":"ACT_BARNACLE_CHOMP"
  },{
    "value":175,
    "kind":"constant",
    "name":"ACT_BARNACLE_HIT"
  },{
    "value":176,
    "kind":"constant",
    "name":"ACT_BARNACLE_PULL"
  },{
    "value":64,
    "kind":"constant",
    "name":"ACT_BIG_FLINCH"
  },{
    "value":384,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_BACK"
  },{
    "value":385,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_BACK_ENTRY"
  },{
    "value":386,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_BACK_EXIT"
  },{
    "value":381,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_LEFT"
  },{
    "value":382,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_LEFT_ENTRY"
  },{
    "value":383,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_LEFT_EXIT"
  },{
    "value":394,
    "kind":"constant",
    "name":"ACT_BUSY_QUEUE"
  },{
    "value":390,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_CHAIR"
  },{
    "value":391,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_CHAIR_ENTRY"
  },{
    "value":392,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_CHAIR_EXIT"
  },{
    "value":387,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_GROUND"
  },{
    "value":388,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_GROUND_ENTRY"
  },{
    "value":389,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_GROUND_EXIT"
  },{
    "value":393,
    "kind":"constant",
    "name":"ACT_BUSY_STAND"
  },{
    "value":35,
    "kind":"constant",
    "name":"ACT_CLIMB_DISMOUNT"
  },{
    "value":34,
    "kind":"constant",
    "name":"ACT_CLIMB_DOWN"
  },{
    "value":33,
    "kind":"constant",
    "name":"ACT_CLIMB_UP"
  },{
    "value":110,
    "kind":"constant",
    "name":"ACT_COMBAT_IDLE"
  },{
    "value":3,
    "kind":"constant",
    "name":"ACT_COVER"
  },{
    "value":5,
    "kind":"constant",
    "name":"ACT_COVER_LOW"
  },{
    "value":346,
    "kind":"constant",
    "name":"ACT_COVER_LOW_RPG"
  },{
    "value":4,
    "kind":"constant",
    "name":"ACT_COVER_MED"
  },{
    "value":296,
    "kind":"constant",
    "name":"ACT_COVER_PISTOL_LOW"
  },{
    "value":297,
    "kind":"constant",
    "name":"ACT_COVER_SMG1_LOW"
  },{
    "value":62,
    "kind":"constant",
    "name":"ACT_COWER"
  },{
    "value":474,
    "kind":"constant",
    "name":"ACT_CROSSBOW_DRAW_UNLOADED"
  },{
    "value":44,
    "kind":"constant",
    "name":"ACT_CROUCH"
  },{
    "value":45,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE"
  },{
    "value":105,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE_AGITATED"
  },{
    "value":104,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE_AIM_STIMULATED"
  },{
    "value":103,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE_STIMULATED"
  },{
    "value":439,
    "kind":"constant",
    "name":"ACT_CROUCHING_GRENADEIDLE"
  },{
    "value":440,
    "kind":"constant",
    "name":"ACT_CROUCHING_GRENADEREADY"
  },{
    "value":441,
    "kind":"constant",
    "name":"ACT_CROUCHING_PRIMARYATTACK"
  },{
    "value":458,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_ATTACK"
  },{
    "value":456,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_DOWN"
  },{
    "value":459,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_KNOCKBACK"
  },{
    "value":455,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_UP"
  },{
    "value":457,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_UP_IDLE"
  },{
    "value":881,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_AUTOGUN"
  },{
    "value":890,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_DUAL"
  },{
    "value":896,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_RIFLE"
  },{
    "value":894,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_SHOTGUN"
  },{
    "value":1016,
    "kind":"constant",
    "name":"ACT_CSGO_ALIVE_LOOP"
  },{
    "value":1008,
    "kind":"constant",
    "name":"ACT_CSGO_CATCH"
  },{
    "value":1022,
    "kind":"constant",
    "name":"ACT_CSGO_CLIMB_LADDER"
  },{
    "value":993,
    "kind":"constant",
    "name":"ACT_CSGO_DEFUSE"
  },{
    "value":994,
    "kind":"constant",
    "name":"ACT_CSGO_DEFUSE_WITH_KIT"
  },{
    "value":1007,
    "kind":"constant",
    "name":"ACT_CSGO_DEPLOY"
  },{
    "value":1026,
    "kind":"constant",
    "name":"ACT_CSGO_EXIT_LADDER_BOTTOM"
  },{
    "value":1025,
    "kind":"constant",
    "name":"ACT_CSGO_EXIT_LADDER_TOP"
  },{
    "value":1021,
    "kind":"constant",
    "name":"ACT_CSGO_FALL"
  },{
    "value":996,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_PRIMARY"
  },{
    "value":997,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_PRIMARY_OPT_1"
  },{
    "value":998,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_PRIMARY_OPT_2"
  },{
    "value":999,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_SECONDARY"
  },{
    "value":1000,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_SECONDARY_OPT_1"
  },{
    "value":1001,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_SECONDARY_OPT_2"
  },{
    "value":995,
    "kind":"constant",
    "name":"ACT_CSGO_FLASHBANG_REACTION"
  },{
    "value":1017,
    "kind":"constant",
    "name":"ACT_CSGO_FLINCH"
  },{
    "value":1018,
    "kind":"constant",
    "name":"ACT_CSGO_FLINCH_HEAD"
  },{
    "value":1019,
    "kind":"constant",
    "name":"ACT_CSGO_FLINCH_MOLOTOV"
  },{
    "value":1015,
    "kind":"constant",
    "name":"ACT_CSGO_IDLE_ADJUST_STOPPEDMOVING"
  },{
    "value":1014,
    "kind":"constant",
    "name":"ACT_CSGO_IDLE_TURN_BALANCEADJUST"
  },{
    "value":1020,
    "kind":"constant",
    "name":"ACT_CSGO_JUMP"
  },{
    "value":1024,
    "kind":"constant",
    "name":"ACT_CSGO_LAND_HEAVY"
  },{
    "value":1023,
    "kind":"constant",
    "name":"ACT_CSGO_LAND_LIGHT"
  },{
    "value":992,
    "kind":"constant",
    "name":"ACT_CSGO_NULL"
  },{
    "value":1006,
    "kind":"constant",
    "name":"ACT_CSGO_OPERATE"
  },{
    "value":1027,
    "kind":"constant",
    "name":"ACT_CSGO_PARACHUTE"
  },{
    "value":1013,
    "kind":"constant",
    "name":"ACT_CSGO_PLANT_BOMB"
  },{
    "value":1002,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD"
  },{
    "value":1005,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD_END"
  },{
    "value":1004,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD_LOOP"
  },{
    "value":1003,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD_START"
  },{
    "value":1010,
    "kind":"constant",
    "name":"ACT_CSGO_SILENCER_ATTACH"
  },{
    "value":1009,
    "kind":"constant",
    "name":"ACT_CSGO_SILENCER_DETACH"
  },{
    "value":1028,
    "kind":"constant",
    "name":"ACT_CSGO_TAUNT"
  },{
    "value":1011,
    "kind":"constant",
    "name":"ACT_CSGO_TWITCH"
  },{
    "value":1012,
    "kind":"constant",
    "name":"ACT_CSGO_TWITCH_BUYZONE"
  },{
    "value":471,
    "kind":"constant",
    "name":"ACT_DEPLOY"
  },{
    "value":472,
    "kind":"constant",
    "name":"ACT_DEPLOY_IDLE"
  },{
    "value":21,
    "kind":"constant",
    "name":"ACT_DIEBACKWARD"
  },{
    "value":22,
    "kind":"constant",
    "name":"ACT_DIEFORWARD"
  },{
    "value":24,
    "kind":"constant",
    "name":"ACT_DIERAGDOLL"
  },{
    "value":20,
    "kind":"constant",
    "name":"ACT_DIESIMPLE"
  },{
    "value":23,
    "kind":"constant",
    "name":"ACT_DIEVIOLENT"
  },{
    "value":117,
    "kind":"constant",
    "name":"ACT_DIE_BACKSHOT"
  },{
    "value":404,
    "kind":"constant",
    "name":"ACT_DIE_BACKSIDE"
  },{
    "value":396,
    "kind":"constant",
    "name":"ACT_DIE_BARNACLE_SWALLOW"
  },{
    "value":115,
    "kind":"constant",
    "name":"ACT_DIE_CHESTSHOT"
  },{
    "value":990,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH"
  },{
    "value":408,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_BACKSIDE"
  },{
    "value":406,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_FRONTSIDE"
  },{
    "value":991,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_HEADSHOT"
  },{
    "value":409,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_LEFTSIDE"
  },{
    "value":407,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_RIGHTSIDE"
  },{
    "value":402,
    "kind":"constant",
    "name":"ACT_DIE_FRONTSIDE"
  },{
    "value":116,
    "kind":"constant",
    "name":"ACT_DIE_GUTSHOT"
  },{
    "value":114,
    "kind":"constant",
    "name":"ACT_DIE_HEADSHOT"
  },{
    "value":410,
    "kind":"constant",
    "name":"ACT_DIE_INCAP"
  },{
    "value":405,
    "kind":"constant",
    "name":"ACT_DIE_LEFTSIDE"
  },{
    "value":403,
    "kind":"constant",
    "name":"ACT_DIE_RIGHTSIDE"
  },{
    "value":988,
    "kind":"constant",
    "name":"ACT_DIE_STAND"
  },{
    "value":411,
    "kind":"constant",
    "name":"ACT_DIE_STANDING"
  },{
    "value":989,
    "kind":"constant",
    "name":"ACT_DIE_STAND_HEADSHOT"
  },{
    "value":72,
    "kind":"constant",
    "name":"ACT_DISARM"
  },{
    "value":416,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ANTLION"
  },{
    "value":415,
    "kind":"constant",
    "name":"ACT_DI_ALYX_HEADCRAB_MELEE"
  },{
    "value":413,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_MELEE"
  },{
    "value":418,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_SHOTGUN26"
  },{
    "value":417,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_SHOTGUN64"
  },{
    "value":414,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_TORSO_MELEE"
  },{
    "enum":"GameActivity_t",
    "value":1580,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END"
  },{
    "enum":"GameActivity_t",
    "value":1572,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START"
  },{
    "enum":"GameActivity_t",
    "value":1573,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CONCOCTION"
  },{
    "enum":"GameActivity_t",
    "value":1579,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW"
  },{
    "enum":"GameActivity_t",
    "value":1627,
    "kind":"constant",
    "name":"ACT_DOTA_AMBUSH"
  },{
    "enum":"GameActivity_t",
    "value":1677,
    "kind":"constant",
    "name":"ACT_DOTA_ANCESTRAL_SPIRIT"
  },{
    "value":1787,
    "kind":"constant",
    "name":"ACT_DOTA_ARCANA_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1682,
    "kind":"constant",
    "name":"ACT_DOTA_ARCTIC_BURN_END"
  },{
    "enum":"GameActivity_t",
    "value":1661,
    "kind":"constant",
    "name":"ACT_DOTA_AREA_DENY"
  },{
    "enum":"GameActivity_t",
    "value":1503,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK"
  },{
    "enum":"GameActivity_t",
    "value":1504,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK2"
  },{
    "enum":"GameActivity_t",
    "value":1505,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK_EVENT"
  },{
    "enum":"GameActivity_t",
    "value":1705,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK_EVENT_BASH"
  },{
    "value":1763,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1707,
    "kind":"constant",
    "name":"ACT_DOTA_AW_MAGNETIC_FIELD"
  },{
    "value":1780,
    "kind":"constant",
    "name":"ACT_DOTA_BATTLEPASS_IDLE"
  },{
    "enum":"GameActivity_t",
    "value":1614,
    "kind":"constant",
    "name":"ACT_DOTA_BELLYACHE_END"
  },{
    "enum":"GameActivity_t",
    "value":1613,
    "kind":"constant",
    "name":"ACT_DOTA_BELLYACHE_LOOP"
  },{
    "enum":"GameActivity_t",
    "value":1612,
    "kind":"constant",
    "name":"ACT_DOTA_BELLYACHE_START"
  },{
    "enum":"GameActivity_t",
    "value":1732,
    "kind":"constant",
    "name":"ACT_DOTA_BLINK_DAGGER"
  },{
    "enum":"GameActivity_t",
    "value":1733,
    "kind":"constant",
    "name":"ACT_DOTA_BLINK_DAGGER_END"
  },{
    "enum":"GameActivity_t",
    "value":1640,
    "kind":"constant",
    "name":"ACT_DOTA_BRIDGE_DESTROY"
  },{
    "enum":"GameActivity_t",
    "value":1650,
    "kind":"constant",
    "name":"ACT_DOTA_BRIDGE_THREAT"
  },{
    "enum":"GameActivity_t",
    "value":1644,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_RAGE"
  },{
    "enum":"GameActivity_t",
    "value":1645,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_RAGE_OUT"
  },{
    "enum":"GameActivity_t",
    "value":1646,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_SMASH"
  },{
    "enum":"GameActivity_t",
    "value":1647,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_SMASH_OUT"
  },{
    "enum":"GameActivity_t",
    "value":1599,
    "kind":"constant",
    "name":"ACT_DOTA_CANCEL_SIREN_SONG"
  },{
    "enum":"GameActivity_t",
    "value":1533,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE"
  },{
    "enum":"GameActivity_t",
    "value":1717,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE_CARD"
  },{
    "enum":"GameActivity_t",
    "value":1698,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE_PET"
  },{
    "enum":"GameActivity_t",
    "value":1706,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE_RARE"
  },{
    "value":1764,
    "kind":"constant",
    "name":"ACT_DOTA_CAST1_STATUE"
  },{
    "value":1769,
    "kind":"constant",
    "name":"ACT_DOTA_CAST2_STATUE"
  },{
    "value":1765,
    "kind":"constant",
    "name":"ACT_DOTA_CAST3_STATUE"
  },{
    "value":1766,
    "kind":"constant",
    "name":"ACT_DOTA_CAST4_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1510,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_1"
  },{
    "enum":"GameActivity_t",
    "value":1540,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_1_END"
  },{
    "enum":"GameActivity_t",
    "value":1511,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2"
  },{
    "enum":"GameActivity_t",
    "value":1748,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ALLY"
  },{
    "enum":"GameActivity_t",
    "value":1541,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_END"
  },{
    "enum":"GameActivity_t",
    "value":1653,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL"
  },{
    "enum":"GameActivity_t",
    "value":1654,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END"
  },{
    "enum":"GameActivity_t",
    "value":1652,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START"
  },{
    "enum":"GameActivity_t",
    "value":1512,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_3"
  },{
    "enum":"GameActivity_t",
    "value":1542,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_3_END"
  },{
    "enum":"GameActivity_t",
    "value":1513,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_4"
  },{
    "enum":"GameActivity_t",
    "value":1543,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_4_END"
  },{
    "enum":"GameActivity_t",
    "value":1514,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_5"
  },{
    "enum":"GameActivity_t",
    "value":1515,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_6"
  },{
    "enum":"GameActivity_t",
    "value":1598,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_7"
  },{
    "enum":"GameActivity_t",
    "value":1547,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_ROT"
  },{
    "enum":"GameActivity_t",
    "value":1585,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ALACRITY"
  },{
    "enum":"GameActivity_t",
    "value":1741,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ALACRITY_ORB"
  },{
    "enum":"GameActivity_t",
    "value":1702,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_BURROW_END"
  },{
    "enum":"GameActivity_t",
    "value":1586,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_CHAOS_METEOR"
  },{
    "enum":"GameActivity_t",
    "value":1742,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_CHAOS_METEOR_ORB"
  },{
    "enum":"GameActivity_t",
    "value":1581,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_COLD_SNAP"
  },{
    "enum":"GameActivity_t",
    "value":1737,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_COLD_SNAP_ORB"
  },{
    "enum":"GameActivity_t",
    "value":1590,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_DEAFENING_BLAST"
  },{
    "enum":"GameActivity_t",
    "value":1746,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_DEAFENING_BLAST_ORB"
  },{
    "enum":"GameActivity_t",
    "value":1538,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_DRAGONBREATH"
  },{
    "enum":"GameActivity_t",
    "value":1584,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_EMP"
  },{
    "enum":"GameActivity_t",
    "value":1740,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_EMP_ORB"
  },{
    "enum":"GameActivity_t",
    "value":1588,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_FORGE_SPIRIT"
  },{
    "enum":"GameActivity_t",
    "value":1744,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_FORGE_SPIRIT_ORB"
  },{
    "enum":"GameActivity_t",
    "value":1708,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_GHOST_SHIP"
  },{
    "enum":"GameActivity_t",
    "value":1582,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_GHOST_WALK"
  },{
    "enum":"GameActivity_t",
    "value":1738,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_GHOST_WALK_ORB"
  },{
    "enum":"GameActivity_t",
    "value":1589,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ICE_WALL"
  },{
    "enum":"GameActivity_t",
    "value":1745,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ICE_WALL_ORB"
  },{
    "enum":"GameActivity_t",
    "value":1564,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_LIFE_BREAK_END"
  },{
    "enum":"GameActivity_t",
    "value":1563,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_LIFE_BREAK_START"
  },{
    "enum":"GameActivity_t",
    "value":1597,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_REFRACTION"
  },{
    "value":1779,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1587,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_SUN_STRIKE"
  },{
    "enum":"GameActivity_t",
    "value":1743,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_SUN_STRIKE_ORB"
  },{
    "enum":"GameActivity_t",
    "value":1583,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_TORNADO"
  },{
    "enum":"GameActivity_t",
    "value":1739,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_TORNADO_ORB"
  },{
    "enum":"GameActivity_t",
    "value":1562,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_WILD_AXES_END"
  },{
    "enum":"GameActivity_t",
    "value":1611,
    "kind":"constant",
    "name":"ACT_DOTA_CENTAUR_STAMPEDE"
  },{
    "enum":"GameActivity_t",
    "value":1520,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_1"
  },{
    "enum":"GameActivity_t",
    "value":1521,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_2"
  },{
    "enum":"GameActivity_t",
    "value":1522,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_3"
  },{
    "enum":"GameActivity_t",
    "value":1523,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_4"
  },{
    "enum":"GameActivity_t",
    "value":1524,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_5"
  },{
    "enum":"GameActivity_t",
    "value":1525,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_6"
  },{
    "enum":"GameActivity_t",
    "value":1600,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_7"
  },{
    "enum":"GameActivity_t",
    "value":1526,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_1"
  },{
    "enum":"GameActivity_t",
    "value":1527,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_2"
  },{
    "enum":"GameActivity_t",
    "value":1528,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_3"
  },{
    "enum":"GameActivity_t",
    "value":1529,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_4"
  },{
    "enum":"GameActivity_t",
    "value":1530,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_5"
  },{
    "enum":"GameActivity_t",
    "value":1531,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_6"
  },{
    "value":1783,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1673,
    "kind":"constant",
    "name":"ACT_DOTA_CHILLING_TOUCH"
  },{
    "enum":"GameActivity_t",
    "value":1671,
    "kind":"constant",
    "name":"ACT_DOTA_COLD_FEET"
  },{
    "enum":"GameActivity_t",
    "value":1532,
    "kind":"constant",
    "name":"ACT_DOTA_CONSTANT_LAYER"
  },{
    "value":1775,
    "kind":"constant",
    "name":"ACT_DOTA_CRATER_CLOSED"
  },{
    "value":1776,
    "kind":"constant",
    "name":"ACT_DOTA_CRATER_OPEN"
  },{
    "enum":"GameActivity_t",
    "value":1734,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_ATTACK"
  },{
    "enum":"GameActivity_t",
    "value":1736,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_DIE"
  },{
    "enum":"GameActivity_t",
    "value":1757,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_HIGH_FIVE"
  },{
    "enum":"GameActivity_t",
    "value":1735,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_IDLE"
  },{
    "enum":"GameActivity_t",
    "value":1755,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_IDLE_RARE"
  },{
    "enum":"GameActivity_t",
    "value":1756,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_TAUNT"
  },{
    "enum":"GameActivity_t",
    "value":1651,
    "kind":"constant",
    "name":"ACT_DOTA_DAGON"
  },{
    "enum":"GameActivity_t",
    "value":1642,
    "kind":"constant",
    "name":"ACT_DOTA_DEATH_BY_SNIPER"
  },{
    "enum":"GameActivity_t",
    "value":1592,
    "kind":"constant",
    "name":"ACT_DOTA_DEFEAT"
  },{
    "enum":"GameActivity_t",
    "value":1711,
    "kind":"constant",
    "name":"ACT_DOTA_DEFEAT_START"
  },{
    "value":1786,
    "kind":"constant",
    "name":"ACT_DOTA_DEFEAT_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1506,
    "kind":"constant",
    "name":"ACT_DOTA_DIE"
  },{
    "value":1777,
    "kind":"constant",
    "name":"ACT_DOTA_DIE_ILLUSION"
  },{
    "enum":"GameActivity_t",
    "value":1548,
    "kind":"constant",
    "name":"ACT_DOTA_DIE_SPECIAL"
  },{
    "enum":"GameActivity_t",
    "value":1509,
    "kind":"constant",
    "name":"ACT_DOTA_DISABLED"
  },{
    "enum":"GameActivity_t",
    "value":1712,
    "kind":"constant",
    "name":"ACT_DOTA_DP_SPIRIT_SIPHON"
  },{
    "enum":"GameActivity_t",
    "value":1570,
    "kind":"constant",
    "name":"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK"
  },{
    "enum":"GameActivity_t",
    "value":1539,
    "kind":"constant",
    "name":"ACT_DOTA_ECHO_SLAM"
  },{
    "enum":"GameActivity_t",
    "value":1674,
    "kind":"constant",
    "name":"ACT_DOTA_ENFEEBLE"
  },{
    "enum":"GameActivity_t",
    "value":1714,
    "kind":"constant",
    "name":"ACT_DOTA_ES_STONE_CALLER"
  },{
    "enum":"GameActivity_t",
    "value":1675,
    "kind":"constant",
    "name":"ACT_DOTA_FATAL_BONDS"
  },{
    "enum":"GameActivity_t",
    "value":1508,
    "kind":"constant",
    "name":"ACT_DOTA_FLAIL"
  },{
    "value":1768,
    "kind":"constant",
    "name":"ACT_DOTA_FLAIL_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1685,
    "kind":"constant",
    "name":"ACT_DOTA_FLEE"
  },{
    "enum":"GameActivity_t",
    "value":1507,
    "kind":"constant",
    "name":"ACT_DOTA_FLINCH"
  },{
    "enum":"GameActivity_t",
    "value":1602,
    "kind":"constant",
    "name":"ACT_DOTA_FORCESTAFF_END"
  },{
    "value":1781,
    "kind":"constant",
    "name":"ACT_DOTA_FORCESTAFF_STATUE"
  },{
    "value":1789,
    "kind":"constant",
    "name":"ACT_DOTA_FRONTPAGE"
  },{
    "enum":"GameActivity_t",
    "value":1630,
    "kind":"constant",
    "name":"ACT_DOTA_FRUSTRATION"
  },{
    "enum":"GameActivity_t",
    "value":1709,
    "kind":"constant",
    "name":"ACT_DOTA_FXANIM"
  },{
    "enum":"GameActivity_t",
    "value":1728,
    "kind":"constant",
    "name":"ACT_DOTA_GENERIC_CHANNEL_1"
  },{
    "enum":"GameActivity_t",
    "value":1754,
    "kind":"constant",
    "name":"ACT_DOTA_GENERIC_CHANNEL_1_START"
  },{
    "enum":"GameActivity_t",
    "value":1625,
    "kind":"constant",
    "name":"ACT_DOTA_GESTURE_ACCENT"
  },{
    "enum":"GameActivity_t",
    "value":1624,
    "kind":"constant",
    "name":"ACT_DOTA_GESTURE_POINT"
  },{
    "enum":"GameActivity_t",
    "value":1690,
    "kind":"constant",
    "name":"ACT_DOTA_GREET"
  },{
    "enum":"GameActivity_t",
    "value":1621,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_BLINK_BONE"
  },{
    "enum":"GameActivity_t",
    "value":1617,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_CAST"
  },{
    "enum":"GameActivity_t",
    "value":1620,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_HOOK_END"
  },{
    "enum":"GameActivity_t",
    "value":1619,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_HOOK_START"
  },{
    "enum":"GameActivity_t",
    "value":1618,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY"
  },{
    "enum":"GameActivity_t",
    "value":1730,
    "kind":"constant",
    "name":"ACT_DOTA_GS_INK_CREATURE"
  },{
    "enum":"GameActivity_t",
    "value":1729,
    "kind":"constant",
    "name":"ACT_DOTA_GS_SOUL_CHAIN"
  },{
    "enum":"GameActivity_t",
    "value":1672,
    "kind":"constant",
    "name":"ACT_DOTA_ICE_VORTEX"
  },{
    "enum":"GameActivity_t",
    "value":1500,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE"
  },{
    "enum":"GameActivity_t",
    "value":1636,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_IMPATIENT"
  },{
    "enum":"GameActivity_t",
    "value":1648,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP"
  },{
    "enum":"GameActivity_t",
    "value":1501,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_RARE"
  },{
    "enum":"GameActivity_t",
    "value":1622,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_SLEEPING"
  },{
    "enum":"GameActivity_t",
    "value":1639,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_SLEEPING_END"
  },{
    "value":1762,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1623,
    "kind":"constant",
    "name":"ACT_DOTA_INTRO"
  },{
    "enum":"GameActivity_t",
    "value":1649,
    "kind":"constant",
    "name":"ACT_DOTA_INTRO_LOOP"
  },{
    "enum":"GameActivity_t",
    "value":1697,
    "kind":"constant",
    "name":"ACT_DOTA_ITEM_DROP"
  },{
    "enum":"GameActivity_t",
    "value":1628,
    "kind":"constant",
    "name":"ACT_DOTA_ITEM_LOOK"
  },{
    "enum":"GameActivity_t",
    "value":1696,
    "kind":"constant",
    "name":"ACT_DOTA_ITEM_PICKUP"
  },{
    "enum":"GameActivity_t",
    "value":1575,
    "kind":"constant",
    "name":"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP"
  },{
    "enum":"GameActivity_t",
    "value":1574,
    "kind":"constant",
    "name":"ACT_DOTA_JAKIRO_LIQUIDFIRE_START"
  },{
    "enum":"GameActivity_t",
    "value":1535,
    "kind":"constant",
    "name":"ACT_DOTA_KILLTAUNT"
  },{
    "enum":"GameActivity_t",
    "value":1679,
    "kind":"constant",
    "name":"ACT_DOTA_KINETIC_FIELD"
  },{
    "enum":"GameActivity_t",
    "value":1578,
    "kind":"constant",
    "name":"ACT_DOTA_LASSO_LOOP"
  },{
    "enum":"GameActivity_t",
    "value":1658,
    "kind":"constant",
    "name":"ACT_DOTA_LEAP_STUN"
  },{
    "enum":"GameActivity_t",
    "value":1659,
    "kind":"constant",
    "name":"ACT_DOTA_LEAP_SWIPE"
  },{
    "enum":"GameActivity_t",
    "value":1703,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_ASSIMILATE"
  },{
    "enum":"GameActivity_t",
    "value":1704,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_EJECT"
  },{
    "enum":"GameActivity_t",
    "value":1576,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_INFEST"
  },{
    "enum":"GameActivity_t",
    "value":1577,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_INFEST_END"
  },{
    "enum":"GameActivity_t",
    "value":1567,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS"
  },{
    "enum":"GameActivity_t",
    "value":1566,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_RAGE"
  },{
    "enum":"GameActivity_t",
    "value":1601,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT"
  },{
    "value":1771,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT_FRONTPAGE"
  },{
    "value":1772,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT_FRONTPAGE_POPUP"
  },{
    "enum":"GameActivity_t",
    "value":1683,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT_RARE"
  },{
    "value":1785,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1643,
    "kind":"constant",
    "name":"ACT_DOTA_LOOK_AROUND"
  },{
    "enum":"GameActivity_t",
    "value":1606,
    "kind":"constant",
    "name":"ACT_DOTA_MAGNUS_SKEWER_END"
  },{
    "enum":"GameActivity_t",
    "value":1605,
    "kind":"constant",
    "name":"ACT_DOTA_MAGNUS_SKEWER_START"
  },{
    "enum":"GameActivity_t",
    "value":1607,
    "kind":"constant",
    "name":"ACT_DOTA_MEDUSA_STONE_GAZE"
  },{
    "enum":"GameActivity_t",
    "value":1676,
    "kind":"constant",
    "name":"ACT_DOTA_MIDNIGHT_PULSE"
  },{
    "enum":"GameActivity_t",
    "value":1681,
    "kind":"constant",
    "name":"ACT_DOTA_MINI_TAUNT"
  },{
    "enum":"GameActivity_t",
    "value":1722,
    "kind":"constant",
    "name":"ACT_DOTA_MK_FUR_ARMY"
  },{
    "enum":"GameActivity_t",
    "value":1723,
    "kind":"constant",
    "name":"ACT_DOTA_MK_SPRING_CAST"
  },{
    "enum":"GameActivity_t",
    "value":1719,
    "kind":"constant",
    "name":"ACT_DOTA_MK_SPRING_END"
  },{
    "enum":"GameActivity_t",
    "value":1718,
    "kind":"constant",
    "name":"ACT_DOTA_MK_SPRING_SOAR"
  },{
    "enum":"GameActivity_t",
    "value":1715,
    "kind":"constant",
    "name":"ACT_DOTA_MK_STRIKE"
  },{
    "enum":"GameActivity_t",
    "value":1721,
    "kind":"constant",
    "name":"ACT_DOTA_MK_TREE_END"
  },{
    "enum":"GameActivity_t",
    "value":1720,
    "kind":"constant",
    "name":"ACT_DOTA_MK_TREE_SOAR"
  },{
    "enum":"GameActivity_t",
    "value":1724,
    "kind":"constant",
    "name":"ACT_DOTA_NECRO_GHOST_SHROUD"
  },{
    "enum":"GameActivity_t",
    "value":1660,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_INTRO_LEAP"
  },{
    "enum":"GameActivity_t",
    "value":1657,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_END"
  },{
    "enum":"GameActivity_t",
    "value":1656,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_LOOP"
  },{
    "enum":"GameActivity_t",
    "value":1655,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_START"
  },{
    "enum":"GameActivity_t",
    "value":1662,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_TO_STUN"
  },{
    "enum":"GameActivity_t",
    "value":1565,
    "kind":"constant",
    "name":"ACT_DOTA_NIGHTSTALKER_TRANSITION"
  },{
    "enum":"GameActivity_t",
    "value":1747,
    "kind":"constant",
    "name":"ACT_DOTA_NOTICE"
  },{
    "enum":"GameActivity_t",
    "value":1516,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_1"
  },{
    "enum":"GameActivity_t",
    "value":1517,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_2"
  },{
    "enum":"GameActivity_t",
    "value":1518,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_3"
  },{
    "enum":"GameActivity_t",
    "value":1519,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_4"
  },{
    "enum":"GameActivity_t",
    "value":1725,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ARCANA"
  },{
    "enum":"GameActivity_t",
    "value":1751,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_LOADOUT"
  },{
    "enum":"GameActivity_t",
    "value":1701,
    "kind":"constant",
    "name":"ACT_DOTA_PET_LEVEL"
  },{
    "enum":"GameActivity_t",
    "value":1699,
    "kind":"constant",
    "name":"ACT_DOTA_PET_WARD_OBSERVER"
  },{
    "enum":"GameActivity_t",
    "value":1700,
    "kind":"constant",
    "name":"ACT_DOTA_PET_WARD_SENTRY"
  },{
    "enum":"GameActivity_t",
    "value":1603,
    "kind":"constant",
    "name":"ACT_DOTA_POOF_END"
  },{
    "enum":"GameActivity_t",
    "value":1635,
    "kind":"constant",
    "name":"ACT_DOTA_PRESENT_ITEM"
  },{
    "enum":"GameActivity_t",
    "value":1549,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_BATTERYASSAULT"
  },{
    "enum":"GameActivity_t",
    "value":1553,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_END"
  },{
    "enum":"GameActivity_t",
    "value":1552,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP"
  },{
    "enum":"GameActivity_t",
    "value":1551,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_START"
  },{
    "enum":"GameActivity_t",
    "value":1550,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_POWERCOGS"
  },{
    "enum":"GameActivity_t",
    "value":1663,
    "kind":"constant",
    "name":"ACT_DOTA_RAZE_1"
  },{
    "enum":"GameActivity_t",
    "value":1664,
    "kind":"constant",
    "name":"ACT_DOTA_RAZE_2"
  },{
    "enum":"GameActivity_t",
    "value":1665,
    "kind":"constant",
    "name":"ACT_DOTA_RAZE_3"
  },{
    "enum":"GameActivity_t",
    "value":1610,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_END"
  },{
    "enum":"GameActivity_t",
    "value":1609,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_LOOP"
  },{
    "enum":"GameActivity_t",
    "value":1634,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_LOOP_END"
  },{
    "enum":"GameActivity_t",
    "value":1608,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_START"
  },{
    "value":1788,
    "kind":"constant",
    "name":"ACT_DOTA_REWARD_CELL"
  },{
    "enum":"GameActivity_t",
    "value":1615,
    "kind":"constant",
    "name":"ACT_DOTA_ROQUELAIRE_LAND"
  },{
    "enum":"GameActivity_t",
    "value":1616,
    "kind":"constant",
    "name":"ACT_DOTA_ROQUELAIRE_LAND_IDLE"
  },{
    "enum":"GameActivity_t",
    "value":1502,
    "kind":"constant",
    "name":"ACT_DOTA_RUN"
  },{
    "value":1760,
    "kind":"constant",
    "name":"ACT_DOTA_RUN_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1568,
    "kind":"constant",
    "name":"ACT_DOTA_SAND_KING_BURROW_IN"
  },{
    "enum":"GameActivity_t",
    "value":1569,
    "kind":"constant",
    "name":"ACT_DOTA_SAND_KING_BURROW_OUT"
  },{
    "enum":"GameActivity_t",
    "value":1687,
    "kind":"constant",
    "name":"ACT_DOTA_SHAKE"
  },{
    "enum":"GameActivity_t",
    "value":1670,
    "kind":"constant",
    "name":"ACT_DOTA_SHALLOW_GRAVE"
  },{
    "enum":"GameActivity_t",
    "value":1637,
    "kind":"constant",
    "name":"ACT_DOTA_SHARPEN_WEAPON"
  },{
    "enum":"GameActivity_t",
    "value":1638,
    "kind":"constant",
    "name":"ACT_DOTA_SHARPEN_WEAPON_OUT"
  },{
    "enum":"GameActivity_t",
    "value":1695,
    "kind":"constant",
    "name":"ACT_DOTA_SHOPKEEPER_PET_INTERACT"
  },{
    "enum":"GameActivity_t",
    "value":1633,
    "kind":"constant",
    "name":"ACT_DOTA_SHRUG"
  },{
    "enum":"GameActivity_t",
    "value":1749,
    "kind":"constant",
    "name":"ACT_DOTA_SHUFFLE_L"
  },{
    "enum":"GameActivity_t",
    "value":1750,
    "kind":"constant",
    "name":"ACT_DOTA_SHUFFLE_R"
  },{
    "enum":"GameActivity_t",
    "value":1604,
    "kind":"constant",
    "name":"ACT_DOTA_SLARK_POUNCE"
  },{
    "enum":"GameActivity_t",
    "value":1626,
    "kind":"constant",
    "name":"ACT_DOTA_SLEEPING_END"
  },{
    "enum":"GameActivity_t",
    "value":1726,
    "kind":"constant",
    "name":"ACT_DOTA_SLIDE"
  },{
    "enum":"GameActivity_t",
    "value":1727,
    "kind":"constant",
    "name":"ACT_DOTA_SLIDE_LOOP"
  },{
    "enum":"GameActivity_t",
    "value":1534,
    "kind":"constant",
    "name":"ACT_DOTA_SPAWN"
  },{
    "value":1761,
    "kind":"constant",
    "name":"ACT_DOTA_SPAWN_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1594,
    "kind":"constant",
    "name":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END"
  },{
    "enum":"GameActivity_t",
    "value":1593,
    "kind":"constant",
    "name":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE"
  },{
    "enum":"GameActivity_t",
    "value":1629,
    "kind":"constant",
    "name":"ACT_DOTA_STARTLE"
  },{
    "enum":"GameActivity_t",
    "value":1680,
    "kind":"constant",
    "name":"ACT_DOTA_STATIC_STORM"
  },{
    "value":1767,
    "kind":"constant",
    "name":"ACT_DOTA_STUN_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1684,
    "kind":"constant",
    "name":"ACT_DOTA_SWIM"
  },{
    "enum":"GameActivity_t",
    "value":1688,
    "kind":"constant",
    "name":"ACT_DOTA_SWIM_IDLE"
  },{
    "enum":"GameActivity_t",
    "value":1536,
    "kind":"constant",
    "name":"ACT_DOTA_TAUNT"
  },{
    "enum":"GameActivity_t",
    "value":1641,
    "kind":"constant",
    "name":"ACT_DOTA_TAUNT_SNIPER"
  },{
    "enum":"GameActivity_t",
    "value":1752,
    "kind":"constant",
    "name":"ACT_DOTA_TAUNT_SPECIAL"
  },{
    "value":1770,
    "kind":"constant",
    "name":"ACT_DOTA_TAUNT_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1595,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT"
  },{
    "enum":"GameActivity_t",
    "value":1693,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_END"
  },{
    "enum":"GameActivity_t",
    "value":1694,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_EXIT"
  },{
    "enum":"GameActivity_t",
    "value":1691,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_START"
  },{
    "enum":"GameActivity_t",
    "value":1692,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_WAIT"
  },{
    "enum":"GameActivity_t",
    "value":1596,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_END"
  },{
    "enum":"GameActivity_t",
    "value":1632,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_END_REACT"
  },{
    "enum":"GameActivity_t",
    "value":1631,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_REACT"
  },{
    "enum":"GameActivity_t",
    "value":1753,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_START"
  },{
    "value":1782,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_STATUE"
  },{
    "enum":"GameActivity_t",
    "value":1537,
    "kind":"constant",
    "name":"ACT_DOTA_THIRST"
  },{
    "enum":"GameActivity_t",
    "value":1678,
    "kind":"constant",
    "name":"ACT_DOTA_THUNDER_STRIKE"
  },{
    "enum":"GameActivity_t",
    "value":1555,
    "kind":"constant",
    "name":"ACT_DOTA_TINKER_REARM1"
  },{
    "enum":"GameActivity_t",
    "value":1556,
    "kind":"constant",
    "name":"ACT_DOTA_TINKER_REARM2"
  },{
    "enum":"GameActivity_t",
    "value":1557,
    "kind":"constant",
    "name":"ACT_DOTA_TINKER_REARM3"
  },{
    "enum":"GameActivity_t",
    "value":1731,
    "kind":"constant",
    "name":"ACT_DOTA_TRANSITION"
  },{
    "enum":"GameActivity_t",
    "value":1713,
    "kind":"constant",
    "name":"ACT_DOTA_TRICKS_END"
  },{
    "enum":"GameActivity_t",
    "value":1686,
    "kind":"constant",
    "name":"ACT_DOTA_TROT"
  },{
    "enum":"GameActivity_t",
    "value":1666,
    "kind":"constant",
    "name":"ACT_DOTA_UNDYING_DECAY"
  },{
    "enum":"GameActivity_t",
    "value":1667,
    "kind":"constant",
    "name":"ACT_DOTA_UNDYING_SOUL_RIP"
  },{
    "enum":"GameActivity_t",
    "value":1668,
    "kind":"constant",
    "name":"ACT_DOTA_UNDYING_TOMBSTONE"
  },{
    "enum":"GameActivity_t",
    "value":1716,
    "kind":"constant",
    "name":"ACT_DOTA_VERSUS"
  },{
    "enum":"GameActivity_t",
    "value":1591,
    "kind":"constant",
    "name":"ACT_DOTA_VICTORY"
  },{
    "enum":"GameActivity_t",
    "value":1710,
    "kind":"constant",
    "name":"ACT_DOTA_VICTORY_START"
  },{
    "value":1784,
    "kind":"constant",
    "name":"ACT_DOTA_VICTORY_STATUE"
  },{
    "value":1759,
    "kind":"constant",
    "name":"ACT_DOTA_VOODOO_REST"
  },{
    "enum":"GameActivity_t",
    "value":1689,
    "kind":"constant",
    "name":"ACT_DOTA_WAIT_IDLE"
  },{
    "enum":"GameActivity_t",
    "value":1561,
    "kind":"constant",
    "name":"ACT_DOTA_WEAVERBUG_ATTACH"
  },{
    "enum":"GameActivity_t",
    "value":1571,
    "kind":"constant",
    "name":"ACT_DOTA_WHEEL_LAYER"
  },{
    "enum":"GameActivity_t",
    "value":1669,
    "kind":"constant",
    "name":"ACT_DOTA_WHIRLING_AXES_RANGED"
  },{
    "value":179,
    "kind":"constant",
    "name":"ACT_DO_NOT_DISTURB"
  },{
    "value":73,
    "kind":"constant",
    "name":"ACT_DROP_WEAPON"
  },{
    "value":74,
    "kind":"constant",
    "name":"ACT_DROP_WEAPON_SHOTGUN"
  },{
    "value":395,
    "kind":"constant",
    "name":"ACT_DUCK_DODGE"
  },{
    "value":430,
    "kind":"constant",
    "name":"ACT_DYINGLOOP"
  },{
    "value":431,
    "kind":"constant",
    "name":"ACT_DYINGTODEAD"
  },{
    "value":910,
    "kind":"constant",
    "name":"ACT_EXPLODE"
  },{
    "value":906,
    "kind":"constant",
    "name":"ACT_FIRE"
  },{
    "value":438,
    "kind":"constant",
    "name":"ACT_FIRE_END"
  },{
    "value":437,
    "kind":"constant",
    "name":"ACT_FIRE_LOOP"
  },{
    "value":907,
    "kind":"constant",
    "name":"ACT_FIRE_RECOVER"
  },{
    "value":436,
    "kind":"constant",
    "name":"ACT_FIRE_START"
  },{
    "value":900,
    "kind":"constant",
    "name":"ACT_FLICK_LEFT"
  },{
    "value":901,
    "kind":"constant",
    "name":"ACT_FLICK_LEFT_MIDDLE"
  },{
    "value":903,
    "kind":"constant",
    "name":"ACT_FLICK_RIGHT"
  },{
    "value":902,
    "kind":"constant",
    "name":"ACT_FLICK_RIGHT_MIDDLE"
  },{
    "value":119,
    "kind":"constant",
    "name":"ACT_FLINCH_CHEST"
  },{
    "value":127,
    "kind":"constant",
    "name":"ACT_FLINCH_CHEST_BACK"
  },{
    "value":130,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_BACK"
  },{
    "value":129,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_FRONT"
  },{
    "value":131,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_LEFT"
  },{
    "value":132,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_RIGHT"
  },{
    "value":118,
    "kind":"constant",
    "name":"ACT_FLINCH_HEAD"
  },{
    "value":126,
    "kind":"constant",
    "name":"ACT_FLINCH_HEAD_BACK"
  },{
    "value":121,
    "kind":"constant",
    "name":"ACT_FLINCH_LEFTARM"
  },{
    "value":123,
    "kind":"constant",
    "name":"ACT_FLINCH_LEFTLEG"
  },{
    "value":125,
    "kind":"constant",
    "name":"ACT_FLINCH_PHYSICS"
  },{
    "value":122,
    "kind":"constant",
    "name":"ACT_FLINCH_RIGHTARM"
  },{
    "value":124,
    "kind":"constant",
    "name":"ACT_FLINCH_RIGHTLEG"
  },{
    "value":120,
    "kind":"constant",
    "name":"ACT_FLINCH_STOMACH"
  },{
    "value":128,
    "kind":"constant",
    "name":"ACT_FLINCH_STOMACH_BACK"
  },{
    "value":25,
    "kind":"constant",
    "name":"ACT_FLY"
  },{
    "value":476,
    "kind":"constant",
    "name":"ACT_GAUSS_SPINCYCLE"
  },{
    "value":475,
    "kind":"constant",
    "name":"ACT_GAUSS_SPINUP"
  },{
    "value":397,
    "kind":"constant",
    "name":"ACT_GESTURE_BARNACLE_STRANGLE"
  },{
    "value":153,
    "kind":"constant",
    "name":"ACT_GESTURE_BIG_FLINCH"
  },{
    "value":154,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST"
  },{
    "value":156,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST_DAMAGED"
  },{
    "value":157,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN"
  },{
    "value":155,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST_SHOTGUN"
  },{
    "value":159,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_CHEST"
  },{
    "value":158,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_HEAD"
  },{
    "value":161,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_LEFTARM"
  },{
    "value":163,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_LEFTLEG"
  },{
    "value":162,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_RIGHTARM"
  },{
    "value":164,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_RIGHTLEG"
  },{
    "value":160,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_STOMACH"
  },{
    "value":147,
    "kind":"constant",
    "name":"ACT_GESTURE_MELEE_ATTACK1"
  },{
    "value":148,
    "kind":"constant",
    "name":"ACT_GESTURE_MELEE_ATTACK2"
  },{
    "value":313,
    "kind":"constant",
    "name":"ACT_GESTURE_MELEE_ATTACK_SWING"
  },{
    "value":145,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK1"
  },{
    "value":149,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK1_LOW"
  },{
    "value":146,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK2"
  },{
    "value":150,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK2_LOW"
  },{
    "value":298,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_AR1"
  },{
    "value":299,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_AR2"
  },{
    "value":300,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE"
  },{
    "value":301,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_HMG1"
  },{
    "value":302,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_ML"
  },{
    "value":307,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_PISTOL"
  },{
    "value":308,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW"
  },{
    "value":306,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SHOTGUN"
  },{
    "value":309,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SLAM"
  },{
    "value":303,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG1"
  },{
    "value":304,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG1_LOW"
  },{
    "value":305,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG2"
  },{
    "value":312,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE"
  },{
    "value":311,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_THROW"
  },{
    "value":310,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_TRIPWIRE"
  },{
    "value":377,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD"
  },{
    "value":378,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD_PISTOL"
  },{
    "value":380,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD_SHOTGUN"
  },{
    "value":379,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD_SMG1"
  },{
    "value":152,
    "kind":"constant",
    "name":"ACT_GESTURE_SMALL_FLINCH"
  },{
    "value":165,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT"
  },{
    "value":167,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT45"
  },{
    "value":171,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT45_FLAT"
  },{
    "value":169,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT90"
  },{
    "value":173,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT90_FLAT"
  },{
    "value":166,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT"
  },{
    "value":168,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT45"
  },{
    "value":172,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT45_FLAT"
  },{
    "value":170,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT90"
  },{
    "value":174,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT90_FLAT"
  },{
    "value":27,
    "kind":"constant",
    "name":"ACT_GLIDE"
  },{
    "value":958,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_ACTIVE"
  },{
    "value":959,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_ACTIVE_IDLE"
  },{
    "value":960,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_DEACTIVATE"
  },{
    "value":955,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_GRAB"
  },{
    "value":957,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_GRAB_IDLE"
  },{
    "value":961,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_PULL"
  },{
    "value":956,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_RELEASE"
  },{
    "value":962,
    "kind":"constant",
    "name":"ACT_HEADCRAB_SMOKE_BOMB"
  },{
    "value":963,
    "kind":"constant",
    "name":"ACT_HEADCRAB_SPIT"
  },{
    "value":500,
    "kind":"constant",
    "name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE"
  },{
    "value":501,
    "kind":"constant",
    "name":"ACT_HL2MP_GESTURE_RELOAD_MELEE"
  },{
    "value":498,
    "kind":"constant",
    "name":"ACT_HL2MP_IDLE_CROUCH_MELEE"
  },{
    "value":496,
    "kind":"constant",
    "name":"ACT_HL2MP_IDLE_MELEE"
  },{
    "value":502,
    "kind":"constant",
    "name":"ACT_HL2MP_JUMP_MELEE"
  },{
    "value":497,
    "kind":"constant",
    "name":"ACT_HL2MP_RUN_MELEE"
  },{
    "value":499,
    "kind":"constant",
    "name":"ACT_HL2MP_WALK_CROUCH_MELEE"
  },{
    "value":30,
    "kind":"constant",
    "name":"ACT_HOP"
  },{
    "value":26,
    "kind":"constant",
    "name":"ACT_HOVER"
  },{
    "value":1,
    "kind":"constant",
    "name":"ACT_IDLE"
  },{
    "value":493,
    "kind":"constant",
    "name":"ACT_IDLETORUN"
  },{
    "value":80,
    "kind":"constant",
    "name":"ACT_IDLE_AGITATED"
  },{
    "value":93,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_AGITATED"
  },{
    "value":879,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_AUTOGUN"
  },{
    "value":888,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_DUAL"
  },{
    "value":884,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_PISTOL"
  },{
    "value":91,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_RELAXED"
  },{
    "value":895,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_RIFLE"
  },{
    "value":331,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_RIFLE_STIMULATED"
  },{
    "value":893,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_SHOTGUN"
  },{
    "value":94,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_STEALTH"
  },{
    "value":92,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_STIMULATED"
  },{
    "value":77,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY"
  },{
    "value":342,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_MELEE"
  },{
    "value":318,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_PISTOL"
  },{
    "value":345,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_RPG"
  },{
    "value":319,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_SHOTGUN"
  },{
    "value":316,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_SMG1"
  },{
    "value":878,
    "kind":"constant",
    "name":"ACT_IDLE_AUTOGUN"
  },{
    "value":427,
    "kind":"constant",
    "name":"ACT_IDLE_CARRY"
  },{
    "value":887,
    "kind":"constant",
    "name":"ACT_IDLE_DUAL"
  },{
    "value":82,
    "kind":"constant",
    "name":"ACT_IDLE_HURT"
  },{
    "value":340,
    "kind":"constant",
    "name":"ACT_IDLE_MANNEDGUN"
  },{
    "value":341,
    "kind":"constant",
    "name":"ACT_IDLE_MELEE"
  },{
    "value":133,
    "kind":"constant",
    "name":"ACT_IDLE_ON_FIRE"
  },{
    "value":321,
    "kind":"constant",
    "name":"ACT_IDLE_PACKAGE"
  },{
    "value":317,
    "kind":"constant",
    "name":"ACT_IDLE_PISTOL"
  },{
    "value":78,
    "kind":"constant",
    "name":"ACT_IDLE_RELAXED"
  },{
    "value":314,
    "kind":"constant",
    "name":"ACT_IDLE_RIFLE"
  },{
    "value":344,
    "kind":"constant",
    "name":"ACT_IDLE_RPG"
  },{
    "value":343,
    "kind":"constant",
    "name":"ACT_IDLE_RPG_RELAXED"
  },{
    "value":336,
    "kind":"constant",
    "name":"ACT_IDLE_SHOTGUN_AGITATED"
  },{
    "value":334,
    "kind":"constant",
    "name":"ACT_IDLE_SHOTGUN_RELAXED"
  },{
    "value":335,
    "kind":"constant",
    "name":"ACT_IDLE_SHOTGUN_STIMULATED"
  },{
    "value":315,
    "kind":"constant",
    "name":"ACT_IDLE_SMG1"
  },{
    "value":325,
    "kind":"constant",
    "name":"ACT_IDLE_SMG1_RELAXED"
  },{
    "value":326,
    "kind":"constant",
    "name":"ACT_IDLE_SMG1_STIMULATED"
  },{
    "value":81,
    "kind":"constant",
    "name":"ACT_IDLE_STEALTH"
  },{
    "value":320,
    "kind":"constant",
    "name":"ACT_IDLE_STEALTH_PISTOL"
  },{
    "value":79,
    "kind":"constant",
    "name":"ACT_IDLE_STIMULATED"
  },{
    "value":323,
    "kind":"constant",
    "name":"ACT_IDLE_SUITCASE"
  },{
    "value":852,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_DRAW"
  },{
    "value":859,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_DRYFIRE"
  },{
    "value":853,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_HOLSTER"
  },{
    "value":854,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_IDLE"
  },{
    "value":861,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_IDLE_LOWERED"
  },{
    "value":860,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_IDLE_TO_LOWERED"
  },{
    "value":862,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_LOWERED_TO_IDLE"
  },{
    "value":856,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_PRIMARYATTACK"
  },{
    "value":855,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_PULLBACK"
  },{
    "value":858,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_RELOAD"
  },{
    "value":857,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_SECONDARYATTACK"
  },{
    "value":863,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_DRAW"
  },{
    "value":870,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_DRYFIRE"
  },{
    "value":864,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_HOLSTER"
  },{
    "value":865,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_IDLE"
  },{
    "value":872,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_IDLE_LOWERED"
  },{
    "value":871,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_IDLE_TO_LOWERED"
  },{
    "value":873,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_LOWERED_TO_IDLE"
  },{
    "value":867,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_PRIMARYATTACK"
  },{
    "value":866,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_PULLBACK"
  },{
    "value":869,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_RELOAD"
  },{
    "value":868,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_SECONDARYATTACK"
  },{
    "value":29,
    "kind":"constant",
    "name":"ACT_JUMP"
  },{
    "value":883,
    "kind":"constant",
    "name":"ACT_JUMP_AUTOGUN"
  },{
    "value":892,
    "kind":"constant",
    "name":"ACT_JUMP_DUAL"
  },{
    "value":32,
    "kind":"constant",
    "name":"ACT_LAND"
  },{
    "value":31,
    "kind":"constant",
    "name":"ACT_LEAP"
  },{
    "value":61,
    "kind":"constant",
    "name":"ACT_LOOKBACK_LEFT"
  },{
    "value":60,
    "kind":"constant",
    "name":"ACT_LOOKBACK_RIGHT"
  },{
    "value":65,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK1"
  },{
    "value":66,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK2"
  },{
    "value":291,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK_SWING"
  },{
    "value":151,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK_SWING_GESTURE"
  },{
    "value":830,
    "kind":"constant",
    "name":"ACT_MELEE_VM_DRAW"
  },{
    "value":837,
    "kind":"constant",
    "name":"ACT_MELEE_VM_DRYFIRE"
  },{
    "value":831,
    "kind":"constant",
    "name":"ACT_MELEE_VM_HOLSTER"
  },{
    "value":832,
    "kind":"constant",
    "name":"ACT_MELEE_VM_IDLE"
  },{
    "value":839,
    "kind":"constant",
    "name":"ACT_MELEE_VM_IDLE_LOWERED"
  },{
    "value":838,
    "kind":"constant",
    "name":"ACT_MELEE_VM_IDLE_TO_LOWERED"
  },{
    "value":840,
    "kind":"constant",
    "name":"ACT_MELEE_VM_LOWERED_TO_IDLE"
  },{
    "value":834,
    "kind":"constant",
    "name":"ACT_MELEE_VM_PRIMARYATTACK"
  },{
    "value":833,
    "kind":"constant",
    "name":"ACT_MELEE_VM_PULLBACK"
  },{
    "value":836,
    "kind":"constant",
    "name":"ACT_MELEE_VM_RELOAD"
  },{
    "value":835,
    "kind":"constant",
    "name":"ACT_MELEE_VM_SECONDARYATTACK"
  },{
    "enum":"GameActivity_t",
    "value":1544,
    "kind":"constant",
    "name":"ACT_MIRANA_LEAP_END"
  },{
    "value":510,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK"
  },{
    "value":729,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_BUILDING"
  },{
    "value":646,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_ITEM1"
  },{
    "value":663,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_ITEM2"
  },{
    "value":625,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_MELEE"
  },{
    "value":748,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_PDA"
  },{
    "value":559,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_PRIMARY"
  },{
    "value":594,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_SECONDARY"
  },{
    "value":739,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_BUILDING"
  },{
    "value":535,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE"
  },{
    "value":743,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING"
  },{
    "value":641,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE"
  },{
    "value":589,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY"
  },{
    "value":620,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY"
  },{
    "value":658,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_ITEM1"
  },{
    "value":675,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_ITEM2"
  },{
    "value":637,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_MELEE"
  },{
    "value":573,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_PRIMARY"
  },{
    "value":533,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE"
  },{
    "value":604,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_SECONDARY"
  },{
    "value":534,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE"
  },{
    "value":737,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_BUILDING"
  },{
    "value":529,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE"
  },{
    "value":741,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING"
  },{
    "value":639,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_MELEE"
  },{
    "value":587,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY"
  },{
    "value":618,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY"
  },{
    "value":655,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM1"
  },{
    "value":656,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY"
  },{
    "value":672,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM2"
  },{
    "value":673,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY"
  },{
    "value":634,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_MELEE"
  },{
    "value":635,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY"
  },{
    "value":552,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_POSTFIRE"
  },{
    "value":551,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PREFIRE"
  },{
    "value":570,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARY"
  },{
    "value":526,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARYFIRE"
  },{
    "value":527,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED"
  },{
    "value":571,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED"
  },{
    "value":602,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_SECONDARY"
  },{
    "value":528,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_SECONDARYFIRE"
  },{
    "value":736,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_BUILDING"
  },{
    "value":525,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE"
  },{
    "value":740,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_BUILDING"
  },{
    "value":638,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_MELEE"
  },{
    "value":586,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_PRIMARY"
  },{
    "value":617,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_SECONDARY"
  },{
    "value":653,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM1"
  },{
    "value":654,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM1_SECONDARY"
  },{
    "value":670,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM2"
  },{
    "value":671,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM2_SECONDARY"
  },{
    "value":632,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_MELEE"
  },{
    "value":633,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_MELEE_SECONDARY"
  },{
    "value":755,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PDA"
  },{
    "value":549,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_POSTFIRE"
  },{
    "value":548,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PREFIRE"
  },{
    "value":568,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARY"
  },{
    "value":522,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARYFIRE"
  },{
    "value":523,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED"
  },{
    "value":569,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED"
  },{
    "value":601,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_SECONDARY"
  },{
    "value":524,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_SECONDARYFIRE"
  },{
    "value":550,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_STARTFIRE"
  },{
    "value":738,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_BUILDING"
  },{
    "value":532,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE"
  },{
    "value":742,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_BUILDING"
  },{
    "value":640,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_MELEE"
  },{
    "value":588,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY"
  },{
    "value":619,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY"
  },{
    "value":657,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_ITEM1"
  },{
    "value":674,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_ITEM2"
  },{
    "value":636,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_MELEE"
  },{
    "value":756,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PDA"
  },{
    "value":554,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_POSTFIRE"
  },{
    "value":553,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PREFIRE"
  },{
    "value":572,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PRIMARY"
  },{
    "value":530,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PRIMARYFIRE"
  },{
    "value":603,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_SECONDARY"
  },{
    "value":531,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_SECONDARYFIRE"
  },{
    "value":511,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK"
  },{
    "value":730,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_BUILDING"
  },{
    "value":647,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_ITEM1"
  },{
    "value":664,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_ITEM2"
  },{
    "value":626,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_MELEE"
  },{
    "value":749,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_PDA"
  },{
    "value":560,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_PRIMARY"
  },{
    "value":595,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_SECONDARY"
  },{
    "value":726,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_BUILDING"
  },{
    "value":506,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_DEPLOYED"
  },{
    "value":505,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_DEPLOYED_IDLE"
  },{
    "value":504,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_IDLE"
  },{
    "value":643,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_ITEM1"
  },{
    "value":660,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_ITEM2"
  },{
    "value":622,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_MELEE"
  },{
    "value":745,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_PDA"
  },{
    "value":556,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_PRIMARY"
  },{
    "value":591,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_SECONDARY"
  },{
    "value":519,
    "kind":"constant",
    "name":"ACT_MP_DEPLOYED"
  },{
    "value":507,
    "kind":"constant",
    "name":"ACT_MP_DEPLOYED_IDLE"
  },{
    "value":566,
    "kind":"constant",
    "name":"ACT_MP_DEPLOYED_PRIMARY"
  },{
    "value":517,
    "kind":"constant",
    "name":"ACT_MP_DOUBLEJUMP"
  },{
    "value":676,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH"
  },{
    "value":683,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_CHEST"
  },{
    "value":682,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_HEAD"
  },{
    "value":680,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_ITEM1"
  },{
    "value":681,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_ITEM2"
  },{
    "value":685,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_LEFTARM"
  },{
    "value":687,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_LEFTLEG"
  },{
    "value":679,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_MELEE"
  },{
    "value":677,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_PRIMARY"
  },{
    "value":686,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_RIGHTARM"
  },{
    "value":688,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_RIGHTLEG"
  },{
    "value":678,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_SECONDARY"
  },{
    "value":684,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_STOMACH"
  },{
    "value":758,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT"
  },{
    "value":794,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING"
  },{
    "value":782,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1"
  },{
    "value":788,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2"
  },{
    "value":776,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_MELEE"
  },{
    "value":800,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_PDA"
  },{
    "value":764,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY"
  },{
    "value":770,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY"
  },{
    "value":759,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP"
  },{
    "value":795,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_BUILDING"
  },{
    "value":783,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_ITEM1"
  },{
    "value":789,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_ITEM2"
  },{
    "value":777,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_MELEE"
  },{
    "value":801,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_PDA"
  },{
    "value":765,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY"
  },{
    "value":771,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY"
  },{
    "value":757,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH"
  },{
    "value":793,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING"
  },{
    "value":781,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1"
  },{
    "value":787,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2"
  },{
    "value":775,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_MELEE"
  },{
    "value":799,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_PDA"
  },{
    "value":763,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY"
  },{
    "value":769,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY"
  },{
    "value":762,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO"
  },{
    "value":798,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_BUILDING"
  },{
    "value":786,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_ITEM1"
  },{
    "value":792,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_ITEM2"
  },{
    "value":780,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_MELEE"
  },{
    "value":804,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_PDA"
  },{
    "value":768,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_PRIMARY"
  },{
    "value":774,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_SECONDARY"
  },{
    "value":761,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES"
  },{
    "value":797,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_BUILDING"
  },{
    "value":785,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_ITEM1"
  },{
    "value":791,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_ITEM2"
  },{
    "value":779,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_MELEE"
  },{
    "value":803,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_PDA"
  },{
    "value":767,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_PRIMARY"
  },{
    "value":773,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_SECONDARY"
  },{
    "value":760,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP"
  },{
    "value":796,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_BUILDING"
  },{
    "value":784,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_ITEM1"
  },{
    "value":790,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_ITEM2"
  },{
    "value":778,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_MELEE"
  },{
    "value":802,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_PDA"
  },{
    "value":766,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY"
  },{
    "value":772,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY"
  },{
    "value":691,
    "kind":"constant",
    "name":"ACT_MP_GRENADE1_ATTACK"
  },{
    "value":689,
    "kind":"constant",
    "name":"ACT_MP_GRENADE1_DRAW"
  },{
    "value":690,
    "kind":"constant",
    "name":"ACT_MP_GRENADE1_IDLE"
  },{
    "value":694,
    "kind":"constant",
    "name":"ACT_MP_GRENADE2_ATTACK"
  },{
    "value":692,
    "kind":"constant",
    "name":"ACT_MP_GRENADE2_DRAW"
  },{
    "value":693,
    "kind":"constant",
    "name":"ACT_MP_GRENADE2_IDLE"
  },{
    "value":715,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE1_ATTACK"
  },{
    "value":713,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE1_DRAW"
  },{
    "value":714,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE1_IDLE"
  },{
    "value":718,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE2_ATTACK"
  },{
    "value":716,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE2_DRAW"
  },{
    "value":717,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE2_IDLE"
  },{
    "value":721,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE1_ATTACK"
  },{
    "value":719,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE1_DRAW"
  },{
    "value":720,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE1_IDLE"
  },{
    "value":724,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE2_ATTACK"
  },{
    "value":722,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE2_DRAW"
  },{
    "value":723,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE2_IDLE"
  },{
    "value":513,
    "kind":"constant",
    "name":"ACT_MP_JUMP"
  },{
    "value":731,
    "kind":"constant",
    "name":"ACT_MP_JUMP_BUILDING"
  },{
    "value":515,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT"
  },{
    "value":733,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_BUILDING"
  },{
    "value":650,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_ITEM1"
  },{
    "value":667,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_ITEM2"
  },{
    "value":629,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_MELEE"
  },{
    "value":752,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_PDA"
  },{
    "value":563,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_PRIMARY"
  },{
    "value":598,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_SECONDARY"
  },{
    "value":648,
    "kind":"constant",
    "name":"ACT_MP_JUMP_ITEM1"
  },{
    "value":665,
    "kind":"constant",
    "name":"ACT_MP_JUMP_ITEM2"
  },{
    "value":516,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND"
  },{
    "value":734,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_BUILDING"
  },{
    "value":651,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_ITEM1"
  },{
    "value":668,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_ITEM2"
  },{
    "value":630,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_MELEE"
  },{
    "value":753,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_PDA"
  },{
    "value":564,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_PRIMARY"
  },{
    "value":599,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_SECONDARY"
  },{
    "value":627,
    "kind":"constant",
    "name":"ACT_MP_JUMP_MELEE"
  },{
    "value":750,
    "kind":"constant",
    "name":"ACT_MP_JUMP_PDA"
  },{
    "value":561,
    "kind":"constant",
    "name":"ACT_MP_JUMP_PRIMARY"
  },{
    "value":596,
    "kind":"constant",
    "name":"ACT_MP_JUMP_SECONDARY"
  },{
    "value":514,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START"
  },{
    "value":732,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_BUILDING"
  },{
    "value":649,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_ITEM1"
  },{
    "value":666,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_ITEM2"
  },{
    "value":628,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_MELEE"
  },{
    "value":751,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_PDA"
  },{
    "value":562,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_PRIMARY"
  },{
    "value":597,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_SECONDARY"
  },{
    "value":709,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE1_ATTACK"
  },{
    "value":707,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE1_DRAW"
  },{
    "value":708,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE1_IDLE"
  },{
    "value":712,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE2_ATTACK"
  },{
    "value":710,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE2_DRAW"
  },{
    "value":711,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE2_IDLE"
  },{
    "value":697,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE1_ATTACK"
  },{
    "value":695,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE1_DRAW"
  },{
    "value":696,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE1_IDLE"
  },{
    "value":700,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE2_ATTACK"
  },{
    "value":698,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE2_DRAW"
  },{
    "value":699,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE2_IDLE"
  },{
    "value":545,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK"
  },{
    "value":547,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_END"
  },{
    "value":546,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_LOOP"
  },{
    "value":583,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY"
  },{
    "value":585,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY_END"
  },{
    "value":584,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP"
  },{
    "value":614,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY"
  },{
    "value":616,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY_END"
  },{
    "value":615,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP"
  },{
    "value":539,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH"
  },{
    "value":541,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_END"
  },{
    "value":540,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_LOOP"
  },{
    "value":577,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY"
  },{
    "value":579,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY_END"
  },{
    "value":578,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP"
  },{
    "value":608,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY"
  },{
    "value":610,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY_END"
  },{
    "value":609,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP"
  },{
    "value":536,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND"
  },{
    "value":538,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_END"
  },{
    "value":537,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_LOOP"
  },{
    "value":574,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_PRIMARY"
  },{
    "value":576,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_PRIMARY_END"
  },{
    "value":575,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_PRIMARY_LOOP"
  },{
    "value":605,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_SECONDARY"
  },{
    "value":607,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_SECONDARY_END"
  },{
    "value":606,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_SECONDARY_LOOP"
  },{
    "value":542,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM"
  },{
    "value":544,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_END"
  },{
    "value":543,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_LOOP"
  },{
    "value":580,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY"
  },{
    "value":582,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY_END"
  },{
    "value":581,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY_LOOP"
  },{
    "value":611,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY"
  },{
    "value":613,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY_END"
  },{
    "value":612,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY_LOOP"
  },{
    "value":508,
    "kind":"constant",
    "name":"ACT_MP_RUN"
  },{
    "value":727,
    "kind":"constant",
    "name":"ACT_MP_RUN_BUILDING"
  },{
    "value":644,
    "kind":"constant",
    "name":"ACT_MP_RUN_ITEM1"
  },{
    "value":661,
    "kind":"constant",
    "name":"ACT_MP_RUN_ITEM2"
  },{
    "value":623,
    "kind":"constant",
    "name":"ACT_MP_RUN_MELEE"
  },{
    "value":746,
    "kind":"constant",
    "name":"ACT_MP_RUN_PDA"
  },{
    "value":557,
    "kind":"constant",
    "name":"ACT_MP_RUN_PRIMARY"
  },{
    "value":592,
    "kind":"constant",
    "name":"ACT_MP_RUN_SECONDARY"
  },{
    "value":703,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE1_ATTACK"
  },{
    "value":701,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE1_DRAW"
  },{
    "value":702,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE1_IDLE"
  },{
    "value":706,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE2_ATTACK"
  },{
    "value":704,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE2_DRAW"
  },{
    "value":705,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE2_IDLE"
  },{
    "value":512,
    "kind":"constant",
    "name":"ACT_MP_SPRINT"
  },{
    "value":725,
    "kind":"constant",
    "name":"ACT_MP_STAND_BUILDING"
  },{
    "value":503,
    "kind":"constant",
    "name":"ACT_MP_STAND_IDLE"
  },{
    "value":642,
    "kind":"constant",
    "name":"ACT_MP_STAND_ITEM1"
  },{
    "value":659,
    "kind":"constant",
    "name":"ACT_MP_STAND_ITEM2"
  },{
    "value":621,
    "kind":"constant",
    "name":"ACT_MP_STAND_MELEE"
  },{
    "value":744,
    "kind":"constant",
    "name":"ACT_MP_STAND_PDA"
  },{
    "value":555,
    "kind":"constant",
    "name":"ACT_MP_STAND_PRIMARY"
  },{
    "value":590,
    "kind":"constant",
    "name":"ACT_MP_STAND_SECONDARY"
  },{
    "value":518,
    "kind":"constant",
    "name":"ACT_MP_SWIM"
  },{
    "value":735,
    "kind":"constant",
    "name":"ACT_MP_SWIM_BUILDING"
  },{
    "value":520,
    "kind":"constant",
    "name":"ACT_MP_SWIM_DEPLOYED"
  },{
    "value":567,
    "kind":"constant",
    "name":"ACT_MP_SWIM_DEPLOYED_PRIMARY"
  },{
    "value":652,
    "kind":"constant",
    "name":"ACT_MP_SWIM_ITEM1"
  },{
    "value":669,
    "kind":"constant",
    "name":"ACT_MP_SWIM_ITEM2"
  },{
    "value":631,
    "kind":"constant",
    "name":"ACT_MP_SWIM_MELEE"
  },{
    "value":754,
    "kind":"constant",
    "name":"ACT_MP_SWIM_PDA"
  },{
    "value":565,
    "kind":"constant",
    "name":"ACT_MP_SWIM_PRIMARY"
  },{
    "value":600,
    "kind":"constant",
    "name":"ACT_MP_SWIM_SECONDARY"
  },{
    "value":521,
    "kind":"constant",
    "name":"ACT_MP_VCD"
  },{
    "value":509,
    "kind":"constant",
    "name":"ACT_MP_WALK"
  },{
    "value":728,
    "kind":"constant",
    "name":"ACT_MP_WALK_BUILDING"
  },{
    "value":645,
    "kind":"constant",
    "name":"ACT_MP_WALK_ITEM1"
  },{
    "value":662,
    "kind":"constant",
    "name":"ACT_MP_WALK_ITEM2"
  },{
    "value":624,
    "kind":"constant",
    "name":"ACT_MP_WALK_MELEE"
  },{
    "value":747,
    "kind":"constant",
    "name":"ACT_MP_WALK_PDA"
  },{
    "value":558,
    "kind":"constant",
    "name":"ACT_MP_WALK_PRIMARY"
  },{
    "value":593,
    "kind":"constant",
    "name":"ACT_MP_WALK_SECONDARY"
  },{
    "value":966,
    "kind":"constant",
    "name":"ACT_NEUTRAL_REF_POSE"
  },{
    "value":463,
    "kind":"constant",
    "name":"ACT_OBJ_ASSEMBLING"
  },{
    "value":469,
    "kind":"constant",
    "name":"ACT_OBJ_DETERIORATING"
  },{
    "value":464,
    "kind":"constant",
    "name":"ACT_OBJ_DISMANTLING"
  },{
    "value":467,
    "kind":"constant",
    "name":"ACT_OBJ_IDLE"
  },{
    "value":468,
    "kind":"constant",
    "name":"ACT_OBJ_PLACING"
  },{
    "value":466,
    "kind":"constant",
    "name":"ACT_OBJ_RUNNING"
  },{
    "value":465,
    "kind":"constant",
    "name":"ACT_OBJ_STARTUP"
  },{
    "value":470,
    "kind":"constant",
    "name":"ACT_OBJ_UPGRADING"
  },{
    "value":412,
    "kind":"constant",
    "name":"ACT_OPEN_DOOR"
  },{
    "value":442,
    "kind":"constant",
    "name":"ACT_OVERLAY_GRENADEIDLE"
  },{
    "value":443,
    "kind":"constant",
    "name":"ACT_OVERLAY_GRENADEREADY"
  },{
    "value":444,
    "kind":"constant",
    "name":"ACT_OVERLAY_PRIMARYATTACK"
  },{
    "value":448,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_ATTACK"
  },{
    "value":446,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_DOWN"
  },{
    "value":449,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_KNOCKBACK"
  },{
    "value":445,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_UP"
  },{
    "value":447,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_UP_IDLE"
  },{
    "value":841,
    "kind":"constant",
    "name":"ACT_PDA_VM_DRAW"
  },{
    "value":848,
    "kind":"constant",
    "name":"ACT_PDA_VM_DRYFIRE"
  },{
    "value":842,
    "kind":"constant",
    "name":"ACT_PDA_VM_HOLSTER"
  },{
    "value":843,
    "kind":"constant",
    "name":"ACT_PDA_VM_IDLE"
  },{
    "value":850,
    "kind":"constant",
    "name":"ACT_PDA_VM_IDLE_LOWERED"
  },{
    "value":849,
    "kind":"constant",
    "name":"ACT_PDA_VM_IDLE_TO_LOWERED"
  },{
    "value":851,
    "kind":"constant",
    "name":"ACT_PDA_VM_LOWERED_TO_IDLE"
  },{
    "value":845,
    "kind":"constant",
    "name":"ACT_PDA_VM_PRIMARYATTACK"
  },{
    "value":844,
    "kind":"constant",
    "name":"ACT_PDA_VM_PULLBACK"
  },{
    "value":847,
    "kind":"constant",
    "name":"ACT_PDA_VM_RELOAD"
  },{
    "value":846,
    "kind":"constant",
    "name":"ACT_PDA_VM_SECONDARYATTACK"
  },{
    "value":399,
    "kind":"constant",
    "name":"ACT_PHYSCANNON_ANIMATE"
  },{
    "value":401,
    "kind":"constant",
    "name":"ACT_PHYSCANNON_ANIMATE_POST"
  },{
    "value":400,
    "kind":"constant",
    "name":"ACT_PHYSCANNON_ANIMATE_PRE"
  },{
    "value":398,
    "kind":"constant",
    "name":"ACT_PHYSCANNON_DETACH"
  },{
    "value":272,
    "kind":"constant",
    "name":"ACT_PHYSCANNON_UPGRADE"
  },{
    "value":75,
    "kind":"constant",
    "name":"ACT_PICKUP_GROUND"
  },{
    "value":76,
    "kind":"constant",
    "name":"ACT_PICKUP_RACK"
  },{
    "value":489,
    "kind":"constant",
    "name":"ACT_PLAYER_CROUCH_FIRE"
  },{
    "value":490,
    "kind":"constant",
    "name":"ACT_PLAYER_CROUCH_WALK_FIRE"
  },{
    "value":488,
    "kind":"constant",
    "name":"ACT_PLAYER_IDLE_FIRE"
  },{
    "value":492,
    "kind":"constant",
    "name":"ACT_PLAYER_RUN_FIRE"
  },{
    "value":491,
    "kind":"constant",
    "name":"ACT_PLAYER_WALK_FIRE"
  },{
    "value":338,
    "kind":"constant",
    "name":"ACT_POLICE_HARASS1"
  },{
    "value":339,
    "kind":"constant",
    "name":"ACT_POLICE_HARASS2"
  },{
    "value":909,
    "kind":"constant",
    "name":"ACT_PREP_EXPLODE"
  },{
    "value":905,
    "kind":"constant",
    "name":"ACT_PREP_TO_FIRE"
  },{
    "value":808,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_DRAW"
  },{
    "value":815,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_DRYFIRE"
  },{
    "value":809,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_HOLSTER"
  },{
    "value":810,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_IDLE"
  },{
    "value":817,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_IDLE_LOWERED"
  },{
    "value":816,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_IDLE_TO_LOWERED"
  },{
    "value":818,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_LOWERED_TO_IDLE"
  },{
    "value":812,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_PRIMARYATTACK"
  },{
    "value":811,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_PULLBACK"
  },{
    "value":814,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_RELOAD"
  },{
    "value":813,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_SECONDARYATTACK"
  },{
    "value":952,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_BACK"
  },{
    "value":951,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_FRONT"
  },{
    "value":953,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_LEFT"
  },{
    "value":954,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_RIGHT"
  },{
    "value":295,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_AR2_LOW"
  },{
    "value":292,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_LOW"
  },{
    "value":294,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_PISTOL_LOW"
  },{
    "value":293,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_SMG1_LOW"
  },{
    "value":16,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK1"
  },{
    "value":18,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK1_LOW"
  },{
    "value":17,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK2"
  },{
    "value":19,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK2_LOW"
  },{
    "value":273,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR1"
  },{
    "value":274,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR2"
  },{
    "value":276,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR2_GRENADE"
  },{
    "value":275,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR2_LOW"
  },{
    "value":882,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AUTOGUN"
  },{
    "value":891,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_DUAL"
  },{
    "value":277,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_HMG1"
  },{
    "value":278,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_ML"
  },{
    "value":284,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_PISTOL"
  },{
    "value":285,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_PISTOL_LOW"
  },{
    "value":897,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_RIFLE"
  },{
    "value":290,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_RPG"
  },{
    "value":282,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SHOTGUN"
  },{
    "value":283,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SHOTGUN_LOW"
  },{
    "value":286,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SLAM"
  },{
    "value":279,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SMG1"
  },{
    "value":280,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SMG1_LOW"
  },{
    "value":281,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SMG2"
  },{
    "value":289,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SNIPER_RIFLE"
  },{
    "value":288,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_THROW"
  },{
    "value":287,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_TRIPWIRE"
  },{
    "value":421,
    "kind":"constant",
    "name":"ACT_READINESS_AGITATED_TO_STIMULATED"
  },{
    "value":425,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED"
  },{
    "value":423,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED"
  },{
    "value":424,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK"
  },{
    "value":426,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED"
  },{
    "value":419,
    "kind":"constant",
    "name":"ACT_READINESS_RELAXED_TO_STIMULATED"
  },{
    "value":420,
    "kind":"constant",
    "name":"ACT_READINESS_RELAXED_TO_STIMULATED_WALK"
  },{
    "value":422,
    "kind":"constant",
    "name":"ACT_READINESS_STIMULATED_TO_RELAXED"
  },{
    "value":67,
    "kind":"constant",
    "name":"ACT_RELOAD"
  },{
    "value":880,
    "kind":"constant",
    "name":"ACT_RELOAD_AUTOGUN"
  },{
    "value":889,
    "kind":"constant",
    "name":"ACT_RELOAD_DUAL"
  },{
    "value":875,
    "kind":"constant",
    "name":"ACT_RELOAD_FAIL"
  },{
    "value":69,
    "kind":"constant",
    "name":"ACT_RELOAD_FINISH"
  },{
    "value":70,
    "kind":"constant",
    "name":"ACT_RELOAD_LOW"
  },{
    "value":371,
    "kind":"constant",
    "name":"ACT_RELOAD_PISTOL"
  },{
    "value":372,
    "kind":"constant",
    "name":"ACT_RELOAD_PISTOL_LOW"
  },{
    "value":375,
    "kind":"constant",
    "name":"ACT_RELOAD_SHOTGUN"
  },{
    "value":376,
    "kind":"constant",
    "name":"ACT_RELOAD_SHOTGUN_LOW"
  },{
    "value":373,
    "kind":"constant",
    "name":"ACT_RELOAD_SMG1"
  },{
    "value":374,
    "kind":"constant",
    "name":"ACT_RELOAD_SMG1_LOW"
  },{
    "value":68,
    "kind":"constant",
    "name":"ACT_RELOAD_START"
  },{
    "value":874,
    "kind":"constant",
    "name":"ACT_RELOAD_SUCCEED"
  },{
    "value":0,
    "kind":"constant",
    "name":"ACT_RESET"
  },{
    "value":432,
    "kind":"constant",
    "name":"ACT_RIDE_MANNED_GUN"
  },{
    "value":40,
    "kind":"constant",
    "name":"ACT_ROLL_LEFT"
  },{
    "value":41,
    "kind":"constant",
    "name":"ACT_ROLL_RIGHT"
  },{
    "value":10,
    "kind":"constant",
    "name":"ACT_RUN"
  },{
    "value":494,
    "kind":"constant",
    "name":"ACT_RUNTOIDLE"
  },{
    "value":89,
    "kind":"constant",
    "name":"ACT_RUN_AGITATED"
  },{
    "value":11,
    "kind":"constant",
    "name":"ACT_RUN_AIM"
  },{
    "value":101,
    "kind":"constant",
    "name":"ACT_RUN_AIM_AGITATED"
  },{
    "value":877,
    "kind":"constant",
    "name":"ACT_RUN_AIM_AUTOGUN"
  },{
    "value":886,
    "kind":"constant",
    "name":"ACT_RUN_AIM_DUAL"
  },{
    "value":367,
    "kind":"constant",
    "name":"ACT_RUN_AIM_PISTOL"
  },{
    "value":99,
    "kind":"constant",
    "name":"ACT_RUN_AIM_RELAXED"
  },{
    "value":358,
    "kind":"constant",
    "name":"ACT_RUN_AIM_RIFLE"
  },{
    "value":333,
    "kind":"constant",
    "name":"ACT_RUN_AIM_RIFLE_STIMULATED"
  },{
    "value":363,
    "kind":"constant",
    "name":"ACT_RUN_AIM_SHOTGUN"
  },{
    "value":102,
    "kind":"constant",
    "name":"ACT_RUN_AIM_STEALTH"
  },{
    "value":370,
    "kind":"constant",
    "name":"ACT_RUN_AIM_STEALTH_PISTOL"
  },{
    "value":100,
    "kind":"constant",
    "name":"ACT_RUN_AIM_STIMULATED"
  },{
    "value":12,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH"
  },{
    "value":13,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_AIM"
  },{
    "value":360,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_AIM_RIFLE"
  },{
    "value":359,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_RIFLE"
  },{
    "value":350,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_RPG"
  },{
    "value":107,
    "kind":"constant",
    "name":"ACT_RUN_HURT"
  },{
    "value":135,
    "kind":"constant",
    "name":"ACT_RUN_ON_FIRE"
  },{
    "value":365,
    "kind":"constant",
    "name":"ACT_RUN_PISTOL"
  },{
    "value":14,
    "kind":"constant",
    "name":"ACT_RUN_PROTECTED"
  },{
    "value":87,
    "kind":"constant",
    "name":"ACT_RUN_RELAXED"
  },{
    "value":357,
    "kind":"constant",
    "name":"ACT_RUN_RIFLE"
  },{
    "value":328,
    "kind":"constant",
    "name":"ACT_RUN_RIFLE_RELAXED"
  },{
    "value":330,
    "kind":"constant",
    "name":"ACT_RUN_RIFLE_STIMULATED"
  },{
    "value":348,
    "kind":"constant",
    "name":"ACT_RUN_RPG"
  },{
    "value":352,
    "kind":"constant",
    "name":"ACT_RUN_RPG_RELAXED"
  },{
    "value":112,
    "kind":"constant",
    "name":"ACT_RUN_SCARED"
  },{
    "value":90,
    "kind":"constant",
    "name":"ACT_RUN_STEALTH"
  },{
    "value":361,
    "kind":"constant",
    "name":"ACT_RUN_STEALTH_PISTOL"
  },{
    "value":88,
    "kind":"constant",
    "name":"ACT_RUN_STIMULATED"
  },{
    "value":911,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_0"
  },{
    "value":912,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_1"
  },{
    "value":921,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_10"
  },{
    "value":922,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_11"
  },{
    "value":923,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_12"
  },{
    "value":924,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_13"
  },{
    "value":925,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_14"
  },{
    "value":926,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_15"
  },{
    "value":927,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_16"
  },{
    "value":928,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_17"
  },{
    "value":929,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_18"
  },{
    "value":930,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_19"
  },{
    "value":913,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_2"
  },{
    "value":931,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_20"
  },{
    "value":932,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_21"
  },{
    "value":933,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_22"
  },{
    "value":934,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_23"
  },{
    "value":935,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_24"
  },{
    "value":936,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_25"
  },{
    "value":937,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_26"
  },{
    "value":938,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_27"
  },{
    "value":939,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_28"
  },{
    "value":940,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_29"
  },{
    "value":914,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_3"
  },{
    "value":941,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_30"
  },{
    "value":942,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_31"
  },{
    "value":915,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_4"
  },{
    "value":916,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_5"
  },{
    "value":917,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_6"
  },{
    "value":918,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_7"
  },{
    "value":919,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_8"
  },{
    "value":920,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_9"
  },{
    "value":15,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_MOVE"
  },{
    "value":819,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_DRAW"
  },{
    "value":826,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_DRYFIRE"
  },{
    "value":820,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_HOLSTER"
  },{
    "value":821,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_IDLE"
  },{
    "value":828,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_IDLE_LOWERED"
  },{
    "value":827,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_IDLE_TO_LOWERED"
  },{
    "value":829,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_LOWERED_TO_IDLE"
  },{
    "value":823,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_PRIMARYATTACK"
  },{
    "value":822,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_PULLBACK"
  },{
    "value":825,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_RELOAD"
  },{
    "value":824,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_SECONDARYATTACK"
  },{
    "value":453,
    "kind":"constant",
    "name":"ACT_SHIELD_ATTACK"
  },{
    "value":451,
    "kind":"constant",
    "name":"ACT_SHIELD_DOWN"
  },{
    "value":454,
    "kind":"constant",
    "name":"ACT_SHIELD_KNOCKBACK"
  },{
    "value":450,
    "kind":"constant",
    "name":"ACT_SHIELD_UP"
  },{
    "value":452,
    "kind":"constant",
    "name":"ACT_SHIELD_UP_IDLE"
  },{
    "value":37,
    "kind":"constant",
    "name":"ACT_SHIPLADDER_DOWN"
  },{
    "value":36,
    "kind":"constant",
    "name":"ACT_SHIPLADDER_UP"
  },{
    "value":264,
    "kind":"constant",
    "name":"ACT_SHOTGUN_PUMP"
  },{
    "value":263,
    "kind":"constant",
    "name":"ACT_SHOTGUN_RELOAD_FINISH"
  },{
    "value":262,
    "kind":"constant",
    "name":"ACT_SHOTGUN_RELOAD_START"
  },{
    "value":50,
    "kind":"constant",
    "name":"ACT_SIGNAL1"
  },{
    "value":51,
    "kind":"constant",
    "name":"ACT_SIGNAL2"
  },{
    "value":52,
    "kind":"constant",
    "name":"ACT_SIGNAL3"
  },{
    "value":53,
    "kind":"constant",
    "name":"ACT_SIGNAL_ADVANCE"
  },{
    "value":54,
    "kind":"constant",
    "name":"ACT_SIGNAL_FORWARD"
  },{
    "value":55,
    "kind":"constant",
    "name":"ACT_SIGNAL_GROUP"
  },{
    "value":56,
    "kind":"constant",
    "name":"ACT_SIGNAL_HALT"
  },{
    "value":57,
    "kind":"constant",
    "name":"ACT_SIGNAL_LEFT"
  },{
    "value":58,
    "kind":"constant",
    "name":"ACT_SIGNAL_RIGHT"
  },{
    "value":59,
    "kind":"constant",
    "name":"ACT_SIGNAL_TAKECOVER"
  },{
    "value":258,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_DETONATE"
  },{
    "value":257,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_DRAW"
  },{
    "value":259,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_HOLSTER"
  },{
    "value":256,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_IDLE"
  },{
    "value":260,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_STICKWALL_DRAW"
  },{
    "value":261,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_THROW_DRAW"
  },{
    "value":226,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ATTACH"
  },{
    "value":227,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ATTACH2"
  },{
    "value":230,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_DETONATE"
  },{
    "value":231,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_DETONATOR_HOLSTER"
  },{
    "value":232,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_DRAW"
  },{
    "value":224,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_IDLE"
  },{
    "value":228,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_ATTACH"
  },{
    "value":229,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_ATTACH2"
  },{
    "value":233,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_DRAW"
  },{
    "value":225,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_IDLE"
  },{
    "value":234,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_TO_THROW"
  },{
    "value":235,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_TO_THROW_ND"
  },{
    "value":236,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_TO_TRIPMINE_ND"
  },{
    "value":247,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_DETONATE"
  },{
    "value":248,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_DETONATOR_HOLSTER"
  },{
    "value":243,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_DRAW"
  },{
    "value":237,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_IDLE"
  },{
    "value":244,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_ND_DRAW"
  },{
    "value":238,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_ND_IDLE"
  },{
    "value":239,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW"
  },{
    "value":240,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW2"
  },{
    "value":241,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW_ND"
  },{
    "value":242,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW_ND2"
  },{
    "value":245,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_TO_STICKWALL"
  },{
    "value":246,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_TO_STICKWALL_ND"
  },{
    "value":249,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_TO_TRIPMINE_ND"
  },{
    "value":252,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_ATTACH"
  },{
    "value":253,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_ATTACH2"
  },{
    "value":251,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_DRAW"
  },{
    "value":250,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_IDLE"
  },{
    "value":254,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_TO_STICKWALL_ND"
  },{
    "value":255,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_TO_THROW_ND"
  },{
    "value":898,
    "kind":"constant",
    "name":"ACT_SLEEP"
  },{
    "value":63,
    "kind":"constant",
    "name":"ACT_SMALL_FLINCH"
  },{
    "value":267,
    "kind":"constant",
    "name":"ACT_SMG2_DRAW2"
  },{
    "value":269,
    "kind":"constant",
    "name":"ACT_SMG2_DRYFIRE2"
  },{
    "value":266,
    "kind":"constant",
    "name":"ACT_SMG2_FIRE2"
  },{
    "value":265,
    "kind":"constant",
    "name":"ACT_SMG2_IDLE2"
  },{
    "value":268,
    "kind":"constant",
    "name":"ACT_SMG2_RELOAD2"
  },{
    "value":270,
    "kind":"constant",
    "name":"ACT_SMG2_TOAUTO"
  },{
    "value":271,
    "kind":"constant",
    "name":"ACT_SMG2_TOBURST"
  },{
    "value":108,
    "kind":"constant",
    "name":"ACT_SPECIAL_ATTACK1"
  },{
    "value":109,
    "kind":"constant",
    "name":"ACT_SPECIAL_ATTACK2"
  },{
    "value":180,
    "kind":"constant",
    "name":"ACT_SPECIFIC_SEQUENCE"
  },{
    "value":904,
    "kind":"constant",
    "name":"ACT_SPINAROUND"
  },{
    "value":908,
    "kind":"constant",
    "name":"ACT_SPRAY"
  },{
    "value":46,
    "kind":"constant",
    "name":"ACT_STAND"
  },{
    "value":429,
    "kind":"constant",
    "name":"ACT_STARTDYING"
  },{
    "value":143,
    "kind":"constant",
    "name":"ACT_STEP_BACK"
  },{
    "value":144,
    "kind":"constant",
    "name":"ACT_STEP_FORE"
  },{
    "value":141,
    "kind":"constant",
    "name":"ACT_STEP_LEFT"
  },{
    "value":142,
    "kind":"constant",
    "name":"ACT_STEP_RIGHT"
  },{
    "enum":"GameActivity_t",
    "value":1554,
    "kind":"constant",
    "name":"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE"
  },{
    "value":38,
    "kind":"constant",
    "name":"ACT_STRAFE_LEFT"
  },{
    "value":39,
    "kind":"constant",
    "name":"ACT_STRAFE_RIGHT"
  },{
    "value":28,
    "kind":"constant",
    "name":"ACT_SWIM"
  },{
    "enum":"GameActivity_t",
    "value":1558,
    "kind":"constant",
    "name":"ACT_TINY_AVALANCHE"
  },{
    "enum":"GameActivity_t",
    "value":1560,
    "kind":"constant",
    "name":"ACT_TINY_GROWL"
  },{
    "enum":"GameActivity_t",
    "value":1559,
    "kind":"constant",
    "name":"ACT_TINY_TOSS"
  },{
    "value":2,
    "kind":"constant",
    "name":"ACT_TRANSITION"
  },{
    "value":462,
    "kind":"constant",
    "name":"ACT_TURN"
  },{
    "value":461,
    "kind":"constant",
    "name":"ACT_TURNLEFT45"
  },{
    "value":460,
    "kind":"constant",
    "name":"ACT_TURNRIGHT45"
  },{
    "value":42,
    "kind":"constant",
    "name":"ACT_TURN_LEFT"
  },{
    "value":43,
    "kind":"constant",
    "name":"ACT_TURN_RIGHT"
  },{
    "value":473,
    "kind":"constant",
    "name":"ACT_UNDEPLOY"
  },{
    "value":47,
    "kind":"constant",
    "name":"ACT_USE"
  },{
    "value":113,
    "kind":"constant",
    "name":"ACT_VICTORY_DANCE"
  },{
    "value":222,
    "kind":"constant",
    "name":"ACT_VM_ATTACH_SILENCER"
  },{
    "value":181,
    "kind":"constant",
    "name":"ACT_VM_DEPLOY"
  },{
    "value":223,
    "kind":"constant",
    "name":"ACT_VM_DETACH_SILENCER"
  },{
    "value":183,
    "kind":"constant",
    "name":"ACT_VM_DRAW"
  },{
    "value":495,
    "kind":"constant",
    "name":"ACT_VM_DRAW_DEPLOYED"
  },{
    "value":481,
    "kind":"constant",
    "name":"ACT_VM_DRAW_SILENCED"
  },{
    "value":191,
    "kind":"constant",
    "name":"ACT_VM_DROP"
  },{
    "value":196,
    "kind":"constant",
    "name":"ACT_VM_DRYFIRE"
  },{
    "value":483,
    "kind":"constant",
    "name":"ACT_VM_DRYFIRE_LEFT"
  },{
    "value":479,
    "kind":"constant",
    "name":"ACT_VM_DRYFIRE_SILENCED"
  },{
    "value":186,
    "kind":"constant",
    "name":"ACT_VM_FIDGET"
  },{
    "value":209,
    "kind":"constant",
    "name":"ACT_VM_HAULBACK"
  },{
    "value":201,
    "kind":"constant",
    "name":"ACT_VM_HITCENTER"
  },{
    "value":202,
    "kind":"constant",
    "name":"ACT_VM_HITCENTER2"
  },{
    "value":197,
    "kind":"constant",
    "name":"ACT_VM_HITLEFT"
  },{
    "value":198,
    "kind":"constant",
    "name":"ACT_VM_HITLEFT2"
  },{
    "value":199,
    "kind":"constant",
    "name":"ACT_VM_HITRIGHT"
  },{
    "value":200,
    "kind":"constant",
    "name":"ACT_VM_HITRIGHT2"
  },{
    "value":184,
    "kind":"constant",
    "name":"ACT_VM_HOLSTER"
  },{
    "value":185,
    "kind":"constant",
    "name":"ACT_VM_IDLE"
  },{
    "value":482,
    "kind":"constant",
    "name":"ACT_VM_IDLE_EMPTY_LEFT"
  },{
    "value":214,
    "kind":"constant",
    "name":"ACT_VM_IDLE_LOWERED"
  },{
    "value":480,
    "kind":"constant",
    "name":"ACT_VM_IDLE_SILENCED"
  },{
    "value":213,
    "kind":"constant",
    "name":"ACT_VM_IDLE_TO_LOWERED"
  },{
    "value":484,
    "kind":"constant",
    "name":"ACT_VM_IS_DRAW"
  },{
    "value":485,
    "kind":"constant",
    "name":"ACT_VM_IS_HOLSTER"
  },{
    "value":486,
    "kind":"constant",
    "name":"ACT_VM_IS_IDLE"
  },{
    "value":487,
    "kind":"constant",
    "name":"ACT_VM_IS_PRIMARYATTACK"
  },{
    "value":215,
    "kind":"constant",
    "name":"ACT_VM_LOWERED_TO_IDLE"
  },{
    "value":221,
    "kind":"constant",
    "name":"ACT_VM_MAUL_LOOP"
  },{
    "value":207,
    "kind":"constant",
    "name":"ACT_VM_MISSCENTER"
  },{
    "value":208,
    "kind":"constant",
    "name":"ACT_VM_MISSCENTER2"
  },{
    "value":203,
    "kind":"constant",
    "name":"ACT_VM_MISSLEFT"
  },{
    "value":204,
    "kind":"constant",
    "name":"ACT_VM_MISSLEFT2"
  },{
    "value":205,
    "kind":"constant",
    "name":"ACT_VM_MISSRIGHT"
  },{
    "value":206,
    "kind":"constant",
    "name":"ACT_VM_MISSRIGHT2"
  },{
    "value":219,
    "kind":"constant",
    "name":"ACT_VM_PICKUP"
  },{
    "value":193,
    "kind":"constant",
    "name":"ACT_VM_PRIMARYATTACK"
  },{
    "value":477,
    "kind":"constant",
    "name":"ACT_VM_PRIMARYATTACK_SILENCED"
  },{
    "value":187,
    "kind":"constant",
    "name":"ACT_VM_PULLBACK"
  },{
    "value":188,
    "kind":"constant",
    "name":"ACT_VM_PULLBACK_HIGH"
  },{
    "value":189,
    "kind":"constant",
    "name":"ACT_VM_PULLBACK_LOW"
  },{
    "value":192,
    "kind":"constant",
    "name":"ACT_VM_PULLPIN"
  },{
    "value":216,
    "kind":"constant",
    "name":"ACT_VM_RECOIL1"
  },{
    "value":217,
    "kind":"constant",
    "name":"ACT_VM_RECOIL2"
  },{
    "value":218,
    "kind":"constant",
    "name":"ACT_VM_RECOIL3"
  },{
    "value":220,
    "kind":"constant",
    "name":"ACT_VM_RELEASE"
  },{
    "value":195,
    "kind":"constant",
    "name":"ACT_VM_RELOAD"
  },{
    "value":182,
    "kind":"constant",
    "name":"ACT_VM_RELOAD_EMPTY"
  },{
    "value":478,
    "kind":"constant",
    "name":"ACT_VM_RELOAD_SILENCED"
  },{
    "value":194,
    "kind":"constant",
    "name":"ACT_VM_SECONDARYATTACK"
  },{
    "value":433,
    "kind":"constant",
    "name":"ACT_VM_SPRINT_ENTER"
  },{
    "value":434,
    "kind":"constant",
    "name":"ACT_VM_SPRINT_IDLE"
  },{
    "value":435,
    "kind":"constant",
    "name":"ACT_VM_SPRINT_LEAVE"
  },{
    "value":210,
    "kind":"constant",
    "name":"ACT_VM_SWINGHARD"
  },{
    "value":212,
    "kind":"constant",
    "name":"ACT_VM_SWINGHIT"
  },{
    "value":211,
    "kind":"constant",
    "name":"ACT_VM_SWINGMISS"
  },{
    "value":190,
    "kind":"constant",
    "name":"ACT_VM_THROW"
  },{
    "value":805,
    "kind":"constant",
    "name":"ACT_VM_UNUSABLE"
  },{
    "value":806,
    "kind":"constant",
    "name":"ACT_VM_UNUSABLE_TO_USABLE"
  },{
    "value":807,
    "kind":"constant",
    "name":"ACT_VM_USABLE_TO_UNUSABLE"
  },{
    "value":986,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_BURST_ATTACK"
  },{
    "value":984,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_BURST_TOGGLE"
  },{
    "value":947,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_IN_CHAMBERED"
  },{
    "value":948,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_IN_SLIDE_BACK"
  },{
    "value":945,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_OUT_CHAMBERED"
  },{
    "value":946,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_OUT_SLIDE_BACK"
  },{
    "value":971,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_EMPTY_CLIP_IN_SLIDE_BACK"
  },{
    "value":949,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_IDLE_SLIDE_BACK"
  },{
    "value":950,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_IDLE_SLIDE_BACK_CLIP_READY"
  },{
    "value":943,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LAST_SHOT"
  },{
    "value":982,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LONG_CLIP_IN_CHAMBERED"
  },{
    "value":983,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LONG_CLIP_IN_SLIDE_BACK"
  },{
    "value":985,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LOW_KICK"
  },{
    "value":944,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_SLIDE_RELEASE"
  },{
    "value":977,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_CLOSE_CHAMBER"
  },{
    "value":987,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_GRENADE_TWIST"
  },{
    "value":972,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_IDLE"
  },{
    "value":973,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_OPEN_CHAMBER"
  },{
    "value":974,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_RELOAD_1"
  },{
    "value":975,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_RELOAD_2"
  },{
    "value":976,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_RELOAD_3"
  },{
    "value":979,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_SHOOT"
  },{
    "value":980,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_SLIDE_BACK"
  },{
    "value":981,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_SLIDE_FORWARD"
  },{
    "value":978,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_TRIGGER_SQUEEZE"
  },{
    "value":899,
    "kind":"constant",
    "name":"ACT_WAKE"
  },{
    "value":6,
    "kind":"constant",
    "name":"ACT_WALK"
  },{
    "value":85,
    "kind":"constant",
    "name":"ACT_WALK_AGITATED"
  },{
    "value":7,
    "kind":"constant",
    "name":"ACT_WALK_AIM"
  },{
    "value":97,
    "kind":"constant",
    "name":"ACT_WALK_AIM_AGITATED"
  },{
    "value":876,
    "kind":"constant",
    "name":"ACT_WALK_AIM_AUTOGUN"
  },{
    "value":885,
    "kind":"constant",
    "name":"ACT_WALK_AIM_DUAL"
  },{
    "value":366,
    "kind":"constant",
    "name":"ACT_WALK_AIM_PISTOL"
  },{
    "value":95,
    "kind":"constant",
    "name":"ACT_WALK_AIM_RELAXED"
  },{
    "value":354,
    "kind":"constant",
    "name":"ACT_WALK_AIM_RIFLE"
  },{
    "value":332,
    "kind":"constant",
    "name":"ACT_WALK_AIM_RIFLE_STIMULATED"
  },{
    "value":362,
    "kind":"constant",
    "name":"ACT_WALK_AIM_SHOTGUN"
  },{
    "value":98,
    "kind":"constant",
    "name":"ACT_WALK_AIM_STEALTH"
  },{
    "value":369,
    "kind":"constant",
    "name":"ACT_WALK_AIM_STEALTH_PISTOL"
  },{
    "value":96,
    "kind":"constant",
    "name":"ACT_WALK_AIM_STIMULATED"
  },{
    "value":337,
    "kind":"constant",
    "name":"ACT_WALK_ANGRY"
  },{
    "value":428,
    "kind":"constant",
    "name":"ACT_WALK_CARRY"
  },{
    "value":8,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH"
  },{
    "value":9,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_AIM"
  },{
    "value":356,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_AIM_RIFLE"
  },{
    "value":355,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_RIFLE"
  },{
    "value":349,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_RPG"
  },{
    "value":106,
    "kind":"constant",
    "name":"ACT_WALK_HURT"
  },{
    "value":134,
    "kind":"constant",
    "name":"ACT_WALK_ON_FIRE"
  },{
    "value":322,
    "kind":"constant",
    "name":"ACT_WALK_PACKAGE"
  },{
    "value":364,
    "kind":"constant",
    "name":"ACT_WALK_PISTOL"
  },{
    "value":83,
    "kind":"constant",
    "name":"ACT_WALK_RELAXED"
  },{
    "value":353,
    "kind":"constant",
    "name":"ACT_WALK_RIFLE"
  },{
    "value":327,
    "kind":"constant",
    "name":"ACT_WALK_RIFLE_RELAXED"
  },{
    "value":329,
    "kind":"constant",
    "name":"ACT_WALK_RIFLE_STIMULATED"
  },{
    "value":347,
    "kind":"constant",
    "name":"ACT_WALK_RPG"
  },{
    "value":351,
    "kind":"constant",
    "name":"ACT_WALK_RPG_RELAXED"
  },{
    "value":111,
    "kind":"constant",
    "name":"ACT_WALK_SCARED"
  },{
    "value":86,
    "kind":"constant",
    "name":"ACT_WALK_STEALTH"
  },{
    "value":368,
    "kind":"constant",
    "name":"ACT_WALK_STEALTH_PISTOL"
  },{
    "value":84,
    "kind":"constant",
    "name":"ACT_WALK_STIMULATED"
  },{
    "value":324,
    "kind":"constant",
    "name":"ACT_WALK_SUITCASE"
  },{
    "enum":"GameActivity_t",
    "value":1546,
    "kind":"constant",
    "name":"ACT_WAVEFORM_END"
  },{
    "enum":"GameActivity_t",
    "value":1545,
    "kind":"constant",
    "name":"ACT_WAVEFORM_START"
  },{
    "value":965,
    "kind":"constant",
    "name":"ACT_ZOMBIE_LUNGE"
  },{
    "value":964,
    "kind":"constant",
    "name":"ACT_ZOMBIE_TRIP"
  },{
    "value":7,
    "kind":"constant",
    "name":"AE_CLIENT_EFFECT_ATTACH"
  },{
    "value":10,
    "kind":"constant",
    "name":"AE_CL_ADD_PARTICLE_EFFECT_CP"
  },{
    "value":27,
    "kind":"constant",
    "name":"AE_CL_BODYGROUP_SET_VALUE"
  },{
    "value":29,
    "kind":"constant",
    "name":"AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN"
  },{
    "value":39,
    "kind":"constant",
    "name":"AE_CL_CLOTH_ATTR"
  },{
    "value":42,
    "kind":"constant",
    "name":"AE_CL_CLOTH_EFFECT"
  },{
    "value":40,
    "kind":"constant",
    "name":"AE_CL_CLOTH_GROUND_OFFSET"
  },{
    "value":41,
    "kind":"constant",
    "name":"AE_CL_CLOTH_STIFFEN"
  },{
    "value":43,
    "kind":"constant",
    "name":"AE_CL_CREATE_ANIM_SCOPE_PROP"
  },{
    "value":8,
    "kind":"constant",
    "name":"AE_CL_CREATE_PARTICLE_EFFECT"
  },{
    "value":11,
    "kind":"constant",
    "name":"AE_CL_CREATE_PARTICLE_EFFECT_CFG"
  },{
    "value":26,
    "kind":"constant",
    "name":"AE_CL_DISABLE_BODYGROUP"
  },{
    "value":47,
    "kind":"constant",
    "name":"AE_CL_DOTA_NPC_CREATE_PARTICLE_EFFECT"
  },{
    "value":45,
    "kind":"constant",
    "name":"AE_CL_DOTA_PLAY_STATUS_EFFECT"
  },{
    "value":48,
    "kind":"constant",
    "name":"AE_CL_DOTA_RUBICK_ARCANA_CREATE_PARTICLE_EFFECT"
  },{
    "value":46,
    "kind":"constant",
    "name":"AE_CL_DOTA_STOP_STATUS_EFFECT"
  },{
    "value":25,
    "kind":"constant",
    "name":"AE_CL_ENABLE_BODYGROUP"
  },{
    "value":18,
    "kind":"constant",
    "name":"AE_CL_FOOTSTEP_LEFT"
  },{
    "value":19,
    "kind":"constant",
    "name":"AE_CL_FOOTSTEP_RIGHT"
  },{
    "value":20,
    "kind":"constant",
    "name":"AE_CL_MFOOTSTEP_LEFT"
  },{
    "value":22,
    "kind":"constant",
    "name":"AE_CL_MFOOTSTEP_LEFT_LOUD"
  },{
    "value":21,
    "kind":"constant",
    "name":"AE_CL_MFOOTSTEP_RIGHT"
  },{
    "value":23,
    "kind":"constant",
    "name":"AE_CL_MFOOTSTEP_RIGHT_LOUD"
  },{
    "value":1,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND"
  },{
    "value":2,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND_ATTACHMENT"
  },{
    "value":6,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND_LOOPING"
  },{
    "value":3,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND_POSITION"
  },{
    "value":33,
    "kind":"constant",
    "name":"AE_CL_SPEECH"
  },{
    "value":5,
    "kind":"constant",
    "name":"AE_CL_STOPSOUND"
  },{
    "value":9,
    "kind":"constant",
    "name":"AE_CL_STOP_PARTICLE_EFFECT"
  },{
    "value":12,
    "kind":"constant",
    "name":"AE_CL_SUPPRESS_EVENTS_WITH_TAG"
  },{
    "value":53,
    "kind":"constant",
    "name":"AE_DOTA_CREATE_CLINKZ_ATTACK"
  },{
    "value":55,
    "kind":"constant",
    "name":"AE_DOTA_DIE_PHANTOM_DEATH_PARTICLES"
  },{
    "value":50,
    "kind":"constant",
    "name":"AE_DOTA_PET_ITEM_DROP"
  },{
    "value":49,
    "kind":"constant",
    "name":"AE_DOTA_PET_ITEM_PICKUP"
  },{
    "value":54,
    "kind":"constant",
    "name":"AE_DOTA_PLAY_SOUND_ATTACK_BACKSTAB"
  },{
    "value":52,
    "kind":"constant",
    "name":"AE_DOTA_PLAY_SOUND_ATTACK_SPECIAL"
  },{
    "value":51,
    "kind":"constant",
    "name":"AE_DOTA_SUPPRESS_CONSTANT_LAYER"
  },{
    "value":56,
    "kind":"constant",
    "name":"AE_DOTA_SWITCH_ATTACK_COMBO"
  },{
    "value":0,
    "kind":"constant",
    "name":"AE_EMPTY"
  },{
    "value":34,
    "kind":"constant",
    "name":"AE_FIRE_INPUT"
  },{
    "value":17,
    "kind":"constant",
    "name":"AE_FOOTSTEP"
  },{
    "value":44,
    "kind":"constant",
    "name":"AE_HAPTIC_PULSE"
  },{
    "value":36,
    "kind":"constant",
    "name":"AE_IK_ALLOW_PLANE_TILT_NORMAL_UPDATES"
  },{
    "value":38,
    "kind":"constant",
    "name":"AE_IK_SET_CHAIN_BLEND_AMOUNT"
  },{
    "value":35,
    "kind":"constant",
    "name":"AE_IK_SET_LOCK_ROTATION_ALPHA"
  },{
    "value":37,
    "kind":"constant",
    "name":"AE_IK_SET_MASTER_BLEND_AMOUNT"
  },{
    "value":15,
    "kind":"constant",
    "name":"AE_MUZZLEFLASH"
  },{
    "value":24,
    "kind":"constant",
    "name":"AE_RAGDOLL"
  },{
    "value":13,
    "kind":"constant",
    "name":"AE_START_SCRIPTED_EFFECT"
  },{
    "value":14,
    "kind":"constant",
    "name":"AE_STOP_SCRIPTED_EFFECT"
  },{
    "value":28,
    "kind":"constant",
    "name":"AE_SV_BODYGROUP_SET_VALUE"
  },{
    "value":16,
    "kind":"constant",
    "name":"AE_SV_DUSTTRAIL"
  },{
    "value":4,
    "kind":"constant",
    "name":"AE_SV_PLAYSOUND"
  },{
    "value":31,
    "kind":"constant",
    "name":"AE_WPN_PLAYWPNSOUND"
  },{
    "value":30,
    "kind":"constant",
    "name":"AE_WPN_PRIMARYATTACK"
  },{
    "value":32,
    "kind":"constant",
    "name":"AE_WPN_SECONDARYATTACK"
  },{
    "enum":"DAMAGE_TYPES",
    "value":7,
    "kind":"constant",
    "name":"DAMAGE_TYPE_ALL"
  },{
    "enum":"DAMAGE_TYPES",
    "value":8,
    "kind":"constant",
    "name":"DAMAGE_TYPE_HP_REMOVAL"
  },{
    "enum":"DAMAGE_TYPES",
    "value":2,
    "kind":"constant",
    "name":"DAMAGE_TYPE_MAGICAL"
  },{
    "enum":"DAMAGE_TYPES",
    "value":0,
    "kind":"constant",
    "name":"DAMAGE_TYPE_NONE"
  },{
    "enum":"DAMAGE_TYPES",
    "value":1,
    "kind":"constant",
    "name":"DAMAGE_TYPE_PHYSICAL"
  },{
    "enum":"DAMAGE_TYPES",
    "value":4,
    "kind":"constant",
    "name":"DAMAGE_TYPE_PURE"
  },{
    "value":1048576,
    "kind":"constant",
    "name":"DMG_ACID"
  },{
    "value":8192,
    "kind":"constant",
    "name":"DMG_ALWAYSGIB"
  },{
    "value":64,
    "kind":"constant",
    "name":"DMG_BLAST"
  },{
    "value":2,
    "kind":"constant",
    "name":"DMG_BULLET"
  },{
    "value":8,
    "kind":"constant",
    "name":"DMG_BURN"
  },{
    "value":128,
    "kind":"constant",
    "name":"DMG_CLUB"
  },{
    "value":1,
    "kind":"constant",
    "name":"DMG_CRUSH"
  },{
    "value":16384,
    "kind":"constant",
    "name":"DMG_DROWN"
  },{
    "value":524288,
    "kind":"constant",
    "name":"DMG_DROWNRECOVER"
  },{
    "value":1024,
    "kind":"constant",
    "name":"DMG_ENERGYBEAM"
  },{
    "value":32,
    "kind":"constant",
    "name":"DMG_FALL"
  },{
    "value":0,
    "kind":"constant",
    "name":"DMG_GENERIC"
  },{
    "value":65536,
    "kind":"constant",
    "name":"DMG_NERVEGAS"
  },{
    "value":4096,
    "kind":"constant",
    "name":"DMG_NEVERGIB"
  },{
    "value":32768,
    "kind":"constant",
    "name":"DMG_PARALYZE"
  },{
    "value":8388608,
    "kind":"constant",
    "name":"DMG_PHYSGUN"
  },{
    "value":16777216,
    "kind":"constant",
    "name":"DMG_PLASMA"
  },{
    "value":131072,
    "kind":"constant",
    "name":"DMG_POISON"
  },{
    "value":2048,
    "kind":"constant",
    "name":"DMG_PREVENT_PHYSICS_FORCE"
  },{
    "value":262144,
    "kind":"constant",
    "name":"DMG_RADIATION"
  },{
    "value":4194304,
    "kind":"constant",
    "name":"DMG_REMOVENORAGDOLL"
  },{
    "value":256,
    "kind":"constant",
    "name":"DMG_SHOCK"
  },{
    "value":4,
    "kind":"constant",
    "name":"DMG_SLASH"
  },{
    "value":2097152,
    "kind":"constant",
    "name":"DMG_SLOWBURN"
  },{
    "value":512,
    "kind":"constant",
    "name":"DMG_SONIC"
  },{
    "value":16,
    "kind":"constant",
    "name":"DMG_VEHICLE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":32,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_AOE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":131072,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_ATTACK"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":65536,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_AURA"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":4096,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_AUTOCAST"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":128,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_CHANNELLED"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":1024,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":16777216,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":536870912,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":8388608,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":33554432,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":262144,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_HIDDEN"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":134217728,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":4194304,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":2097152,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":2048,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":256,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_ITEM"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":-2147483648,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NONE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":67108864,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":64,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":4,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":32768,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":16384,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":8192,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":2,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_PASSIVE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":16,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_POINT"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":524288,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":268435456,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":512,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_TOGGLE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":8,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":1048576,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":1073741824,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING"
  },{
    "enum":"DOTAAbilitySpeakTrigger_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ABILITY_SPEAK_CAST"
  },{
    "enum":"DOTAAbilitySpeakTrigger_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_SPEAK_START_ACTION_PHASE"
  },{
    "enum":"attackfail",
    "value":6,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_CANNOT_FAIL"
  },{
    "enum":"attackfail",
    "value":7,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION"
  },{
    "enum":"attackfail",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_NO"
  },{
    "enum":"attackfail",
    "value":2,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS"
  },{
    "enum":"attackfail",
    "value":3,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED"
  },{
    "enum":"attackfail",
    "value":4,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE"
  },{
    "enum":"attackfail",
    "value":5,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE"
  },{
    "enum":"attackfail",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS"
  },{
    "enum":"Attributes",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY"
  },{
    "enum":"AttributeDerivedStats",
    "value":4,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY_ARMOR"
  },{
    "enum":"AttributeDerivedStats",
    "value":5,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED"
  },{
    "enum":"AttributeDerivedStats",
    "value":3,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY_DAMAGE"
  },{
    "enum":"Attributes",
    "value":2,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLECT"
  },{
    "enum":"AttributeDerivedStats",
    "value":6,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE"
  },{
    "enum":"AttributeDerivedStats",
    "value":7,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA"
  },{
    "enum":"AttributeDerivedStats",
    "value":8,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN"
  },{
    "enum":"Attributes",
    "value":-1,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INVALID"
  },{
    "enum":"Attributes",
    "value":3,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_MAX"
  },{
    "enum":"Attributes",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH"
  },{
    "enum":"AttributeDerivedStats",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH_DAMAGE"
  },{
    "enum":"AttributeDerivedStats",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH_HP"
  },{
    "enum":"AttributeDerivedStats",
    "value":2,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH_HP_REGEN"
  },{
    "enum":"modifierremove",
    "value":0,
    "kind":"constant",
    "name":"DOTA_BUFF_REMOVE_ALL"
  },{
    "enum":"modifierremove",
    "value":2,
    "kind":"constant",
    "name":"DOTA_BUFF_REMOVE_ALLY"
  },{
    "enum":"modifierremove",
    "value":1,
    "kind":"constant",
    "name":"DOTA_BUFF_REMOVE_ENEMY"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_ABANDONED"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_CONNECTED"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_DISCONNECTED"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_FAILED"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_LOADING"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_NOT_YET_CONNECTED"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_UNKNOWN"
  },{
    "enum":"DamageCategory_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_DAMAGE_CATEGORY_ATTACK"
  },{
    "enum":"DamageCategory_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_DAMAGE_CATEGORY_SPELL"
  },{
    "enum":"DOTADamageFlag_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_BYPASSES_BLOCK"
  },{
    "enum":"DOTADamageFlag_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY"
  },{
    "enum":"DOTADamageFlag_t",
    "value":2048,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN"
  },{
    "enum":"DOTADamageFlag_t",
    "value":32,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_HPLOSS"
  },{
    "enum":"DOTADamageFlag_t",
    "value":16384,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_IGNORES_BASE_PHYSICAL_ARMOR"
  },{
    "enum":"DOTADamageFlag_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR"
  },{
    "enum":"DOTADamageFlag_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR"
  },{
    "enum":"DOTADamageFlag_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NONE"
  },{
    "enum":"DOTADamageFlag_t",
    "value":128,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NON_LETHAL"
  },{
    "enum":"DOTADamageFlag_t",
    "value":512,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS"
  },{
    "enum":"DOTADamageFlag_t",
    "value":64,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT"
  },{
    "enum":"DOTADamageFlag_t",
    "value":1024,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION"
  },{
    "enum":"DOTADamageFlag_t",
    "value":4096,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL"
  },{
    "enum":"DOTADamageFlag_t",
    "value":8192,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_PROPERTY_FIRE"
  },{
    "enum":"DOTADamageFlag_t",
    "value":16,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_REFLECTION"
  },{
    "enum":"DOTADamageFlag_t",
    "value":256,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY"
  },{
    "enum":"DOTALimits_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_DEFAULT_MAX_TEAM",
    "description":"Default number of players per team."
  },{
    "enum":"DOTALimits_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_DEFAULT_MAX_TEAM_PLAYERS",
    "description":"Default number of non-spectator players supported."
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_ACTION_MINIMAP"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_ACTION_PANEL"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":28,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_CUSTOMUI_BEHIND_HUD_ELEMENTS"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":29,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_ELEMENT_COUNT"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":22,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_ENDGAME"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":23,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_ENDGAME_CHAT"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":16,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":15,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":14,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":-1,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVALID"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":9,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_COURIER"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":11,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_GOLD"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":7,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_ITEMS"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_PANEL"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_PROTECT"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_QUICKBUY"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":6,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_SHOP"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":26,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_KILLCAM"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":25,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_PREGAME_STRATEGYUI"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":24,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_QUICK_STATS"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":13,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_SHOP_COMMONITEMS"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":12,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":27,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_BAR"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":18,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":20,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":19,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":21,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_BAR_SCORE"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_HEROES"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":17,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_MENU_BUTTONS"
  },{
    "enum":"DotaDefaultUIElement_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_TIMEOFDAY"
  },{
    "enum":"DOTA_GameState",
    "value":2,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP"
  },{
    "enum":"DOTA_GameState",
    "value":10,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_DISCONNECT"
  },{
    "enum":"DOTA_GameState",
    "value":8,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS"
  },{
    "enum":"DOTA_GameState",
    "value":3,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_HERO_SELECTION"
  },{
    "enum":"DOTA_GameState",
    "value":0,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_INIT"
  },{
    "enum":"DOTA_GameState",
    "value":9,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_POST_GAME"
  },{
    "enum":"DOTA_GameState",
    "value":7,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_PRE_GAME"
  },{
    "enum":"DOTA_GameState",
    "value":4,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_STRATEGY_TIME"
  },{
    "enum":"DOTA_GameState",
    "value":5,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_TEAM_SHOWCASE"
  },{
    "enum":"DOTA_GameState",
    "value":6,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD"
  },{
    "enum":"DOTA_GameState",
    "value":1,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_BAD_GUYS"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_BROADCASTER"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_GOOD_GUYS"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_NOTEAM"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_PLAYER_POOL"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_SPECTATOR"
  },{
    "enum":"DOTA_HeroPickState",
    "value":57,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":1,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_AP_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":32,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_AR_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":54,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_BD_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":37,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN1"
  },{
    "enum":"DOTA_HeroPickState",
    "value":38,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN2"
  },{
    "enum":"DOTA_HeroPickState",
    "value":39,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN3"
  },{
    "enum":"DOTA_HeroPickState",
    "value":40,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN4"
  },{
    "enum":"DOTA_HeroPickState",
    "value":41,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN5"
  },{
    "enum":"DOTA_HeroPickState",
    "value":42,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN6"
  },{
    "enum":"DOTA_HeroPickState",
    "value":36,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_CAPTAINPICK"
  },{
    "enum":"DOTA_HeroPickState",
    "value":35,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_INTRO"
  },{
    "enum":"DOTA_HeroPickState",
    "value":53,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_PICK"
  },{
    "enum":"DOTA_HeroPickState",
    "value":43,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT1"
  },{
    "enum":"DOTA_HeroPickState",
    "value":52,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT10"
  },{
    "enum":"DOTA_HeroPickState",
    "value":44,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT2"
  },{
    "enum":"DOTA_HeroPickState",
    "value":45,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT3"
  },{
    "enum":"DOTA_HeroPickState",
    "value":46,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT4"
  },{
    "enum":"DOTA_HeroPickState",
    "value":47,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT5"
  },{
    "enum":"DOTA_HeroPickState",
    "value":48,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT6"
  },{
    "enum":"DOTA_HeroPickState",
    "value":49,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT7"
  },{
    "enum":"DOTA_HeroPickState",
    "value":50,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT8"
  },{
    "enum":"DOTA_HeroPickState",
    "value":51,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT9"
  },{
    "enum":"DOTA_HeroPickState",
    "value":7,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN1"
  },{
    "enum":"DOTA_HeroPickState",
    "value":16,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN10"
  },{
    "enum":"DOTA_HeroPickState",
    "value":17,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN11"
  },{
    "enum":"DOTA_HeroPickState",
    "value":18,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN12"
  },{
    "enum":"DOTA_HeroPickState",
    "value":19,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN13"
  },{
    "enum":"DOTA_HeroPickState",
    "value":20,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN14"
  },{
    "enum":"DOTA_HeroPickState",
    "value":8,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN2"
  },{
    "enum":"DOTA_HeroPickState",
    "value":9,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN3"
  },{
    "enum":"DOTA_HeroPickState",
    "value":10,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN4"
  },{
    "enum":"DOTA_HeroPickState",
    "value":11,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN5"
  },{
    "enum":"DOTA_HeroPickState",
    "value":12,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN6"
  },{
    "enum":"DOTA_HeroPickState",
    "value":13,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN7"
  },{
    "enum":"DOTA_HeroPickState",
    "value":14,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN8"
  },{
    "enum":"DOTA_HeroPickState",
    "value":15,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN9"
  },{
    "enum":"DOTA_HeroPickState",
    "value":6,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_CAPTAINPICK"
  },{
    "enum":"DOTA_HeroPickState",
    "value":5,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_INTRO"
  },{
    "enum":"DOTA_HeroPickState",
    "value":31,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_PICK"
  },{
    "enum":"DOTA_HeroPickState",
    "value":21,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT1"
  },{
    "enum":"DOTA_HeroPickState",
    "value":30,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT10"
  },{
    "enum":"DOTA_HeroPickState",
    "value":22,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT2"
  },{
    "enum":"DOTA_HeroPickState",
    "value":23,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT3"
  },{
    "enum":"DOTA_HeroPickState",
    "value":24,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT4"
  },{
    "enum":"DOTA_HeroPickState",
    "value":25,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT5"
  },{
    "enum":"DOTA_HeroPickState",
    "value":26,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT6"
  },{
    "enum":"DOTA_HeroPickState",
    "value":27,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT7"
  },{
    "enum":"DOTA_HeroPickState",
    "value":28,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT8"
  },{
    "enum":"DOTA_HeroPickState",
    "value":29,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT9"
  },{
    "enum":"DOTA_HeroPickState",
    "value":61,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_COUNT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":60,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES"
  },{
    "enum":"DOTA_HeroPickState",
    "value":34,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_FH_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":3,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED"
  },{
    "enum":"DOTA_HeroPickState",
    "value":33,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_MO_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":0,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_NONE"
  },{
    "enum":"DOTA_HeroPickState",
    "value":4,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_RD_SELECT_UNUSED"
  },{
    "enum":"DOTA_HeroPickState",
    "value":2,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_SD_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":59,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_SELECT_PENALTY"
  },{
    "enum":"DOTA_HeroPickState",
    "value":55,
    "kind":"constant",
    "name":"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":56,
    "kind":"constant",
    "name":"DOTA_HERO_PICK_STATE_ARDM_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":58,
    "kind":"constant",
    "name":"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":28,
    "kind":"constant",
    "name":"DOTA_HUD_CUSTOMUI_BEHIND_HUD_ELEMENTS"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_ACTION_MINIMAP"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_ACTION_PANEL"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":29,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_COUNT"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":22,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_ENDGAME"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":23,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_ENDGAME_CHAT"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":16,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":15,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":14,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":-1,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVALID"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":9,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_COURIER"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":11,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_GOLD"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":7,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_ITEMS"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_PANEL"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_PROTECT"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":6,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_SHOP"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":26,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_KILLCAM"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":25,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":24,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_QUICK_STATS"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":13,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_SHOP_COMMONITEMS"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":12,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":27,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_BAR"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":18,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":20,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":19,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":21,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_BAR_SCORE"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_HEROES"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":17,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_SCOREBOARD"
  },{
    "enum":"DOTAHUDVisibility_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY"
  },{
    "enum":"DOTAInventoryFlags_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN"
  },{
    "enum":"DOTAInventoryFlags_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALLOW_DROP_ON_GROUND"
  },{
    "enum":"DOTAInventoryFlags_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALLOW_MAIN"
  },{
    "enum":"DOTAInventoryFlags_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALLOW_NONE"
  },{
    "enum":"DOTAInventoryFlags_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALLOW_STASH"
  },{
    "enum":"DOTAInventoryFlags_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALL_ACCESS"
  },{
    "enum":"DOTAInventoryFlags_t",
    "value":16,
    "kind":"constant",
    "name":"DOTA_INVENTORY_LIMIT_DROP_ON_GROUND"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_ITEM_INVENTORY_SIZE"
  },{
    "value":19,
    "kind":"constant",
    "name":"DOTA_ITEM_MAX"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_ITEM_NEUTRAL_SLOT"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_1"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_2"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_3"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_4"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_5"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_6"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":6,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_7"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":7,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_8"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_9"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_ITEM_STASH_MAX"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_ITEM_STASH_MIN"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_ITEM_STASH_SIZE"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_ITEM_TP_SCROLL"
  },{
    "value":20,
    "kind":"constant",
    "name":"DOTA_ITEM_TRANSIENT_CAST_ITEM"
  },{
    "value":17,
    "kind":"constant",
    "name":"DOTA_ITEM_TRANSIENT_ITEM"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_ITEM_TRANSIENT_RECIPE"
  },{
    "enum":"DOTASlotType_t",
    "value":56,
    "kind":"constant",
    "name":"DOTA_LOADOUT_PERSONA_1_END"
  },{
    "enum":"DOTASlotType_t",
    "value":29,
    "kind":"constant",
    "name":"DOTA_LOADOUT_PERSONA_1_START"
  },{
    "enum":"DOTASlotType_t",
    "value":23,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY1"
  },{
    "enum":"DOTASlotType_t",
    "value":51,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY1_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":24,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY2"
  },{
    "enum":"DOTASlotType_t",
    "value":52,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY2_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":25,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY3"
  },{
    "enum":"DOTASlotType_t",
    "value":53,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY3_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":26,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY4"
  },{
    "enum":"DOTASlotType_t",
    "value":54,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY4_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":22,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_ATTACK"
  },{
    "enum":"DOTASlotType_t",
    "value":50,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_ATTACK_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":27,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE"
  },{
    "enum":"DOTASlotType_t",
    "value":55,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":21,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS"
  },{
    "enum":"DOTASlotType_t",
    "value":49,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":59,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ANNOUNCER"
  },{
    "enum":"DOTASlotType_t",
    "value":7,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ARMOR"
  },{
    "enum":"DOTASlotType_t",
    "value":36,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ARMOR_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":6,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ARMS"
  },{
    "enum":"DOTASlotType_t",
    "value":35,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ARMS_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BACK"
  },{
    "enum":"DOTASlotType_t",
    "value":39,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BACK_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BELT"
  },{
    "enum":"DOTASlotType_t",
    "value":37,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BELT_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":70,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BLINK_EFFECT"
  },{
    "enum":"DOTASlotType_t",
    "value":16,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BODY_HEAD"
  },{
    "enum":"DOTASlotType_t",
    "value":44,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BODY_HEAD_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":15,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_COSTUME"
  },{
    "enum":"DOTASlotType_t",
    "value":85,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_COUNT"
  },{
    "enum":"DOTASlotType_t",
    "value":58,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_COURIER"
  },{
    "enum":"DOTASlotType_t",
    "value":83,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_COURIER_EFFECT"
  },{
    "enum":"DOTASlotType_t",
    "value":68,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_CURSOR_PACK"
  },{
    "enum":"DOTASlotType_t",
    "value":80,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_DEATH_EFFECT"
  },{
    "enum":"DOTASlotType_t",
    "value":74,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_DIRE_CREEPS"
  },{
    "enum":"DOTASlotType_t",
    "value":76,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_DIRE_TOWER"
  },{
    "enum":"DOTASlotType_t",
    "value":71,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_EMBLEM"
  },{
    "enum":"DOTASlotType_t",
    "value":11,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_GLOVES"
  },{
    "enum":"DOTASlotType_t",
    "value":41,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_GLOVES_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_HEAD"
  },{
    "enum":"DOTASlotType_t",
    "value":81,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_HEAD_EFFECT"
  },{
    "enum":"DOTASlotType_t",
    "value":33,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_HEAD_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":66,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_HEROIC_STATUE"
  },{
    "enum":"DOTASlotType_t",
    "value":63,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_HUD_SKIN"
  },{
    "enum":"DOTASlotType_t",
    "value":-1,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_INVALID"
  },{
    "enum":"DOTASlotType_t",
    "value":79,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_KILL_EFFECT"
  },{
    "enum":"DOTASlotType_t",
    "value":12,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_LEGS"
  },{
    "enum":"DOTASlotType_t",
    "value":40,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_LEGS_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":64,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_LOADING_SCREEN"
  },{
    "enum":"DOTASlotType_t",
    "value":82,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MAP_EFFECT"
  },{
    "enum":"DOTASlotType_t",
    "value":60,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MEGA_KILLS"
  },{
    "enum":"DOTASlotType_t",
    "value":14,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MISC"
  },{
    "enum":"DOTASlotType_t",
    "value":43,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MISC_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":17,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MOUNT"
  },{
    "enum":"DOTASlotType_t",
    "value":45,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MOUNT_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":67,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MULTIKILL_BANNER"
  },{
    "enum":"DOTASlotType_t",
    "value":61,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MUSIC"
  },{
    "enum":"DOTASlotType_t",
    "value":9,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_NECK"
  },{
    "enum":"DOTASlotType_t",
    "value":38,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_NECK_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":84,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_NONE"
  },{
    "enum":"DOTASlotType_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON"
  },{
    "enum":"DOTASlotType_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2"
  },{
    "enum":"DOTASlotType_t",
    "value":32,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":30,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":57,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_PERSONA_SELECTOR"
  },{
    "enum":"DOTASlotType_t",
    "value":73,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_RADIANT_CREEPS"
  },{
    "enum":"DOTASlotType_t",
    "value":75,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_RADIANT_TOWER"
  },{
    "enum":"DOTASlotType_t",
    "value":19,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SHAPESHIFT"
  },{
    "enum":"DOTASlotType_t",
    "value":47,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SHAPESHIFT_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SHOULDER"
  },{
    "enum":"DOTASlotType_t",
    "value":34,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SHOULDER_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":78,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_STREAK_EFFECT"
  },{
    "enum":"DOTASlotType_t",
    "value":18,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SUMMON"
  },{
    "enum":"DOTASlotType_t",
    "value":46,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SUMMON_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":13,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TAIL"
  },{
    "enum":"DOTASlotType_t",
    "value":42,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TAIL_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":20,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TAUNT"
  },{
    "enum":"DOTASlotType_t",
    "value":48,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TAUNT_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":69,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TELEPORT_EFFECT"
  },{
    "enum":"DOTASlotType_t",
    "value":72,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TERRAIN"
  },{
    "enum":"DOTASlotType_t",
    "value":77,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_VERSUS_SCREEN"
  },{
    "enum":"DOTASlotType_t",
    "value":28,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_VOICE"
  },{
    "enum":"DOTASlotType_t",
    "value":56,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_VOICE_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":62,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WARD"
  },{
    "enum":"DOTASlotType_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WEAPON"
  },{
    "enum":"DOTASlotType_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WEAPON2"
  },{
    "enum":"DOTASlotType_t",
    "value":31,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WEAPON2_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":29,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WEAPON_PERSONA_1"
  },{
    "enum":"DOTASlotType_t",
    "value":65,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WEATHER"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_MAX_ABILITIES"
  },{
    "enum":"DOTALimits_t",
    "value":64,
    "kind":"constant",
    "name":"DOTA_MAX_PLAYERS",
    "description":"Max number of players connected to the server including spectators."
  },{
    "enum":"DOTALimits_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_MAX_PLAYER_TEAMS",
    "description":"Max number of player teams supported."
  },{
    "enum":"DOTALimits_t",
    "value":15,
    "kind":"constant",
    "name":"DOTA_MAX_SPECTATOR_LOBBY_SIZE",
    "description":"Max number of viewers in a spectator lobby."
  },{
    "enum":"DOTALimits_t",
    "value":40,
    "kind":"constant",
    "name":"DOTA_MAX_SPECTATOR_TEAM_SIZE",
    "description":"How many spectators can watch."
  },{
    "enum":"DOTALimits_t",
    "value":24,
    "kind":"constant",
    "name":"DOTA_MAX_TEAM",
    "description":"Max number of players per team."
  },{
    "enum":"DOTALimits_t",
    "value":24,
    "kind":"constant",
    "name":"DOTA_MAX_TEAM_PLAYERS",
    "description":"Max number of non-spectator players supported."
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_BASE_GLYPHED"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":2048,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":1024,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":512,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_HINT_LOCATION"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":16384,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_MOVE_TO_TARGET"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":4096,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_RADAR"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":8192,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_RADAR_TARGET"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":64,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_TEAMMATE_DIED"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":32,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":16,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":128,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE"
  },{
    "enum":"DOTAMinimapEvent_t",
    "value":256,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED"
  },{
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "value":3,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH"
  },{
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "value":4,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST"
  },{
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "value":1,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOW"
  },{
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "value":0,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST"
  },{
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "value":2,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM"
  },{
    "enum":"DOTAMusicStatus_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_BATTLE"
  },{
    "enum":"DOTAMusicStatus_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_DEAD"
  },{
    "enum":"DOTAMusicStatus_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_EXPLORATION"
  },{
    "enum":"DOTAMusicStatus_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_LAST"
  },{
    "enum":"DOTAMusicStatus_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_NONE"
  },{
    "enum":"DOTAMusicStatus_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":5,
    "kind":"constant",
    "name":"DOTA_ModifyGold_AbandonedRedistribute"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":7,
    "kind":"constant",
    "name":"DOTA_ModifyGold_AbilityCost"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":19,
    "kind":"constant",
    "name":"DOTA_ModifyGold_AbilityGold"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":17,
    "kind":"constant",
    "name":"DOTA_ModifyGold_BountyRune"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":11,
    "kind":"constant",
    "name":"DOTA_ModifyGold_Building"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":2,
    "kind":"constant",
    "name":"DOTA_ModifyGold_Buyback"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":8,
    "kind":"constant",
    "name":"DOTA_ModifyGold_CheatCommand"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":16,
    "kind":"constant",
    "name":"DOTA_ModifyGold_CourierKill"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":13,
    "kind":"constant",
    "name":"DOTA_ModifyGold_CreepKill"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ModifyGold_Death"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":10,
    "kind":"constant",
    "name":"DOTA_ModifyGold_GameTick"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":12,
    "kind":"constant",
    "name":"DOTA_ModifyGold_HeroKill"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":14,
    "kind":"constant",
    "name":"DOTA_ModifyGold_NeutralKill"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":3,
    "kind":"constant",
    "name":"DOTA_ModifyGold_PurchaseConsumable"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":4,
    "kind":"constant",
    "name":"DOTA_ModifyGold_PurchaseItem"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":15,
    "kind":"constant",
    "name":"DOTA_ModifyGold_RoshanKill"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":9,
    "kind":"constant",
    "name":"DOTA_ModifyGold_SelectionPenalty"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":6,
    "kind":"constant",
    "name":"DOTA_ModifyGold_SellItem"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":18,
    "kind":"constant",
    "name":"DOTA_ModifyGold_SharedGold"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ModifyGold_Unspecified"
  },{
    "enum":"EDOTA_ModifyGold_Reason",
    "value":20,
    "kind":"constant",
    "name":"DOTA_ModifyGold_WardKill"
  },{
    "enum":"EDOTA_ModifyXP_Reason",
    "value":2,
    "kind":"constant",
    "name":"DOTA_ModifyXP_CreepKill"
  },{
    "enum":"EDOTA_ModifyXP_Reason",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ModifyXP_HeroKill"
  },{
    "enum":"EDOTA_ModifyXP_Reason",
    "value":6,
    "kind":"constant",
    "name":"DOTA_ModifyXP_MAX"
  },{
    "enum":"EDOTA_ModifyXP_Reason",
    "value":5,
    "kind":"constant",
    "name":"DOTA_ModifyXP_Outpost"
  },{
    "enum":"EDOTA_ModifyXP_Reason",
    "value":3,
    "kind":"constant",
    "name":"DOTA_ModifyXP_RoshanKill"
  },{
    "enum":"EDOTA_ModifyXP_Reason",
    "value":4,
    "kind":"constant",
    "name":"DOTA_ModifyXP_TomeOfKnowledge"
  },{
    "enum":"EDOTA_ModifyXP_Reason",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ModifyXP_Unspecified"
  },{
    "enum":"DOTASlotType_t",
    "value":83,
    "kind":"constant",
    "name":"DOTA_PLAYER_LOADOUT_END"
  },{
    "enum":"DOTASlotType_t",
    "value":58,
    "kind":"constant",
    "name":"DOTA_PLAYER_LOADOUT_START"
  },{
    "enum":"DOTAProjectileAttachment_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_1"
  },{
    "enum":"DOTAProjectileAttachment_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_2"
  },{
    "enum":"DOTAProjectileAttachment_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_3"
  },{
    "enum":"DOTAProjectileAttachment_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_4"
  },{
    "enum":"DOTAProjectileAttachment_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_HITLOCATION"
  },{
    "enum":"DOTAProjectileAttachment_t",
    "value":6,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_LAST"
  },{
    "enum":"DOTAProjectileAttachment_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_NONE"
  },{
    "value":72,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_1"
  },{
    "value":73,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_2"
  },{
    "value":74,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_3"
  },{
    "value":75,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_4"
  },{
    "value":76,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_5"
  },{
    "value":77,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_6"
  },{
    "value":78,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_7"
  },{
    "value":79,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_8"
  },{
    "value":80,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_9"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_NONE"
  },{
    "enum":"DOTA_RUNES",
    "value":6,
    "kind":"constant",
    "name":"DOTA_RUNE_ARCANE"
  },{
    "enum":"DOTA_RUNES",
    "value":5,
    "kind":"constant",
    "name":"DOTA_RUNE_BOUNTY"
  },{
    "enum":"DOTA_RUNES",
    "value":8,
    "kind":"constant",
    "name":"DOTA_RUNE_COUNT"
  },{
    "enum":"DOTA_RUNES",
    "value":0,
    "kind":"constant",
    "name":"DOTA_RUNE_DOUBLEDAMAGE"
  },{
    "enum":"DOTA_RUNES",
    "value":1,
    "kind":"constant",
    "name":"DOTA_RUNE_HASTE"
  },{
    "enum":"DOTA_RUNES",
    "value":2,
    "kind":"constant",
    "name":"DOTA_RUNE_ILLUSION"
  },{
    "enum":"DOTA_RUNES",
    "value":-1,
    "kind":"constant",
    "name":"DOTA_RUNE_INVALID"
  },{
    "enum":"DOTA_RUNES",
    "value":3,
    "kind":"constant",
    "name":"DOTA_RUNE_INVISIBILITY"
  },{
    "enum":"DOTA_RUNES",
    "value":4,
    "kind":"constant",
    "name":"DOTA_RUNE_REGENERATION"
  },{
    "enum":"DOTA_RUNES",
    "value":7,
    "kind":"constant",
    "name":"DOTA_RUNE_WATER"
  },{
    "value":1778,
    "kind":"constant",
    "name":"DOTA_RUN_STATUE"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":6,
    "kind":"constant",
    "name":"DOTA_SHOP_CUSTOM"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":3,
    "kind":"constant",
    "name":"DOTA_SHOP_GROUND"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":0,
    "kind":"constant",
    "name":"DOTA_SHOP_HOME"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":7,
    "kind":"constant",
    "name":"DOTA_SHOP_NEUTRALS"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":8,
    "kind":"constant",
    "name":"DOTA_SHOP_NONE"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":2,
    "kind":"constant",
    "name":"DOTA_SHOP_SECRET"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":5,
    "kind":"constant",
    "name":"DOTA_SHOP_SECRET2"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":1,
    "kind":"constant",
    "name":"DOTA_SHOP_SIDE"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":4,
    "kind":"constant",
    "name":"DOTA_SHOP_SIDE2"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_SHOWGENERICPOPUP_SHOW_NO_OTHER_DIALOGS"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_SHOWGENERICPOPUP_TINT_SCREEN"
  },{
    "enum":"DOTASpeechType_t",
    "value":7,
    "kind":"constant",
    "name":"DOTA_SPEECH_BAD_TEAM"
  },{
    "enum":"DOTASpeechType_t",
    "value":6,
    "kind":"constant",
    "name":"DOTA_SPEECH_GOOD_TEAM"
  },{
    "enum":"DOTASpeechType_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_SPEECH_RECIPIENT_TYPE_MAX"
  },{
    "enum":"DOTASpeechType_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_SPEECH_SPECTATOR"
  },{
    "enum":"DOTASpeechType_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_ALL"
  },{
    "enum":"DOTASpeechType_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_INVALID"
  },{
    "enum":"DOTASpeechType_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_NEARBY"
  },{
    "enum":"DOTASpeechType_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_SINGLE"
  },{
    "enum":"DOTASpeechType_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_TEAM"
  },{
    "enum":"DOTASpeechType_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_TEAM_NEARBY"
  },{
    "enum":"DOTASpeechType_t",
    "value":9,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_TEAM_NOSPECTATOR"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":9,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_1"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_2"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":11,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_3"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":12,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_4"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":13,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_5"
  },{
    "enum":"DOTAScriptInventorySlot_t",
    "value":14,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_6"
  },{
    "enum":"DOTATeam_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_TEAM_BADGUYS"
  },{
    "enum":"DOTATeam_t",
    "value":14,
    "kind":"constant",
    "name":"DOTA_TEAM_COUNT"
  },{
    "enum":"DOTATeam_t",
    "value":6,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_1"
  },{
    "enum":"DOTATeam_t",
    "value":7,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_2"
  },{
    "enum":"DOTATeam_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_3"
  },{
    "enum":"DOTATeam_t",
    "value":9,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_4"
  },{
    "enum":"DOTATeam_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_5"
  },{
    "enum":"DOTATeam_t",
    "value":11,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_6"
  },{
    "enum":"DOTATeam_t",
    "value":12,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_7"
  },{
    "enum":"DOTATeam_t",
    "value":13,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_8"
  },{
    "enum":"DOTATeam_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_COUNT"
  },{
    "enum":"DOTATeam_t",
    "value":13,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_MAX"
  },{
    "enum":"DOTATeam_t",
    "value":6,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_MIN"
  },{
    "enum":"DOTATeam_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_TEAM_FIRST"
  },{
    "enum":"DOTATeam_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_TEAM_GOODGUYS"
  },{
    "enum":"DOTATeam_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_TEAM_NEUTRALS"
  },{
    "enum":"DOTATeam_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_TEAM_NOTEAM"
  },{
    "enum":"DOTAUnitAttackCapability_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT"
  },{
    "enum":"DOTAUnitAttackCapability_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_MELEE_ATTACK"
  },{
    "enum":"DOTAUnitMoveCapability_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_MOVE_FLY"
  },{
    "enum":"DOTAUnitMoveCapability_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_MOVE_GROUND"
  },{
    "enum":"DOTAUnitMoveCapability_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_MOVE_NONE"
  },{
    "enum":"DOTAUnitAttackCapability_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_NO_ATTACK"
  },{
    "enum":"DOTAUnitAttackCapability_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_RANGED_ATTACK"
  },{
    "enum":"DOTAUnitAttackCapability_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_ATTACK_MOVE"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_ATTACK_TARGET"
  },{
    "value":23,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_BUYBACK"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_NO_TARGET"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_POSITION"
  },{
    "value":35,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_RIVER_PAINT"
  },{
    "value":26,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_RUNE"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_TARGET"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_TARGET_TREE"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_TOGGLE"
  },{
    "value":20,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO"
  },{
    "value":33,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CONTINUE"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_DISASSEMBLE_ITEM"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_DROP_ITEM"
  },{
    "value":37,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN"
  },{
    "value":25,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_GIVE_ITEM"
  },{
    "value":24,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_GLYPH"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_HOLD_POSITION"
  },{
    "value":19,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_MOVE_ITEM"
  },{
    "value":28,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_MOVE_TO_DIRECTION"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_MOVE_TO_POSITION"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_MOVE_TO_TARGET"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_NONE"
  },{
    "value":29,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PATROL"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PICKUP_ITEM"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PICKUP_RUNE"
  },{
    "value":27,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PING_ABILITY"
  },{
    "value":36,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PURCHASE_ITEM"
  },{
    "value":31,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_RADAR"
  },{
    "value":17,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_SELL_ITEM"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK"
  },{
    "value":21,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_STOP"
  },{
    "value":38,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH"
  },{
    "value":22,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_TAUNT"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_TRAIN_ABILITY"
  },{
    "value":34,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED"
  },{
    "value":30,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":55,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_ALL"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":18,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_BASIC"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_BUILDING"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":16,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_COURIER"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_CREEP"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":128,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_CUSTOM"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":65536,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":8,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_DEAD"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":128,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":64,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_INVULNERABLE"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":16,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":32768,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_MANA_ONLY"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NONE"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":512,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":16384,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":131072,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":2048,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":8192,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":32,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":524288,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":4096,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":256,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NO_INVIS"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":262144,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":1024,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":1048576,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":2097152,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_HERO"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_NONE"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":32,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_OTHER"
  },{
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "value":3,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_BOTH"
  },{
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_CUSTOM"
  },{
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_ENEMY"
  },{
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
  },{
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_NONE"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":64,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TREE"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOUBLE_SHOT"
  },{
    "value":32,
    "kind":"constant",
    "name":"EF_NODRAW"
  },{
    "value":0,
    "kind":"constant",
    "name":"EMPTY"
  },{
    "value":128,
    "kind":"constant",
    "name":"FCVAR_ARCHIVE"
  },{
    "value":16384,
    "kind":"constant",
    "name":"FCVAR_CHEAT"
  },{
    "value":65536,
    "kind":"constant",
    "name":"FCVAR_DEMO"
  },{
    "value":2,
    "kind":"constant",
    "name":"FCVAR_DEVELOPMENTONLY"
  },{
    "value":131072,
    "kind":"constant",
    "name":"FCVAR_DONTRECORD"
  },{
    "value":16,
    "kind":"constant",
    "name":"FCVAR_HIDDEN"
  },{
    "value":4096,
    "kind":"constant",
    "name":"FCVAR_NEVER_AS_STRING"
  },{
    "value":0,
    "kind":"constant",
    "name":"FCVAR_NONE"
  },{
    "value":256,
    "kind":"constant",
    "name":"FCVAR_NOTIFY"
  },{
    "value":4194304,
    "kind":"constant",
    "name":"FCVAR_NOT_CONNECTED"
  },{
    "value":1024,
    "kind":"constant",
    "name":"FCVAR_PRINTABLEONLY"
  },{
    "value":32,
    "kind":"constant",
    "name":"FCVAR_PROTECTED"
  },{
    "value":8192,
    "kind":"constant",
    "name":"FCVAR_REPLICATED"
  },{
    "value":64,
    "kind":"constant",
    "name":"FCVAR_SPONLY"
  },{
    "value":32768,
    "kind":"constant",
    "name":"FCVAR_SS"
  },{
    "value":2048,
    "kind":"constant",
    "name":"FCVAR_UNLOGGED"
  },{
    "value":1,
    "kind":"constant",
    "name":"FCVAR_UNREGISTERED"
  },{
    "value":512,
    "kind":"constant",
    "name":"FCVAR_USERINFO"
  },{
    "value":1073741824,
    "kind":"constant",
    "name":"FCVAR_VCONSOLE_SET_FOCUS"
  },{
    "value":0,
    "kind":"constant",
    "name":"FIND_ANY_ORDER"
  },{
    "value":1,
    "kind":"constant",
    "name":"FIND_CLOSEST"
  },{
    "value":2,
    "kind":"constant",
    "name":"FIND_FARTHEST"
  },{
    "value":-1,
    "kind":"constant",
    "name":"FIND_UNITS_EVERYWHERE"
  },{
    "enum":"EShareAbility",
    "value":0,
    "kind":"constant",
    "name":"ITEM_FULLY_SHAREABLE"
  },{
    "enum":"EShareAbility",
    "value":2,
    "kind":"constant",
    "name":"ITEM_NOT_SHAREABLE"
  },{
    "enum":"EShareAbility",
    "value":1,
    "kind":"constant",
    "name":"ITEM_PARTIALLY_SHAREABLE"
  },{
    "enum":"LuaModifierType",
    "value":4,
    "kind":"constant",
    "name":"LUA_MODIFIER_INVALID"
  },{
    "enum":"LuaModifierType",
    "value":3,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_BOTH"
  },{
    "enum":"LuaModifierType",
    "value":1,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_HORIZONTAL"
  },{
    "enum":"LuaModifierType",
    "value":0,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_NONE"
  },{
    "enum":"LuaModifierType",
    "value":2,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_VERTICAL"
  },{
    "enum":"ParticleAttachment_t",
    "value":16,
    "kind":"constant",
    "name":"MAX_PATTACH_TYPES"
  },{
    "value":5,
    "kind":"constant",
    "name":"MELEE_HIT"
  },{
    "value":7,
    "kind":"constant",
    "name":"MELEE_HIT_PLAYER"
  },{
    "value":6,
    "kind":"constant",
    "name":"MELEE_HIT_WORLD"
  },{
    "value":4,
    "kind":"constant",
    "name":"MELEE_MISS"
  },{
    "enum":"DOTAModifierAttribute_t",
    "value":8,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_AURA_PRIORITY"
  },{
    "enum":"DOTAModifierAttribute_t",
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE"
  },{
    "enum":"DOTAModifierAttribute_t",
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_MULTIPLE"
  },{
    "enum":"DOTAModifierAttribute_t",
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_NONE"
  },{
    "enum":"DOTAModifierAttribute_t",
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_PERMANENT"
  },{
    "enum":"modifierfunction",
    "value":183,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL",
    "description":"OnAbilityEndChannel"
  },{
    "enum":"modifierfunction",
    "value":180,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_EXECUTED",
    "description":"OnAbilityExecuted"
  },{
    "enum":"modifierfunction",
    "value":181,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST",
    "description":"OnAbilityFullyCast"
  },{
    "enum":"modifierfunction",
    "value":179,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_START",
    "description":"OnAbilityStart"
  },{
    "enum":"modifierfunction",
    "value":172,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK",
    "description":"OnAttack"
  },{
    "enum":"modifierfunction",
    "value":192,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACKED",
    "description":"OnAttacked"
  },{
    "enum":"modifierfunction",
    "value":175,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_ALLIED",
    "description":"OnAttackAllied"
  },{
    "enum":"modifierfunction",
    "value":238,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_CANCELLED",
    "description":"OnAttackCancelled"
  },{
    "enum":"modifierfunction",
    "value":174,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_FAIL",
    "description":"OnAttackFail"
  },{
    "enum":"modifierfunction",
    "value":228,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_FINISHED",
    "description":"OnAttackFinished"
  },{
    "enum":"modifierfunction",
    "value":173,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_LANDED",
    "description":"OnAttackLanded"
  },{
    "enum":"modifierfunction",
    "value":170,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_RECORD",
    "description":"OnAttackRecord"
  },{
    "enum":"modifierfunction",
    "value":235,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY",
    "description":"OnAttackRecordDestroy"
  },{
    "enum":"modifierfunction",
    "value":171,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_START",
    "description":"OnAttackStart"
  },{
    "enum":"modifierfunction",
    "value":245,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTEMPT_PROJECTILE_DODGE",
    "description":"OnAttemptProjectileDodge"
  },{
    "enum":"modifierfunction",
    "value":182,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_BREAK_INVISIBILITY",
    "description":"OnBreakInvisibility"
  },{
    "enum":"modifierfunction",
    "value":204,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_BUILDING_KILLED",
    "description":"OnBuildingKilled"
  },{
    "enum":"modifierfunction",
    "value":191,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DAMAGE_CALCULATED",
    "description":"OnDamageCalculated"
  },{
    "enum":"modifierfunction",
    "value":193,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DEATH",
    "description":"OnDeath"
  },{
    "enum":"modifierfunction",
    "value":187,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DEATH_PREVENTED",
    "description":"OnDamagePrevented"
  },{
    "enum":"modifierfunction",
    "value":225,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DOMINATED",
    "description":"OnDominated"
  },{
    "enum":"modifierfunction",
    "value":199,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_HEALTH_GAINED",
    "description":"OnHealthGained"
  },{
    "enum":"modifierfunction",
    "value":203,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_HEAL_RECEIVED",
    "description":"OnHealReceived"
  },{
    "enum":"modifierfunction",
    "value":202,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_HERO_KILLED",
    "description":"OnHeroKilled"
  },{
    "enum":"modifierfunction",
    "value":200,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_MANA_GAINED",
    "description":"OnManaGained"
  },{
    "enum":"modifierfunction",
    "value":205,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_MODEL_CHANGED",
    "description":"OnModelChanged"
  },{
    "enum":"modifierfunction",
    "value":206,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_MODIFIER_ADDED",
    "description":"OnModifierAdded"
  },{
    "enum":"modifierfunction",
    "value":189,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ORB_EFFECT",
    "description":"Unused"
  },{
    "enum":"modifierfunction",
    "value":177,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ORDER",
    "description":"OnOrder"
  },{
    "enum":"modifierfunction",
    "value":246,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PREDEBUFF_APPLIED",
    "description":"OnPreDebuffApplied"
  },{
    "enum":"modifierfunction",
    "value":190,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROCESS_CLEAVE",
    "description":"OnProcessCleave"
  },{
    "enum":"modifierfunction",
    "value":184,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROCESS_UPGRADE",
    "description":"Unused"
  },{
    "enum":"modifierfunction",
    "value":176,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROJECTILE_DODGE",
    "description":"OnProjectileDodge"
  },{
    "enum":"modifierfunction",
    "value":236,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT",
    "description":"OnProjectileObstructionHit"
  },{
    "enum":"modifierfunction",
    "value":185,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_REFRESH",
    "description":"Unused"
  },{
    "enum":"modifierfunction",
    "value":194,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_RESPAWN",
    "description":"OnRespawn"
  },{
    "enum":"modifierfunction",
    "value":198,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_SET_LOCATION",
    "description":"OnSetLocation"
  },{
    "enum":"modifierfunction",
    "value":169,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_SPELL_TARGET_READY",
    "description":"OnSpellTargetReady"
  },{
    "enum":"modifierfunction",
    "value":195,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_SPENT_MANA",
    "description":"OnSpentMana"
  },{
    "enum":"modifierfunction",
    "value":188,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_STATE_CHANGED",
    "description":"OnStateChanged"
  },{
    "enum":"modifierfunction",
    "value":186,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TAKEDAMAGE",
    "description":"OnTakeDamage"
  },{
    "enum":"modifierfunction",
    "value":201,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT",
    "description":"OnTakeDamageKillCredit"
  },{
    "enum":"modifierfunction",
    "value":197,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TELEPORTED",
    "description":"OnTeleported"
  },{
    "enum":"modifierfunction",
    "value":196,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TELEPORTING",
    "description":"OnTeleporting"
  },{
    "enum":"modifierfunction",
    "value":178,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_UNIT_MOVED",
    "description":"OnUnitMoved"
  },{
    "enum":"modifierfunction",
    "value":255,
    "kind":"constant",
    "name":"MODIFIER_FUNCTION_INVALID"
  },{
    "enum":"modifierfunction",
    "value":247,
    "kind":"constant",
    "name":"MODIFIER_FUNCTION_LAST"
  },{
    "enum":"modifierpriority",
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_HIGH"
  },{
    "enum":"modifierpriority",
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_LOW"
  },{
    "enum":"modifierpriority",
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_NORMAL"
  },{
    "enum":"modifierpriority",
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_SUPER_ULTRA"
  },{
    "enum":"modifierpriority",
    "value":3,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_ULTRA"
  },{
    "enum":"modifierfunction",
    "value":224,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABILITY_LAYOUT",
    "description":"GetModifierAbilityLayout"
  },{
    "enum":"modifierfunction",
    "value":145,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL",
    "description":"GetAbsoluteNoDamageMagical"
  },{
    "enum":"modifierfunction",
    "value":144,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL",
    "description":"GetAbsoluteNoDamagePhysical"
  },{
    "enum":"modifierfunction",
    "value":146,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE",
    "description":"GetAbsoluteNoDamagePure"
  },{
    "enum":"modifierfunction",
    "value":134,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSORB_SPELL",
    "description":"GetAbsorbSpell"
  },{
    "enum":"modifierfunction",
    "value":156,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK",
    "description":"GetAlwaysAllowAttack"
  },{
    "enum":"modifierfunction",
    "value":168,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ALWAYS_AUTOATTACK_WHILE_HOLD_POSITION",
    "description":"GetAlwaysAutoAttackWhileHoldPosition"
  },{
    "enum":"modifierfunction",
    "value":157,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK",
    "description":"GetAllowEtherealAttack"
  },{
    "enum":"modifierfunction",
    "value":29,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE",
    "description":"GetModifierAttackSpeedBaseOverride"
  },{
    "enum":"modifierfunction",
    "value":31,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT",
    "description":"GetModifierAttackSpeedBonus_Constant"
  },{
    "enum":"modifierfunction",
    "value":244,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_PERCENTAGE",
    "description":"GetModifierAttackSpeedPercentage"
  },{
    "enum":"modifierfunction",
    "value":241,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE",
    "description":"GetModifierAttackSpeedReductionPercentage"
  },{
    "enum":"modifierfunction",
    "value":118,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_ANIM_TIME_PERCENTAGE",
    "description":"GetModifierPercentageAttackAnimTime"
  },{
    "enum":"modifierfunction",
    "value":38,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT",
    "description":"GetModifierAttackPointConstant"
  },{
    "enum":"modifierfunction",
    "value":103,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE",
    "description":"GetModifierAttackRangeOverride"
  },{
    "enum":"modifierfunction",
    "value":104,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS",
    "description":"GetModifierAttackRangeBonus"
  },{
    "enum":"modifierfunction",
    "value":106,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE",
    "description":"GetModifierAttackRangeBonusPercentage"
  },{
    "enum":"modifierfunction",
    "value":105,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE",
    "description":"GetModifierAttackRangeBonusUnique"
  },{
    "enum":"modifierfunction",
    "value":243,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET"
  },{
    "enum":"modifierfunction",
    "value":66,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_AVOID_DAMAGE",
    "description":"GetModifierAvoidDamage"
  },{
    "enum":"modifierfunction",
    "value":67,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_AVOID_SPELL",
    "description":"GetModifierAvoidSpell"
  },{
    "enum":"modifierfunction",
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE",
    "description":"GetModifierBaseAttack_BonusDamage"
  },{
    "enum":"modifierfunction",
    "value":55,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierBaseDamageOutgoing_Percentage"
  },{
    "enum":"modifierfunction",
    "value":56,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE",
    "description":"GetModifierBaseDamageOutgoing_PercentageUnique"
  },{
    "enum":"modifierfunction",
    "value":35,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT",
    "description":"GetModifierBaseAttackTimeConstant"
  },{
    "enum":"modifierfunction",
    "value":36,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST",
    "description":"GetModifierBaseAttackTimeConstant_Adjust"
  },{
    "enum":"modifierfunction",
    "value":37,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_PERCENTAGE",
    "description":"GetModifierBaseAttackTimePercentage"
  },{
    "enum":"modifierfunction",
    "value":80,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_MANA_REGEN",
    "description":"GetModifierBaseRegen"
  },{
    "enum":"modifierfunction",
    "value":39,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierBonusDamageOutgoing_Percentage"
  },{
    "enum":"modifierfunction",
    "value":137,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_DAY_VISION",
    "description":"GetBonusDayVision"
  },{
    "enum":"modifierfunction",
    "value":138,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION",
    "description":"GetBonusNightVision"
  },{
    "enum":"modifierfunction",
    "value":139,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE",
    "description":"GetBonusNightVisionUnique"
  },{
    "enum":"modifierfunction",
    "value":140,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE",
    "description":"GetBonusVisionPercentage"
  },{
    "enum":"modifierfunction",
    "value":240,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS",
    "description":"BotAttackScoreBonus"
  },{
    "enum":"modifierfunction",
    "value":160,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER",
    "description":"Unused"
  },{
    "enum":"modifierfunction",
    "value":161,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER",
    "description":"Unused"
  },{
    "enum":"modifierfunction",
    "value":230,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAN_ATTACK_TREES",
    "description":"GetModifierCanAttackTrees"
  },{
    "enum":"modifierfunction",
    "value":117,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE",
    "description":"GetModifierPercentageCasttime"
  },{
    "enum":"modifierfunction",
    "value":100,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS",
    "description":"GetModifierCastRangeBonus"
  },{
    "enum":"modifierfunction",
    "value":102,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING",
    "description":"GetModifierCastRangeBonusStacking"
  },{
    "enum":"modifierfunction",
    "value":101,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET",
    "description":"GetModifierCastRangeBonusTarget"
  },{
    "enum":"modifierfunction",
    "value":221,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE",
    "description":"GetModifierChangeAbilityValue"
  },{
    "enum":"modifierfunction",
    "value":115,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE",
    "description":"GetModifierPercentageCooldown"
  },{
    "enum":"modifierfunction",
    "value":116,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING",
    "description":"GetModifierPercentageCooldownOngoing"
  },{
    "enum":"modifierfunction",
    "value":33,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT",
    "description":"GetModifierCooldownReduction_Constant"
  },{
    "enum":"modifierfunction",
    "value":40,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierDamageOutgoing_Percentage"
  },{
    "enum":"modifierfunction",
    "value":41,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION",
    "description":"GetModifierDamageOutgoing_Percentage_Illusion"
  },{
    "enum":"modifierfunction",
    "value":42,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY",
    "description":"GetModifierDamageOutgoing_Percentage_Illusion_Amplify"
  },{
    "enum":"modifierfunction",
    "value":121,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DEATHGOLDCOST",
    "description":"GetModifierConstantDeathGoldCost"
  },{
    "enum":"modifierfunction",
    "value":136,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DISABLE_AUTOATTACK",
    "description":"GetDisableAutoAttack"
  },{
    "enum":"modifierfunction",
    "value":155,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DISABLE_HEALING",
    "description":"GetDisableHealing"
  },{
    "enum":"modifierfunction",
    "value":219,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DISABLE_TURNING",
    "description":"GetModifierDisableTurning"
  },{
    "enum":"modifierfunction",
    "value":163,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DODGE_PROJECTILE",
    "description":"GetModifierDodgeProjectile"
  },{
    "enum":"modifierfunction",
    "value":233,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER",
    "description":"GetModifierNoVisionOfAttacker"
  },{
    "enum":"modifierfunction",
    "value":61,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EVASION_CONSTANT",
    "description":"GetModifierEvasion_Constant"
  },{
    "enum":"modifierfunction",
    "value":122,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXP_RATE_BOOST",
    "description":"GetModifierPercentageExpRateBoost"
  },{
    "enum":"modifierfunction",
    "value":90,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS",
    "description":"GetModifierExtraHealthBonus"
  },{
    "enum":"modifierfunction",
    "value":92,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE",
    "description":"GetModifierExtraHealthPercentage"
  },{
    "enum":"modifierfunction",
    "value":91,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS",
    "description":"GetModifierExtraManaBonus"
  },{
    "enum":"modifierfunction",
    "value":93,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE",
    "description":"GetModifierExtraManaPercentage"
  },{
    "enum":"modifierfunction",
    "value":89,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS",
    "description":"GetModifierExtraStrengthBonus"
  },{
    "enum":"modifierfunction",
    "value":30,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FIXED_ATTACK_RATE",
    "description":"GetModifierFixedAttackRate"
  },{
    "enum":"modifierfunction",
    "value":141,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FIXED_DAY_VISION",
    "description":"GetFixedDayVision"
  },{
    "enum":"modifierfunction",
    "value":142,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FIXED_NIGHT_VISION",
    "description":"GetFixedNightVision"
  },{
    "enum":"modifierfunction",
    "value":218,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP",
    "description":"GetForceDrawOnMinimap"
  },{
    "enum":"modifierfunction",
    "value":123,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_GOLD_RATE_BOOST",
    "description":"GetModifierPercentageGoldRateBoost"
  },{
    "enum":"modifierfunction",
    "value":87,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_BONUS",
    "description":"GetModifierHealthBonus"
  },{
    "enum":"modifierfunction",
    "value":84,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT",
    "description":"GetModifierConstantHealthRegen"
  },{
    "enum":"modifierfunction",
    "value":85,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE",
    "description":"GetModifierHealthRegenPercentage"
  },{
    "enum":"modifierfunction",
    "value":86,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE",
    "description":"GetModifierHealthRegenPercentageUnique"
  },{
    "enum":"modifierfunction",
    "value":47,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE",
    "description":"GetModifierHealAmplify_PercentageSource"
  },{
    "enum":"modifierfunction",
    "value":48,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET",
    "description":"GetModifierHealAmplify_PercentageTarget"
  },{
    "enum":"modifierfunction",
    "value":49,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE",
    "description":"GetModifierHPRegenAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":32,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_ATTACKSPEED_LIMIT",
    "description":"GetModifierAttackSpeed_Limit"
  },{
    "enum":"modifierfunction",
    "value":220,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE",
    "description":"GetModifierIgnoreCastAngle"
  },{
    "enum":"modifierfunction",
    "value":229,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_COOLDOWN",
    "description":"GetModifierIgnoreCooldown"
  },{
    "enum":"modifierfunction",
    "value":27,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT",
    "description":"GetModifierIgnoreMovespeedLimit"
  },{
    "enum":"modifierfunction",
    "value":74,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR",
    "description":"GetModifierIgnorePhysicalArmor"
  },{
    "enum":"modifierfunction",
    "value":148,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ILLUSION_LABEL",
    "description":"GetModifierIllusionLabel"
  },{
    "enum":"modifierfunction",
    "value":232,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION"
  },{
    "enum":"modifierfunction",
    "value":57,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE",
    "description":"GetModifierIncomingDamage_Percentage"
  },{
    "enum":"modifierfunction",
    "value":59,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT",
    "description":"GetModifierIncomingPhysicalDamageConstant"
  },{
    "enum":"modifierfunction",
    "value":58,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE",
    "description":"GetModifierIncomingPhysicalDamage_Percentage"
  },{
    "enum":"modifierfunction",
    "value":60,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT",
    "description":"GetModifierIncomingSpellDamageConstant"
  },{
    "enum":"modifierfunction",
    "value":13,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION",
    "description":"GetModifierInvisibilityAttackBehaviorException"
  },{
    "enum":"modifierfunction",
    "value":12,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INVISIBILITY_LEVEL",
    "description":"GetModifierInvisibilityLevel"
  },{
    "enum":"modifierfunction",
    "value":147,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IS_ILLUSION",
    "description":"GetIsIllusion"
  },{
    "enum":"modifierfunction",
    "value":210,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IS_SCEPTER",
    "description":"GetModifierScepter"
  },{
    "enum":"modifierfunction",
    "value":211,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IS_SHARD",
    "description":"GetModifierShard"
  },{
    "enum":"modifierfunction",
    "value":50,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE",
    "description":"GetModifierLifestealRegenAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":215,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_LIFETIME_FRACTION",
    "description":"GetUnitLifetimeFraction"
  },{
    "enum":"modifierfunction",
    "value":126,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK",
    "description":"GetModifierMagical_ConstantBlock"
  },{
    "enum":"modifierfunction",
    "value":75,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION",
    "description":"GetModifierMagicalResistanceBaseReduction"
  },{
    "enum":"modifierfunction",
    "value":77,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS",
    "description":"GetModifierMagicalResistanceBonus"
  },{
    "enum":"modifierfunction",
    "value":78,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS",
    "description":"GetModifierMagicalResistanceBonusIllusions"
  },{
    "enum":"modifierfunction",
    "value":79,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE",
    "description":"GetModifierMagicalResistanceDecrepifyUnique"
  },{
    "enum":"modifierfunction",
    "value":76,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION",
    "description":"GetModifierMagicalResistanceDirectModification"
  },{
    "enum":"modifierfunction",
    "value":119,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE",
    "description":"GetModifierPercentageManacost"
  },{
    "enum":"modifierfunction",
    "value":120,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING",
    "description":"GetModifierPercentageManacostStacking"
  },{
    "enum":"modifierfunction",
    "value":34,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT",
    "description":"GetModifierManacostReduction_Constant"
  },{
    "enum":"modifierfunction",
    "value":88,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_BONUS",
    "description":"GetModifierManaBonus"
  },{
    "enum":"modifierfunction",
    "value":53,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE",
    "description":"GetModifierManaDrainAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":81,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT",
    "description":"GetModifierConstantManaRegen"
  },{
    "enum":"modifierfunction",
    "value":82,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE",
    "description":"GetModifierConstantManaRegenUnique"
  },{
    "enum":"modifierfunction",
    "value":83,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE",
    "description":"GetModifierTotalPercentageManaRegen"
  },{
    "enum":"modifierfunction",
    "value":107,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAX_ATTACK_RANGE",
    "description":"GetModifierMaxAttackRange"
  },{
    "enum":"modifierfunction",
    "value":165,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAX_DEBUFF_DURATION",
    "description":"GetModifierMaxDebuffDuration"
  },{
    "enum":"modifierfunction",
    "value":143,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MIN_HEALTH",
    "description":"GetMinHealth"
  },{
    "enum":"modifierfunction",
    "value":68,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MISS_PERCENTAGE",
    "description":"GetModifierMiss_Percentage"
  },{
    "enum":"modifierfunction",
    "value":208,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MODEL_CHANGE",
    "description":"GetModifierModelChange"
  },{
    "enum":"modifierfunction",
    "value":209,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MODEL_SCALE",
    "description":"GetModifierModelScale"
  },{
    "enum":"modifierfunction",
    "value":24,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE",
    "description":"GetModifierMoveSpeed_Absolute"
  },{
    "enum":"modifierfunction",
    "value":26,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX",
    "description":"GetModifierMoveSpeed_AbsoluteMax"
  },{
    "enum":"modifierfunction",
    "value":25,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN",
    "description":"GetModifierMoveSpeed_AbsoluteMin"
  },{
    "enum":"modifierfunction",
    "value":16,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE",
    "description":"GetModifierMoveSpeedOverride"
  },{
    "enum":"modifierfunction",
    "value":15,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT",
    "description":"GetModifierMoveSpeedBonus_Constant"
  },{
    "enum":"modifierfunction",
    "value":22,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE",
    "description":"GetModifierMoveSpeedBonus_Constant_Unique"
  },{
    "enum":"modifierfunction",
    "value":23,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2",
    "description":"GetModifierMoveSpeedBonus_Constant_Unique_2"
  },{
    "enum":"modifierfunction",
    "value":17,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE",
    "description":"GetModifierMoveSpeedBonus_Percentage"
  },{
    "enum":"modifierfunction",
    "value":18,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE",
    "description":"GetModifierMoveSpeedBonus_Percentage_Unique"
  },{
    "enum":"modifierfunction",
    "value":19,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2",
    "description":"GetModifierMoveSpeedBonus_Percentage_Unique_2"
  },{
    "enum":"modifierfunction",
    "value":20,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE",
    "description":"GetModifierMoveSpeedBonus_Special_Boots"
  },{
    "enum":"modifierfunction",
    "value":21,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2",
    "description":"GetModifierMoveSpeedBonus_Special_Boots_2"
  },{
    "enum":"modifierfunction",
    "value":28,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_LIMIT",
    "description":"GetModifierMoveSpeed_Limit"
  },{
    "enum":"modifierfunction",
    "value":242,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE",
    "description":"GetModifierMoveSpeedReductionPercentage"
  },{
    "enum":"modifierfunction",
    "value":52,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE",
    "description":"GetModifierMPRegenAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":54,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE",
    "description":"GetModifierMPRestoreAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":62,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT",
    "description":"GetModifierNegativeEvasion_Constant"
  },{
    "enum":"modifierfunction",
    "value":222,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL",
    "description":"GetModifierOverrideAbilitySpecial"
  },{
    "enum":"modifierfunction",
    "value":223,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE",
    "description":"GetModifierOverrideAbilitySpecialValue"
  },{
    "enum":"modifierfunction",
    "value":131,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION",
    "description":"GetOverrideAnimation"
  },{
    "enum":"modifierfunction",
    "value":133,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE",
    "description":"GetOverrideAnimationRate"
  },{
    "enum":"modifierfunction",
    "value":132,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT",
    "description":"GetOverrideAnimationWeight"
  },{
    "enum":"modifierfunction",
    "value":10,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE",
    "description":"GetModifierOverrideAttackDamage"
  },{
    "enum":"modifierfunction",
    "value":158,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL",
    "description":"GetOverrideAttackMagical"
  },{
    "enum":"modifierfunction",
    "value":14,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY",
    "description":"GetModifierPersistentInvisibility"
  },{
    "enum":"modifierfunction",
    "value":69,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE",
    "description":"GetModifierPhysicalArmorBase_Percentage"
  },{
    "enum":"modifierfunction",
    "value":71,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS",
    "description":"GetModifierPhysicalArmorBonus"
  },{
    "enum":"modifierfunction",
    "value":72,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE",
    "description":"GetModifierPhysicalArmorBonusUnique"
  },{
    "enum":"modifierfunction",
    "value":73,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE",
    "description":"GetModifierPhysicalArmorBonusUniqueActive"
  },{
    "enum":"modifierfunction",
    "value":70,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE",
    "description":"GetModifierPhysicalArmorTotal_Percentage"
  },{
    "enum":"modifierfunction",
    "value":127,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK",
    "description":"GetModifierPhysical_ConstantBlock"
  },{
    "enum":"modifierfunction",
    "value":128,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL",
    "description":"GetModifierPhysical_ConstantBlockSpecial"
  },{
    "enum":"modifierfunction",
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE",
    "description":"GetModifierPreAttack_BonusDamage"
  },{
    "enum":"modifierfunction",
    "value":3,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT",
    "description":"GetModifierPreAttack_BonusDamagePostCrit"
  },{
    "enum":"modifierfunction",
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC",
    "description":"GetModifierPreAttack_BonusDamage_Proc"
  },{
    "enum":"modifierfunction",
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET",
    "description":"GetModifierPreAttack_BonusDamage_Target"
  },{
    "enum":"modifierfunction",
    "value":124,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE",
    "description":"GetModifierPreAttack_CriticalStrike"
  },{
    "enum":"modifierfunction",
    "value":167,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_DEADLY_BLOW",
    "description":"GetModifierPreAttack_DeadlyBlow"
  },{
    "enum":"modifierfunction",
    "value":125,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE",
    "description":"GetModifierPreAttack_Target_CriticalStrike"
  },{
    "enum":"modifierfunction",
    "value":227,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE",
    "description":"PreserveParticlesOnModelChanged"
  },{
    "enum":"modifierfunction",
    "value":11,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PRE_ATTACK",
    "description":"GetModifierPreAttack"
  },{
    "enum":"modifierfunction",
    "value":166,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PRIMARY_STAT_DAMAGE_MULTIPLIER",
    "description":"GetPrimaryStatDamageMultiplier"
  },{
    "enum":"modifierfunction",
    "value":6,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL",
    "description":"GetModifierProcAttack_BonusDamage_Magical"
  },{
    "enum":"modifierfunction",
    "value":8,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL_TARGET",
    "description":"GetModifierProcAttack_BonusDamage_Magical_Target"
  },{
    "enum":"modifierfunction",
    "value":5,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL",
    "description":"GetModifierProcAttack_BonusDamage_Physical"
  },{
    "enum":"modifierfunction",
    "value":7,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE",
    "description":"GetModifierProcAttack_BonusDamage_Pure"
  },{
    "enum":"modifierfunction",
    "value":9,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK",
    "description":"GetModifierProcAttack_Feedback"
  },{
    "enum":"modifierfunction",
    "value":110,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROJECTILE_NAME",
    "description":"GetModifierProjectileName"
  },{
    "enum":"modifierfunction",
    "value":108,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS",
    "description":"GetModifierProjectileSpeedBonus"
  },{
    "enum":"modifierfunction",
    "value":109,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE",
    "description":"GetModifierProjectileSpeedBonusPercentage"
  },{
    "enum":"modifierfunction",
    "value":216,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION",
    "description":"GetModifierProvidesFOWVision"
  },{
    "enum":"modifierfunction",
    "value":212,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION",
    "description":"GetModifierRadarCooldownReduction"
  },{
    "enum":"modifierfunction",
    "value":135,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_REFLECT_SPELL",
    "description":"GetReflectSpell"
  },{
    "enum":"modifierfunction",
    "value":111,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_REINCARNATION",
    "description":"ReincarnateTime"
  },{
    "enum":"modifierfunction",
    "value":112,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME",
    "description":"GetModifierConstantRespawnTime"
  },{
    "enum":"modifierfunction",
    "value":113,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE",
    "description":"GetModifierPercentageRespawnTime"
  },{
    "enum":"modifierfunction",
    "value":114,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME_STACKING",
    "description":"GetModifierStackingRespawnTime"
  },{
    "enum":"modifierfunction",
    "value":217,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP",
    "description":"GetModifierSpellsRequireHP"
  },{
    "enum":"modifierfunction",
    "value":45,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE",
    "description":"GetModifierSpellAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":44,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_CREEP",
    "description":"GetModifierSpellAmplify_PercentageCreep"
  },{
    "enum":"modifierfunction",
    "value":46,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE",
    "description":"GetModifierSpellAmplify_PercentageUnique"
  },{
    "enum":"modifierfunction",
    "value":51,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE",
    "description":"GetModifierSpellLifestealRegenAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":95,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS",
    "description":"GetModifierBonusStats_Agility"
  },{
    "enum":"modifierfunction",
    "value":98,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE",
    "description":"GetModifierBonusStats_Agility_Percentage"
  },{
    "enum":"modifierfunction",
    "value":96,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS",
    "description":"GetModifierBonusStats_Intellect"
  },{
    "enum":"modifierfunction",
    "value":99,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE",
    "description":"GetModifierBonusStats_Intellect_Percentage"
  },{
    "enum":"modifierfunction",
    "value":94,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS",
    "description":"GetModifierBonusStats_Strength"
  },{
    "enum":"modifierfunction",
    "value":97,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE",
    "description":"GetModifierBonusStats_Strength_Percentage"
  },{
    "enum":"modifierfunction",
    "value":63,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE",
    "description":"GetModifierStatusResistance"
  },{
    "enum":"modifierfunction",
    "value":65,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER",
    "description":"GetModifierStatusResistanceCaster"
  },{
    "enum":"modifierfunction",
    "value":64,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING",
    "description":"GetModifierStatusResistanceStacking"
  },{
    "enum":"modifierfunction",
    "value":149,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STRONG_ILLUSION",
    "description":"GetModifierStrongIllusion"
  },{
    "enum":"modifierfunction",
    "value":150,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPER_ILLUSION",
    "description":"GetModifierSuperIllusion"
  },{
    "enum":"modifierfunction",
    "value":151,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE",
    "description":"GetModifierSuperIllusionWithUltimate"
  },{
    "enum":"modifierfunction",
    "value":239,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPPRESS_CLEAVE",
    "description":"GetSuppressCleave"
  },{
    "enum":"modifierfunction",
    "value":237,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPPRESS_TELEPORT",
    "description":"GetSuppressTeleport"
  },{
    "enum":"modifierfunction",
    "value":226,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TEMPEST_DOUBLE",
    "description":"GetModifierTempestDouble"
  },{
    "enum":"modifierfunction",
    "value":207,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOOLTIP",
    "description":"OnTooltip"
  },{
    "enum":"modifierfunction",
    "value":234,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOOLTIP2",
    "description":"OnTooltip2"
  },{
    "enum":"modifierfunction",
    "value":43,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierTotalDamageOutgoing_Percentage"
  },{
    "enum":"modifierfunction",
    "value":130,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK",
    "description":"GetModifierTotal_ConstantBlock"
  },{
    "enum":"modifierfunction",
    "value":129,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR",
    "description":"GetModifierPhysical_ConstantBlockUnavoidablePreArmor"
  },{
    "enum":"modifierfunction",
    "value":213,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS",
    "description":"GetActivityTranslationModifiers"
  },{
    "enum":"modifierfunction",
    "value":214,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND",
    "description":"GetAttackSound"
  },{
    "enum":"modifierfunction",
    "value":164,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK",
    "description":"GetTriggerCosmeticAndEndAttack"
  },{
    "enum":"modifierfunction",
    "value":154,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TURN_RATE_OVERRIDE",
    "description":"GetModifierTurnRate_Override"
  },{
    "enum":"modifierfunction",
    "value":153,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE",
    "description":"GetModifierTurnRate_Percentage"
  },{
    "enum":"modifierfunction",
    "value":162,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING",
    "description":"GetModifierUnitDisllowUpgrading"
  },{
    "enum":"modifierfunction",
    "value":159,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH",
    "description":"GetModifierUnitStatsNeedsRefresh"
  },{
    "enum":"modifierfunction",
    "value":231,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_VISUAL_Z_DELTA",
    "description":"GetVisualZDelta"
  },{
    "enum":"modifierfunction",
    "value":152,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_XP_DURING_DEATH",
    "description":"GetModifierXPDuringDeath"
  },{
    "enum":"modifierstate",
    "value":46,
    "kind":"constant",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS"
  },{
    "enum":"modifierstate",
    "value":47,
    "kind":"constant",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE"
  },{
    "enum":"modifierstate",
    "value":36,
    "kind":"constant",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES"
  },{
    "enum":"modifierstate",
    "value":45,
    "kind":"constant",
    "name":"MODIFIER_STATE_ATTACK_ALLIES"
  },{
    "enum":"modifierstate",
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_STATE_ATTACK_IMMUNE"
  },{
    "enum":"modifierstate",
    "value":29,
    "kind":"constant",
    "name":"MODIFIER_STATE_BLIND"
  },{
    "enum":"modifierstate",
    "value":12,
    "kind":"constant",
    "name":"MODIFIER_STATE_BLOCK_DISABLED"
  },{
    "enum":"modifierstate",
    "value":43,
    "kind":"constant",
    "name":"MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED"
  },{
    "enum":"modifierstate",
    "value":16,
    "kind":"constant",
    "name":"MODIFIER_STATE_CANNOT_MISS"
  },{
    "enum":"modifierstate",
    "value":15,
    "kind":"constant",
    "name":"MODIFIER_STATE_CANNOT_TARGET_ENEMIES"
  },{
    "enum":"modifierstate",
    "value":19,
    "kind":"constant",
    "name":"MODIFIER_STATE_COMMAND_RESTRICTED"
  },{
    "enum":"modifierstate",
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_STATE_DISARMED"
  },{
    "enum":"modifierstate",
    "value":28,
    "kind":"constant",
    "name":"MODIFIER_STATE_DOMINATED"
  },{
    "enum":"modifierstate",
    "value":13,
    "kind":"constant",
    "name":"MODIFIER_STATE_EVADE_DISABLED"
  },{
    "enum":"modifierstate",
    "value":31,
    "kind":"constant",
    "name":"MODIFIER_STATE_FAKE_ALLY"
  },{
    "enum":"modifierstate",
    "value":41,
    "kind":"constant",
    "name":"MODIFIER_STATE_FEARED"
  },{
    "enum":"modifierstate",
    "value":23,
    "kind":"constant",
    "name":"MODIFIER_STATE_FLYING"
  },{
    "enum":"modifierstate",
    "value":32,
    "kind":"constant",
    "name":"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY"
  },{
    "enum":"modifierstate",
    "value":44,
    "kind":"constant",
    "name":"MODIFIER_STATE_FORCED_FLYING_VISION"
  },{
    "enum":"modifierstate",
    "value":18,
    "kind":"constant",
    "name":"MODIFIER_STATE_FROZEN"
  },{
    "enum":"modifierstate",
    "value":6,
    "kind":"constant",
    "name":"MODIFIER_STATE_HEXED"
  },{
    "enum":"modifierstate",
    "value":35,
    "kind":"constant",
    "name":"MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS"
  },{
    "enum":"modifierstate",
    "value":40,
    "kind":"constant",
    "name":"MODIFIER_STATE_IGNORING_STOP_ORDERS"
  },{
    "enum":"modifierstate",
    "value":7,
    "kind":"constant",
    "name":"MODIFIER_STATE_INVISIBLE"
  },{
    "enum":"modifierstate",
    "value":8,
    "kind":"constant",
    "name":"MODIFIER_STATE_INVULNERABLE"
  },{
    "enum":"modifierstate",
    "value":49,
    "kind":"constant",
    "name":"MODIFIER_STATE_LAST"
  },{
    "enum":"modifierstate",
    "value":21,
    "kind":"constant",
    "name":"MODIFIER_STATE_LOW_ATTACK_PRIORITY"
  },{
    "enum":"modifierstate",
    "value":9,
    "kind":"constant",
    "name":"MODIFIER_STATE_MAGIC_IMMUNE"
  },{
    "enum":"modifierstate",
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_STATE_MUTED"
  },{
    "enum":"modifierstate",
    "value":11,
    "kind":"constant",
    "name":"MODIFIER_STATE_NIGHTMARED"
  },{
    "enum":"modifierstate",
    "value":20,
    "kind":"constant",
    "name":"MODIFIER_STATE_NOT_ON_MINIMAP"
  },{
    "enum":"modifierstate",
    "value":37,
    "kind":"constant",
    "name":"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES"
  },{
    "enum":"modifierstate",
    "value":22,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_HEALTH_BAR"
  },{
    "enum":"modifierstate",
    "value":25,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_TEAM_MOVE_TO"
  },{
    "enum":"modifierstate",
    "value":26,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_TEAM_SELECT"
  },{
    "enum":"modifierstate",
    "value":24,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_UNIT_COLLISION"
  },{
    "enum":"modifierstate",
    "value":30,
    "kind":"constant",
    "name":"MODIFIER_STATE_OUT_OF_GAME"
  },{
    "enum":"modifierstate",
    "value":27,
    "kind":"constant",
    "name":"MODIFIER_STATE_PASSIVES_DISABLED"
  },{
    "enum":"modifierstate",
    "value":10,
    "kind":"constant",
    "name":"MODIFIER_STATE_PROVIDES_VISION"
  },{
    "enum":"modifierstate",
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_STATE_ROOTED"
  },{
    "enum":"modifierstate",
    "value":3,
    "kind":"constant",
    "name":"MODIFIER_STATE_SILENCED"
  },{
    "enum":"modifierstate",
    "value":17,
    "kind":"constant",
    "name":"MODIFIER_STATE_SPECIALLY_DENIABLE"
  },{
    "enum":"modifierstate",
    "value":48,
    "kind":"constant",
    "name":"MODIFIER_STATE_SPECIALLY_UNDENIABLE"
  },{
    "enum":"modifierstate",
    "value":5,
    "kind":"constant",
    "name":"MODIFIER_STATE_STUNNED"
  },{
    "enum":"modifierstate",
    "value":42,
    "kind":"constant",
    "name":"MODIFIER_STATE_TAUNTED"
  },{
    "enum":"modifierstate",
    "value":39,
    "kind":"constant",
    "name":"MODIFIER_STATE_TETHERED"
  },{
    "enum":"modifierstate",
    "value":33,
    "kind":"constant",
    "name":"MODIFIER_STATE_TRUESIGHT_IMMUNE"
  },{
    "enum":"modifierstate",
    "value":14,
    "kind":"constant",
    "name":"MODIFIER_STATE_UNSELECTABLE"
  },{
    "enum":"modifierstate",
    "value":38,
    "kind":"constant",
    "name":"MODIFIER_STATE_UNSLOWABLE"
  },{
    "enum":"modifierstate",
    "value":34,
    "kind":"constant",
    "name":"MODIFIER_STATE_UNTARGETABLE"
  },{
    "value":0.01023,
    "kind":"constant",
    "name":"NDEBUG_PERSIST_TILL_NEXT_SERVER"
  },{
    "value":8,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_BLOCK"
  },{
    "value":21,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_BLOCKED"
  },{
    "value":9,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_BONUS_POISON_DAMAGE"
  },{
    "value":4,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_BONUS_SPELL_DAMAGE"
  },{
    "value":2,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_CRITICAL"
  },{
    "value":6,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_DAMAGE"
  },{
    "value":24,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_DEADLY_BLOW"
  },{
    "value":20,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_DEATH"
  },{
    "value":1,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_DENY"
  },{
    "value":19,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_DISABLE_RESIST"
  },{
    "value":7,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_EVADE"
  },{
    "value":0,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_GOLD"
  },{
    "value":10,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_HEAL"
  },{
    "value":17,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_INCOMING_DAMAGE"
  },{
    "value":22,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_ITEM_RECEIVED"
  },{
    "value":14,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_LAST_HIT_CLOSE"
  },{
    "value":13,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_LAST_HIT_EARLY"
  },{
    "value":15,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_LAST_HIT_MISS"
  },{
    "value":16,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_MAGICAL_BLOCK"
  },{
    "value":11,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_MANA_ADD"
  },{
    "value":12,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_MANA_LOSS"
  },{
    "value":5,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_MISS"
  },{
    "value":18,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_OUTGOING_DAMAGE"
  },{
    "value":23,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_SHARD"
  },{
    "value":3,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_XP"
  },{
    "enum":"ParticleAttachment_t",
    "value":0,
    "kind":"constant",
    "name":"PATTACH_ABSORIGIN"
  },{
    "enum":"ParticleAttachment_t",
    "value":1,
    "kind":"constant",
    "name":"PATTACH_ABSORIGIN_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":13,
    "kind":"constant",
    "name":"PATTACH_CENTER_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":2,
    "kind":"constant",
    "name":"PATTACH_CUSTOMORIGIN"
  },{
    "enum":"ParticleAttachment_t",
    "value":3,
    "kind":"constant",
    "name":"PATTACH_CUSTOMORIGIN_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":14,
    "kind":"constant",
    "name":"PATTACH_CUSTOM_GAME_STATE_1"
  },{
    "enum":"ParticleAttachment_t",
    "value":6,
    "kind":"constant",
    "name":"PATTACH_EYES_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":15,
    "kind":"constant",
    "name":"PATTACH_HEALTHBAR"
  },{
    "enum":"ParticleAttachment_t",
    "value":-1,
    "kind":"constant",
    "name":"PATTACH_INVALID"
  },{
    "enum":"ParticleAttachment_t",
    "value":11,
    "kind":"constant",
    "name":"PATTACH_MAIN_VIEW"
  },{
    "enum":"ParticleAttachment_t",
    "value":7,
    "kind":"constant",
    "name":"PATTACH_OVERHEAD_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":4,
    "kind":"constant",
    "name":"PATTACH_POINT"
  },{
    "enum":"ParticleAttachment_t",
    "value":5,
    "kind":"constant",
    "name":"PATTACH_POINT_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":10,
    "kind":"constant",
    "name":"PATTACH_RENDERORIGIN_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":9,
    "kind":"constant",
    "name":"PATTACH_ROOTBONE_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":12,
    "kind":"constant",
    "name":"PATTACH_WATERWAKE"
  },{
    "enum":"ParticleAttachment_t",
    "value":8,
    "kind":"constant",
    "name":"PATTACH_WORLDORIGIN"
  },{
    "value":2,
    "kind":"constant",
    "name":"POSTSENSING"
  },{
    "value":1,
    "kind":"constant",
    "name":"PRESENSING"
  },{
    "value":0,
    "kind":"constant",
    "name":"PRESIM"
  },{
    "enum":"quest_text_replace_values_t",
    "value":4,
    "kind":"constant",
    "name":"QUEST_NUM_TEXT_REPLACE_VALUES"
  },{
    "enum":"quest_text_replace_values_t",
    "value":0,
    "kind":"constant",
    "name":"QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"
  },{
    "enum":"quest_text_replace_values_t",
    "value":3,
    "kind":"constant",
    "name":"QUEST_TEXT_REPLACE_VALUE_REWARD"
  },{
    "enum":"quest_text_replace_values_t",
    "value":2,
    "kind":"constant",
    "name":"QUEST_TEXT_REPLACE_VALUE_ROUND"
  },{
    "enum":"quest_text_replace_values_t",
    "value":1,
    "kind":"constant",
    "name":"QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"
  },{
    "value":3,
    "kind":"constant",
    "name":"RELOAD"
  },{
    "value":1,
    "kind":"constant",
    "name":"SERVER_DLL"
  },{
    "value":1,
    "kind":"constant",
    "name":"SINGLE_SHOT"
  },{
    "value":0,
    "kind":"constant",
    "name":"SPAWN_GROUP_HANDLE_INVALID"
  },{
    "value":8,
    "kind":"constant",
    "name":"SPECIAL1"
  },{
    "value":9,
    "kind":"constant",
    "name":"SPECIAL2"
  },{
    "value":10,
    "kind":"constant",
    "name":"SPECIAL3"
  },{
    "enum":"subquest_text_replace_values_t",
    "value":2,
    "kind":"constant",
    "name":"SUBQUEST_NUM_TEXT_REPLACE_VALUES"
  },{
    "enum":"subquest_text_replace_values_t",
    "value":0,
    "kind":"constant",
    "name":"SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"
  },{
    "enum":"subquest_text_replace_values_t",
    "value":1,
    "kind":"constant",
    "name":"SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"
  },{
    "value":6,
    "kind":"constant",
    "name":"ScriptDebugFirstLine"
  },{
    "value":0,
    "kind":"constant",
    "name":"ScriptDebugTextIndent"
  },{
    "value":20,
    "kind":"constant",
    "name":"ScriptDebugTextLines"
  },{
    "value":10,
    "kind":"constant",
    "name":"ScriptDebugTextTime"
  },{
    "value":26,
    "kind":"constant",
    "name":"ScriptDebugWatchFistLine"
  },{
    "enum":"UnitFilterResult",
    "value":9,
    "kind":"constant",
    "name":"UF_FAIL_ANCIENT"
  },{
    "enum":"UnitFilterResult",
    "value":22,
    "kind":"constant",
    "name":"UF_FAIL_ATTACK_IMMUNE"
  },{
    "enum":"UnitFilterResult",
    "value":6,
    "kind":"constant",
    "name":"UF_FAIL_BUILDING"
  },{
    "enum":"UnitFilterResult",
    "value":4,
    "kind":"constant",
    "name":"UF_FAIL_CONSIDERED_HERO"
  },{
    "enum":"UnitFilterResult",
    "value":7,
    "kind":"constant",
    "name":"UF_FAIL_COURIER"
  },{
    "enum":"UnitFilterResult",
    "value":5,
    "kind":"constant",
    "name":"UF_FAIL_CREEP"
  },{
    "enum":"UnitFilterResult",
    "value":23,
    "kind":"constant",
    "name":"UF_FAIL_CUSTOM"
  },{
    "enum":"UnitFilterResult",
    "value":15,
    "kind":"constant",
    "name":"UF_FAIL_DEAD"
  },{
    "enum":"UnitFilterResult",
    "value":25,
    "kind":"constant",
    "name":"UF_FAIL_DISABLE_HELP"
  },{
    "enum":"UnitFilterResult",
    "value":12,
    "kind":"constant",
    "name":"UF_FAIL_DOMINATED"
  },{
    "enum":"UnitFilterResult",
    "value":2,
    "kind":"constant",
    "name":"UF_FAIL_ENEMY"
  },{
    "enum":"UnitFilterResult",
    "value":1,
    "kind":"constant",
    "name":"UF_FAIL_FRIENDLY"
  },{
    "enum":"UnitFilterResult",
    "value":3,
    "kind":"constant",
    "name":"UF_FAIL_HERO"
  },{
    "enum":"UnitFilterResult",
    "value":10,
    "kind":"constant",
    "name":"UF_FAIL_ILLUSION"
  },{
    "enum":"UnitFilterResult",
    "value":24,
    "kind":"constant",
    "name":"UF_FAIL_INVALID_LOCATION"
  },{
    "enum":"UnitFilterResult",
    "value":20,
    "kind":"constant",
    "name":"UF_FAIL_INVISIBLE"
  },{
    "enum":"UnitFilterResult",
    "value":18,
    "kind":"constant",
    "name":"UF_FAIL_INVULNERABLE"
  },{
    "enum":"UnitFilterResult",
    "value":19,
    "kind":"constant",
    "name":"UF_FAIL_IN_FOW"
  },{
    "enum":"UnitFilterResult",
    "value":16,
    "kind":"constant",
    "name":"UF_FAIL_MAGIC_IMMUNE_ALLY"
  },{
    "enum":"UnitFilterResult",
    "value":17,
    "kind":"constant",
    "name":"UF_FAIL_MAGIC_IMMUNE_ENEMY"
  },{
    "enum":"UnitFilterResult",
    "value":13,
    "kind":"constant",
    "name":"UF_FAIL_MELEE"
  },{
    "enum":"UnitFilterResult",
    "value":27,
    "kind":"constant",
    "name":"UF_FAIL_NIGHTMARED"
  },{
    "enum":"UnitFilterResult",
    "value":21,
    "kind":"constant",
    "name":"UF_FAIL_NOT_PLAYER_CONTROLLED"
  },{
    "enum":"UnitFilterResult",
    "value":28,
    "kind":"constant",
    "name":"UF_FAIL_OBSTRUCTED"
  },{
    "enum":"UnitFilterResult",
    "value":8,
    "kind":"constant",
    "name":"UF_FAIL_OTHER"
  },{
    "enum":"UnitFilterResult",
    "value":26,
    "kind":"constant",
    "name":"UF_FAIL_OUT_OF_WORLD"
  },{
    "enum":"UnitFilterResult",
    "value":14,
    "kind":"constant",
    "name":"UF_FAIL_RANGED"
  },{
    "enum":"UnitFilterResult",
    "value":11,
    "kind":"constant",
    "name":"UF_FAIL_SUMMONED"
  },{
    "enum":"UnitFilterResult",
    "value":0,
    "kind":"constant",
    "name":"UF_SUCCESS"
  },{
    "value":1773,
    "kind":"constant",
    "name":"debut_end"
  },{
    "value":1774,
    "kind":"constant",
    "name":"debut_start"
  },{
    "value":1758,
    "kind":"constant",
    "name":"time_remap_smoke_side"
  },{
    "members":[{
        "args":[],
        "returns":"float",
        "name":"ActiveSequenceDuration",
        "description":"Returns the duration in seconds of the active sequence."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCycle",
        "description":"Get the cycle of the animation."
      },{
        "args":[{
            "name":"pszParam",
            "type":"string"
          }],
        "returns":"table",
        "name":"GetGraphParameter",
        "description":"Get the value of the given animGraph parameter"
      },{
        "args":[],
        "returns":"string",
        "name":"GetSequence",
        "description":"Returns the name of the active sequence."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSequenceFinished",
        "description":"Ask whether the main sequence is done playing."
      },{
        "args":[{
            "name":"pSequenceName",
            "type":"string"
          }],
        "returns":"void",
        "name":"ResetSequence",
        "description":"Sets the active sequence by name, resetting the current cycle."
      },{
        "args":[{
            "name":"pSequenceName",
            "type":"string"
          }],
        "returns":"float",
        "name":"SequenceDuration",
        "description":"Returns the duration in seconds of the given sequence name."
      },{
        "args":[{
            "name":"flCycle",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCycle",
        "description":"Set the cycle of the animation."
      },{
        "args":[{
            "name":"vValue",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetGraphLookTarget",
        "description":"Pass the desired look target in world space to the graph"
      },{
        "args":[{
            "name":"pszParam",
            "type":"string"
          },{
            "name":"svArg",
            "type":"table"
          }],
        "returns":"void",
        "name":"SetGraphParameter",
        "description":"Set the specific param value, type is inferred from the type in script"
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"bValue",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetGraphParameterBool",
        "description":"Set the specific param on or off"
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"nValue",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetGraphParameterEnum",
        "description":"Pass the enum (int) value to the specified param"
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"flValue",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetGraphParameterFloat",
        "description":"Pass the float value to the specified param"
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"nValue",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetGraphParameterInt",
        "description":"Pass the int value to the specified param"
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"vValue",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetGraphParameterVector",
        "description":"Pass the vector value to the specified param in the graph"
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"fValue",
            "type":"float"
          }],
        "returns":"float",
        "name":"SetPoseParameter",
        "description":"Set the specified pose parameter to the specified value."
      },{
        "args":[{
            "name":"pSequenceName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetSequence",
        "description":"Sets the active sequence by name, keeping the current cycle."
      },{
        "args":[],
        "returns":"void",
        "name":"StopAnimation",
        "description":"Stop the current animation by setting playback rate to 0.0."
      }],
    "kind":"class",
    "name":"CBaseAnimating",
    "extend":"CBaseModelEntity"
  },{
    "members":[],
    "kind":"class",
    "name":"CBaseCombatCharacter",
    "extend":"CBaseFlex"
  },{
    "members":[{
        "args":[{
            "name":"nFlags",
            "type":"int"
          }],
        "returns":"void",
        "name":"AddEffects",
        "description":"AddEffects( int ): Adds the render effect flag."
      },{
        "args":[{
            "name":"vecImpulse",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"ApplyAbsVelocityImpulse",
        "description":"Apply a Velocity Impulse"
      },{
        "args":[{
            "name":"angImpulse",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"ApplyLocalAngularVelocityImpulse",
        "description":"Apply an Ang Velocity Impulse"
      },{
        "args":[{
            "name":"pName",
            "type":"string"
          },{
            "name":"flDefault",
            "type":"float"
          }],
        "returns":"float",
        "name":"Attribute_GetFloatValue",
        "description":"Get float value for an entity attribute."
      },{
        "args":[{
            "name":"pName",
            "type":"string"
          },{
            "name":"nDefault",
            "type":"int"
          }],
        "returns":"int",
        "name":"Attribute_GetIntValue",
        "description":"Get int value for an entity attribute."
      },{
        "args":[{
            "name":"pName",
            "type":"string"
          },{
            "name":"flValue",
            "type":"float"
          }],
        "returns":"void",
        "name":"Attribute_SetFloatValue",
        "description":"Set float value for an entity attribute."
      },{
        "args":[{
            "name":"pName",
            "type":"string"
          },{
            "name":"nValue",
            "type":"int"
          }],
        "returns":"void",
        "name":"Attribute_SetIntValue",
        "description":"Set int value for an entity attribute."
      },{
        "args":[{
            "name":"pName",
            "type":"string"
          }],
        "returns":"void",
        "name":"DeleteAttribute",
        "description":"Delete an entity attribute."
      },{
        "args":[{
            "name":"soundname",
            "type":"string"
          }],
        "returns":"void",
        "name":"EmitSound",
        "description":"Plays a sound from this entity."
      },{
        "args":[{
            "name":"soundname",
            "type":"string"
          },{
            "name":"nPitch",
            "type":"int"
          },{
            "name":"flVolume",
            "type":"float"
          },{
            "name":"flDelay",
            "type":"float"
          }],
        "returns":"void",
        "name":"EmitSoundParams",
        "description":"Plays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0."
      },{
        "args":[],
        "returns":"QAngle",
        "name":"EyeAngles",
        "description":"Get the qangles that this entity is looking at."
      },{
        "args":[],
        "returns":"Vector",
        "name":"EyePosition",
        "description":"Get vector to eye position - absolute coords."
      },{
        "args":[],
        "returns":"handle",
        "name":"FirstMoveChild"
      },{
        "args":[{
            "name":"hEnt",
            "type":"handle"
          },{
            "name":"bBoneMerge",
            "type":"bool"
          }],
        "returns":"void",
        "name":"FollowEntity",
        "description":"hEntity to follow, bool bBoneMerge"
      },{
        "args":[{
            "name":"hResult",
            "type":"handle"
          }],
        "returns":"void",
        "name":"GatherCriteria",
        "description":"Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks."
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetAbsOrigin"
      },{
        "args":[],
        "returns":"float",
        "name":"GetAbsScale"
      },{
        "args":[],
        "returns":"QAngle",
        "name":"GetAngles"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetAnglesAsVector",
        "description":"Get entity pitch, yaw, roll as a vector."
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetAngularVelocity",
        "description":"Get the local angular velocity - returns a vector of pitch,yaw,roll"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetBaseVelocity",
        "description":"Get Base? velocity."
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetBoundingMaxs",
        "description":"Get a vector containing max bounds, centered on object."
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetBoundingMins",
        "description":"Get a vector containing min bounds, centered on object."
      },{
        "args":[],
        "returns":"table",
        "name":"GetBounds",
        "description":"Get a table containing the 'Mins' & 'Maxs' vector bounds, centered on object."
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetCenter",
        "description":"Get vector to center of object - absolute coords"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetChildren",
        "description":"Get the entities parented to this entity."
      },{
        "args":[{
            "name":"name",
            "type":"string"
          }],
        "returns":"table",
        "name":"GetContext",
        "description":"GetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found)."
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetForwardVector",
        "description":"Get the forward vector of the entity."
      },{
        "args":[],
        "returns":"int",
        "name":"GetHealth",
        "description":"Get the health of this entity."
      },{
        "args":[],
        "returns":"QAngle",
        "name":"GetLocalAngles",
        "description":"Get entity local pitch, yaw, roll as a QAngle"
      },{
        "args":[],
        "returns":"QAngle",
        "name":"GetLocalAngularVelocity",
        "description":"Maybe local angvel"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetLocalOrigin",
        "description":"Get entity local origin as a Vector"
      },{
        "args":[],
        "returns":"float",
        "name":"GetLocalScale"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetLocalVelocity",
        "description":"Get Entity relative velocity."
      },{
        "args":[],
        "returns":"float",
        "name":"GetMass",
        "description":"Get the mass of an entity. (returns 0 if it doesn't have a physics object)"
      },{
        "args":[],
        "returns":"int",
        "name":"GetMaxHealth",
        "description":"Get the maximum health of this entity."
      },{
        "args":[],
        "returns":"string",
        "name":"GetModelName",
        "description":"Returns the name of the model."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetMoveParent",
        "description":"If in hierarchy, retrieves the entity's parent."
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetOrigin"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetOwner",
        "description":"Gets this entity's owner"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetOwnerEntity",
        "description":"Get the owner entity, if there is one"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetRightVector",
        "description":"Get the right vector of the entity."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetRootMoveParent",
        "description":"If in hierarchy, walks up the hierarchy to find the root parent."
      },{
        "args":[{
            "name":"soundname",
            "type":"string"
          },{
            "name":"actormodel",
            "type":"string"
          }],
        "returns":"float",
        "name":"GetSoundDuration",
        "description":"Returns float duration of the sound. Takes soundname and optional actormodelname."
      },{
        "args":[],
        "returns":"int",
        "name":"GetSpawnGroupHandle",
        "description":"Returns the spawn group handle of this entity"
      },{
        "args":[],
        "returns":"int",
        "name":"GetTeam",
        "description":"Get the team number of this entity."
      },{
        "args":[],
        "returns":"int",
        "name":"GetTeamNumber",
        "description":"Get the team number of this entity."
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetUpVector",
        "description":"Get the up vector of the entity."
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetVelocity"
      },{
        "args":[{
            "name":"pName",
            "type":"string"
          }],
        "returns":"bool",
        "name":"HasAttribute",
        "description":"See if an entity has a particular attribute."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAlive",
        "description":"Is this entity alive?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsNPC",
        "description":"Is this entity an CAI_BaseNPC?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPlayer",
        "description":"Is this entity a player?"
      },{
        "args":[],
        "returns":"void",
        "name":"Kill"
      },{
        "args":[],
        "returns":"handle",
        "name":"NextMovePeer"
      },{
        "args":[{
            "name":"duration",
            "type":"float"
          },{
            "name":"friction",
            "type":"float"
          }],
        "returns":"void",
        "name":"OverrideFriction",
        "description":"Takes duration, value for a temporary override."
      },{
        "args":[{
            "name":"soundname",
            "type":"string"
          }],
        "returns":"void",
        "name":"PrecacheScriptSound",
        "description":"Precache a sound for later playing."
      },{
        "args":[{
            "name":"nFlags",
            "type":"int"
          }],
        "returns":"void",
        "name":"RemoveEffects",
        "description":"RemoveEffects( int ): Removes the render effect flag."
      },{
        "args":[{
            "name":"fPitch",
            "type":"float"
          },{
            "name":"fYaw",
            "type":"float"
          },{
            "name":"fRoll",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetAbsAngles",
        "description":"Set entity pitch, yaw, roll by component."
      },{
        "args":[{
            "name":"origin",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetAbsOrigin"
      },{
        "args":[{
            "name":"flScale",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetAbsScale"
      },{
        "args":[{
            "name":"fPitch",
            "type":"float"
          },{
            "name":"fYaw",
            "type":"float"
          },{
            "name":"fRoll",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetAngles",
        "description":"Set entity pitch, yaw, roll by component."
      },{
        "args":[{
            "name":"pitchVel",
            "type":"float"
          },{
            "name":"yawVel",
            "type":"float"
          },{
            "name":"rollVel",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetAngularVelocity",
        "description":"Set the local angular velocity - takes float pitch,yaw,roll velocities"
      },{
        "args":[{
            "name":"vPos",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetConstraint",
        "description":"Set the position of the constraint."
      },{
        "args":[{
            "name":"pName",
            "type":"string"
          },{
            "name":"pValue",
            "type":"string"
          },{
            "name":"duration",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetContext",
        "description":"SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever')."
      },{
        "args":[{
            "name":"pName",
            "type":"string"
          },{
            "name":"fValue",
            "type":"float"
          },{
            "name":"duration",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetContextNum",
        "description":"SetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever')."
      },{
        "args":[{
            "name":"pszContextName",
            "type":"string"
          },{
            "name":"hThinkFunc",
            "type":"handle"
          },{
            "name":"flInterval",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetContextThink",
        "description":"Set a think function on this entity."
      },{
        "args":[{
            "name":"pName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetEntityName",
        "description":"Set the name of an entity."
      },{
        "args":[{
            "name":"v",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetForwardVector",
        "description":"Set the orientation of the entity to have this forward vector."
      },{
        "args":[{
            "name":"flFriction",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetFriction",
        "description":"Set PLAYER friction, ignored for objects."
      },{
        "args":[{
            "name":"flGravity",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetGravity",
        "description":"Set PLAYER gravity, ignored for objects."
      },{
        "args":[{
            "name":"nHealth",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetHealth",
        "description":"Set the health of this entity."
      },{
        "args":[{
            "name":"fPitch",
            "type":"float"
          },{
            "name":"fYaw",
            "type":"float"
          },{
            "name":"fRoll",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetLocalAngles",
        "description":"Set entity local pitch, yaw, roll by component"
      },{
        "args":[{
            "name":"origin",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetLocalOrigin",
        "description":"Set entity local origin from a Vector"
      },{
        "args":[{
            "name":"flScale",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetLocalScale"
      },{
        "args":[{
            "name":"flMass",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetMass",
        "description":"Set the mass of an entity. (does nothing if it doesn't have a physics object)"
      },{
        "args":[{
            "name":"amt",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetMaxHealth",
        "description":"Set the maximum health of this entity."
      },{
        "args":[{
            "name":"v",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetOrigin"
      },{
        "args":[{
            "name":"pOwner",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetOwner",
        "description":"Sets this entity's owner"
      },{
        "args":[{
            "name":"hParent",
            "type":"handle"
          },{
            "name":"pAttachmentname",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetParent",
        "description":"Set the parent for this entity."
      },{
        "args":[{
            "name":"iTeamNum",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetTeam"
      },{
        "args":[{
            "name":"vecVelocity",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetVelocity"
      },{
        "args":[{
            "name":"soundname",
            "type":"string"
          }],
        "returns":"void",
        "name":"StopSound",
        "description":"Stops a named sound playing from this entity."
      },{
        "args":[{
            "name":"hInfo",
            "type":"handle"
          }],
        "returns":"int",
        "name":"TakeDamage",
        "description":"Apply damage to this entity. Use CreateDamageInfo() to create a damageinfo object."
      },{
        "args":[{
            "name":"vPoint",
            "type":"Vector"
          }],
        "returns":"Vector",
        "name":"TransformPointEntityToWorld",
        "description":"Returns the input Vector transformed from entity to world space"
      },{
        "args":[{
            "name":"vPoint",
            "type":"Vector"
          }],
        "returns":"Vector",
        "name":"TransformPointWorldToEntity",
        "description":"Returns the input Vector transformed from world to entity space"
      },{
        "args":[],
        "returns":"void",
        "name":"Trigger",
        "description":"Fires off this entity's OnTrigger responses."
      },{
        "args":[],
        "returns":"void",
        "name":"ValidatePrivateScriptScope",
        "description":"Validates the private script scope and creates it if one doesn't exist."
      }],
    "kind":"class",
    "name":"CBaseEntity",
    "extend":"CEntityInstance"
  },{
    "members":[{
        "args":[],
        "returns":"handle",
        "name":"GetCurrentScene",
        "description":"Returns the instance of the oldest active scene entity (if any)."
      },{
        "args":[{
            "name":"index",
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetSceneByIndex",
        "description":"Returns the instance of the scene entity at the specified index."
      },{
        "args":[{
            "name":"pszScene",
            "type":"string"
          },{
            "name":"flDelay",
            "type":"float"
          }],
        "returns":"float",
        "name":"ScriptPlayScene",
        "description":"( vcd file, delay ) - play specified vcd file"
      }],
    "kind":"class",
    "name":"CBaseFlex",
    "extend":"CBaseAnimating"
  },{
    "members":[{
        "args":[{
            "name":"iAttachment",
            "type":"int"
          }],
        "returns":"Vector",
        "name":"GetAttachmentAngles",
        "description":"Get the attachment id's angles as a p,y,r vector."
      },{
        "args":[{
            "name":"iAttachment",
            "type":"int"
          }],
        "returns":"Vector",
        "name":"GetAttachmentForward",
        "description":"Get the attachment id's forward vector."
      },{
        "args":[{
            "name":"iAttachment",
            "type":"int"
          }],
        "returns":"Vector",
        "name":"GetAttachmentOrigin",
        "description":"Get the attachment id's origin vector."
      },{
        "args":[],
        "returns":"unsigned",
        "name":"GetMaterialGroupHash",
        "description":"GetMaterialGroupHash(): Get the material group hash of this entity."
      },{
        "args":[],
        "returns":"uint64",
        "name":"GetMaterialGroupMask",
        "description":"GetMaterialGroupMask(): Get the mesh group mask of this entity."
      },{
        "args":[],
        "returns":"float",
        "name":"GetModelScale",
        "description":"Get scale of entity's model."
      },{
        "args":[],
        "returns":"int",
        "name":"GetRenderAlpha",
        "description":"GetRenderAlpha(): Get the alpha modulation of this entity."
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetRenderColor",
        "description":"GetRenderColor(): Get the render color of the entity."
      },{
        "args":[{
            "name":"pAttachmentName",
            "type":"string"
          }],
        "returns":"int",
        "name":"ScriptLookupAttachment",
        "description":"Get the named attachment id."
      },{
        "args":[{
            "name":"iGroup",
            "type":"int"
          },{
            "name":"iValue",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetBodygroup",
        "description":"Sets a bodygroup."
      },{
        "args":[{
            "name":"pName",
            "type":"string"
          },{
            "name":"iValue",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetBodygroupByName",
        "description":"Sets a bodygroup by name."
      },{
        "args":[{
            "name":"pLightGroup",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetLightGroup",
        "description":"SetLightGroup( string ): Sets the light group of the entity."
      },{
        "args":[{
            "name":"pMaterialGroup",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetMaterialGroup",
        "description":"SetMaterialGroup( string ): Set the material group of this entity."
      },{
        "args":[{
            "name":"nHash",
            "type":"unsigned"
          }],
        "returns":"void",
        "name":"SetMaterialGroupHash",
        "description":"SetMaterialGroupHash( uint32 ): Set the material group hash of this entity."
      },{
        "args":[{
            "name":"nMeshGroupMask",
            "type":"uint64"
          }],
        "returns":"void",
        "name":"SetMaterialGroupMask",
        "description":"SetMaterialGroupMask( uint64 ): Set the mesh group mask of this entity."
      },{
        "args":[{
            "name":"pModelName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetModel"
      },{
        "args":[{
            "name":"flScale",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetModelScale",
        "description":"Set scale of entity's model."
      },{
        "args":[{
            "name":"nAlpha",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetRenderAlpha",
        "description":"SetRenderAlpha( int ): Set the alpha modulation of this entity."
      },{
        "args":[{
            "name":"r",
            "type":"int"
          },{
            "name":"g",
            "type":"int"
          },{
            "name":"b",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetRenderColor",
        "description":"SetRenderColor( r, g, b ): Sets the render color of the entity."
      },{
        "args":[{
            "name":"nMode",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetRenderMode",
        "description":"SetRenderMode( int ): Sets the render mode of the entity."
      },{
        "args":[{
            "name":"pMeshGroupName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetSingleMeshGroup",
        "description":"SetSingleMeshGroup( string ): Set a single mesh group for this entity."
      },{
        "args":[{
            "name":"mins",
            "type":"Vector"
          },{
            "name":"maxs",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetSize"
      },{
        "args":[{
            "name":"iSkin",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetSkin",
        "description":"Set skin (int)."
      }],
    "kind":"class",
    "name":"CBaseModelEntity",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[],
        "returns":"table",
        "name":"GetEquippedWeapons",
        "description":"GetEquippedWeapons() : Returns an array of all the equipped weapons"
      },{
        "args":[],
        "returns":"int",
        "name":"GetUserID",
        "description":"Returns the player's user id."
      },{
        "args":[],
        "returns":"int",
        "name":"GetWeaponCount",
        "description":"GetWeaponCount() : Gets the number of weapons currently equipped"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsNoclipping",
        "description":"Returns true if the player is in noclip mode."
      }],
    "kind":"class",
    "name":"CBasePlayer",
    "extend":"CBaseCombatCharacter"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"Disable",
        "description":"Disable's the trigger"
      },{
        "args":[],
        "returns":"void",
        "name":"Enable",
        "description":"Enable the trigger"
      },{
        "args":[{
            "name":"hEnt",
            "type":"handle"
          }],
        "returns":"bool",
        "name":"IsTouching",
        "description":"Checks whether the passed entity is touching the trigger."
      }],
    "kind":"class",
    "name":"CBaseTrigger",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"AddImpulseAtPosition",
        "description":"Apply an impulse at a worldspace position to the physics"
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"AddVelocity",
        "description":"Add linear and angular velocity to the physics object"
      },{
        "args":[],
        "returns":"void",
        "name":"DetachFromParent",
        "description":"Detach from its parent"
      },{
        "args":[],
        "returns":"<unknown>",
        "name":"GetSequence",
        "description":"Returns the active sequence\n"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAttachedToParent",
        "description":"Is attached to parent"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"<unknown>",
        "name":"LookupSequence",
        "description":"Returns a sequence id given a name\n"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"float",
        "name":"SequenceDuration",
        "description":"Returns the duration in seconds of the specified sequence"
      },{
        "args":[{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetAngularVelocity"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"SetAnimation",
        "description":"Pass string for the animation to play on this model"
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "returns":"void",
        "name":"SetMaterialGroup"
      },{
        "args":[{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetVelocity"
      }],
    "name":"CBodyComponent",
    "kind":"class"
  },{
    "instance":"CustomGameEventManager",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"int",
        "name":"RegisterListener",
        "description":"( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"void",
        "name":"Send_ServerToAllClients",
        "description":"( string EventName, table EventData )"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"void",
        "name":"Send_ServerToPlayer",
        "description":"( Entity Player, string EventName, table EventData )"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"void",
        "name":"Send_ServerToTeam",
        "description":"( int TeamNumber, string EventName, table EventData )"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"UnregisterListener",
        "description":"( int ListnerID ) - Unregister a specific listener"
      }],
    "name":"CCustomGameEventManager",
    "kind":"class"
  },{
    "instance":"CustomNetTables",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetTableValue",
        "description":"( string TableName, string KeyName )"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"bool",
        "name":"SetTableValue",
        "description":"( string TableName, string KeyName, script_table Value )"
      }],
    "name":"CCustomNetTableManager",
    "kind":"class"
  },{
    "members":[{
        "args":[],
        "returns":"<unknown>",
        "name":"CanAbilityBeUpgraded"
      },{
        "args":[],
        "returns":"bool",
        "name":"CastAbility"
      },{
        "args":[],
        "returns":"bool",
        "name":"ContinueCasting"
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"fRadius",
            "type":"float"
          },{
            "name":"fDuration",
            "type":"float"
          }],
        "returns":"void",
        "name":"CreateVisibilityNode"
      },{
        "args":[],
        "returns":"void",
        "name":"DecrementModifierRefCount"
      },{
        "args":[{
            "name":"bInterrupted",
            "type":"bool"
          }],
        "returns":"void",
        "name":"EndChannel"
      },{
        "args":[],
        "returns":"void",
        "name":"EndCooldown",
        "description":"Clear the cooldown remaining on this ability."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAOERadius"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAbilityDamage"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAbilityDamageType"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAbilityIndex"
      },{
        "args":[],
        "returns":"table",
        "name":"GetAbilityKeyValues",
        "description":"Gets the key values definition for this ability."
      },{
        "args":[],
        "returns":"string",
        "name":"GetAbilityName",
        "description":"Returns the name of this ability."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAbilityTargetFlags"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAbilityTargetTeam"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAbilityTargetType"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAbilityType"
      },{
        "args":[],
        "returns":"bool",
        "name":"GetAnimationIgnoresModelScale"
      },{
        "args":[],
        "returns":"string",
        "name":"GetAssociatedPrimaryAbilities"
      },{
        "args":[],
        "returns":"string",
        "name":"GetAssociatedSecondaryAbilities"
      },{
        "args":[],
        "returns":"bool",
        "name":"GetAutoCastState"
      },{
        "args":[],
        "returns":"float",
        "name":"GetBackswingTime"
      },{
        "args":[],
        "returns":"int",
        "name":"GetBehavior"
      },{
        "args":[],
        "returns":"int",
        "name":"GetBehaviorInt",
        "description":"Get ability behavior flags as an int for compatability."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCastPoint"
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetCastRange",
        "description":"Gets the cast range of the ability."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetCaster"
      },{
        "args":[],
        "returns":"float",
        "name":"GetChannelStartTime"
      },{
        "args":[],
        "returns":"float",
        "name":"GetChannelTime"
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetChannelledManaCostPerSecond"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetCloneSource"
      },{
        "args":[],
        "returns":"int",
        "name":"GetConceptRecipientType"
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetCooldown",
        "description":"Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCooldownTime"
      },{
        "args":[],
        "returns":"float",
        "name":"GetCooldownTimeRemaining"
      },{
        "args":[],
        "returns":"int",
        "name":"GetCurrentAbilityCharges"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetCursorPosition"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetCursorTarget"
      },{
        "args":[],
        "returns":"bool",
        "name":"GetCursorTargetingNothing"
      },{
        "args":[],
        "returns":"float",
        "name":"GetDuration"
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetEffectiveCastRange",
        "description":"Gets the cast range of the ability, taking modifiers into account."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetEffectiveCooldown"
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGoldCost"
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGoldCostForUpgrade"
      },{
        "args":[],
        "returns":"int",
        "name":"GetHeroLevelRequiredToUpgrade"
      },{
        "args":[],
        "returns":"string",
        "name":"GetIntrinsicModifierName"
      },{
        "args":[],
        "returns":"int",
        "name":"GetLevel",
        "description":"Get the current level of the ability."
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"nLevel",
            "type":"int"
          }],
        "returns":"table",
        "name":"GetLevelSpecialValueFor"
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"nLevel",
            "type":"int"
          }],
        "returns":"table",
        "name":"GetLevelSpecialValueNoOverride"
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetManaCost"
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetMaxAbilityCharges"
      },{
        "args":[],
        "returns":"int",
        "name":"GetMaxLevel"
      },{
        "args":[],
        "returns":"float",
        "name":"GetModifierValue"
      },{
        "args":[],
        "returns":"float",
        "name":"GetModifierValueBonus"
      },{
        "args":[],
        "returns":"float",
        "name":"GetPlaybackRateOverride"
      },{
        "args":[],
        "returns":"string",
        "name":"GetSharedCooldownName"
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          }],
        "returns":"table",
        "name":"GetSpecialValueFor",
        "description":"Gets a value from this ability's special value block for its current level."
      },{
        "args":[],
        "returns":"string",
        "name":"GetStolenActivityModifier"
      },{
        "args":[],
        "returns":"bool",
        "name":"GetToggleState"
      },{
        "args":[],
        "returns":"bool",
        "name":"GetUpgradeRecommended"
      },{
        "args":[{
            "name":"flXP",
            "type":"float"
          }],
        "returns":"bool",
        "name":"HeroXPChange"
      },{
        "args":[],
        "returns":"void",
        "name":"IncrementModifierRefCount"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsActivated"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAttributeBonus"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsChanneling",
        "description":"Returns whether the ability is currently channeling."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCooldownReady"
      },{
        "args":[{
            "name":"hEntity",
            "type":"handle"
          }],
        "returns":"bool",
        "name":"IsCosmetic"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsFullyCastable",
        "description":"Returns whether the ability can be cast."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHidden"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHiddenAsSecondaryAbility"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHiddenWhenStolen"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsInAbilityPhase",
        "description":"Returns whether the ability is currently casting."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsItem"
      },{
        "args":[{
            "name":"nIssuerPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"IsOwnersGoldEnough"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsOwnersGoldEnoughForUpgrade"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsOwnersManaEnough"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPassive"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRefreshable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSharedWithTeammates"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStealable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStolen"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsToggle"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsTrained"
      },{
        "args":[],
        "returns":"void",
        "name":"MarkAbilityButtonDirty",
        "description":"Mark the ability button for this ability as needing a refresh."
      },{
        "args":[],
        "returns":"int",
        "name":"NumModifiersUsingAbility"
      },{
        "args":[],
        "returns":"void",
        "name":"OnAbilityPhaseInterrupted"
      },{
        "args":[],
        "returns":"bool",
        "name":"OnAbilityPhaseStart"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          },{
            "name":"bCtrlHeld",
            "type":"bool"
          }],
        "returns":"void",
        "name":"OnAbilityPinged"
      },{
        "args":[{
            "name":"bInterrupted",
            "type":"bool"
          }],
        "returns":"void",
        "name":"OnChannelFinish"
      },{
        "args":[{
            "name":"flInterval",
            "type":"float"
          }],
        "returns":"void",
        "name":"OnChannelThink"
      },{
        "args":[],
        "returns":"void",
        "name":"OnHeroCalculateStatBonus"
      },{
        "args":[],
        "returns":"void",
        "name":"OnHeroLevelUp"
      },{
        "args":[],
        "returns":"void",
        "name":"OnOwnerDied"
      },{
        "args":[],
        "returns":"void",
        "name":"OnOwnerSpawned"
      },{
        "args":[],
        "returns":"void",
        "name":"OnSpellStart"
      },{
        "args":[],
        "returns":"void",
        "name":"OnToggle"
      },{
        "args":[],
        "returns":"void",
        "name":"OnUpgrade"
      },{
        "args":[],
        "returns":"void",
        "name":"PayGoldCost"
      },{
        "args":[],
        "returns":"void",
        "name":"PayGoldCostForUpgrade"
      },{
        "args":[],
        "returns":"void",
        "name":"PayManaCost"
      },{
        "args":[],
        "returns":"bool",
        "name":"PlaysDefaultAnimWhenStolen"
      },{
        "args":[],
        "returns":"bool",
        "name":"ProcsMagicStick"
      },{
        "args":[],
        "returns":"bool",
        "name":"RefCountsModifiers"
      },{
        "args":[],
        "returns":"void",
        "name":"RefreshCharges"
      },{
        "args":[],
        "returns":"<unknown>",
        "name":"RefreshIntrinsicModifier"
      },{
        "args":[],
        "returns":"void",
        "name":"RefundManaCost"
      },{
        "args":[],
        "returns":"bool",
        "name":"RequiresFacing"
      },{
        "args":[],
        "returns":"bool",
        "name":"ResetToggleOnRespawn"
      },{
        "args":[{
            "name":"iIndex",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetAbilityIndex"
      },{
        "args":[{
            "name":"bActivated",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetActivated"
      },{
        "args":[{
            "name":"bChanneling",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetChanneling"
      },{
        "args":[{
            "name":"nCharges",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCurrentAbilityCharges"
      },{
        "args":[{
            "name":"bFrozenCooldown",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetFrozenCooldown"
      },{
        "args":[{
            "name":"bHidden",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetHidden"
      },{
        "args":[{
            "name":"bInAbilityPhase",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetInAbilityPhase"
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetLevel",
        "description":"Sets the level of this ability."
      },{
        "args":[{
            "name":"flCastPoint",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetOverrideCastPoint"
      },{
        "args":[{
            "name":"bRefCounts",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetRefCountsModifiers"
      },{
        "args":[{
            "name":"bStealable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetStealable"
      },{
        "args":[{
            "name":"bStolen",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetStolen"
      },{
        "args":[{
            "name":"bUpgradeRecommended",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetUpgradeRecommended"
      },{
        "args":[],
        "returns":"bool",
        "name":"ShouldUseResources"
      },{
        "args":[{
            "name":"iConcept",
            "type":"int"
          }],
        "returns":"void",
        "name":"SpeakAbilityConcept"
      },{
        "args":[],
        "returns":"<unknown>",
        "name":"SpeakTrigger"
      },{
        "args":[{
            "name":"flCooldown",
            "type":"float"
          }],
        "returns":"void",
        "name":"StartCooldown"
      },{
        "args":[],
        "returns":"void",
        "name":"ToggleAbility"
      },{
        "args":[],
        "returns":"void",
        "name":"ToggleAutoCast"
      },{
        "args":[{
            "name":"bSupressSpeech",
            "type":"bool"
          }],
        "returns":"void",
        "name":"UpgradeAbility"
      },{
        "args":[{
            "name":"bMana",
            "type":"bool"
          },{
            "name":"bGold",
            "type":"bool"
          },{
            "name":"bCooldown",
            "type":"bool"
          }],
        "returns":"void",
        "name":"UseResources"
      }],
    "kind":"class",
    "name":"CDOTABaseAbility",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"pszAbilityName",
            "type":"string"
          }],
        "returns":"void",
        "name":"AddAbilityUpgradeToWhitelist"
      },{
        "args":[{
            "name":"pszItemName",
            "type":"string"
          },{
            "name":"pszShopName",
            "type":"string"
          },{
            "name":"pszCategory",
            "type":"string"
          }],
        "returns":"void",
        "name":"AddItemToCustomShop",
        "description":"( pszItem, pszShop, pszCategory ) Add an item to purchase at a custom shop."
      },{
        "args":[{
            "name":"hQueryTable",
            "type":"handle"
          },{
            "name":"hPlayer",
            "type":"handle"
          },{
            "name":"pszQueryName",
            "type":"string"
          }],
        "returns":"int",
        "name":"AddRealTimeCombatAnalyzerQuery",
        "description":"Begin tracking a sequence of events using the real time combat analyzer."
      },{
        "args":[{
            "name":"flMinX",
            "type":"float"
          },{
            "name":"flMinY",
            "type":"float"
          },{
            "name":"flMaxX",
            "type":"float"
          },{
            "name":"flMaxY",
            "type":"float"
          },{
            "name":"flGridSize",
            "type":"float"
          }],
        "returns":"handle",
        "name":"AllocateFowBlockerRegion",
        "description":"Allocates an entity which can be used by custom games to control FoW occlusion volumes"
      },{
        "args":[],
        "returns":"bool",
        "name":"AreWeatherEffectsDisabled",
        "description":"Get if weather effects are disabled on the client."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearBountyRunePickupFilter",
        "description":"Clear the script filter that controls bounty rune pickup behavior."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearDamageFilter",
        "description":"Clear the script filter that controls how a unit takes damage."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearExecuteOrderFilter",
        "description":"Clear the script filter that controls when a unit picks up an item."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearHealingFilter",
        "description":"Clear the script filter that controls how a unit heals."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearItemAddedToInventoryFilter",
        "description":"Clear the script filter that controls the item added to inventory filter."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearModifierGainedFilter",
        "description":"Clear the script filter that controls the modifier filter."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearModifyExperienceFilter",
        "description":"Clear the script filter that controls how hero experience is modified."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearModifyGoldFilter",
        "description":"Clear the script filter that controls how hero gold is modified."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearRuneSpawnFilter",
        "description":"Clear the script filter that controls what rune spawns."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearTrackingProjectileFilter",
        "description":"Clear the script filter that controls when tracking projectiles are launched."
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"DisableClumpingBehaviorByDefault",
        "description":"Disable npc_dota_creature clumping behavior by default."
      },{
        "args":[{
            "name":"bDisable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"DisableHudFlip",
        "description":"Use to disable hud flip for this mod"
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"EnableAbilityUpgradeWhitelist"
      },{
        "args":[],
        "returns":"bool",
        "name":"GetAlwaysShowPlayerInventory",
        "description":"Show the player hero's inventory in the HUD, regardless of what unit is selected."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetAlwaysShowPlayerNames",
        "description":"Get whether player names are always shown, regardless of client setting."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetAnnouncerDisabled",
        "description":"Are in-game announcers disabled?"
      },{
        "args":[],
        "returns":"float",
        "name":"GetCameraDistanceOverride",
        "description":"Set a different camera distance; dota default is 1134."
      },{
        "args":[{
            "name":"nDerivedStatType",
            "type":"int"
          },{
            "name":"hHero",
            "type":"handle"
          }],
        "returns":"float",
        "name":"GetCustomAttributeDerivedStatValue",
        "description":"Get current derived stat value constant."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCustomBackpackCooldownPercent",
        "description":"Get the current rate cooldown ticks down for items in the backpack."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCustomBackpackSwapCooldown",
        "description":"Get the current custom backpack swap cooldown."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetCustomBuybackCooldownEnabled",
        "description":"Turns on capability to define custom buyback cooldowns."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetCustomBuybackCostEnabled",
        "description":"Turns on capability to define custom buyback costs."
      },{
        "args":[],
        "returns":"int",
        "name":"GetCustomDireScore",
        "description":"Get the topbar score display value for dire."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCustomGlyphCooldown",
        "description":"Get the current custom glyph cooldown."
      },{
        "args":[],
        "returns":"int",
        "name":"GetCustomHeroMaxLevel",
        "description":"Allows definition of the max level heroes can achieve (default is 25)."
      },{
        "args":[],
        "returns":"int",
        "name":"GetCustomRadiantScore",
        "description":"Get the topbar score display value for radiant."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCustomScanCooldown",
        "description":"Get the current custom scan cooldown."
      },{
        "args":[],
        "returns":"float",
        "name":"GetDaynightCycleAdvanceRate",
        "description":"Get the rate at which the day/night cycle advances (1.0 = default)."
      },{
        "args":[],
        "returns":"int",
        "name":"GetEventGameSeed",
        "description":"Get the Game Seed passed from the GC."
      },{
        "args":[],
        "returns":"unsigned",
        "name":"GetEventWindowStartTime",
        "description":"Get the Event Window Start Time passed from the GC."
      },{
        "args":[],
        "returns":"float",
        "name":"GetFixedRespawnTime",
        "description":"Gets the fixed respawn time."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetFogOfWarDisabled",
        "description":"Turn the fog of war on or off."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetGoldSoundDisabled",
        "description":"Turn the sound when gold is acquired off/on."
      },{
        "args":[{
            "name":"iElement",
            "type":"int"
          }],
        "returns":"bool",
        "name":"GetHUDVisible",
        "description":"Returns the HUD element visibility."
      },{
        "args":[],
        "returns":"int",
        "name":"GetMaximumAttackSpeed",
        "description":"Get the maximum attack speed for units."
      },{
        "args":[],
        "returns":"int",
        "name":"GetMinimumAttackSpeed",
        "description":"Get the minimum attack speed for units."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetRecommendedItemsDisabled",
        "description":"Turn the panel for showing recommended items at the shop off/on."
      },{
        "args":[],
        "returns":"float",
        "name":"GetRespawnTimeScale",
        "description":"Returns the scale applied to non-fixed respawn times."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetStashPurchasingDisabled",
        "description":"Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetStickyItemDisabled",
        "description":"Hide the sticky item in the quickbuy."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetTopBarTeamValuesOverride",
        "description":"Override the values of the team values on the top game bar."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetTopBarTeamValuesVisible",
        "description":"Turning on/off the team values on the top game bar."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetTowerBackdoorProtectionEnabled",
        "description":"Gets whether tower backdoor protection is enabled or not."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetUseCustomHeroLevels",
        "description":"Are custom-defined XP values for hero level ups in use?"
      },{
        "args":[{
            "name":"pszAbilityName",
            "type":"string"
          }],
        "returns":"bool",
        "name":"IsAbilityUpgradeWhitelisted"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsBuybackEnabled",
        "description":"Enables or disables buyback completely."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDaynightCycleDisabled",
        "description":"Is the day/night cycle disabled?"
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"ListenForQueryFailed",
        "description":"Set function and context for real time combat analyzer query failed."
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"ListenForQueryProgressChanged",
        "description":"Set function and context for real time combat analyzer query progress changed."
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"ListenForQuerySucceeded",
        "description":"Set function and context for real time combat analyzer query succeeded."
      },{
        "args":[{
            "name":"pszAbilityName",
            "type":"string"
          }],
        "returns":"void",
        "name":"RemoveAbilityUpgradeFromWhitelist"
      },{
        "args":[{
            "name":"pszItemName",
            "type":"string"
          },{
            "name":"pszShopName",
            "type":"string"
          }],
        "returns":"void",
        "name":"RemoveItemFromCustomShop",
        "description":"( pszItem, pszShop ) Remove an item to purchase at a custom shop."
      },{
        "args":[{
            "name":"nQueryID",
            "type":"int"
          }],
        "returns":"void",
        "name":"RemoveRealTimeCombatAnalyzerQuery",
        "description":"Stop tracking a combat analyzer query."
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetAbilityTuningValueFilter",
        "description":"Set a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values)"
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetAllowNeutralItemDrops",
        "description":"If set to true, neutral items will be dropped on killing neutral monsters.  Otherwise nothing will be dropped."
      },{
        "args":[{
            "name":"bAlwaysShow",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetAlwaysShowPlayerInventory",
        "description":"Show the player hero's inventory in the HUD, regardless of what unit is selected."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetAlwaysShowPlayerNames",
        "description":"Set whether player names are always shown, regardless of client setting."
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetAnnouncerDisabled",
        "description":"Mutes the in-game announcer."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetBotThinkingEnabled",
        "description":"Enables/Disables bots in custom games. Note: this will only work with default heroes in the dota map."
      },{
        "args":[{
            "name":"bAlwaysPush",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetBotsAlwaysPushWithHuman",
        "description":"Set if the bots should try their best to push with a human player."
      },{
        "args":[{
            "name":"bLateGame",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetBotsInLateGame",
        "description":"Set if bots should enable their late game behavior."
      },{
        "args":[{
            "name":"nMaxTier",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetBotsMaxPushTier",
        "description":"Set the max tier of tower that bots want to push. (-1 to disable)"
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetBountyRunePickupFilter",
        "description":"Set a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "name":"flInterval",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBountyRuneSpawnInterval",
        "description":"Set bounty rune spawn rate"
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetBuybackEnabled",
        "description":"Enables or disables buyback completely."
      },{
        "args":[{
            "name":"flCameraDistanceOverride",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCameraDistanceOverride",
        "description":"Set a different camera distance; dota default is 1134."
      },{
        "args":[{
            "name":"nSmoothCount",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCameraSmoothCountOverride",
        "description":"Set a different camera smooth count; dota default is 8."
      },{
        "args":[{
            "name":"flMinZ",
            "type":"float"
          },{
            "name":"flMaxZ",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCameraZRange",
        "description":"Sets the camera Z range"
      },{
        "args":[{
            "name":"bAllow",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCanSellAnywhere"
      },{
        "args":[{
            "name":"nStatType",
            "type":"int"
          },{
            "name":"flNewValue",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCustomAttributeDerivedStatValue",
        "description":"Modify derived stat value constants. ( AttributeDerivedStat eStatType, float flNewValue."
      },{
        "args":[{
            "name":"flPercent",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCustomBackpackCooldownPercent",
        "description":"Set the rate cooldown ticks down for items in the backpack."
      },{
        "args":[{
            "name":"flCooldown",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCustomBackpackSwapCooldown",
        "description":"Set a custom cooldown for swapping items into the backpack."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCustomBuybackCooldownEnabled",
        "description":"Turns on capability to define custom buyback cooldowns."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCustomBuybackCostEnabled",
        "description":"Turns on capability to define custom buyback costs."
      },{
        "args":[{
            "name":"nScore",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomDireScore",
        "description":"Sets the topbar score display value for dire."
      },{
        "args":[{
            "name":"pHeroName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetCustomGameForceHero",
        "description":"Force all players to use the specified hero and disable the normal hero selection process. Must be used before hero selection."
      },{
        "args":[{
            "name":"flCooldown",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCustomGlyphCooldown",
        "description":"Set a custom cooldown for team Glyph ability."
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomHeroMaxLevel",
        "description":"Allows definition of the max level heroes can achieve (default is 25)."
      },{
        "args":[{
            "name":"nScore",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomRadiantScore",
        "description":"Sets the topbar score display value for radiant."
      },{
        "args":[{
            "name":"flCooldown",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCustomScanCooldown",
        "description":"Set a custom cooldown for team Scan ability."
      },{
        "args":[{
            "name":"pszEffectName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetCustomTerrainWeatherEffect",
        "description":"Set the effect used as a custom weather effect, when units are on non-default terrain, in this mode."
      },{
        "args":[{
            "name":"hTable",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetCustomXPRequiredToReachNextLevel",
        "description":"Allows definition of a table of hero XP values."
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetDamageFilter",
        "description":"Set a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "name":"flRate",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetDaynightCycleAdvanceRate",
        "description":"Sets the rate at which the day/night cycle advances (1.0 = default)."
      },{
        "args":[{
            "name":"bDisable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetDaynightCycleDisabled",
        "description":"Enable or disable the day/night cycle."
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetDeathOverlayDisabled",
        "description":"Specify whether the full screen death overlay effect plays when the selected hero dies."
      },{
        "args":[{
            "name":"pItem",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetDefaultStickyItem",
        "description":"Sets the default sticky item in the quickbuy"
      },{
        "args":[{
            "name":"flValue",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetDraftingBanningTimeOverride",
        "description":"Set drafting hero banning time"
      },{
        "args":[{
            "name":"flValue",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetDraftingHeroPickSelectTimeOverride",
        "description":"Set drafting hero pick time"
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetExecuteOrderFilter",
        "description":"Set a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "name":"flFixedRespawnTime",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetFixedRespawnTime",
        "description":"Set a fixed delay for all players to respawn after."
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetFogOfWarDisabled",
        "description":"Turn the fog of war on or off."
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetForceRightClickAttackDisabled",
        "description":"Prevent users from using the right click deny setting."
      },{
        "args":[{
            "name":"flConstantManaRegen",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetFountainConstantManaRegen",
        "description":"Set the constant rate that the fountain will regen mana. (-1 for default)"
      },{
        "args":[{
            "name":"flPercentageHealthRegen",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetFountainPercentageHealthRegen",
        "description":"Set the percentage rate that the fountain will regen health. (-1 for default)"
      },{
        "args":[{
            "name":"flPercentageManaRegen",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetFountainPercentageManaRegen",
        "description":"Set the percentage rate that the fountain will regen mana. (-1 for default)"
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetFreeCourierModeEnabled",
        "description":"If set to true, enable 7.23 free courier mode."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetFriendlyBuildingMoveToEnabled",
        "description":"Allows clicks on friendly buildings to be handled normally."
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetGoldSoundDisabled",
        "description":"Turn the sound when gold is acquired off/on."
      },{
        "args":[{
            "name":"iHUDElement",
            "type":"int"
          },{
            "name":"bVisible",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetHUDVisible",
        "description":"Set the HUD element visibility."
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetHealingFilter",
        "description":"Set a filter function to control the behavior when a unit heals. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetHudCombatEventsDisabled",
        "description":"Specify whether the default combat events will show in the HUD."
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetItemAddedToInventoryFilter",
        "description":"Set a filter function to control what happens to items that are added to an inventory, return false to cancel the event"
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetKillableTombstones",
        "description":"Set whether tombstones can be channeled to be removed by enemy heroes."
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetKillingSpreeAnnouncerDisabled",
        "description":"Mutes the in-game killing spree announcer."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetLoseGoldOnDeath",
        "description":"Use to disable gold loss on death."
      },{
        "args":[{
            "name":"nMaxSpeed",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetMaximumAttackSpeed",
        "description":"Set the maximum attack speed for units."
      },{
        "args":[{
            "name":"nMinSpeed",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetMinimumAttackSpeed",
        "description":"Set the minimum attack speed for units."
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetModifierGainedFilter",
        "description":"Set a filter function to control modifiers that are gained, return false to destroy modifier."
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetModifyExperienceFilter",
        "description":"Set a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetModifyGoldFilter",
        "description":"Set a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "name":"bEnable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetNeutralItemHideUndiscoveredEnabled",
        "description":"When enabled, undiscovered items in the neutral item stash are hidden."
      },{
        "args":[{
            "name":"bEnable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetNeutralStashEnabled",
        "description":"Allow items to be sent to the neutral stash."
      },{
        "args":[{
            "name":"bEnable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetNeutralStashTeamViewOnlyEnabled",
        "description":"When enabled, the all neutral items tab cannot be viewed."
      },{
        "args":[{
            "name":"hOverrideEntity",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetOverrideSelectionEntity",
        "description":"Set an override for the default selection entity, instead of each player's hero."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetPauseEnabled",
        "description":"Set pausing enabled/disabled"
      },{
        "args":[{
            "name":"flInterval",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetPowerRuneSpawnInterval",
        "description":"Set power rune spawn rate"
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetRandomHeroBonusItemGrantDisabled",
        "description":"Disables bonus items for randoming a hero."
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetRecommendedItemsDisabled",
        "description":"Turn the panel for showing recommended items at the shop off/on."
      },{
        "args":[{
            "name":"bRemove",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetRemoveIllusionsOnDeath",
        "description":"Make it so illusions are immediately removed upon death, rather than sticking around for a few seconds."
      },{
        "args":[{
            "name":"flValue",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetRespawnTimeScale",
        "description":"Sets the scale applied to non-fixed respawn times. 1 = default DOTA respawn calculations."
      },{
        "args":[{
            "name":"nRune",
            "type":"int"
          },{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetRuneEnabled",
        "description":"Set if a given type of rune is enabled."
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetRuneSpawnFilter",
        "description":"Set a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetSelectionGoldPenaltyEnabled",
        "description":"Enable/disable gold penalty for late picking."
      },{
        "args":[{
            "name":"bEnable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetSendToStashEnabled",
        "description":"Allow items to be sent to the stash."
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetStashPurchasingDisabled",
        "description":"Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items."
      },{
        "args":[{
            "name":"bDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetStickyItemDisabled",
        "description":"Hide the sticky item in the quickbuy."
      },{
        "args":[{
            "name":"pItemName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetTPScrollSlotItemOverride",
        "description":"Sets the item which goes in the TP scroll slot"
      },{
        "args":[{
            "name":"iTeam",
            "type":"int"
          },{
            "name":"nValue",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetTopBarTeamValue",
        "description":"Set the team values on the top game bar."
      },{
        "args":[{
            "name":"bOverride",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetTopBarTeamValuesOverride",
        "description":"Override the values of the team values on the top game bar."
      },{
        "args":[{
            "name":"bVisible",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetTopBarTeamValuesVisible",
        "description":"Turning on/off the team values on the top game bar."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetTowerBackdoorProtectionEnabled",
        "description":"Enables/Disables tower backdoor protection."
      },{
        "args":[{
            "name":"hFunction",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetTrackingProjectileFilter",
        "description":"Set a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetUnseenFogOfWarEnabled",
        "description":"Enable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetUseCustomHeroLevels",
        "description":"Turn on custom-defined XP values for hero level ups.  The table should be defined before switching this on."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetUseDefaultDOTARuneSpawnLogic",
        "description":"If set to true, use current rune spawn rules.  Either setting respects custom spawn intervals."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetUseTurboCouriers",
        "description":"Enables or disables turbo couriers."
      },{
        "args":[{
            "name":"bDisable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetWeatherEffectsDisabled",
        "description":"Set if weather effects are disabled."
      }],
    "kind":"class",
    "name":"CDOTABaseGameMode",
    "extend":"CBaseEntity"
  },{
    "instance":"DOTAGameManager",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetHeroDataByName_Script",
        "description":"Get the hero unit "
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"int",
        "name":"GetHeroIDByName",
        "description":"Get the hero ID given the hero name."
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"string",
        "name":"GetHeroNameByID",
        "description":"Get the hero name given a hero ID."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"string",
        "name":"GetHeroNameForUnitName",
        "description":"Get the hero name given a unit name."
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"string",
        "name":"GetHeroUnitNameByID",
        "description":"Get the hero unit name given the hero ID."
      }],
    "name":"CDOTAGameManager",
    "kind":"class"
  },{
    "instance":"GameRules",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"bool"
          }],
        "returns":"handle",
        "name":"AddBotPlayerWithEntityScript",
        "description":"Spawn a bot player of the passed hero name, player name, and team."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          }],
        "returns":"bool",
        "name":"AddEventMetadataLeaderboardEntry",
        "description":"Event-only ( string szNameSuffix, int nStars, int nMaxStars, int nExtraData1, int nExtraData2 )"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          }],
        "returns":"bool",
        "name":"AddEventMetadataLeaderboardEntryRawScore",
        "description":"Event-only ( string szNameSuffix, int nScore, int nExtraData1, int nExtraData2 )"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"AddItemToWhiteList",
        "description":"Add an item to the whitelist"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"AddMinimapDebugPoint",
        "description":"Add a point on the minimap."
      },{
        "args":[{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"AddMinimapDebugPointForTeam",
        "description":"Add a point on the minimap for a specific team."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"BeginNightstalkerNight",
        "description":"Begin night stalker night."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"BeginTemporaryNight",
        "description":"Begin temporary night."
      },{
        "args":[],
        "returns":"void",
        "name":"BotPopulate",
        "description":"Fills all the teams with bots if cheat mode is enabled."
      },{
        "args":[],
        "returns":"void",
        "name":"Defeated",
        "description":"Kills the ancient, etc."
      },{
        "args":[],
        "returns":"bool",
        "name":"DidMatchSignoutTimeOut",
        "description":"true when we have waited some time after end of the game and not received signout"
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"EnableCustomGameSetupAutoLaunch",
        "description":"Enabled (true) or disable (false) auto launch for custom game setup."
      },{
        "args":[{
            "type":"int"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"handle"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"ExecuteTeamPing",
        "description":"Sends a minimap ping to all players on the team"
      },{
        "args":[],
        "returns":"void",
        "name":"FinishCustomGameSetup",
        "description":"Indicate that the custom game setup phase is complete, and advance to the game."
      },{
        "args":[],
        "returns":"void",
        "name":"ForceCreepSpawn",
        "description":"Spawn the next wave of creeps."
      },{
        "args":[],
        "returns":"void",
        "name":"ForceGameStart",
        "description":"Transition game state to DOTA_GAMERULES_STATE_GAME_IN_PROGRESS"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetAnnouncer",
        "description":"Get the announcer for a team"
      },{
        "args":[],
        "returns":"table",
        "name":"GetBannedHeroIDs",
        "description":"Returns the hero unit IDs banned in this game, if any"
      },{
        "args":[],
        "returns":"table",
        "name":"GetBannedHeroes",
        "description":"Returns the hero unit names banned in this game, if any"
      },{
        "args":[],
        "returns":"int",
        "name":"GetCustomGameDifficulty",
        "description":"Returns the difficulty level of the custom game mode"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"int",
        "name":"GetCustomGameTeamMaxPlayers",
        "description":"Get whether a team is selectable during game setup"
      },{
        "args":[{
            "type":"bool"
          },{
            "type":"bool"
          }],
        "returns":"float",
        "name":"GetDOTATime",
        "description":"(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time."
      },{
        "args":[],
        "returns":"int",
        "name":"GetDifficulty",
        "description":"Returns difficulty level of the custom game mode"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetDroppedItem",
        "description":"Gets the Xth dropped item"
      },{
        "args":[],
        "returns":"float",
        "name":"GetGameFrameTime",
        "description":"Returns the number of seconds elapsed since the last frame was renderered. This time doesn't count up when the game is paused"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetGameModeEntity",
        "description":"Get the game mode entity"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"string",
        "name":"GetGameSessionConfigValue",
        "description":"Get a string value from the game session config (map options)"
      },{
        "args":[],
        "returns":"float",
        "name":"GetGameTime",
        "description":"Returns the number of seconds elapsed since map start. This time doesn't count up when the game is paused"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"int",
        "name":"GetItemStockCount",
        "description":"Get the stock count of the item"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"float",
        "name":"GetItemStockDuration",
        "description":"Get the time it takes to add a new item to stock"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"float",
        "name":"GetItemStockTime",
        "description":"Get the time an item will be added to stock"
      },{
        "args":[],
        "returns":"bool",
        "name":"GetMatchSignoutComplete",
        "description":"Have we received the post match signout message that includes reward information"
      },{
        "args":[],
        "returns":"float",
        "name":"GetNextBountyRuneSpawnTime",
        "description":"Gets next bounty rune spawn time"
      },{
        "args":[],
        "returns":"float",
        "name":"GetNextRuneSpawnTime",
        "description":"Gets next rune spawn time"
      },{
        "args":[],
        "returns":"int",
        "name":"GetNianTotalDamageTaken",
        "description":"For New Bloom, get total damage taken by the Nian / Year Beast"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"table",
        "name":"GetPlayerCustomGameAccountRecord",
        "description":"(Preview/Unreleased) Gets the player's custom game account record, as it looked at the start of this session"
      },{
        "args":[],
        "returns":"float",
        "name":"GetStateTransitionTime",
        "description":"Get time remaining between state changes."
      },{
        "args":[],
        "returns":"float",
        "name":"GetTimeOfDay",
        "description":"Get the time of day"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetWeatherWindDirection",
        "description":"Get Weather Wind Direction Vector"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"IncreaseItemStock",
        "description":"Increase an item's stock count, clamped to item max (nTeamNumber, szItemName, nCount, nPlayerID ."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCheatMode",
        "description":"Are cheats enabled on the server"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDaytime",
        "description":"Is it day time?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsGamePaused",
        "description":"Returns whether the game is paused."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHeroRespawnEnabled",
        "description":"Returns whether hero respawn is enabled."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsInBanPhase",
        "description":"Are we in the ban phase of hero pick?"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"bool",
        "name":"IsItemInWhiteList",
        "description":"Query an item in the whitelist"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsNightstalkerNight",
        "description":"Is it night stalker night-time?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsTemporaryNight",
        "description":"Is it temporarily night-time?"
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"LockCustomGameSetupTeamAssignment",
        "description":"Lock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams."
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"MakeTeamLose",
        "description":"Makes the specified team lose"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"int"
          }],
        "returns":"int",
        "name":"ModifyGoldFiltered",
        "description":"Like ModifyGold, but will use the gold filter if SetFilterMoreGold has been set true"
      },{
        "args":[],
        "returns":"int",
        "name":"NumDroppedItems",
        "description":"Returns the number of items currently dropped on the ground"
      },{
        "args":[{
            "type":"handle"
          }],
        "returns":"bool",
        "name":"PlayerHasCustomGameHostPrivileges",
        "description":"Whether a player has custom game host privileges (shuffle teams, etc.)"
      },{
        "args":[],
        "returns":"void",
        "name":"Playtesting_UpdateAddOnKeyValues",
        "description":"Updates custom hero, unit and ability KeyValues in memory with the latest values from disk"
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"PrepareSpawners",
        "description":"Prepare Dota lane style spawners with a given interval"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"RemoveFakeClient",
        "description":"Removes a fake client"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"RemoveItemFromWhiteList",
        "description":"Remove an item from the whitelist"
      },{
        "args":[],
        "returns":"void",
        "name":"ResetDefeated",
        "description":"Restart after killing the ancient, etc."
      },{
        "args":[],
        "returns":"void",
        "name":"ResetGameTime",
        "description":"Restart gametime from 0"
      },{
        "args":[],
        "returns":"void",
        "name":"ResetToCustomGameSetup",
        "description":"Restart at custom game setup."
      },{
        "args":[],
        "returns":"void",
        "name":"ResetToHeroSelection",
        "description":"Restart the game at hero selection"
      },{
        "args":[],
        "returns":"uint64",
        "name":"Script_GetMatchID",
        "description":"Get the MatchID for this game."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"SendCustomMessage",
        "description":"Sends a message on behalf of a player."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"SendCustomMessageToTeam",
        "description":"Sends a message on behalf of a player to the specified team."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetAllowOutpostBonuses",
        "description":"Allow Outposts granting XP"
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCreepMinimapIconScale",
        "description":"(flMinimapCreepIconScale) - Scale the creep icons on the minimap."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCreepSpawningEnabled",
        "description":"Sets whether the regular Dota creeps spawn."
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetCustomGameAccountRecordSaveFunction",
        "description":"(Preview/Unreleased) Sets a callback to handle saving custom game account records (callback is passed a Player ID and should return a flat simple table)"
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCustomGameAllowBattleMusic",
        "description":"Sets a flag to enable/disable the default music handling code for custom games"
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCustomGameAllowHeroPickMusic",
        "description":"Sets a flag to enable/disable the default music handling code for custom games"
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCustomGameAllowMusicAtGameStart",
        "description":"Sets a flag to enable/disable the default music handling code for custom games"
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCustomGameAllowSecondaryAbilitiesOnOtherUnits",
        "description":"Sets a flag to enable/disable the casting secondary abilities from units other than the player's own hero."
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomGameBansPerTeam",
        "description":"Set number of hero bans each team gets"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomGameDifficulty",
        "description":"Set the difficulty level of the custom game mode"
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCustomGameEndDelay",
        "description":"Sets the game end delay."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCustomGameSetupAutoLaunchDelay",
        "description":"Set the amount of time to wait for auto launch."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCustomGameSetupRemainingTime",
        "description":"Set the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever"
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCustomGameSetupTimeout",
        "description":"Setup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomGameTeamMaxPlayers",
        "description":"Set whether a team is selectable during game setup"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"SetCustomVictoryMessage",
        "description":"Sets the victory message."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCustomVictoryMessageDuration",
        "description":"Sets the victory message duration."
      },{
        "args":[{
            "type":"handle"
          }],
        "returns":"bool",
        "name":"SetEventMetadataCustomTable",
        "description":"Event-only ( table hMetadataTable )"
      },{
        "args":[{
            "type":"handle"
          }],
        "returns":"bool",
        "name":"SetEventSignoutCustomTable",
        "description":"Event-only ( table hMetadataTable )"
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetFilterMoreGold",
        "description":"Sets whether to filter more gold events than normal"
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetFirstBloodActive",
        "description":"Sets whether First Blood has been triggered."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetGameTimeFrozen",
        "description":"Freeze the game time."
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetGameWinner",
        "description":"Makes the specified team win"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetGlyphCooldown",
        "description":"Set Glyph cooldown for team"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetGoldPerTick",
        "description":"Set the auto gold increase per timed interval."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetGoldTickTime",
        "description":"Set the time interval between auto gold increases."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetHeroMinimapIconScale",
        "description":"(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetHeroRespawnEnabled",
        "description":"Control if the normal DOTA hero respawn rules apply."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetHeroSelectPenaltyTime",
        "description":"Sets amount of penalty time before randoming a hero"
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetHeroSelectionTime",
        "description":"Sets the amount of time players have to pick their hero."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetHideKillMessageHeaders",
        "description":"Sets whether the multikill, streak, and first-blood banners appear at the top of the screen."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetIgnoreLobbyTeamsInCustomGame",
        "description":"Set whether custom and event games should ignore Lobby teams when assigning players to teams. Defaults to true."
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetItemStockCount",
        "description":"Set the stock count of the item"
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetNextBountyRuneSpawnTime",
        "description":"Sets next bounty rune spawn time"
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetNextRuneSpawnTime",
        "description":"Sets next rune spawn time"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetOverlayHealthBarUnit",
        "description":"Show this unit's health on the overlay health bar"
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetPostGameTime",
        "description":"Sets the amount of time players have between the game ending and the server disconnecting them."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetPreGameTime",
        "description":"Sets the amount of time players have between picking their hero and game start."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetRuneMinimapIconScale",
        "description":"(flMinimapRuneIconScale) - Scale the rune icons on the minimap."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetRuneSpawnTime",
        "description":"Sets the amount of time between rune spawns."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetSafeToLeave",
        "description":"(bSafeToLeave) - Mark this game as safe to leave."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetSameHeroSelectionEnabled",
        "description":"When true, players can repeatedly pick the same hero."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetShowcaseTime",
        "description":"Sets the amount of time players have between the strategy phase and entering the pre-game phase."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetSpeechUseSpawnInsteadOfRespawnConcept",
        "description":"Set whether to speak a Spawn concept instead of a Respawn concept on respawn."
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetStartingGold",
        "description":"Set the starting gold amount."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetStrategyTime",
        "description":"Sets the amount of time players have between the hero selection and entering the showcase phase."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetTimeOfDay",
        "description":"Set the time of day."
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetTreeRegrowTime",
        "description":"Sets the tree regrow time in seconds."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetUseBaseGoldBountyOnHeroes",
        "description":"Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetUseCustomHeroXPValues",
        "description":"Allows heroes in the map to give a specific amount of XP (this value must be set)."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetUseUniversalShopMode",
        "description":"When true, all items are available at as long as any shop is in range."
      },{
        "args":[{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetWeatherWindDirection",
        "description":"Set Weather Wind Direction Vector"
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetWhiteListEnabled",
        "description":"Item whitelist functionality enable/disable"
      },{
        "args":[],
        "returns":"void",
        "name":"SpawnAndReleaseCreeps",
        "description":"Spawn and release the next creep wave from Dota lane style spawners."
      },{
        "args":[],
        "returns":"void",
        "name":"SpawnNeutralCreeps",
        "description":"Spawn and release the next set of neutral camps."
      },{
        "args":[],
        "returns":"int",
        "name":"State_Get",
        "description":"Get the current Gamerules state"
      }],
    "name":"CDOTAGamerules",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "name":"hHero",
            "type":"handle"
          }],
        "returns":"handle",
        "name":"CheckForCourierSpawning",
        "description":"Attempt to spawn the appropriate couriers for this mode."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetAssignedHero",
        "description":"Get the player's hero."
      },{
        "args":[],
        "returns":"int",
        "name":"GetPlayerID",
        "description":"Get the player's official PlayerID; notably is -1 when the player isn't yet on a team."
      },{
        "args":[],
        "returns":"void",
        "name":"MakeRandomHeroSelection",
        "description":"Randoms this player's hero."
      },{
        "args":[{
            "name":"hHero",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetAssignedHeroEntity",
        "description":"Sets this player's hero ."
      },{
        "args":[{
            "name":"hEntity",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetKillCamUnit",
        "description":"Set the kill cam unit for this hero."
      },{
        "args":[{
            "name":"nMusicStatus",
            "type":"int"
          },{
            "name":"flIntensity",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetMusicStatus",
        "description":"(nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off."
      },{
        "args":[{
            "name":"pszHeroName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetSelectedHero",
        "description":"Sets this player's hero selection."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"handle",
        "name":"SpawnCourierAtPosition",
        "description":"Spawn a courier for this player at the given position."
      }],
    "kind":"class",
    "name":"CDOTAPlayer",
    "extend":"CBaseAnimating"
  },{
    "instance":"Tutorial",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"bool"
          }],
        "returns":"bool",
        "name":"AddBot",
        "description":"Add a computer controlled bot."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"void",
        "name":"AddQuest",
        "description":"Add a quest to the quest log"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"AddShopWhitelistItem",
        "description":"Add an item to the shop whitelist."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"CompleteQuest",
        "description":"Complete a quest,"
      },{
        "args":[{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"CreateLocationTask",
        "description":"Add a task to move to a specific location"
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"EnableCreepAggroViz",
        "description":"Alert the player when a creep becomes agro to their hero."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"EnablePlayerOffscreenTip",
        "description":"Enable the tip to alert players how to find their hero."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"EnableTowerAggroViz",
        "description":"Alert the player when a tower becomes agro to their hero."
      },{
        "args":[],
        "returns":"void",
        "name":"FinishTutorial",
        "description":"End the tutorial."
      },{
        "args":[],
        "returns":"void",
        "name":"ForceGameStart",
        "description":"Force the start of the game."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetTimeFrozen",
        "description":"Is our time frozen?"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"bool",
        "name":"IsItemInWhiteList",
        "description":"Is this item currently in the white list."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"RemoveShopWhitelistItem",
        "description":"Remove an item from the shop whitelist."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"SelectHero",
        "description":"Select a hero for the local player"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"SelectPlayerTeam",
        "description":"Select the team for the local player"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"SetItemGuide",
        "description":"Set the current item guide."
      },{
        "args":[{
            "type":"int"
          },{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetOrModifyPlayerGold",
        "description":"Set gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"SetQuickBuy",
        "description":"Set players quick buy item."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetShopOpen",
        "description":"Set the shop open or closed."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetTimeFrozen",
        "description":"Set if we should freeze time or not."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"void",
        "name":"SetTutorialConvar",
        "description":"Set a tutorial convar"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetTutorialUI",
        "description":"Set the UI to use a reduced version to focus attention to specific elements."
      },{
        "args":[{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetWhiteListEnabled",
        "description":"Set if we should whitelist shop items."
      },{
        "args":[],
        "returns":"void",
        "name":"StartTutorialMode",
        "description":"Initialize Tutorial Mode"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"UpgradePlayerAbility",
        "description":"Upgrade a specific ability for the local hero"
      }],
    "name":"CDOTATutorial",
    "kind":"class"
  },{
    "instance":"VoteSystem",
    "members":[{
        "args":[{
            "type":"handle"
          }],
        "returns":"void",
        "name":"StartVote",
        "description":"Starts a vote, based upon a table of parameters"
      }],
    "name":"CDOTAVoteSystem",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "name":"vTarget",
            "type":"Vector"
          },{
            "name":"vStart",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"LaunchSpear",
        "description":"Launch Spear to a target position from a source position"
      }],
    "kind":"class",
    "name":"CDOTA_Ability_Aghanim_Spear",
    "extend":"CDOTABaseAbility"
  },{
    "members":[{
        "args":[{
            "name":"flRate",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetPlaybackRate",
        "description":"Override playbackrate"
      }],
    "kind":"class",
    "name":"CDOTA_Ability_Animation_Attack",
    "extend":"CDOTABaseAbility"
  },{
    "members":[{
        "args":[{
            "name":"flRate",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetPlaybackRate",
        "description":"Override playbackrate"
      }],
    "kind":"class",
    "name":"CDOTA_Ability_Animation_TailSpin",
    "extend":"CDOTABaseAbility"
  },{
    "members":[{
        "args":[{
            "name":"hCaster",
            "type":"handle"
          },{
            "name":"hTarget",
            "type":"handle"
          },{
            "name":"pszModifierName",
            "type":"string"
          },{
            "name":"hModifierTable",
            "type":"handle"
          }],
        "returns":"handle",
        "name":"ApplyDataDrivenModifier",
        "description":"Applies a data driven modifier to the target"
      },{
        "args":[{
            "name":"hCaster",
            "type":"handle"
          },{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"pszModifierName",
            "type":"string"
          },{
            "name":"hModifierTable",
            "type":"handle"
          }],
        "returns":"handle",
        "name":"ApplyDataDrivenThinker",
        "description":"Applies a data driven thinker at the location"
      }],
    "kind":"class",
    "name":"CDOTA_Ability_DataDriven",
    "extend":"CDOTABaseAbility"
  },{
    "members":[{
        "args":[],
        "returns":"int",
        "name":"CastFilterResult",
        "description":"Determine whether an issued command with no target is valid."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"int",
        "name":"CastFilterResultLocation",
        "description":"(Vector vLocation) Determine whether an issued command on a location is valid."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"CastFilterResultTarget",
        "description":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
      },{
        "args":[],
        "returns":"float",
        "name":"GetAOERadius",
        "description":"Controls the size of the AOE casting cursor."
      },{
        "args":[],
        "returns":"string",
        "name":"GetAssociatedPrimaryAbilities",
        "description":"Returns abilities that are stolen simultaneously, or otherwise related in functionality."
      },{
        "args":[],
        "returns":"string",
        "name":"GetAssociatedSecondaryAbilities",
        "description":"Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities."
      },{
        "args":[],
        "returns":"uint64",
        "name":"GetBehavior",
        "description":"Return cast behavior type of this ability."
      },{
        "args":[],
        "returns":"int",
        "name":"GetCastAnimation",
        "description":"Return casting animation of this ability."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCastPoint",
        "description":"Return cast point of this ability."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetCastRange",
        "description":"Return cast range of this ability."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetCastRangeBonus"
      },{
        "args":[],
        "returns":"int",
        "name":"GetChannelAnimation",
        "description":"Return channel animation of this ability."
      },{
        "args":[],
        "returns":"float",
        "name":"GetChannelTime",
        "description":"Return the channel time of this ability."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetChannelledManaCostPerSecond",
        "description":"Return mana cost at the given level per second while channeling (-1 is current)."
      },{
        "args":[],
        "returns":"int",
        "name":"GetConceptRecipientType",
        "description":"Return who hears speech when this spell is cast."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetCooldown",
        "description":"Return cooldown of this ability."
      },{
        "args":[],
        "returns":"string",
        "name":"GetCustomCastError",
        "description":"Return the error string of a failed command with no target."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"string",
        "name":"GetCustomCastErrorLocation",
        "description":"(Vector vLocation) Return the error string of a failed command on a location."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"string",
        "name":"GetCustomCastErrorTarget",
        "description":"(HSCRIPT hTarget) Return the error string of a failed command on a target."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetEffectiveCastRange",
        "description":"Return cast range of this ability, accounting for modifiers."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGoldCost",
        "description":"Return gold cost at the given level (-1 is current)."
      },{
        "args":[],
        "returns":"string",
        "name":"GetIntrinsicModifierName",
        "description":"Returns the name of the modifier applied passively by this ability."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetManaCost",
        "description":"Return mana cost at the given level (-1 is current)."
      },{
        "args":[],
        "returns":"float",
        "name":"GetPlaybackRateOverride",
        "description":"Return the animation rate of the cast animation."
      },{
        "args":[{
            "name":"hEntity",
            "type":"handle"
          }],
        "returns":"bool",
        "name":"IsCosmetic",
        "description":"Is this a cosmetic only ability?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHiddenAbilityCastable",
        "description":"Returns true if this ability can be used when not on the action panel."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHiddenWhenStolen",
        "description":"Returns true if this ability is hidden when stolen by Spell Steal."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRefreshable",
        "description":"Returns true if this ability is refreshed by Refresher Orb."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStealable",
        "description":"Returns true if this ability can be stolen by Spell Steal."
      },{
        "args":[],
        "returns":"void",
        "name":"OnAbilityPhaseInterrupted",
        "description":"Cast time did not complete successfully."
      },{
        "args":[],
        "returns":"bool",
        "name":"OnAbilityPhaseStart",
        "description":"Cast time begins (return true for successful cast)."
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          },{
            "name":"bCtrlHeld",
            "type":"bool"
          }],
        "returns":"void",
        "name":"OnAbilityPinged",
        "description":"The ability was pinged (nPlayerID, bCtrlHeld)."
      },{
        "args":[{
            "name":"bInterrupted",
            "type":"bool"
          }],
        "returns":"void",
        "name":"OnChannelFinish",
        "description":"(bool bInterrupted) Channel finished."
      },{
        "args":[{
            "name":"flInterval",
            "type":"float"
          }],
        "returns":"void",
        "name":"OnChannelThink",
        "description":"(float flInterval) Channeling is taking place."
      },{
        "args":[],
        "returns":"void",
        "name":"OnHeroCalculateStatBonus",
        "description":"Caster (hero only) gained a level, skilled an ability, or received a new stat bonus."
      },{
        "args":[{
            "name":"unit",
            "type":"handle"
          },{
            "name":"attacker",
            "type":"handle"
          },{
            "name":"table",
            "type":"handle"
          }],
        "returns":"void",
        "name":"OnHeroDiedNearby",
        "description":"A hero has died in the vicinity (ie Urn), takes table of params."
      },{
        "args":[],
        "returns":"void",
        "name":"OnHeroLevelUp",
        "description":"Caster gained a level."
      },{
        "args":[],
        "returns":"void",
        "name":"OnInventoryContentsChanged",
        "description":"Caster inventory changed."
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"OnItemEquipped",
        "description":"( HSCRIPT hItem ) Caster equipped item."
      },{
        "args":[],
        "returns":"void",
        "name":"OnOwnerDied",
        "description":"Caster died."
      },{
        "args":[],
        "returns":"void",
        "name":"OnOwnerSpawned",
        "description":"Caster respawned or spawned for the first time."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          },{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"bool",
        "name":"OnProjectileHit",
        "description":"(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          },{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"iProjectileHandle",
            "type":"int"
          }],
        "returns":"bool",
        "name":"OnProjectileHitHandle",
        "description":"(HSCRIPT hTarget, Vector vLocation, int nHandle) Projectile has collided with a given target or reached its destination (target is invalid)."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          },{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"table",
            "type":"handle"
          }],
        "returns":"bool",
        "name":"OnProjectileHit_ExtraData",
        "description":"(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid)."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"OnProjectileThink",
        "description":"(Vector vLocation) Projectile is actively moving."
      },{
        "args":[{
            "name":"iProjectileHandle",
            "type":"int"
          }],
        "returns":"void",
        "name":"OnProjectileThinkHandle",
        "description":"(int nProjectileHandle) Projectile is actively moving."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"table",
            "type":"handle"
          }],
        "returns":"void",
        "name":"OnProjectileThink_ExtraData",
        "description":"(Vector vLocation, table kv ) Projectile is actively moving."
      },{
        "args":[],
        "returns":"void",
        "name":"OnSpellStart",
        "description":"Cast time finished, spell effects begin."
      },{
        "args":[{
            "name":"hSourceAbility",
            "type":"handle"
          }],
        "returns":"void",
        "name":"OnStolen",
        "description":"( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal."
      },{
        "args":[],
        "returns":"void",
        "name":"OnToggle",
        "description":"Ability is toggled on/off."
      },{
        "args":[],
        "returns":"void",
        "name":"OnUnStolen",
        "description":"Special behavior when lost by Spell Steal."
      },{
        "args":[],
        "returns":"void",
        "name":"OnUpgrade",
        "description":"Ability gained a level."
      },{
        "args":[],
        "returns":"bool",
        "name":"OtherAbilitiesAlwaysInterruptChanneling"
      },{
        "args":[],
        "returns":"bool",
        "name":"ProcsMagicStick",
        "description":"Returns true if this ability will generate magic stick charges for nearby enemies."
      },{
        "args":[],
        "returns":"bool",
        "name":"RequiresFacing",
        "description":"Does this ability need the caster to face the target before executing?"
      },{
        "args":[],
        "returns":"bool",
        "name":"ResetToggleOnRespawn",
        "description":"Returns true if this ability should return to the default toggle state when its parent respawns."
      },{
        "args":[],
        "returns":"int",
        "name":"SpeakTrigger",
        "description":"Return the type of speech used."
      }],
    "kind":"class",
    "name":"CDOTA_Ability_Lua",
    "extend":"CDOTABaseAbility"
  },{
    "members":[{
        "args":[{
            "name":"flRate",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetPlaybackRate",
        "description":"Override playbackrate"
      }],
    "kind":"class",
    "name":"CDOTA_Ability_Nian_Dive",
    "extend":"CDOTABaseAbility"
  },{
    "members":[{
        "args":[{
            "name":"flRate",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetPlaybackRate",
        "description":"Override playbackrate"
      }],
    "kind":"class",
    "name":"CDOTA_Ability_Nian_Leap",
    "extend":"CDOTABaseAbility"
  },{
    "members":[{
        "args":[],
        "returns":"int",
        "name":"GetCastCount",
        "description":"Number of times Nian has used the roar"
      }],
    "kind":"class",
    "name":"CDOTA_Ability_Nian_Roar",
    "extend":"CDOTABaseAbility"
  },{
    "members":[{
        "args":[{
            "name":"pszAbilityName",
            "type":"string"
          }],
        "returns":"handle",
        "name":"AddAbility",
        "description":"Add an ability to this unit by name."
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          }],
        "returns":"void",
        "name":"AddActivityModifier",
        "description":"Add an activity modifier that affects future StartGesture calls"
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"handle",
        "name":"AddItem",
        "description":"Add an item to this unit's inventory."
      },{
        "args":[{
            "name":"pszItemName",
            "type":"string"
          }],
        "returns":"handle",
        "name":"AddItemByName",
        "description":"Add an item to this unit's inventory."
      },{
        "args":[{
            "name":"hCaster",
            "type":"handle"
          },{
            "name":"hAbility",
            "type":"handle"
          },{
            "name":"pszScriptName",
            "type":"string"
          },{
            "name":"hModifierTable",
            "type":"handle"
          }],
        "returns":"handle",
        "name":"AddNewModifier",
        "description":"Add a modifier to this unit."
      },{
        "args":[],
        "returns":"void",
        "name":"AddNoDraw",
        "description":"Adds the no draw flag."
      },{
        "args":[{
            "name":"iBubble",
            "type":"int"
          },{
            "name":"pszSpeech",
            "type":"string"
          },{
            "name":"flDuration",
            "type":"float"
          },{
            "name":"unOffsetX",
            "type":"unsigned"
          },{
            "name":"unOffsetY",
            "type":"unsigned"
          }],
        "returns":"void",
        "name":"AddSpeechBubble",
        "description":"Add a speech bubble(1-4 live at a time) to this NPC."
      },{
        "args":[{
            "name":"hAttacker",
            "type":"handle"
          },{
            "name":"hAbility",
            "type":"handle"
          }],
        "returns":"void",
        "name":"AlertNearbyUnits"
      },{
        "args":[],
        "returns":"void",
        "name":"AngerNearbyUnits"
      },{
        "args":[{
            "name":"flTime",
            "type":"float"
          }],
        "returns":"void",
        "name":"AttackNoEarlierThan"
      },{
        "args":[],
        "returns":"bool",
        "name":"AttackReady"
      },{
        "args":[],
        "returns":"float",
        "name":"BoundingRadius2D"
      },{
        "args":[],
        "returns":"void",
        "name":"CalculateGenericBonuses"
      },{
        "args":[{
            "name":"hEntity",
            "type":"handle"
          }],
        "returns":"bool",
        "name":"CanEntityBeSeenByMyTeam",
        "description":"Check FoW to see if an entity is visible."
      },{
        "args":[],
        "returns":"bool",
        "name":"CanSellItems",
        "description":"Query if this unit can sell items."
      },{
        "args":[{
            "name":"hAbility",
            "type":"handle"
          },{
            "name":"iPlayerIndex",
            "type":"int"
          }],
        "returns":"void",
        "name":"CastAbilityImmediately",
        "description":"Cast an ability immediately."
      },{
        "args":[{
            "name":"hAbility",
            "type":"handle"
          },{
            "name":"iPlayerIndex",
            "type":"int"
          }],
        "returns":"void",
        "name":"CastAbilityNoTarget",
        "description":"Cast an ability with no target."
      },{
        "args":[{
            "name":"vPosition",
            "type":"Vector"
          },{
            "name":"hAbility",
            "type":"handle"
          },{
            "name":"iPlayerIndex",
            "type":"int"
          }],
        "returns":"void",
        "name":"CastAbilityOnPosition",
        "description":"Cast an ability on a position."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          },{
            "name":"hAbility",
            "type":"handle"
          },{
            "name":"iPlayerIndex",
            "type":"int"
          }],
        "returns":"void",
        "name":"CastAbilityOnTarget",
        "description":"Cast an ability on a target entity."
      },{
        "args":[{
            "name":"hAbility",
            "type":"handle"
          },{
            "name":"iPlayerIndex",
            "type":"int"
          }],
        "returns":"void",
        "name":"CastAbilityToggle",
        "description":"Toggle an ability."
      },{
        "args":[{
            "name":"iTeamNum",
            "type":"int"
          }],
        "returns":"void",
        "name":"ChangeTeam"
      },{
        "args":[],
        "returns":"void",
        "name":"ClearActivityModifiers",
        "description":"Clear Activity modifiers"
      },{
        "args":[],
        "returns":"void",
        "name":"DestroyAllSpeechBubbles"
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"DisassembleItem",
        "description":"Disassemble the passed item in this unit's inventory."
      },{
        "args":[{
            "name":"vDest",
            "type":"Vector"
          },{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"DropItemAtPosition",
        "description":"Drop an item at a given point."
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          },{
            "name":"vPosition",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"DropItemAtPositionImmediate",
        "description":"Immediately drop a carried item at a given position."
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"EjectItemFromStash",
        "description":"Drops the selected item out of this unit's stash."
      },{
        "args":[{
            "name":"vTarget",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"FaceTowards",
        "description":"This unit will be set to face the target point."
      },{
        "args":[{
            "name":"nActivity",
            "type":"int"
          }],
        "returns":"void",
        "name":"FadeGesture",
        "description":"Fade and remove the given gesture activity."
      },{
        "args":[{
            "name":"pAbilityName",
            "type":"string"
          }],
        "returns":"handle",
        "name":"FindAbilityByName",
        "description":"Retrieve an ability by name from the unit."
      },{
        "args":[],
        "returns":"table",
        "name":"FindAllModifiers",
        "description":"Returns a table of all of the modifiers on the NPC."
      },{
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          }],
        "returns":"table",
        "name":"FindAllModifiersByName",
        "description":"Returns a table of all of the modifiers on the NPC with the passed name (modifierName)"
      },{
        "args":[{
            "name":"pszItemName",
            "type":"string"
          }],
        "returns":"handle",
        "name":"FindItemInInventory",
        "description":"Get handle to first item in inventory, else nil."
      },{
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          }],
        "returns":"handle",
        "name":"FindModifierByName",
        "description":"Return a handle to the modifier of the given name if found, else nil (string Name )"
      },{
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          },{
            "name":"hCaster",
            "type":"handle"
          }],
        "returns":"handle",
        "name":"FindModifierByNameAndCaster",
        "description":"Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster )"
      },{
        "args":[{
            "name":"bReincarnate",
            "type":"bool"
          }],
        "returns":"void",
        "name":"ForceKill",
        "description":"Kill this unit immediately."
      },{
        "args":[{
            "name":"nActivity",
            "type":"int"
          }],
        "returns":"void",
        "name":"ForcePlayActivityOnce",
        "description":"Play an activity once, and then go back to idle."
      },{
        "args":[{
            "name":"iIndex",
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetAbilityByIndex",
        "description":"Retrieve an ability by index from the unit."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAbilityCount"
      },{
        "args":[],
        "returns":"float",
        "name":"GetAcquisitionRange",
        "description":"Gets the range at which this unit will auto-acquire."
      },{
        "args":[],
        "returns":"float",
        "name":"GetAdditionalBattleMusicWeight",
        "description":"Combat involving this creature will have this weight added to the music calcuations."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetAggroTarget",
        "description":"Returns this unit's aggro target."
      },{
        "args":[],
        "returns":"float",
        "name":"GetAttackAnimationPoint"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAttackCapability"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAttackDamage",
        "description":"Returns a random integer between the minimum and maximum base damage of the unit."
      },{
        "args":[],
        "returns":"float",
        "name":"GetAttackRangeBuffer",
        "description":"Gets the attack range buffer."
      },{
        "args":[],
        "returns":"float",
        "name":"GetAttackSpeed"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetAttackTarget"
      },{
        "args":[],
        "returns":"float",
        "name":"GetAttacksPerSecond"
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetAverageTrueAttackDamage",
        "description":"Returns the average value of the minimum and maximum damage values."
      },{
        "args":[],
        "returns":"int",
        "name":"GetBaseAttackRange"
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseAttackTime"
      },{
        "args":[],
        "returns":"int",
        "name":"GetBaseDamageMax",
        "description":"Get the maximum attack damage of this unit."
      },{
        "args":[],
        "returns":"int",
        "name":"GetBaseDamageMin",
        "description":"Get the minimum attack damage of this unit."
      },{
        "args":[],
        "returns":"int",
        "name":"GetBaseDayTimeVisionRange",
        "description":"Returns the vision range before modifiers."
      },{
        "args":[],
        "returns":"int",
        "name":"GetBaseHealthBarOffset"
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseHealthRegen"
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseMagicalResistanceValue",
        "description":"Returns base magical armor value."
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseMaxHealth",
        "description":"Gets the base max health value."
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseMoveSpeed"
      },{
        "args":[],
        "returns":"int",
        "name":"GetBaseNightTimeVisionRange",
        "description":"Returns the vision range after modifiers."
      },{
        "args":[],
        "returns":"float",
        "name":"GetBonusManaRegen",
        "description":"This Mana regen is derived from constant bonuses like Basilius."
      },{
        "args":[{
            "name":"bAttack",
            "type":"bool"
          }],
        "returns":"float",
        "name":"GetCastPoint"
      },{
        "args":[],
        "returns":"float",
        "name":"GetCastRangeBonus"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetCloneSource",
        "description":"Get clone source (Meepo Prime, if this is a Meepo)"
      },{
        "args":[],
        "returns":"float",
        "name":"GetCollisionPadding",
        "description":"Returns the size of the collision padding around the hull."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCooldownReduction"
      },{
        "args":[],
        "returns":"float",
        "name":"GetCreationTime"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetCurrentActiveAbility",
        "description":"Get the ability this unit is currently casting."
      },{
        "args":[],
        "returns":"int",
        "name":"GetCurrentVisionRange",
        "description":"Gets the current vision range."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetCursorCastTarget"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetCursorPosition"
      },{
        "args":[],
        "returns":"bool",
        "name":"GetCursorTargetingNothing"
      },{
        "args":[],
        "returns":"int",
        "name":"GetDamageMax",
        "description":"Get the maximum attack damage of this unit."
      },{
        "args":[],
        "returns":"int",
        "name":"GetDamageMin",
        "description":"Get the minimum attack damage of this unit."
      },{
        "args":[],
        "returns":"int",
        "name":"GetDayTimeVisionRange",
        "description":"Returns the vision range after modifiers."
      },{
        "args":[],
        "returns":"int",
        "name":"GetDeathXP",
        "description":"Get the XP bounty on this unit."
      },{
        "args":[],
        "returns":"float",
        "name":"GetDisplayAttackSpeed",
        "description":"Attack speed expressed as constant value"
      },{
        "args":[],
        "returns":"float",
        "name":"GetEvasion"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetForceAttackTarget"
      },{
        "args":[],
        "returns":"int",
        "name":"GetGoldBounty",
        "description":"Get the gold bounty on this unit."
      },{
        "args":[],
        "returns":"float",
        "name":"GetHasteFactor"
      },{
        "args":[],
        "returns":"int",
        "name":"GetHealthDeficit",
        "description":"Returns integer amount of health missing from max."
      },{
        "args":[],
        "returns":"int",
        "name":"GetHealthPercent",
        "description":"Get the current health percent of the unit."
      },{
        "args":[],
        "returns":"float",
        "name":"GetHealthRegen"
      },{
        "args":[],
        "returns":"float",
        "name":"GetHullRadius",
        "description":"Get the collision hull radius of this NPC."
      },{
        "args":[],
        "returns":"float",
        "name":"GetIdealSpeed",
        "description":"Returns speed after all modifiers."
      },{
        "args":[],
        "returns":"float",
        "name":"GetIdealSpeedNoSlows",
        "description":"Returns speed after all modifiers, but excluding those that reduce speed."
      },{
        "args":[],
        "returns":"float",
        "name":"GetIncreasedAttackSpeed"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetInitialGoalEntity",
        "description":"Returns the initial waypoint goal for this NPC."
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetInitialGoalPosition",
        "description":"Get waypoint position for this NPC."
      },{
        "args":[{
            "name":"i",
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetItemInSlot",
        "description":"Returns nth item in inventory slot (index is zero based)."
      },{
        "args":[],
        "returns":"float",
        "name":"GetLastAttackTime"
      },{
        "args":[],
        "returns":"float",
        "name":"GetLastDamageTime",
        "description":"Get the last time this NPC took damage"
      },{
        "args":[],
        "returns":"float",
        "name":"GetLastIdleChangeTime",
        "description":"Get the last game time that this unit switched to/from idle state."
      },{
        "args":[],
        "returns":"int",
        "name":"GetLevel",
        "description":"Returns the level of this unit."
      },{
        "args":[],
        "returns":"float",
        "name":"GetMagicalArmorValue",
        "description":"Returns current magical armor value."
      },{
        "args":[],
        "returns":"int",
        "name":"GetMainControllingPlayer",
        "description":"Returns the player ID of the controlling player."
      },{
        "args":[],
        "returns":"float",
        "name":"GetMana",
        "description":"Get the mana on this unit."
      },{
        "args":[],
        "returns":"int",
        "name":"GetManaPercent",
        "description":"Get the percent of mana remaining."
      },{
        "args":[],
        "returns":"float",
        "name":"GetManaRegen"
      },{
        "args":[],
        "returns":"float",
        "name":"GetMaxMana",
        "description":"Get the maximum mana of this unit."
      },{
        "args":[],
        "returns":"int",
        "name":"GetMaximumGoldBounty",
        "description":"Get the maximum gold bounty for this unit."
      },{
        "args":[],
        "returns":"int",
        "name":"GetMinimumGoldBounty",
        "description":"Get the minimum gold bounty for this unit."
      },{
        "args":[],
        "returns":"float",
        "name":"GetModelRadius"
      },{
        "args":[],
        "returns":"int",
        "name":"GetModifierCount",
        "description":"How many modifiers does this unit have?"
      },{
        "args":[{
            "name":"nIndex",
            "type":"int"
          }],
        "returns":"string",
        "name":"GetModifierNameByIndex",
        "description":"Get a modifier name by index."
      },{
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          },{
            "name":"hCaster",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetModifierStackCount",
        "description":"Gets the stack count of a given modifier."
      },{
        "args":[{
            "name":"flBaseSpeed",
            "type":"float"
          },{
            "name":"bReturnUnslowed",
            "type":"bool"
          }],
        "returns":"float",
        "name":"GetMoveSpeedModifier"
      },{
        "args":[],
        "returns":"bool",
        "name":"GetMustReachEachGoalEntity",
        "description":"Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path."
      },{
        "args":[],
        "returns":"string",
        "name":"GetNeutralSpawnerName",
        "description":"Get the name of this camp's neutral spawner."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetNeverMoveToClearSpace",
        "description":"If set to true, we will never attempt to move this unit to clear space, even when it unphases."
      },{
        "args":[],
        "returns":"int",
        "name":"GetNightTimeVisionRange",
        "description":"Returns the vision range after modifiers."
      },{
        "args":[],
        "returns":"int",
        "name":"GetOpposingTeamNumber"
      },{
        "args":[],
        "returns":"float",
        "name":"GetPaddedCollisionRadius",
        "description":"Get the collision hull radius (including padding) of this NPC."
      },{
        "args":[],
        "returns":"float",
        "name":"GetPhysicalArmorBaseValue",
        "description":"Returns base physical armor value."
      },{
        "args":[{
            "name":"bIgnoreBase",
            "type":"bool"
          }],
        "returns":"float",
        "name":"GetPhysicalArmorValue",
        "description":"Returns current physical armor value."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetPlayerOwner",
        "description":"Returns the player that owns this unit."
      },{
        "args":[],
        "returns":"int",
        "name":"GetPlayerOwnerID",
        "description":"Get the owner player ID for this unit."
      },{
        "args":[],
        "returns":"int",
        "name":"GetProjectileSpeed"
      },{
        "args":[{
            "name":"hNPC",
            "type":"handle"
          }],
        "returns":"float",
        "name":"GetRangeToUnit"
      },{
        "args":[],
        "returns":"string",
        "name":"GetRangedProjectileName"
      },{
        "args":[],
        "returns":"float",
        "name":"GetSecondsPerAttack"
      },{
        "args":[{
            "name":"bBaseOnly",
            "type":"bool"
          }],
        "returns":"float",
        "name":"GetSpellAmplification"
      },{
        "args":[],
        "returns":"float",
        "name":"GetStatusResistance"
      },{
        "args":[],
        "returns":"int",
        "name":"GetTotalPurchasedUpgradeGoldCost",
        "description":"Get how much gold has been spent on ability upgrades."
      },{
        "args":[],
        "returns":"string",
        "name":"GetUnitLabel"
      },{
        "args":[],
        "returns":"string",
        "name":"GetUnitName",
        "description":"Get the name of this unit."
      },{
        "args":[{
            "name":"flMana",
            "type":"float"
          }],
        "returns":"void",
        "name":"GiveMana",
        "description":"Give mana to this unit, this can be used for mana gained by abilities or item usage."
      },{
        "args":[{
            "name":"pszAbilityName",
            "type":"string"
          }],
        "returns":"bool",
        "name":"HasAbility",
        "description":"See whether this unit has an ability by name."
      },{
        "args":[],
        "returns":"bool",
        "name":"HasAnyActiveAbilities"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasAttackCapability"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasFlyMovementCapability"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasFlyingVision"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasGroundMovementCapability"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasInventory",
        "description":"Does this unit have an inventory."
      },{
        "args":[{
            "name":"pItemName",
            "type":"string"
          }],
        "returns":"bool",
        "name":"HasItemInInventory",
        "description":"See whether this unit has an item by name."
      },{
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          }],
        "returns":"bool",
        "name":"HasModifier",
        "description":"Sees if this unit has a given modifier."
      },{
        "args":[],
        "returns":"bool",
        "name":"HasMovementCapability"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasScepter"
      },{
        "args":[{
            "name":"flAmount",
            "type":"float"
          },{
            "name":"hInflictor",
            "type":"handle"
          }],
        "returns":"void",
        "name":"Heal",
        "description":"Heal this unit."
      },{
        "args":[],
        "returns":"void",
        "name":"Hold",
        "description":"Hold position."
      },{
        "args":[],
        "returns":"void",
        "name":"Interrupt"
      },{
        "args":[],
        "returns":"void",
        "name":"InterruptChannel"
      },{
        "args":[{
            "name":"bFindClearSpace",
            "type":"bool"
          }],
        "returns":"void",
        "name":"InterruptMotionControllers"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAlive",
        "description":"Is this unit alive?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAncient",
        "description":"Is this unit an Ancient?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAttackImmune"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAttacking"
      },{
        "args":[{
            "name":"hEntity",
            "type":"handle"
          }],
        "returns":"bool",
        "name":"IsAttackingEntity"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsBarracks",
        "description":"Is this unit a Barracks?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsBlind"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsBlockDisabled"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsBoss",
        "description":"Is this unit a boss?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsBuilding",
        "description":"Is this unit a building?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsChanneling",
        "description":"Is this unit currently channeling a spell?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsClone",
        "description":"Is this unit a clone? (Meepo)"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCommandRestricted"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsConsideredHero",
        "description":"Is this unit a considered a hero for targeting purposes?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsControllableByAnyPlayer",
        "description":"Is this unit controlled by any non-bot player?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCourier",
        "description":"Is this unit a courier?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCreature",
        "description":"Is this a Creature type NPC?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCreep",
        "description":"Is this unit a creep?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCreepHero",
        "description":"Is this unit a creep hero?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCurrentlyHorizontalMotionControlled"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCurrentlyVerticalMotionControlled"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDisarmed"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDominated"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsEvadeDisabled"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsFort",
        "description":"Is this unit an Ancient?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsFrozen"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHero",
        "description":"Is this a hero or hero illusion?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHexed"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsIdle",
        "description":"Is this creature currently idle?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsIllusion"
      },{
        "args":[{
            "name":"nShopType",
            "type":"int"
          },{
            "name":"bPhysical",
            "type":"bool"
          }],
        "returns":"bool",
        "name":"IsInRangeOfShop",
        "description":"Ask whether this unit is in range of the specified shop ( DOTA_SHOP_TYPE shop, bool bMustBePhysicallyNear"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsInvisible"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsInvulnerable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsLowAttackPriority"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsMagicImmune"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsMovementImpaired"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsMoving",
        "description":"Is this unit moving?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsMuted"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsNeutralUnitType",
        "description":"Is this a neutral?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsNightmared"
      },{
        "args":[{
            "name":"nTeam",
            "type":"int"
          }],
        "returns":"bool",
        "name":"IsOpposingTeam"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsOther",
        "description":"Is this unit a ward-type unit?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsOutOfGame"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsOwnedByAnyPlayer",
        "description":"Is this unit owned by any non-bot player?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPhantom",
        "description":"Is this a phantom unit?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPhantomBlocker"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPhased"
      },{
        "args":[{
            "name":"vPosition",
            "type":"Vector"
          },{
            "name":"flRange",
            "type":"float"
          }],
        "returns":"bool",
        "name":"IsPositionInRange"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRangedAttacker",
        "description":"Is this unit a ranged attacker?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRealHero",
        "description":"Is this a real hero?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsReincarnating"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRooted"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsShrine",
        "description":"Is this a shrine?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSilenced"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSpeciallyDeniable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSpeciallyUndeniable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStunned"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSummoned",
        "description":"Is this unit summoned?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsTempestDouble"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsTower",
        "description":"Is this a tower?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsUnableToMiss"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsUnselectable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsUntargetable"
      },{
        "args":[{
            "name":"hAbility",
            "type":"handle"
          },{
            "name":"hAttacker",
            "type":"handle"
          }],
        "returns":"void",
        "name":"Kill",
        "description":"Kills this NPC, with the params Ability and Attacker."
      },{
        "args":[],
        "returns":"void",
        "name":"MakeIllusion"
      },{
        "args":[],
        "returns":"void",
        "name":"MakePhantomBlocker"
      },{
        "args":[{
            "name":"iTeam",
            "type":"int"
          },{
            "name":"flRadius",
            "type":"float"
          }],
        "returns":"void",
        "name":"MakeVisibleDueToAttack"
      },{
        "args":[{
            "name":"iTeam",
            "type":"int"
          },{
            "name":"flDuration",
            "type":"float"
          }],
        "returns":"void",
        "name":"MakeVisibleToTeam"
      },{
        "args":[],
        "returns":"void",
        "name":"ManageModelChanges"
      },{
        "args":[{
            "name":"iDesiredHealthValue",
            "type":"int"
          },{
            "name":"hAbility",
            "type":"handle"
          },{
            "name":"bLethal",
            "type":"bool"
          },{
            "name":"iAdditionalFlags",
            "type":"int"
          }],
        "returns":"void",
        "name":"ModifyHealth",
        "description":"Sets the health to a specific value, with optional flags or inflictors."
      },{
        "args":[{
            "name":"hNPC",
            "type":"handle"
          }],
        "returns":"void",
        "name":"MoveToNPC",
        "description":"Move to follow a unit."
      },{
        "args":[{
            "name":"hNPC",
            "type":"handle"
          },{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"MoveToNPCToGiveItem",
        "description":"Give an item to another unit."
      },{
        "args":[{
            "name":"vDest",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"MoveToPosition",
        "description":"Issue a Move-To command."
      },{
        "args":[{
            "name":"vDest",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"MoveToPositionAggressive",
        "description":"Issue an Attack-Move-To command."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"void",
        "name":"MoveToTargetToAttack",
        "description":"Move to a target to attack."
      },{
        "args":[],
        "returns":"bool",
        "name":"NoHealthBar"
      },{
        "args":[],
        "returns":"bool",
        "name":"NoTeamMoveTo"
      },{
        "args":[],
        "returns":"bool",
        "name":"NoTeamSelect"
      },{
        "args":[],
        "returns":"bool",
        "name":"NoUnitCollision"
      },{
        "args":[],
        "returns":"bool",
        "name":"NotOnMinimap"
      },{
        "args":[],
        "returns":"bool",
        "name":"NotOnMinimapForEnemies"
      },{
        "args":[{
            "name":"bOriginalModel",
            "type":"bool"
          }],
        "returns":"void",
        "name":"NotifyWearablesOfModelChange"
      },{
        "args":[],
        "returns":"bool",
        "name":"PassivesDisabled"
      },{
        "args":[{
            "name":"vDest",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"PatrolToPosition",
        "description":"Issue a Patrol-To command."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          },{
            "name":"bUseCastAttackOrb",
            "type":"bool"
          },{
            "name":"bProcessProcs",
            "type":"bool"
          },{
            "name":"bSkipCooldown",
            "type":"bool"
          },{
            "name":"bIgnoreInvis",
            "type":"bool"
          },{
            "name":"bUseProjectile",
            "type":"bool"
          },{
            "name":"bFakeAttack",
            "type":"bool"
          },{
            "name":"bNeverMiss",
            "type":"bool"
          }],
        "returns":"void",
        "name":"PerformAttack",
        "description":"Performs an attack on a target."
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"PickupDroppedItem",
        "description":"Pick up a dropped item."
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"PickupRune",
        "description":"Pick up a rune."
      },{
        "args":[{
            "name":"pVCD",
            "type":"string"
          }],
        "returns":"void",
        "name":"PlayVCD",
        "description":"Play a VCD on the NPC."
      },{
        "args":[],
        "returns":"bool",
        "name":"ProvidesVision"
      },{
        "args":[{
            "name":"bRemovePositiveBuffs",
            "type":"bool"
          },{
            "name":"bRemoveDebuffs",
            "type":"bool"
          },{
            "name":"bFrameOnly",
            "type":"bool"
          },{
            "name":"bRemoveStuns",
            "type":"bool"
          },{
            "name":"bRemoveExceptions",
            "type":"bool"
          }],
        "returns":"void",
        "name":"Purge",
        "description":"(bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions)"
      },{
        "args":[{
            "name":"flDelay",
            "type":"float"
          },{
            "name":"hCriteriaTable",
            "type":"handle"
          },{
            "name":"hCompletionCallbackFn",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          },{
            "name":"hCallbackInfo",
            "type":"handle"
          }],
        "returns":"void",
        "name":"QueueConcept",
        "description":"Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay."
      },{
        "args":[{
            "name":"flDelay",
            "type":"float"
          },{
            "name":"hCriteriaTable",
            "type":"handle"
          },{
            "name":"hCompletionCallbackFn",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          },{
            "name":"hCallbackInfo",
            "type":"handle"
          }],
        "returns":"void",
        "name":"QueueTeamConcept",
        "description":"Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on."
      },{
        "args":[{
            "name":"flDelay",
            "type":"float"
          },{
            "name":"hCriteriaTable",
            "type":"handle"
          },{
            "name":"hCompletionCallbackFn",
            "type":"handle"
          },{
            "name":"hContext",
            "type":"handle"
          },{
            "name":"hCallbackInfo",
            "type":"handle"
          }],
        "returns":"void",
        "name":"QueueTeamConceptNoSpectators",
        "description":"Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on. Is not played for spectators."
      },{
        "args":[{
            "name":"flAmount",
            "type":"float"
          }],
        "returns":"void",
        "name":"ReduceMana",
        "description":"Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent."
      },{
        "args":[{
            "name":"pszAbilityName",
            "type":"string"
          }],
        "returns":"void",
        "name":"RemoveAbility",
        "description":"Remove an ability from this unit by name."
      },{
        "args":[{
            "name":"hAbility",
            "type":"handle"
          }],
        "returns":"void",
        "name":"RemoveAbilityByHandle",
        "description":"Remove the passed ability from this unit."
      },{
        "args":[{
            "name":"pszAbilityName",
            "type":"string"
          }],
        "returns":"void",
        "name":"RemoveAbilityFromIndexByName"
      },{
        "args":[{
            "name":"targets",
            "type":"int"
          },{
            "name":"bNow",
            "type":"bool"
          },{
            "name":"bPermanent",
            "type":"bool"
          },{
            "name":"bDeath",
            "type":"bool"
          }],
        "returns":"void",
        "name":"RemoveAllModifiers",
        "description":"(int targets [0=all, 1=enemy, 2=ally], bool bNow, bool bPermanent, bool bDeath)"
      },{
        "args":[{
            "name":"nActivity",
            "type":"int"
          }],
        "returns":"void",
        "name":"RemoveGesture",
        "description":"Remove the given gesture activity."
      },{
        "args":[{
            "name":"hBuff",
            "type":"handle"
          }],
        "returns":"void",
        "name":"RemoveHorizontalMotionController"
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"RemoveItem",
        "description":"Removes the passed item from this unit's inventory and deletes it."
      },{
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          }],
        "returns":"void",
        "name":"RemoveModifierByName",
        "description":"Removes a modifier."
      },{
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          },{
            "name":"hCaster",
            "type":"handle"
          }],
        "returns":"void",
        "name":"RemoveModifierByNameAndCaster",
        "description":"Removes a modifier that was cast by the given caster."
      },{
        "args":[],
        "returns":"void",
        "name":"RemoveNoDraw",
        "description":"Remove the no draw flag."
      },{
        "args":[{
            "name":"hBuff",
            "type":"handle"
          }],
        "returns":"void",
        "name":"RemoveVerticalMotionController"
      },{
        "args":[],
        "returns":"void",
        "name":"RespawnUnit",
        "description":"Respawns the target unit if it can be respawned."
      },{
        "args":[],
        "returns":"float",
        "name":"Script_GetAttackRange",
        "description":"Gets this unit's attack range after all modifiers."
      },{
        "args":[],
        "returns":"bool",
        "name":"Script_IsDeniable"
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SellItem",
        "description":"Sells the passed item in this unit's inventory."
      },{
        "args":[{
            "name":"hAbility",
            "type":"handle"
          },{
            "name":"iIndex",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetAbilityByIndex",
        "description":"Set the ability by index."
      },{
        "args":[{
            "name":"nRange",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetAcquisitionRange"
      },{
        "args":[{
            "name":"flWeight",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetAdditionalBattleMusicWeight",
        "description":"Combat involving this creature will have this weight added to the music calcuations."
      },{
        "args":[{
            "name":"hAggroTarget",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetAggroTarget",
        "description":"Set this unit's aggro target to a specified unit."
      },{
        "args":[{
            "name":"iAttackCapabilities",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetAttackCapability"
      },{
        "args":[{
            "name":"hAttackTarget",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetAttacking"
      },{
        "args":[{
            "name":"flBaseAttackTime",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBaseAttackTime"
      },{
        "args":[{
            "name":"nMax",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetBaseDamageMax",
        "description":"Sets the maximum base damage."
      },{
        "args":[{
            "name":"nMin",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetBaseDamageMin",
        "description":"Sets the minimum base damage."
      },{
        "args":[{
            "name":"flHealthRegen",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBaseHealthRegen"
      },{
        "args":[{
            "name":"flMagicalResistanceValue",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBaseMagicalResistanceValue",
        "description":"Sets base magical armor value."
      },{
        "args":[{
            "name":"flManaRegen",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBaseManaRegen"
      },{
        "args":[{
            "name":"flBaseMaxHealth",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBaseMaxHealth",
        "description":"Set a new base max health value."
      },{
        "args":[{
            "name":"iMoveSpeed",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetBaseMoveSpeed"
      },{
        "args":[{
            "name":"bCanSell",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCanSellItems",
        "description":"Set whether or not this unit is allowed to sell items (bCanSellItems)"
      },{
        "args":[{
            "name":"iIndex",
            "type":"int"
          },{
            "name":"bSkipAdjustingPosition",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetControllableByPlayer",
        "description":"Set this unit controllable by the player with the passed ID."
      },{
        "args":[{
            "name":"hEntity",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetCursorCastTarget"
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetCursorPosition"
      },{
        "args":[{
            "name":"bTargetingNothing",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCursorTargetingNothing"
      },{
        "args":[{
            "name":"pLabel",
            "type":"string"
          },{
            "name":"r",
            "type":"int"
          },{
            "name":"g",
            "type":"int"
          },{
            "name":"b",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomHealthLabel"
      },{
        "args":[{
            "name":"iRange",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetDayTimeVisionRange",
        "description":"Set the base vision range."
      },{
        "args":[{
            "name":"iXPBounty",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetDeathXP",
        "description":"Set the XP bounty on this unit."
      },{
        "args":[{
            "name":"hNPC",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetForceAttackTarget"
      },{
        "args":[{
            "name":"hNPC",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetForceAttackTargetAlly"
      },{
        "args":[{
            "name":"bHasInventory",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetHasInventory",
        "description":"Set if this unit has an inventory."
      },{
        "args":[{
            "name":"nOffset",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetHealthBarOffsetOverride"
      },{
        "args":[{
            "name":"flHullRadius",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetHullRadius",
        "description":"Set the collision hull radius of this NPC."
      },{
        "args":[{
            "name":"bIdleAcquire",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetIdleAcquire"
      },{
        "args":[{
            "name":"hGoal",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetInitialGoalEntity",
        "description":"Sets the initial waypoint goal for this NPC."
      },{
        "args":[{
            "name":"vPosition",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetInitialGoalPosition",
        "description":"Set waypoint position for this NPC."
      },{
        "args":[{
            "name":"flMana",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetMana",
        "description":"Set the mana on this unit."
      },{
        "args":[{
            "name":"flMaxMana",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetMaxMana",
        "description":"Set the maximum mana of this unit."
      },{
        "args":[{
            "name":"iGoldBountyMax",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetMaximumGoldBounty",
        "description":"Set the maximum gold bounty for this unit."
      },{
        "args":[{
            "name":"iGoldBountyMin",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetMinimumGoldBounty",
        "description":"Set the minimum gold bounty for this unit."
      },{
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          },{
            "name":"hCaster",
            "type":"handle"
          },{
            "name":"nStackCount",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetModifierStackCount",
        "description":"Sets the stack count of a given modifier."
      },{
        "args":[{
            "name":"iMoveCapabilities",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetMoveCapability"
      },{
        "args":[{
            "name":"must",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetMustReachEachGoalEntity",
        "description":"Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path."
      },{
        "args":[{
            "name":"neverMoveToClearSpace",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetNeverMoveToClearSpace",
        "description":"If set to true, we will never attempt to move this unit to clear space, even when it unphases."
      },{
        "args":[{
            "name":"iRange",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetNightTimeVisionRange",
        "description":"Returns the vision range after modifiers."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetOrigin",
        "description":"Set the unit's origin."
      },{
        "args":[{
            "name":"pszModelName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetOriginalModel",
        "description":"Sets the original model of this entity, which it will tend to fall back to anytime its state changes."
      },{
        "args":[{
            "name":"flPhysicalArmorValue",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetPhysicalArmorBaseValue",
        "description":"Sets base physical armor value."
      },{
        "args":[{
            "name":"pProjectileName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetRangedProjectileName"
      },{
        "args":[{
            "name":"revealRadius",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetRevealRadius",
        "description":"sets the client side map reveal radius for this unit"
      },{
        "args":[{
            "name":"bShouldVisuallyFly",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetShouldDoFlyHeightVisual"
      },{
        "args":[{
            "name":"bStolenScepter",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetStolenScepter"
      },{
        "args":[{
            "name":"bCanRespawn",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetUnitCanRespawn"
      },{
        "args":[{
            "name":"pName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetUnitName"
      },{
        "args":[],
        "returns":"bool",
        "name":"ShouldIdleAcquire"
      },{
        "args":[{
            "name":"hCriteriaTable",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SpeakConcept",
        "description":"Speak a response system concept with the TLK_DOTA_CUSTOM concept."
      },{
        "args":[{
            "name":"flManaSpent",
            "type":"float"
          },{
            "name":"hAbility",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SpendMana",
        "description":"Spend mana from this unit, this can be used for spending mana from abilities or item usage."
      },{
        "args":[{
            "name":"nActivity",
            "type":"int"
          }],
        "returns":"void",
        "name":"StartGesture",
        "description":"Add the given gesture activity."
      },{
        "args":[{
            "name":"nActivity",
            "type":"int"
          }],
        "returns":"void",
        "name":"StartGestureFadeWithSequenceSettings",
        "description":"Add the given gesture activity faded according to its sequence settings."
      },{
        "args":[{
            "name":"nActivity",
            "type":"int"
          },{
            "name":"fFadeIn",
            "type":"float"
          },{
            "name":"fFadeOut",
            "type":"float"
          }],
        "returns":"void",
        "name":"StartGestureWithFade",
        "description":"Add the given gesture activity faded according to to the parameters."
      },{
        "args":[{
            "name":"nActivity",
            "type":"int"
          },{
            "name":"flRate",
            "type":"float"
          }],
        "returns":"void",
        "name":"StartGestureWithPlaybackRate",
        "description":"Add the given gesture activity with a playback rate override."
      },{
        "args":[],
        "returns":"void",
        "name":"Stop",
        "description":"Stop the current order."
      },{
        "args":[],
        "returns":"void",
        "name":"StopFacing"
      },{
        "args":[{
            "name":"pAbilityName1",
            "type":"string"
          },{
            "name":"pAbilityName2",
            "type":"string"
          },{
            "name":"bEnable1",
            "type":"bool"
          },{
            "name":"bEnable2",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SwapAbilities",
        "description":"Swaps the slots of the two passed abilities and sets them enabled/disabled."
      },{
        "args":[{
            "name":"nSlot1",
            "type":"int"
          },{
            "name":"nSlot2",
            "type":"int"
          }],
        "returns":"void",
        "name":"SwapItems",
        "description":"Swap the contents of two item slots (slot1, slot2)"
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"handle",
        "name":"TakeItem",
        "description":"Removed the passed item from this unit's inventory."
      },{
        "args":[],
        "returns":"float",
        "name":"TimeUntilNextAttack"
      },{
        "args":[],
        "returns":"bool",
        "name":"TriggerModifierDodge"
      },{
        "args":[{
            "name":"hAbility",
            "type":"handle"
          }],
        "returns":"bool",
        "name":"TriggerSpellAbsorb"
      },{
        "args":[{
            "name":"hAbility",
            "type":"handle"
          }],
        "returns":"void",
        "name":"TriggerSpellReflect",
        "description":"Trigger the Lotus Orb-like effect.(hAbility)"
      },{
        "args":[{
            "name":"pszAbilityName",
            "type":"string"
          },{
            "name":"pszReplacedAbilityName",
            "type":"string"
          }],
        "returns":"void",
        "name":"UnHideAbilityToSlot",
        "description":"Makes the first ability unhidden, and puts it where second ability currently is. Will do nothing if the first ability is already unhidden and in a valid slot."
      },{
        "args":[],
        "returns":"bool",
        "name":"UnitCanRespawn"
      },{
        "args":[],
        "returns":"bool",
        "name":"WasKilledPassively"
      }],
    "kind":"class",
    "name":"CDOTA_BaseNPC",
    "extend":"CBaseFlex"
  },{
    "members":[{
        "args":[],
        "returns":"int",
        "name":"GetInvulnCount",
        "description":"Get the invulnerability count for a building."
      },{
        "args":[{
            "name":"nInvulnCount",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetInvulnCount",
        "description":"Set the invulnerability counter of this building."
      }],
    "kind":"class",
    "name":"CDOTA_BaseNPC_Building",
    "extend":"CDOTA_BaseNPC"
  },{
    "members":[{
        "args":[{
            "name":"hDropData",
            "type":"handle"
          }],
        "returns":"void",
        "name":"AddItemDrop",
        "description":"Add the specified item drop to this creature."
      },{
        "args":[{
            "name":"iLevels",
            "type":"int"
          }],
        "returns":"void",
        "name":"CreatureLevelUp",
        "description":"Level the creature up by the specified number of levels"
      },{
        "args":[],
        "returns":"float",
        "name":"GetDisableResistance",
        "description":"Set creature's current disable resistance"
      },{
        "args":[],
        "returns":"float",
        "name":"GetUltimateDisableResistance",
        "description":"Set creature's current disable resistance from ultimates"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsChampion",
        "description":"Is this unit a champion?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsReincarnating",
        "description":"Is this creature respawning?"
      },{
        "args":[],
        "returns":"void",
        "name":"RemoveAllItemDrops",
        "description":"Remove all item drops from this creature."
      },{
        "args":[{
            "name":"flArmorGain",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetArmorGain",
        "description":"Set the armor gained per level on this creature."
      },{
        "args":[{
            "name":"flAttackTimeGain",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetAttackTimeGain",
        "description":"Set the attack time gained per level on this creature."
      },{
        "args":[{
            "name":"nBountyGain",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetBountyGain",
        "description":"Set the bounty gold gained per level on this creature."
      },{
        "args":[{
            "name":"bIsChampion",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetChampion",
        "description":"Flag this unit as a champion creature."
      },{
        "args":[{
            "name":"nDamageGain",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetDamageGain",
        "description":"Set the damage gained per level on this creature."
      },{
        "args":[{
            "name":"flDisableResistance",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetDisableResistance",
        "description":"Set creature's current disable resistance"
      },{
        "args":[{
            "name":"flDisableResistanceGain",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetDisableResistanceGain",
        "description":"Set the disable resistance gained per level on this creature."
      },{
        "args":[{
            "name":"nHPGain",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetHPGain",
        "description":"Set the hit points gained per level on this creature."
      },{
        "args":[{
            "name":"flHPRegenGain",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetHPRegenGain",
        "description":"Set the hit points regen gained per level on this creature."
      },{
        "args":[{
            "name":"flMagicResistanceGain",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetMagicResistanceGain",
        "description":"Set the magic resistance gained per level on this creature."
      },{
        "args":[{
            "name":"nManaGain",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetManaGain",
        "description":"Set the mana points gained per level on this creature."
      },{
        "args":[{
            "name":"flManaRegenGain",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetManaRegenGain",
        "description":"Set the mana points regen gained per level on this creature."
      },{
        "args":[{
            "name":"nMoveSpeedGain",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetMoveSpeedGain",
        "description":"Set the move speed gained per level on this creature."
      },{
        "args":[{
            "name":"bRequiresReachingEndPath",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetRequiresReachingEndPath",
        "description":"Set whether creatures require reaching their end path before becoming idle"
      },{
        "args":[{
            "name":"flUltDisableResistance",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetUltimateDisableResistance",
        "description":"Set creature's current disable resistance from ultimates"
      },{
        "args":[{
            "name":"nXPGain",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetXPGain",
        "description":"Set the XP gained per level on this creature."
      }],
    "kind":"class",
    "name":"CDOTA_BaseNPC_Creature",
    "extend":"CDOTA_BaseNPC"
  },{
    "members":[{
        "args":[{
            "name":"flXP",
            "type":"float"
          },{
            "name":"nReason",
            "type":"int"
          },{
            "name":"bApplyBotDifficultyScaling",
            "type":"bool"
          },{
            "name":"bIncrementTotal",
            "type":"bool"
          }],
        "returns":"bool",
        "name":"AddExperience",
        "description":"Params: Float XP, Bool applyBotDifficultyScaling"
      },{
        "args":[],
        "returns":"void",
        "name":"Buyback",
        "description":"Spend the gold and buyback with this hero."
      },{
        "args":[{
            "name":"bForce",
            "type":"bool"
          }],
        "returns":"void",
        "name":"CalculateStatBonus",
        "description":"Recalculate all stats after the hero gains stats."
      },{
        "args":[],
        "returns":"bool",
        "name":"CanEarnGold",
        "description":"Returns boolean value result of buyback gold limit time less than game time."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearLastHitMultikill",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearLastHitStreak",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"void",
        "name":"ClearStreak",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAbilityPoints",
        "description":"Gets the current unspent ability points."
      },{
        "args":[],
        "returns":"table",
        "name":"GetAdditionalOwnedUnits"
      },{
        "args":[],
        "returns":"float",
        "name":"GetAgility"
      },{
        "args":[],
        "returns":"float",
        "name":"GetAgilityGain"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAssists",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[{
            "name":"nIndex",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetAttacker"
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseAgility"
      },{
        "args":[],
        "returns":"int",
        "name":"GetBaseDamageMax",
        "description":"Hero damage is also affected by attributes."
      },{
        "args":[],
        "returns":"int",
        "name":"GetBaseDamageMin",
        "description":"Hero damage is also affected by attributes."
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseIntellect"
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseManaRegen",
        "description":"Returns the base mana regen."
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseStrength"
      },{
        "args":[],
        "returns":"int",
        "name":"GetBonusDamageFromPrimaryStat"
      },{
        "args":[],
        "returns":"float",
        "name":"GetBuybackCooldownTime",
        "description":"Return float value for the amount of time left on cooldown for this hero's buyback."
      },{
        "args":[{
            "name":"bReturnOldValues",
            "type":"bool"
          }],
        "returns":"int",
        "name":"GetBuybackCost",
        "description":"Return integer value for the gold cost of a buyback."
      },{
        "args":[],
        "returns":"float",
        "name":"GetBuybackGoldLimitTime",
        "description":"Returns the amount of time gold gain is limited after buying back."
      },{
        "args":[],
        "returns":"int",
        "name":"GetCurrentXP",
        "description":"Returns the amount of XP "
      },{
        "args":[],
        "returns":"int",
        "name":"GetDeathGoldCost"
      },{
        "args":[],
        "returns":"int",
        "name":"GetDeaths",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"int",
        "name":"GetDenies",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"int",
        "name":"GetGold",
        "description":"Returns gold amount for the player owning this hero"
      },{
        "args":[],
        "returns":"int",
        "name":"GetGoldBounty"
      },{
        "args":[],
        "returns":"int",
        "name":"GetHeroID"
      },{
        "args":[],
        "returns":"float",
        "name":"GetIncreasedAttackSpeed",
        "description":"Hero attack speed is also affected by agility."
      },{
        "args":[],
        "returns":"float",
        "name":"GetIntellect"
      },{
        "args":[],
        "returns":"float",
        "name":"GetIntellectGain"
      },{
        "args":[],
        "returns":"int",
        "name":"GetKills",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"int",
        "name":"GetLastHits",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"float",
        "name":"GetMostRecentDamageTime"
      },{
        "args":[],
        "returns":"int",
        "name":"GetMultipleKillCount"
      },{
        "args":[],
        "returns":"int",
        "name":"GetNumAttackers"
      },{
        "args":[],
        "returns":"int",
        "name":"GetNumItemsInInventory"
      },{
        "args":[],
        "returns":"int",
        "name":"GetNumItemsInStash"
      },{
        "args":[],
        "returns":"float",
        "name":"GetPhysicalArmorBaseValue",
        "description":"Hero armor is affected by attributes."
      },{
        "args":[],
        "returns":"int",
        "name":"GetPlayerID",
        "description":"Returns player ID of the player owning this hero"
      },{
        "args":[],
        "returns":"int",
        "name":"GetPrimaryAttribute",
        "description":"0 = strength, 1 = agility, 2 = intelligence."
      },{
        "args":[],
        "returns":"float",
        "name":"GetPrimaryStatValue"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetReplicatingOtherHero"
      },{
        "args":[],
        "returns":"float",
        "name":"GetRespawnTime"
      },{
        "args":[],
        "returns":"bool",
        "name":"GetRespawnsDisabled",
        "description":"Is this hero prevented from respawning?"
      },{
        "args":[],
        "returns":"int",
        "name":"GetStreak",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"float",
        "name":"GetStrength"
      },{
        "args":[],
        "returns":"float",
        "name":"GetStrengthGain"
      },{
        "args":[],
        "returns":"float",
        "name":"GetTimeUntilRespawn"
      },{
        "args":[{
            "name":"nSlotType",
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetTogglableWearable",
        "description":"Get wearable entity in slot (slot)"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasAnyAvailableInventorySpace"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasFlyingVision"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasOwnerAbandoned"
      },{
        "args":[{
            "name":"pItemName",
            "type":"string"
          },{
            "name":"bIncludeStashCombines",
            "type":"bool"
          },{
            "name":"bAllowSelling",
            "type":"bool"
          }],
        "returns":"int",
        "name":"HasRoomForItem",
        "description":"Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling"
      },{
        "args":[{
            "name":"bPlayEffects",
            "type":"bool"
          }],
        "returns":"void",
        "name":"HeroLevelUp",
        "description":"Levels up the hero, true or false to play effects."
      },{
        "args":[{
            "name":"iKillerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementAssists",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[{
            "name":"iKillerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementDeaths",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"void",
        "name":"IncrementDenies",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[{
            "name":"iVictimID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementKills",
        "description":"Passed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"void",
        "name":"IncrementLastHitMultikill",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"void",
        "name":"IncrementLastHitStreak",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"void",
        "name":"IncrementLastHits",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"void",
        "name":"IncrementNearbyCreepDeaths",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"void",
        "name":"IncrementStreak",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsBuybackDisabledByReapersScythe"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsReincarnating"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStashEnabled"
      },{
        "args":[{
            "name":"hHero",
            "type":"handle"
          },{
            "name":"hInflictor",
            "type":"handle"
          }],
        "returns":"void",
        "name":"KilledHero",
        "description":"Args: Hero, Inflictor"
      },{
        "args":[{
            "name":"flNewAgility",
            "type":"float"
          }],
        "returns":"void",
        "name":"ModifyAgility",
        "description":"Adds passed value to base attribute value, then calls CalculateStatBonus."
      },{
        "args":[{
            "name":"iGoldChange",
            "type":"int"
          },{
            "name":"bReliable",
            "type":"bool"
          },{
            "name":"iReason",
            "type":"int"
          }],
        "returns":"int",
        "name":"ModifyGold",
        "description":"Gives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason"
      },{
        "args":[{
            "name":"iGoldChange",
            "type":"int"
          },{
            "name":"bReliabe",
            "type":"bool"
          },{
            "name":"iReason",
            "type":"int"
          }],
        "returns":"int",
        "name":"ModifyGoldFiltered",
        "description":"Gives this hero some gold, using the gold filter if extra filtering is on.  Args: int nGoldChange, bool bReliable, int reason"
      },{
        "args":[{
            "name":"flNewIntellect",
            "type":"float"
          }],
        "returns":"void",
        "name":"ModifyIntellect",
        "description":"Adds passed value to base attribute value, then calls CalculateStatBonus."
      },{
        "args":[{
            "name":"flNewStrength",
            "type":"float"
          }],
        "returns":"void",
        "name":"ModifyStrength",
        "description":"Adds passed value to base attribute value, then calls CalculateStatBonus."
      },{
        "args":[],
        "returns":"void",
        "name":"PerformTaunt"
      },{
        "args":[],
        "returns":"void",
        "name":"RecordLastHit"
      },{
        "args":[{
            "name":"bBuyBack",
            "type":"bool"
          },{
            "name":"bRespawnPenalty",
            "type":"bool"
          }],
        "returns":"void",
        "name":"RespawnHero",
        "description":"Respawn this hero."
      },{
        "args":[{
            "name":"iPoints",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetAbilityPoints",
        "description":"Sets the current unspent ability points."
      },{
        "args":[{
            "name":"flAgility",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBaseAgility"
      },{
        "args":[{
            "name":"flIntellect",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBaseIntellect"
      },{
        "args":[{
            "name":"flStrength",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBaseStrength"
      },{
        "args":[{
            "name":"nDifficulty",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetBotDifficulty"
      },{
        "args":[{
            "name":"bBuybackDisabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetBuyBackDisabledByReapersScythe"
      },{
        "args":[{
            "name":"flTime",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBuybackCooldownTime",
        "description":"Sets the buyback cooldown time."
      },{
        "args":[{
            "name":"flTime",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBuybackGoldLimitTime",
        "description":"Set the amount of time gold gain is limited after buying back."
      },{
        "args":[{
            "name":"iValue",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomDeathXP",
        "description":"Sets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work!"
      },{
        "args":[{
            "name":"iGold",
            "type":"int"
          },{
            "name":"bReliable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetGold",
        "description":"Sets the gold amount for the player owning this hero"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetPlayerID"
      },{
        "args":[{
            "name":"nPrimaryAttribute",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetPrimaryAttribute",
        "description":"Set this hero's primary attribute value."
      },{
        "args":[{
            "name":"vOrigin",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetRespawnPosition"
      },{
        "args":[{
            "name":"bDisableRespawns",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetRespawnsDisabled",
        "description":"Prevent this hero from respawning."
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetStashEnabled"
      },{
        "args":[{
            "name":"time",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetTimeUntilRespawn"
      },{
        "args":[],
        "returns":"bool",
        "name":"ShouldDoFlyHeightVisual"
      },{
        "args":[{
            "name":"iCost",
            "type":"int"
          },{
            "name":"iReason",
            "type":"int"
          }],
        "returns":"void",
        "name":"SpendGold",
        "description":"Args: int nGold, int nReason"
      },{
        "args":[{
            "name":"hAbility",
            "type":"handle"
          }],
        "returns":"void",
        "name":"UpgradeAbility",
        "description":"This upgrades the passed ability if it exists and the hero has enough ability points."
      },{
        "args":[],
        "returns":"bool",
        "name":"WillReincarnate"
      }],
    "kind":"class",
    "name":"CDOTA_BaseNPC_Hero",
    "extend":"CDOTA_BaseNPC"
  },{
    "members":[],
    "kind":"class",
    "name":"CDOTA_BaseNPC_NeutralItemStash",
    "extend":"CDOTA_BaseNPC_Building"
  },{
    "members":[{
        "args":[],
        "returns":"int",
        "name":"GetShopType",
        "description":"Get the DOTA_SHOP_TYPE"
      },{
        "args":[{
            "name":"eShopType",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetShopType",
        "description":"Set the DOTA_SHOP_TYPE."
      }],
    "kind":"class",
    "name":"CDOTA_BaseNPC_Shop",
    "extend":"CDOTA_BaseNPC_Building"
  },{
    "members":[{
        "args":[],
        "returns":"Vector",
        "name":"GetTrapTarget",
        "description":"Get the trap target for this entity."
      },{
        "args":[{
            "name":"pAnimation",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetAnimation",
        "description":"Set the animation sequence for this entity."
      }],
    "kind":"class",
    "name":"CDOTA_BaseNPC_Trap_Ward",
    "extend":"CDOTA_BaseNPC_Creature"
  },{
    "members":[{
        "args":[],
        "returns":"string",
        "name":"GetInteractAbilityName",
        "description":"The name of the ability used when triggering interaction on the outpost."
      },{
        "args":[{
            "name":"pszInteractAbilityName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetInteractAbilityName",
        "description":"The name of the ability used when triggering interaction on the outpost."
      }],
    "kind":"class",
    "name":"CDOTA_BaseNPC_Watch_Tower",
    "extend":"CDOTA_BaseNPC_Building"
  },{
    "members":[{
        "args":[{
            "name":"i",
            "type":"int"
          },{
            "name":"bDestroyImmediately",
            "type":"bool"
          },{
            "name":"bStatusEffect",
            "type":"bool"
          },{
            "name":"iPriority",
            "type":"int"
          },{
            "name":"bHeroEffect",
            "type":"bool"
          },{
            "name":"bOverheadEffect",
            "type":"bool"
          }],
        "returns":"void",
        "name":"AddParticle",
        "description":"(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect"
      },{
        "args":[{
            "name":"table",
            "type":"handle"
          }],
        "returns":"void",
        "name":"CheckStateToTable"
      },{
        "args":[],
        "returns":"void",
        "name":"DecrementStackCount",
        "description":"Decrease this modifier's stack count by 1."
      },{
        "args":[],
        "returns":"void",
        "name":"Destroy",
        "description":"Run all associated destroy functions, then remove the modifier."
      },{
        "args":[],
        "returns":"bool",
        "name":"DestroyOnExpire"
      },{
        "args":[],
        "returns":"void",
        "name":"ForceRefresh",
        "description":"Run all associated refresh functions on this modifier as if it was re-applied."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetAbility",
        "description":"Get the ability that generated the modifier."
      },{
        "args":[],
        "returns":"float",
        "name":"GetAuraDuration",
        "description":"Returns aura stickiness (default 0.5)"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetAuraOwner"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetCaster",
        "description":"Get the owner of the ability responsible for the modifier."
      },{
        "args":[],
        "returns":"string",
        "name":"GetClass"
      },{
        "args":[],
        "returns":"float",
        "name":"GetCreationTime"
      },{
        "args":[],
        "returns":"float",
        "name":"GetDieTime"
      },{
        "args":[],
        "returns":"float",
        "name":"GetDuration"
      },{
        "args":[],
        "returns":"float",
        "name":"GetElapsedTime"
      },{
        "args":[],
        "returns":"float",
        "name":"GetLastAppliedTime"
      },{
        "args":[],
        "returns":"string",
        "name":"GetName"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetParent",
        "description":"Get the unit the modifier is parented to."
      },{
        "args":[],
        "returns":"float",
        "name":"GetRemainingTime"
      },{
        "args":[],
        "returns":"int",
        "name":"GetSerialNumber"
      },{
        "args":[],
        "returns":"int",
        "name":"GetStackCount"
      },{
        "args":[{
            "name":"iFunction",
            "type":"int"
          }],
        "returns":"bool",
        "name":"HasFunction"
      },{
        "args":[],
        "returns":"void",
        "name":"IncrementStackCount",
        "description":"Increase this modifier's stack count by 1."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDebuff"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHexDebuff"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStunDebuff"
      },{
        "args":[],
        "returns":"void",
        "name":"SendBuffRefreshToClients"
      },{
        "args":[{
            "name":"flDuration",
            "type":"float"
          },{
            "name":"bInformClient",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetDuration",
        "description":"(flTime, bInformClients)"
      },{
        "args":[{
            "name":"iCount",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetStackCount"
      },{
        "args":[{
            "name":"flInterval",
            "type":"float"
          }],
        "returns":"void",
        "name":"StartIntervalThink",
        "description":"Start this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1."
      }],
    "name":"CDOTA_Buff",
    "kind":"class"
  },{
    "instance":"CustomUI",
    "members":[{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"void",
        "name":"DynamicHud_Create",
        "description":"Create a new custom UI HUD element for the specified player(s). ( int PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ )"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          }],
        "returns":"void",
        "name":"DynamicHud_Destroy",
        "description":"Destroy a custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID )"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"void",
        "name":"DynamicHud_SetDialogVariables",
        "description":"Add or modify dialog variables for an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables )"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"bool"
          }],
        "returns":"void",
        "name":"DynamicHud_SetVisible",
        "description":"Toggle the visibility of an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, bool Visible )"
      }],
    "name":"CDOTA_CustomUIManager",
    "kind":"class"
  },{
    "members":[{
        "args":[],
        "returns":"bool",
        "name":"CanBeUsedOutOfInventory"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetContainer",
        "description":"Get the container for this item."
      },{
        "args":[],
        "returns":"int",
        "name":"GetCost"
      },{
        "args":[],
        "returns":"int",
        "name":"GetCurrentCharges",
        "description":"Get the number of charges this item currently has."
      },{
        "args":[],
        "returns":"int",
        "name":"GetInitialCharges",
        "description":"Get the initial number of charges this item has."
      },{
        "args":[],
        "returns":"int",
        "name":"GetItemSlot"
      },{
        "args":[],
        "returns":"int",
        "name":"GetItemState",
        "description":"Gets whether item is unequipped or ready."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetParent",
        "description":"Get the parent for this item."
      },{
        "args":[],
        "returns":"float",
        "name":"GetPurchaseTime",
        "description":"Get the purchase time of this item"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetPurchaser",
        "description":"Get the purchaser for this item."
      },{
        "args":[],
        "returns":"int",
        "name":"GetSecondaryCharges",
        "description":"Get the number of secondary charges this item currently has."
      },{
        "args":[],
        "returns":"int",
        "name":"GetShareability"
      },{
        "args":[],
        "returns":"int",
        "name":"GetValuelessCharges",
        "description":"Get the number of valueless charges this item currently has."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAlertableItem"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCastOnPickup"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCombinable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCombineLocked"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDisassemblable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDroppable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsInBackpack"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsItem"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsKillable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsMuted"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsNeutralDrop"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPermanent",
        "description":"Is this a permanent item?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPurchasable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRecipe"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRecipeGenerated"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSellable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStackable"
      },{
        "args":[{
            "name":"bAutoUse",
            "type":"bool"
          },{
            "name":"flHeight",
            "type":"float"
          },{
            "name":"flDuration",
            "type":"float"
          },{
            "name":"vEndPoint",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"LaunchLoot"
      },{
        "args":[{
            "name":"bAutoUse",
            "type":"bool"
          },{
            "name":"flInitialHeight",
            "type":"float"
          },{
            "name":"flLaunchHeight",
            "type":"float"
          },{
            "name":"flDuration",
            "type":"float"
          },{
            "name":"vEndPoint",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"LaunchLootInitialHeight"
      },{
        "args":[{
            "name":"bAutoUse",
            "type":"bool"
          },{
            "name":"flRequiredHeight",
            "type":"float"
          },{
            "name":"flHeight",
            "type":"float"
          },{
            "name":"flDuration",
            "type":"float"
          },{
            "name":"vEndPoint",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"LaunchLootRequiredHeight"
      },{
        "args":[{
            "name":"iCharges",
            "type":"int"
          }],
        "returns":"void",
        "name":"ModifyNumValuelessCharges",
        "description":"Modifies the number of valueless charges on this item"
      },{
        "args":[],
        "returns":"void",
        "name":"OnEquip"
      },{
        "args":[],
        "returns":"void",
        "name":"OnUnequip"
      },{
        "args":[],
        "returns":"bool",
        "name":"RequiresCharges"
      },{
        "args":[{
            "name":"bValue",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCanBeUsedOutOfInventory"
      },{
        "args":[{
            "name":"bCastOnPickUp",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCastOnPickup"
      },{
        "args":[{
            "name":"bCombineLocked",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCombineLocked"
      },{
        "args":[{
            "name":"iCharges",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCurrentCharges",
        "description":"Set the number of charges on this item"
      },{
        "args":[{
            "name":"bDroppable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetDroppable"
      },{
        "args":[{
            "name":"iState",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetItemState",
        "description":"Sets whether item is unequipped or ready."
      },{
        "args":[{
            "name":"bOnlyPlayerHero",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetOnlyPlayerHeroPickup"
      },{
        "args":[{
            "name":"flTime",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetPurchaseTime",
        "description":"Set the purchase time of this item"
      },{
        "args":[{
            "name":"hPurchaser",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetPurchaser",
        "description":"Set the purchaser of record for this item."
      },{
        "args":[{
            "name":"iCharges",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetSecondaryCharges",
        "description":"Set the number of secondary charges on this item"
      },{
        "args":[{
            "name":"bSellable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetSellable"
      },{
        "args":[{
            "name":"iShareability",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetShareability"
      },{
        "args":[{
            "name":"bStacksWithOtherOwners",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetStacksWithOtherOwners"
      },{
        "args":[],
        "returns":"void",
        "name":"SpendCharge"
      },{
        "args":[],
        "returns":"bool",
        "name":"StacksWithOtherOwners"
      },{
        "args":[],
        "returns":"void",
        "name":"Think",
        "description":"Think this item"
      }],
    "kind":"class",
    "name":"CDOTA_Item",
    "extend":"CDOTABaseAbility"
  },{
    "members":[{
        "args":[],
        "returns":"string",
        "name":"GetItemName",
        "description":"Returns the item name"
      }],
    "kind":"class",
    "name":"CDOTA_ItemSpawner",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"flTime",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetLifeTime",
        "description":"Set the life time of this item"
      }],
    "kind":"class",
    "name":"CDOTA_Item_BagOfGold",
    "extend":"CDOTA_Item"
  },{
    "members":[{
        "args":[{
            "name":"hCaster",
            "type":"handle"
          },{
            "name":"hTarget",
            "type":"handle"
          },{
            "name":"pszModifierName",
            "type":"string"
          },{
            "name":"hModifierTable",
            "type":"handle"
          }],
        "returns":"void",
        "name":"ApplyDataDrivenModifier",
        "description":"Applies a data driven modifier to the target"
      },{
        "args":[{
            "name":"hCaster",
            "type":"handle"
          },{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"pszModifierName",
            "type":"string"
          },{
            "name":"hModifierTable",
            "type":"handle"
          }],
        "returns":"handle",
        "name":"ApplyDataDrivenThinker",
        "description":"Applies a data driven thinker at the location"
      }],
    "kind":"class",
    "name":"CDOTA_Item_DataDriven",
    "extend":"CDOTA_Item"
  },{
    "members":[{
        "args":[{
            "name":"hUnit",
            "type":"handle"
          }],
        "returns":"bool",
        "name":"CanUnitPickUp",
        "description":"Returns true if this item can be picked up by the target unit."
      },{
        "args":[],
        "returns":"int",
        "name":"CastFilterResult",
        "description":"Determine whether an issued command with no target is valid."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"int",
        "name":"CastFilterResultLocation",
        "description":"(Vector vLocation) Determine whether an issued command on a location is valid."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"CastFilterResultTarget",
        "description":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
      },{
        "args":[],
        "returns":"string",
        "name":"GetAssociatedPrimaryAbilities",
        "description":"Returns abilities that are stolen simultaneously, or otherwise related in functionality."
      },{
        "args":[],
        "returns":"string",
        "name":"GetAssociatedSecondaryAbilities",
        "description":"Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities."
      },{
        "args":[],
        "returns":"int",
        "name":"GetBehavior",
        "description":"Return cast behavior type of this ability."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetCastRange",
        "description":"Return cast range of this ability."
      },{
        "args":[],
        "returns":"float",
        "name":"GetChannelTime",
        "description":"Return the channel time of this ability."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetChannelledManaCostPerSecond",
        "description":"Return mana cost at the given level per second while channeling (-1 is current)."
      },{
        "args":[],
        "returns":"int",
        "name":"GetConceptRecipientType",
        "description":"Return who hears speech when this spell is cast."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetCooldown",
        "description":"Return cooldown of this ability."
      },{
        "args":[],
        "returns":"string",
        "name":"GetCustomCastError",
        "description":"Return the error string of a failed command with no target."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"string",
        "name":"GetCustomCastErrorLocation",
        "description":"(Vector vLocation) Return the error string of a failed command on a location."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"string",
        "name":"GetCustomCastErrorTarget",
        "description":"(HSCRIPT hTarget) Return the error string of a failed command on a target."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetEffectiveCastRange",
        "description":"Return cast range of this ability, taking modifiers into account."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGoldCost",
        "description":"Return gold cost at the given level (-1 is current)."
      },{
        "args":[],
        "returns":"string",
        "name":"GetIntrinsicModifierName",
        "description":"Returns the name of the modifier applied passively by this ability."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetManaCost",
        "description":"Return mana cost at the given level (-1 is current)."
      },{
        "args":[],
        "returns":"float",
        "name":"GetPlaybackRateOverride",
        "description":"Return the animation rate of the cast animation."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHiddenAbilityCastable",
        "description":"Returns true if this ability can be used when not on the action panel."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHiddenWhenStolen",
        "description":"Returns true if this ability is hidden when stolen by Spell Steal."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsMuted",
        "description":"Returns whether this item is muted or not."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRefreshable",
        "description":"Returns true if this ability is refreshed by Refresher Orb."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStealable",
        "description":"Returns true if this ability can be stolen by Spell Steal."
      },{
        "args":[],
        "returns":"void",
        "name":"OnAbilityPhaseInterrupted",
        "description":"Cast time did not complete successfully."
      },{
        "args":[],
        "returns":"bool",
        "name":"OnAbilityPhaseStart",
        "description":"Cast time begins (return true for successful cast)."
      },{
        "args":[{
            "name":"bInterrupted",
            "type":"bool"
          }],
        "returns":"void",
        "name":"OnChannelFinish",
        "description":"(bool bInterrupted) Channel finished."
      },{
        "args":[{
            "name":"flInterval",
            "type":"float"
          }],
        "returns":"void",
        "name":"OnChannelThink",
        "description":"(float flInterval) Channeling is taking place."
      },{
        "args":[],
        "returns":"void",
        "name":"OnChargeCountChanged",
        "description":"Runs when item's charge count changes."
      },{
        "args":[],
        "returns":"void",
        "name":"OnHeroCalculateStatBonus",
        "description":"Caster (hero only) gained a level, skilled an ability, or received a new stat bonus."
      },{
        "args":[{
            "name":"unit",
            "type":"handle"
          },{
            "name":"attacker",
            "type":"handle"
          },{
            "name":"table",
            "type":"handle"
          }],
        "returns":"void",
        "name":"OnHeroDiedNearby",
        "description":"A hero has died in the vicinity (ie Urn), takes table of params."
      },{
        "args":[],
        "returns":"void",
        "name":"OnHeroLevelUp",
        "description":"Caster gained a level."
      },{
        "args":[],
        "returns":"void",
        "name":"OnInventoryContentsChanged",
        "description":"Caster inventory changed."
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"OnItemEquipped",
        "description":"( HSCRIPT hItem ) Caster equipped item."
      },{
        "args":[],
        "returns":"void",
        "name":"OnOwnerDied",
        "description":"Caster died."
      },{
        "args":[],
        "returns":"void",
        "name":"OnOwnerSpawned",
        "description":"Caster respawned or spawned for the first time."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          },{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"bool",
        "name":"OnProjectileHit",
        "description":"(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"OnProjectileThink",
        "description":"(Vector vLocation) Projectile is actively moving."
      },{
        "args":[],
        "returns":"void",
        "name":"OnSpellStart",
        "description":"Cast time finished, spell effects begin."
      },{
        "args":[{
            "name":"hSourceAbility",
            "type":"handle"
          }],
        "returns":"void",
        "name":"OnStolen",
        "description":"( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal."
      },{
        "args":[],
        "returns":"void",
        "name":"OnToggle",
        "description":"Ability is toggled on/off."
      },{
        "args":[],
        "returns":"void",
        "name":"OnUnStolen",
        "description":"Special behavior when lost by Spell Steal."
      },{
        "args":[],
        "returns":"void",
        "name":"OnUpgrade",
        "description":"Ability gained a level."
      },{
        "args":[],
        "returns":"bool",
        "name":"ProcsMagicStick",
        "description":"Returns true if this ability will generate magic stick charges for nearby enemies."
      },{
        "args":[],
        "returns":"int",
        "name":"SpeakTrigger",
        "description":"Return the type of speech used."
      }],
    "kind":"class",
    "name":"CDOTA_Item_Lua",
    "extend":"CDOTA_Item"
  },{
    "members":[{
        "args":[],
        "returns":"handle",
        "name":"GetContainedItem",
        "description":"Returned the contained item."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCreationTime",
        "description":"Returns the game time when this item was created in the world"
      },{
        "args":[{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetContainedItem",
        "description":"Set the contained item."
      }],
    "kind":"class",
    "name":"CDOTA_Item_Physical",
    "extend":"CBaseAnimating"
  },{
    "members":[{
        "args":[{
            "name":"nTeamNumberKnownTo",
            "type":"int"
          }],
        "returns":"void",
        "name":"CutDown",
        "description":"Cuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team)"
      },{
        "args":[{
            "name":"flRegrowAfter",
            "type":"float"
          },{
            "name":"nTeamNumberKnownTo",
            "type":"int"
          }],
        "returns":"void",
        "name":"CutDownRegrowAfter",
        "description":"Cuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team)"
      },{
        "args":[],
        "returns":"void",
        "name":"GrowBack",
        "description":"Grows back the tree if it was cut down."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStanding",
        "description":"Returns true if the tree is standing, false if it has been cut down"
      }],
    "kind":"class",
    "name":"CDOTA_MapTree",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[],
        "returns":"bool",
        "name":"AllowIllusionDuplicate",
        "description":"True/false if this modifier is active on illusions."
      },{
        "args":[],
        "returns":"bool",
        "name":"CanParentBeAutoAttacked"
      },{
        "args":[],
        "returns":"bool",
        "name":"DestroyOnExpire",
        "description":"True/false if this buff is removed when the duration expires."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAttributes",
        "description":"Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t"
      },{
        "args":[],
        "returns":"float",
        "name":"GetAuraDuration",
        "description":"Returns aura stickiness"
      },{
        "args":[{
            "name":"hEntity",
            "type":"handle"
          }],
        "returns":"bool",
        "name":"GetAuraEntityReject",
        "description":"Return true/false if this entity should receive the aura under specific conditions"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAuraRadius",
        "description":"Return the range around the parent this aura tries to apply its buff."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAuraSearchFlags",
        "description":"Return the unit flags this aura respects when placing buffs."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAuraSearchTeam",
        "description":"Return the teams this aura applies its buff to."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAuraSearchType",
        "description":"Return the unit classifications this aura applies its buff to."
      },{
        "args":[],
        "returns":"int",
        "name":"GetEffectAttachType",
        "description":"Return the attach type of the particle system from GetEffectName."
      },{
        "args":[],
        "returns":"string",
        "name":"GetEffectName",
        "description":"Return the name of the particle system that is created while this modifier is active."
      },{
        "args":[],
        "returns":"string",
        "name":"GetHeroEffectName",
        "description":"Return the name of the hero effect particle system that is created while this modifier is active."
      },{
        "args":[],
        "returns":"string",
        "name":"GetModifierAura",
        "description":"The name of the secondary modifier that will be applied by this modifier (if it is an aura)."
      },{
        "args":[],
        "returns":"int",
        "name":"GetPriority",
        "description":"Return the priority order this modifier will be applied over others."
      },{
        "args":[],
        "returns":"string",
        "name":"GetStatusEffectName",
        "description":"Return the name of the status effect particle system that is created while this modifier is active."
      },{
        "args":[],
        "returns":"string",
        "name":"GetTexture",
        "description":"Return the name of the buff icon to be shown for this modifier."
      },{
        "args":[],
        "returns":"int",
        "name":"HeroEffectPriority",
        "description":"Relationship of this hero effect with those from other buffs (higher is more likely to be shown)."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAura",
        "description":"True/false if this modifier is an aura."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAuraActiveOnDeath",
        "description":"True/false if this aura provides buffs when the parent is dead."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDebuff",
        "description":"True/false if this modifier should be displayed as a debuff."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHidden",
        "description":"True/false if this modifier should be displayed on the buff bar."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPermanent"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPurgable",
        "description":"True/false if this modifier can be purged."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPurgeException",
        "description":"True/false if this modifier can be purged by strong dispels."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStunDebuff",
        "description":"True/false if this modifier is considered a stun for purge reasons."
      },{
        "args":[{
            "name":"table",
            "type":"handle"
          }],
        "returns":"void",
        "name":"OnCreated",
        "description":"Runs when the modifier is created."
      },{
        "args":[],
        "returns":"void",
        "name":"OnDestroy",
        "description":"Runs when the modifier is destroyed (after unit loses modifier)."
      },{
        "args":[],
        "returns":"void",
        "name":"OnIntervalThink",
        "description":"Runs when the think interval occurs."
      },{
        "args":[{
            "name":"table",
            "type":"handle"
          }],
        "returns":"void",
        "name":"OnRefresh",
        "description":"Runs when the modifier is refreshed."
      },{
        "args":[],
        "returns":"void",
        "name":"OnRemoved",
        "description":"Runs when the modifier is destroyed (before unit loses modifier)."
      },{
        "args":[{
            "name":"iStackCount",
            "type":"int"
          }],
        "returns":"void",
        "name":"OnStackCountChanged",
        "description":"Runs when stack count changes (param is old count)."
      },{
        "args":[],
        "returns":"bool",
        "name":"RemoveOnDeath",
        "description":"True/false if this modifier is removed when the parent dies."
      },{
        "args":[{
            "name":"bHasCustomData",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetHasCustomTransmitterData"
      },{
        "args":[],
        "returns":"bool",
        "name":"ShouldUseOverheadOffset",
        "description":"Apply the overhead offset to the attached effect."
      },{
        "args":[],
        "returns":"int",
        "name":"StatusEffectPriority",
        "description":"Relationship of this status effect with those from other buffs (higher is more likely to be shown)."
      }],
    "kind":"class",
    "name":"CDOTA_Modifier_Lua",
    "extend":"CDOTA_Buff"
  },{
    "members":[{
        "args":[],
        "returns":"bool",
        "name":"ApplyHorizontalMotionController",
        "description":"Starts the horizontal motion controller effects for this buff.  Returns true if successful."
      },{
        "args":[],
        "returns":"int",
        "name":"GetPriority",
        "description":"Get the priority"
      },{
        "args":[],
        "returns":"void",
        "name":"OnHorizontalMotionInterrupted",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[{
            "name":"nMotionPriority",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetPriority",
        "description":"Set the priority"
      },{
        "args":[{
            "name":"me",
            "type":"handle"
          },{
            "name":"dt",
            "type":"float"
          }],
        "returns":"void",
        "name":"UpdateHorizontalMotion",
        "description":"Perform any motion from the given interval on the NPC."
      }],
    "kind":"class",
    "name":"CDOTA_Modifier_Lua_Horizontal_Motion",
    "extend":"CDOTA_Modifier_Lua"
  },{
    "members":[{
        "args":[],
        "returns":"bool",
        "name":"ApplyHorizontalMotionController",
        "description":"Starts the horizontal motion controller effects for this buff.  Returns true if successful."
      },{
        "args":[],
        "returns":"bool",
        "name":"ApplyVerticalMotionController",
        "description":"Starts the vertical motion controller effects for this buff.  Returns true if successful."
      },{
        "args":[],
        "returns":"int",
        "name":"GetPriority",
        "description":"Get the priority"
      },{
        "args":[],
        "returns":"void",
        "name":"OnHorizontalMotionInterrupted",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[],
        "returns":"void",
        "name":"OnVerticalMotionInterrupted",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[{
            "name":"nMotionPriority",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetPriority",
        "description":"Set the priority"
      },{
        "args":[{
            "name":"me",
            "type":"handle"
          },{
            "name":"dt",
            "type":"float"
          }],
        "returns":"void",
        "name":"UpdateHorizontalMotion",
        "description":"Perform any motion from the given interval on the NPC."
      },{
        "args":[{
            "name":"me",
            "type":"handle"
          },{
            "name":"dt",
            "type":"float"
          }],
        "returns":"void",
        "name":"UpdateVerticalMotion",
        "description":"Perform any motion from the given interval on the NPC."
      }],
    "kind":"class",
    "name":"CDOTA_Modifier_Lua_Motion_Both",
    "extend":"CDOTA_Modifier_Lua"
  },{
    "members":[{
        "args":[],
        "returns":"bool",
        "name":"ApplyVerticalMotionController",
        "description":"Starts the vertical motion controller effects for this buff.  Returns true if successful."
      },{
        "args":[],
        "returns":"int",
        "name":"GetMotionPriority",
        "description":"Get the priority"
      },{
        "args":[],
        "returns":"void",
        "name":"OnVerticalMotionInterrupted",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[{
            "name":"nMotionPriority",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetMotionPriority",
        "description":"Set the priority"
      },{
        "args":[{
            "name":"me",
            "type":"handle"
          },{
            "name":"dt",
            "type":"float"
          }],
        "returns":"void",
        "name":"UpdateVerticalMotion",
        "description":"Perform any motion from the given interval on the NPC."
      }],
    "kind":"class",
    "name":"CDOTA_Modifier_Lua_Vertical_Motion",
    "extend":"CDOTA_Modifier_Lua"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"CreatePendingUnits"
      },{
        "args":[],
        "returns":"void",
        "name":"SelectSpawnType"
      },{
        "args":[{
            "name":"bIgnoreBlockers",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SpawnNextBatch"
      }],
    "kind":"class",
    "name":"CDOTA_NeutralSpawner",
    "extend":"CPointEntity"
  },{
    "members":[{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"AddAegisPickup"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"nReason",
            "type":"int"
          }],
        "returns":"void",
        "name":"AddCandyEvent"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"flFarmValue",
            "type":"float"
          },{
            "name":"bEarnedValue",
            "type":"bool"
          }],
        "returns":"void",
        "name":"AddClaimedFarm"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iCost",
            "type":"int"
          }],
        "returns":"void",
        "name":"AddGoldSpentOnSupport"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"nTeamNumber",
            "type":"int"
          },{
            "name":"hItem",
            "type":"handle"
          }],
        "returns":"void",
        "name":"AddNeutralItemToStash"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"AddRunePickup"
      },{
        "args":[{
            "name":"nUnitOwnerPlayerID",
            "type":"int"
          },{
            "name":"nOtherPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"AreUnitsSharedWithPlayerID"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"CanRepick"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"ClearKillsMatrix"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"ClearLastHitMultikill"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"ClearLastHitStreak"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"ClearRawPlayerDamageMatrix"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"ClearStreak"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetAegisPickups"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetAssists"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"unsigned",
        "name":"GetBroadcasterChannel"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"unsigned",
        "name":"GetBroadcasterChannelSlot"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetClaimedDenies"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"bOnlyEarned",
            "type":"bool"
          }],
        "returns":"float",
        "name":"GetClaimedFarm"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetClaimedMisses"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"<unknown>",
        "name":"GetConnectionState"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"bTotal",
            "type":"bool"
          }],
        "returns":"int",
        "name":"GetCreepDamageTaken"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetCustomBuybackCooldown"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetCustomBuybackCost"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetCustomTeamAssignment",
        "description":"Get the current custom team assignment for this player."
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iVictimID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetDamageDoneToHero"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetDeaths"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetDenies"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          },{
            "name":"unActionID",
            "type":"unsigned"
          }],
        "returns":"int",
        "name":"GetEventGameCustomActionClaimCount",
        "description":"(nPlayerID, nActionID)"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          },{
            "name":"pActionName",
            "type":"string"
          }],
        "returns":"int",
        "name":"GetEventGameCustomActionClaimCountByName",
        "description":"(nPlayerID, pActionName)"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          }],
        "returns":"unsigned",
        "name":"GetEventPointsForPlayerID"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          }],
        "returns":"unsigned",
        "name":"GetEventPremiumPoints"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          }],
        "returns":"<unknown>",
        "name":"GetEventRanks"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGold"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGoldLostToDeath"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetGoldPerMin"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGoldSpentOnBuybacks"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGoldSpentOnConsumables"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGoldSpentOnItems"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGoldSpentOnSupport"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetHealing"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"bTotal",
            "type":"bool"
          }],
        "returns":"int",
        "name":"GetHeroDamageTaken"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetKills"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iVictimID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetKillsDoneToHero"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetLastHitMultikill"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetLastHitStreak"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetLastHits"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetLevel"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"<unknown>",
        "name":"GetLiveSpectatorTeam"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetMisses"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetNearbyCreepDeaths"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetNetWorth"
      },{
        "args":[{
            "name":"nCourierIndex",
            "type":"int"
          },{
            "name":"nTeamNumber",
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetNthCourierForTeam"
      },{
        "args":[{
            "name":"iTeamNumber",
            "type":"int"
          },{
            "name":"iNthPlayer",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetNthPlayerIDOnTeam"
      },{
        "args":[],
        "returns":"int",
        "name":"GetNumConnectedHumanPlayers",
        "description":"Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetNumConsumablesPurchased"
      },{
        "args":[{
            "name":"nTeamNumber",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetNumCouriersForTeam"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetNumItemsPurchased"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"uint64",
        "name":"GetPartyID"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetPlayer"
      },{
        "args":[],
        "returns":"int",
        "name":"GetPlayerCount",
        "description":"Includes spectators and players not assigned to a team"
      },{
        "args":[{
            "name":"iTeam",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetPlayerCountForTeam"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"GetPlayerLoadedCompletely"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"string",
        "name":"GetPlayerName"
      },{
        "args":[{
            "name":"nPlayerId",
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetPreferredCourierForPlayer"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetRawPlayerDamage"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetReliableGold"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetRespawnSeconds"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetRoshanKills"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetRunePickups"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetSelectedHeroEntity"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetSelectedHeroID"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"string",
        "name":"GetSelectedHeroName"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"unsigned",
        "name":"GetSteamAccountID"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"uint64",
        "name":"GetSteamID",
        "description":"Get the 64 bit steam ID for a given player."
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetStreak"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetStuns"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetTeam"
      },{
        "args":[{
            "name":"iTeam",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetTeamKills"
      },{
        "args":[],
        "returns":"int",
        "name":"GetTeamPlayerCount",
        "description":"(Deprecated: use GetNumConnectedHumanPlayers) Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetTimeOfLastConsumablePurchase"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetTimeOfLastDeath"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetTimeOfLastItemPurchase"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetTotalEarnedGold"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetTotalEarnedXP"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetTotalGoldSpent"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"bTotal",
            "type":"bool"
          }],
        "returns":"int",
        "name":"GetTowerDamageTaken"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetTowerKills"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          },{
            "name":"nOtherPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetUnitShareMaskForPlayer"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetUnreliableGold"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetXPPerMin"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"HasCustomGameTicketForPlayerID",
        "description":"Does this player have a custom game ticket for this game?"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"HasRandomed"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"HasSelectedHero"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasSetEventGameCustomActionClaimCount"
      },{
        "args":[],
        "returns":"bool",
        "name":"HaveAllPlayersJoined"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iVictimID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementAssists"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementClaimedDenies"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementClaimedMisses"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iKillerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementDeaths"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementDenies"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iVictimID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementKills"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementLastHitMultikill"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementLastHitStreak"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementLastHits"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementMisses"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementNearbyCreepDeaths"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementStreak"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iXP",
            "type":"int"
          },{
            "name":"nReason",
            "type":"int"
          }],
        "returns":"void",
        "name":"IncrementTotalEarnedXP"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"IsBroadcaster"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          },{
            "name":"nOtherPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"IsDisableHelpSetForPlayerID"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"IsFakeClient"
      },{
        "args":[{
            "name":"pHeroname",
            "type":"string"
          },{
            "name":"bIgnoreUnrevealedPick",
            "type":"bool"
          }],
        "returns":"bool",
        "name":"IsHeroSelected"
      },{
        "args":[{
            "name":"nUnitOwnerPlayerID",
            "type":"int"
          },{
            "name":"nOtherPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"IsHeroSharedWithPlayerID"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"IsValidPlayer"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"IsValidPlayerID"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"IsValidTeamPlayer"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          }],
        "returns":"bool",
        "name":"IsValidTeamPlayerID"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iGoldChange",
            "type":"int"
          },{
            "name":"bReliable",
            "type":"bool"
          },{
            "name":"nReason",
            "type":"int"
          }],
        "returns":"int",
        "name":"ModifyGold"
      },{
        "args":[],
        "returns":"int",
        "name":"NumPlayers"
      },{
        "args":[],
        "returns":"int",
        "name":"NumTeamPlayers"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"item_definition_index",
            "type":"int"
          },{
            "name":"nChargeIncrementOrDecrement",
            "type":"int"
          }],
        "returns":"void",
        "name":"RecordConsumableAbilityChargeChange",
        "description":"Increment or decrement consumable charges (nPlayerID, item_definition_index, nChargeIncrementOrDecrement)"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"pszHeroClass",
            "type":"string"
          },{
            "name":"nGold",
            "type":"int"
          },{
            "name":"nXP",
            "type":"int"
          }],
        "returns":"handle",
        "name":"ReplaceHeroWith",
        "description":"(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"ResetBuybackCostTime"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"ResetTotalEarnedGold"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          },{
            "name":"flBuybackCooldown",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBuybackCooldownTime"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          },{
            "name":"flBuybackCooldown",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetBuybackGoldLimitTime"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetCameraTarget",
        "description":"(playerID, entity) - force the given player's camera to follow the given entity"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"bCanRepick",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCanRepick"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"flCooldownTime",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetCustomBuybackCooldown",
        "description":"Set the buyback cooldown for this player."
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iGoldCost",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomBuybackCost",
        "description":"Set the buyback cost for this player."
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iParam",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomIntParam"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"r",
            "type":"int"
          },{
            "name":"g",
            "type":"int"
          },{
            "name":"b",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomPlayerColor",
        "description":"Set custom color for player (minimap, scoreboard, etc)"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iTeamAssignment",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetCustomTeamAssignment",
        "description":"Set custom team assignment for this player."
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iGold",
            "type":"int"
          },{
            "name":"bReliable",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetGold"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetHasRandomed"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iLastBuybackTime",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetLastBuybackTime"
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          },{
            "name":"hEntity",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetOverrideSelectionEntity",
        "description":"Set the forced selection entity for a player."
      },{
        "args":[{
            "name":"nPlayerID",
            "type":"int"
          },{
            "name":"nOtherPlayerID",
            "type":"int"
          },{
            "name":"nFlag",
            "type":"int"
          },{
            "name":"bState",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetUnitShareMaskForPlayer"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iCost",
            "type":"int"
          },{
            "name":"iReason",
            "type":"int"
          }],
        "returns":"void",
        "name":"SpendGold"
      },{
        "args":[{
            "name":"iPlayerID",
            "type":"int"
          },{
            "name":"iTeamNumber",
            "type":"int"
          },{
            "name":"desiredSlot",
            "type":"int"
          }],
        "returns":"void",
        "name":"UpdateTeamSlot"
      },{
        "args":[{
            "name":"pHeroFilename",
            "type":"string"
          },{
            "name":"bIgnoreUnrevealedPick",
            "type":"bool"
          }],
        "returns":"int",
        "name":"WhoSelectedHero"
      }],
    "kind":"class",
    "instance":"PlayerResource",
    "name":"CDOTA_PlayerResource",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[],
        "returns":"int",
        "name":"GetShopType",
        "description":"Get the DOTA_SHOP_TYPE"
      },{
        "args":[{
            "name":"eShopType",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetShopType",
        "description":"Set the DOTA_SHOP_TYPE."
      }],
    "kind":"class",
    "name":"CDOTA_ShopTrigger",
    "extend":"CBaseTrigger"
  },{
    "members":[{
        "args":[],
        "returns":"bool",
        "name":"IsEnabled",
        "description":"Returns whether the obstruction is currently active"
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          },{
            "name":"bForce",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetEnabled",
        "description":"Enable or disable the obstruction"
      }],
    "kind":"class",
    "name":"CDOTA_SimpleObstruction",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"void",
        "name":"UpgradeCourier",
        "description":"Upgrade the courier ( int param ) times."
      }],
    "kind":"class",
    "name":"CDOTA_Unit_Courier",
    "extend":"CDOTA_BaseNPC"
  },{
    "members":[{
        "args":[{
            "name":"bIsServerAuthoritative",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetServerAuthoritative",
        "description":"Determines whether response criteria is matched on server or client"
      }],
    "kind":"class",
    "name":"CDOTA_Unit_CustomGameAnnouncer",
    "extend":"CDOTA_BaseNPC"
  },{
    "members":[{
        "args":[],
        "returns":"handle",
        "name":"GetPartnerPortal"
      },{
        "args":[],
        "returns":"void",
        "name":"ResetPortal"
      },{
        "args":[{
            "name":"nRuneType",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetInvasionRuneType"
      },{
        "args":[{
            "name":"hPortal",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetPartnerPortal"
      },{
        "args":[{
            "name":"bActive",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetPortalActive"
      }],
    "kind":"class",
    "name":"CDOTA_Unit_Diretide_Portal",
    "extend":"CDOTA_BaseNPC_Building"
  },{
    "members":[{
        "args":[],
        "returns":"handle",
        "name":"GetHorn",
        "description":"Is the Nian horn?"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetTail",
        "description":"Is the Nian's tail broken?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHornAlive",
        "description":"Is the Nian's horn broken?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsTailAlive",
        "description":"Is the Nian's tail broken?"
      }],
    "kind":"class",
    "name":"CDOTA_Unit_Nian",
    "extend":"CDOTA_BaseNPC_Creature"
  },{
    "instance":"debugoverlay",
    "members":[{
        "args":[{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"float"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Axis",
        "description":"Draws an axis. Specify origin + orientation in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Box",
        "description":"Draws a world-space axis-aligned box. Specify bounds in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"BoxAngles",
        "description":"Draws an oriented box at the origin. Specify bounds in local space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Capsule",
        "description":"Draws a capsule. Specify base in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Circle",
        "description":"Draws a circle. Specify center in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"CircleScreenOriented",
        "description":"Draws a circle oriented to the screen. Specify center in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Cone",
        "description":"Draws a wireframe cone. Specify endpoint and direction in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Cross",
        "description":"Draws a screen-aligned cross. Specify origin in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Cross3D",
        "description":"Draws a world-aligned cross. Specify origin in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Cross3DOriented",
        "description":"Draws an oriented cross. Specify origin in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"DrawTickMarkedLine",
        "description":"Draws a dashed line. Specify endpoints in world space."
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"EntityAttachments",
        "description":"Draws the attachments of the entity"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"EntityAxis",
        "description":"Draws the axis of the entity origin"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"EntityBounds",
        "description":"Draws bounds of an entity"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"EntitySkeleton",
        "description":"Draws the skeleton of the entity"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"EntityText",
        "description":"Draws text on an entity"
      },{
        "args":[{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"FilledRect2D",
        "description":"Draws a screen-space filled 2D rectangle. Coordinates are in pixels."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"HorzArrow",
        "description":"Draws a horizontal arrow. Specify endpoints in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Line",
        "description":"Draws a line between two points"
      },{
        "args":[{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Line2D",
        "description":"Draws a line between two points in screenspace"
      },{
        "args":[],
        "returns":"void",
        "name":"PopDebugOverlayScope",
        "description":"Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "returns":"void",
        "name":"PushAndClearDebugOverlayScope",
        "description":"Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id."
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "returns":"void",
        "name":"PushDebugOverlayScope",
        "description":"Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "returns":"void",
        "name":"RemoveAllInScope",
        "description":"Removes all overlays marked with a specific identifier, regardless of their lifetime."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"SolidCone",
        "description":"Draws a solid cone. Specify endpoint and direction in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Sphere",
        "description":"Draws a wireframe sphere. Specify center in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"SweptBox",
        "description":"Draws a swept box. Specify endpoints in world space and the bounds in local space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Text",
        "description":"Draws 2D text. Specify origin in world space."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Texture",
        "description":"Draws a screen-space texture. Coordinates are in pixels."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Triangle",
        "description":"Draws a filled triangle. Specify vertices in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"VectorText3D",
        "description":"Draws 3D text. Specify origin + orientation in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"VertArrow",
        "description":"Draws a vertical arrow. Specify endpoints in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"YawArrow",
        "description":"Draws a arrow associated with a specific yaw. Specify endpoints in world space."
      }],
    "name":"CDebugOverlayScriptHelper",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "name":"hSubquest",
            "type":"handle"
          }],
        "returns":"void",
        "name":"AddSubquest",
        "description":"Add a subquest to this quest"
      },{
        "args":[],
        "returns":"void",
        "name":"CompleteQuest",
        "description":"Mark this quest complete"
      },{
        "args":[{
            "name":"nIndex",
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetSubquest",
        "description":"Finds a subquest from this quest by index"
      },{
        "args":[{
            "name":"pszName",
            "type":"string"
          }],
        "returns":"handle",
        "name":"GetSubquestByName",
        "description":"Finds a subquest from this quest by name"
      },{
        "args":[{
            "name":"hSubquest",
            "type":"handle"
          }],
        "returns":"void",
        "name":"RemoveSubquest",
        "description":"Remove a subquest from this quest"
      },{
        "args":[{
            "name":"pszString",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetTextReplaceString",
        "description":"Set the text replace string for this quest"
      },{
        "args":[{
            "name":"valueSlot",
            "type":"int"
          },{
            "name":"value",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetTextReplaceValue",
        "description":"Set a quest value"
      }],
    "kind":"class",
    "name":"CDotaQuest",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"CompleteSubquest",
        "description":"Mark this subquest complete"
      },{
        "args":[{
            "name":"pszString",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetTextReplaceString",
        "description":"Set the text replace string for this subquest"
      },{
        "args":[{
            "name":"valueSlot",
            "type":"int"
          },{
            "name":"value",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetTextReplaceValue",
        "description":"Set a subquest value"
      }],
    "kind":"class",
    "name":"CDotaSubquestBase",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetEnabled"
      },{
        "args":[{
            "name":"hBlocker",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetOtherBlocker"
      }],
    "kind":"class",
    "name":"CDotaTutorialNPCBlocker",
    "extend":"CBaseFlex"
  },{
    "instance":"Entities",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "returns":"handle",
        "name":"CreateByClassname",
        "description":"Creates an entity by classname"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"FindAllByClassname",
        "description":"Finds all entities by class name. Returns an array containing all the found entities."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "returns":"table",
        "name":"FindAllByClassnameWithin",
        "description":"Find entities by class name within a radius."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"FindAllByModel",
        "description":"Find entities by model name."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"FindAllByName",
        "description":"Find all entities by name. Returns an array containing all the found entities in it."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "returns":"table",
        "name":"FindAllByNameWithin",
        "description":"Find entities by name within a radius."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"FindAllByTarget",
        "description":"Find entities by targetname."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "returns":"table",
        "name":"FindAllInSphere",
        "description":"Find entities within a radius."
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          }],
        "returns":"handle",
        "name":"FindByClassname",
        "description":"Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "returns":"handle",
        "name":"FindByClassnameNearest",
        "description":"Find entities by class name nearest to a point."
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "returns":"handle",
        "name":"FindByClassnameWithin",
        "description":"Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          }],
        "returns":"handle",
        "name":"FindByModel",
        "description":"Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "returns":"handle",
        "name":"FindByModelWithin",
        "description":"Find entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          }],
        "returns":"handle",
        "name":"FindByName",
        "description":"Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "returns":"handle",
        "name":"FindByNameNearest",
        "description":"Find entities by name nearest to a point."
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "returns":"handle",
        "name":"FindByNameWithin",
        "description":"Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          }],
        "returns":"handle",
        "name":"FindByTarget",
        "description":"Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "returns":"handle",
        "name":"FindInSphere",
        "description":"Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[],
        "returns":"handle",
        "name":"First",
        "description":"Begin an iteration over the list of entities"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetLocalPlayer",
        "description":"Get the local player."
      },{
        "args":[{
            "type":"handle"
          }],
        "returns":"handle",
        "name":"Next",
        "description":"Continue an iteration over the list of entities, providing reference to a previously found entity"
      }],
    "name":"CEntities",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"void",
        "name":"ConnectOutput",
        "description":"Adds an I/O connection that will call the named function on this entity when the specified output fires."
      },{
        "args":[],
        "returns":"void",
        "name":"Destroy"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"void",
        "name":"DisconnectOutput",
        "description":"Removes a connected script function from an I/O event on this entity."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"void",
        "name":"DisconnectRedirectedOutput",
        "description":"Removes a connected script function from an I/O event on the passed entity."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          },{
            "type":"handle"
          },{
            "type":"table"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"FireOutput",
        "description":"Fire an entity output"
      },{
        "args":[],
        "returns":"string",
        "name":"GetClassname"
      },{
        "args":[],
        "returns":"string",
        "name":"GetDebugName",
        "description":"Get the entity name w/help if not defined (i.e. classname/etc)"
      },{
        "args":[],
        "returns":"ehandle",
        "name":"GetEntityHandle",
        "description":"Get the entity as an EHANDLE"
      },{
        "args":[],
        "returns":"int",
        "name":"GetEntityIndex"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"int",
        "name":"GetIntAttr",
        "description":"Get Integer Attribute"
      },{
        "args":[],
        "returns":"string",
        "name":"GetName"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetOrCreatePrivateScriptScope",
        "description":"Retrieve, creating if necessary, the private per-instance script-side data associated with an entity"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetOrCreatePublicScriptScope",
        "description":"Retrieve, creating if necessary, the public script-side data associated with an entity"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetPrivateScriptScope",
        "description":"Retrieve the private per-instance script-side data associated with an entity"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetPublicScriptScope",
        "description":"Retrieve the public script-side data associated with an entity"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"void",
        "name":"RedirectOutput",
        "description":"Adds an I/O connection that will call the named function on the passed entity when the specified output fires."
      },{
        "args":[],
        "returns":"void",
        "name":"RemoveSelf",
        "description":"Delete this entity"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetIntAttr",
        "description":"Set Integer Attribute"
      },{
        "args":[],
        "returns":"int",
        "name":"entindex"
      }],
    "name":"CEntityInstance",
    "kind":"class"
  },{
    "instance":"NativeFunctions",
    "members":[],
    "name":"CEntityScriptFramework",
    "kind":"class"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"SpawnEntity",
        "description":"Create an entity at the location of the maker"
      },{
        "args":[{
            "name":"hEntity",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SpawnEntityAtEntityOrigin",
        "description":"Create an entity at the location of a specified entity instance"
      },{
        "args":[{
            "name":"vecAlternateOrigin",
            "type":"Vector"
          },{
            "name":"vecAlternateAngles",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SpawnEntityAtLocation",
        "description":"Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)"
      },{
        "args":[{
            "name":"pszName",
            "type":"string"
          }],
        "returns":"void",
        "name":"SpawnEntityAtNamedEntityOrigin",
        "description":"Create an entity at the location of a named entity"
      }],
    "kind":"class",
    "name":"CEnvEntityMaker",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"flRange",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetFarRange",
        "description":"Set light maximum range"
      },{
        "args":[{
            "name":"flAtten",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetLinearAttenuation",
        "description":"Set light linear attenuation value"
      },{
        "args":[{
            "name":"flRange",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetNearRange",
        "description":"Set light minimum range"
      },{
        "args":[{
            "name":"flAtten",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetQuadraticAttenuation",
        "description":"Set light quadratic attenuation value"
      },{
        "args":[{
            "name":"bOn",
            "type":"bool"
          },{
            "name":"flIntensity",
            "type":"float"
          },{
            "name":"flNoise",
            "type":"float"
          },{
            "name":"nPlanes",
            "type":"int"
          },{
            "name":"flPlaneOffset",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetVolumetrics",
        "description":"Turn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset"
      }],
    "kind":"class",
    "name":"CEnvProjectedTexture",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"vMins",
            "type":"Vector"
          },{
            "name":"vMaxs",
            "type":"Vector"
          },{
            "name":"bClearRegion",
            "type":"bool"
          }],
        "returns":"void",
        "name":"AddRectangularBlocker",
        "description":"AddRectangularBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle"
      },{
        "args":[{
            "name":"vMins",
            "type":"Vector"
          },{
            "name":"vMaxs",
            "type":"Vector"
          },{
            "name":"bClearRegion",
            "type":"bool"
          }],
        "returns":"void",
        "name":"AddRectangularOutlineBlocker",
        "description":"AddRectangularOutlineBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle outline"
      }],
    "kind":"class",
    "name":"CFoWBlockerRegion",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"tok",
            "type":"utlstringtoken"
          },{
            "name":"vDefault",
            "type":"Vector"
          }],
        "returns":"Vector",
        "name":"QueryColor",
        "description":"Query color data for this key"
      },{
        "args":[{
            "name":"tok",
            "type":"utlstringtoken"
          },{
            "name":"flDefault",
            "type":"float"
          }],
        "returns":"float",
        "name":"QueryFloat",
        "description":"Query float data for this key"
      },{
        "args":[{
            "name":"tok",
            "type":"utlstringtoken"
          },{
            "name":"nDefault",
            "type":"int"
          }],
        "returns":"int",
        "name":"QueryInt",
        "description":"Query int data for this key"
      },{
        "args":[{
            "name":"tok",
            "type":"utlstringtoken"
          },{
            "name":"flDefault",
            "type":"float"
          }],
        "returns":"float",
        "name":"QueryNumber",
        "description":"Query number data for this key"
      },{
        "args":[{
            "name":"tok",
            "type":"utlstringtoken"
          },{
            "name":"pDefault",
            "type":"string"
          }],
        "returns":"string",
        "name":"QueryString",
        "description":"Query string data for this key"
      },{
        "args":[{
            "name":"tok",
            "type":"utlstringtoken"
          },{
            "name":"vDefault",
            "type":"Vector"
          }],
        "returns":"Vector",
        "name":"QueryVector",
        "description":"Query vector data for this key"
      }],
    "kind":"class",
    "name":"CInfoData",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[],
        "returns":"bool",
        "name":"IsEnabled",
        "description":"Returns whether the object is currently active"
      },{
        "args":[{
            "name":"bEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetEnabled",
        "description":"Enable or disable the obstruction"
      }],
    "kind":"class",
    "name":"CInfoPlayerStartDota",
    "extend":"CPointEntity"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"HideWorldLayer",
        "description":"Hides this layer"
      },{
        "args":[],
        "returns":"void",
        "name":"ShowWorldLayer",
        "description":"Shows this layer"
      }],
    "kind":"class",
    "name":"CInfoWorldLayer",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"hActivator",
            "type":"handle"
          },{
            "name":"hCaller",
            "type":"handle"
          }],
        "returns":"void",
        "name":"Trigger",
        "description":"Trigger( hActivator, hCaller ) : Triggers the logic_relay"
      }],
    "kind":"class",
    "name":"CLogicRelay",
    "extend":"CBaseEntity"
  },{
    "members":[],
    "kind":"class",
    "name":"CLogicScript",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"pszTagName",
            "type":"string"
          }],
        "returns":"bool",
        "name":"HasTag",
        "description":"Does this volume have the given tag."
      }],
    "kind":"class",
    "name":"CMarkupVolumeTagged",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"void",
        "name":"AddOutput",
        "description":"Add an output"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"Init",
        "description":"Initialize with number of outputs"
      }],
    "name":"CNativeOutputs",
    "kind":"class"
  },{
    "members":[],
    "kind":"class",
    "name":"CParticleSystem",
    "extend":"CBaseModelEntity"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"DisableMotion",
        "description":"Disable motion for the prop"
      },{
        "args":[],
        "returns":"void",
        "name":"EnableMotion",
        "description":"Enable motion for the prop"
      },{
        "args":[{
            "name":"bIsDynamicVsDynamicContinuousEnabled",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetDynamicVsDynamicContinuous",
        "description":"Enable/disable dynamic vs dynamic continuous collision traces"
      }],
    "kind":"class",
    "name":"CPhysicsProp",
    "extend":"CBaseAnimating"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"AcceptUserInput",
        "description":"Tells the panel to accept user input."
      },{
        "args":[{
            "name":"pszClasses",
            "type":"string"
          }],
        "returns":"void",
        "name":"AddCSSClasses",
        "description":"Adds CSS class(es) to the panel"
      },{
        "args":[],
        "returns":"void",
        "name":"IgnoreUserInput",
        "description":"Tells the panel to ignore user input."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsGrabbable",
        "description":"Returns whether this entity is grabbable."
      },{
        "args":[{
            "name":"pszClasses",
            "type":"string"
          }],
        "returns":"void",
        "name":"RemoveCSSClasses",
        "description":"Remove CSS class(es) from the panel"
      }],
    "kind":"class",
    "name":"CPointClientUIWorldPanel",
    "extend":"CBaseModelEntity"
  },{
    "members":[],
    "kind":"class",
    "name":"CPointEntity",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"DeleteCreatedSpawnGroups",
        "description":"DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this."
      },{
        "args":[],
        "returns":"void",
        "name":"ForceSpawn",
        "description":"ForceSpawn() : Spawns all of the entities the point_template is pointing at."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetSpawnedEntities",
        "description":"GetSpawnedEntities() : Get the list of the most recent spawned entities"
      },{
        "args":[{
            "name":"hCallbackFunc",
            "type":"handle"
          },{
            "name":"hCallbackScope",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetSpawnCallback",
        "description":"SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array."
      }],
    "kind":"class",
    "name":"CPointTemplate",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"pMessage",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetMessage",
        "description":"Set the message on this entity."
      }],
    "kind":"class",
    "name":"CPointWorldText",
    "extend":"CBaseModelEntity"
  },{
    "members":[{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"AddBroadcastTeamTarget",
        "description":"Adds a team (by index) to the broadcast list"
      },{
        "args":[],
        "returns":"void",
        "name":"Cancel",
        "description":"Cancel scene playback"
      },{
        "args":[],
        "returns":"float",
        "name":"EstimateLength",
        "description":"Returns length of this scene in seconds."
      },{
        "args":[],
        "returns":"handle",
        "name":"FindCamera",
        "description":"Get the camera"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"handle",
        "name":"FindNamedEntity",
        "description":"given an entity reference, such as !target, get actual entity from scene object"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPaused",
        "description":"If this scene is currently paused."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPlayingBack",
        "description":"If this scene is currently playing."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"bool",
        "name":"LoadSceneFromString",
        "description":"given a dummy scene name and a vcd string, load the scene"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"RemoveBroadcastTeamTarget",
        "description":"Removes a team (by index) from the broadcast list"
      },{
        "args":[{
            "type":"handle"
          }],
        "returns":"void",
        "name":"Start",
        "description":"Start scene playback, takes activatorEntity as param"
      }],
    "kind":"class",
    "name":"CSceneEntity",
    "extend":"CBaseEntity"
  },{
    "members":[{
        "args":[{
            "type":"handle"
          }],
        "returns":"bool",
        "name":"Send",
        "description":"Send a HTTP request."
      },{
        "args":[{
            "type":"unsigned"
          }],
        "returns":"bool",
        "name":"SetHTTPRequestAbsoluteTimeoutMS",
        "description":"Set the total timeout on the request."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"bool",
        "name":"SetHTTPRequestGetOrPostParameter",
        "description":"Set a POST or GET parameter on the request."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"bool",
        "name":"SetHTTPRequestHeaderValue",
        "description":"Set a header value on the request."
      },{
        "args":[{
            "type":"unsigned"
          }],
        "returns":"bool",
        "name":"SetHTTPRequestNetworkActivityTimeout",
        "description":"Set the network timeout on the request - this timer is reset when any data is received."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"bool",
        "name":"SetHTTPRequestRawPostBody",
        "description":"Set the literal body of a post - invalid after setting a post parameter."
      }],
    "name":"CScriptHTTPRequest",
    "kind":"class"
  },{
    "instance":"HeroList",
    "members":[{
        "args":[],
        "returns":"table",
        "name":"GetAllHeroes",
        "description":"Returns all the heroes in the world"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"handle",
        "name":"GetHero",
        "description":"Get the Nth hero in the Hero List"
      },{
        "args":[],
        "returns":"int",
        "name":"GetHeroCount",
        "description":"Returns the number of heroes in the world"
      }],
    "name":"CScriptHeroList",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetValue",
        "description":"Reads a spawn key"
      }],
    "name":"CScriptKeyValues",
    "kind":"class"
  },{
    "instance":"ParticleManager",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          }],
        "returns":"int",
        "name":"CreateParticle",
        "description":"Creates a new particle effect"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"handle"
          }],
        "returns":"int",
        "name":"CreateParticleForPlayer",
        "description":"Creates a new particle effect that only plays for the specified player"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"int"
          }],
        "returns":"int",
        "name":"CreateParticleForTeam",
        "description":"Creates a new particle effect that only plays for the specified team"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"bool"
          }],
        "returns":"void",
        "name":"DestroyParticle",
        "description":"(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"string",
        "name":"GetParticleReplacement"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"ReleaseParticleIndex",
        "description":"Frees the specified particle index"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetParticleAlwaysSimulate"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetParticleControl",
        "description":"Set the control point data for a control on a particle effect"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetParticleControlEnt"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetParticleControlFallback",
        "description":"(int iIndex, int iPoint, Vector vecPosition)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetParticleControlForward",
        "description":"(int nFXIndex, int nPoint, vForward)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetParticleControlOrientation",
        "description":"(int nFXIndex, int nPoint, vForward, vRight, vUp) - Set the orientation for a control on a particle effect (NOTE: This is left handed -- bad!!)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetParticleControlOrientationFLU",
        "description":"(int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetParticleFoWProperties",
        "description":"int nfxindex, int nPoint, int nPoint2, float flRadius"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"bool"
          }],
        "returns":"bool",
        "name":"SetParticleShouldCheckFoW",
        "description":"int nfxindex, bool bCheckFoW"
      }],
    "name":"CScriptParticleManager",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"AddResource",
        "description":"Precaches a specific resource"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetValue",
        "description":"Reads a spawn key"
      }],
    "name":"CScriptPrecacheContext",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "name":"flMinVal",
            "type":"float"
          },{
            "name":"flMaxVal",
            "type":"float"
          }],
        "returns":"float",
        "name":"RandomFloat"
      },{
        "args":[{
            "name":"flMinVal",
            "type":"float"
          },{
            "name":"flMaxVal",
            "type":"float"
          },{
            "name":"flExponent",
            "type":"float"
          }],
        "returns":"float",
        "name":"RandomFloatExp"
      },{
        "args":[{
            "name":"iMinVal",
            "type":"int"
          },{
            "name":"iMaxVal",
            "type":"int"
          }],
        "returns":"int",
        "name":"RandomInt"
      },{
        "args":[{
            "name":"iPercentage",
            "type":"int"
          }],
        "returns":"bool",
        "name":"RollPercentage"
      }],
    "name":"CScriptUniformRandomStream",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "name":"flAddAmount",
            "type":"float"
          }],
        "returns":"void",
        "name":"AddDamage"
      },{
        "args":[{
            "name":"bitsDamageType",
            "type":"int"
          }],
        "returns":"void",
        "name":"AddDamageType"
      },{
        "args":[],
        "returns":"bool",
        "name":"AllowFriendlyFire"
      },{
        "args":[],
        "returns":"bool",
        "name":"CanBeBlocked"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAmmoType"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetAttacker"
      },{
        "args":[],
        "returns":"float",
        "name":"GetDamage"
      },{
        "args":[],
        "returns":"int",
        "name":"GetDamageCustom"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetDamageForce"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetDamagePosition"
      },{
        "args":[],
        "returns":"float",
        "name":"GetDamageTaken"
      },{
        "args":[],
        "returns":"int",
        "name":"GetDamageType"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetInflictor"
      },{
        "args":[],
        "returns":"float",
        "name":"GetMaxDamage"
      },{
        "args":[],
        "returns":"float",
        "name":"GetOriginalDamage"
      },{
        "args":[],
        "returns":"float",
        "name":"GetRadius"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetReportedPosition"
      },{
        "args":[],
        "returns":"float",
        "name":"GetStabilityDamage"
      },{
        "args":[{
            "name":"bitsToTest",
            "type":"int"
          }],
        "returns":"bool",
        "name":"HasDamageType"
      },{
        "args":[{
            "name":"flScaleAmount",
            "type":"float"
          }],
        "returns":"void",
        "name":"ScaleDamage"
      },{
        "args":[{
            "name":"bAllow",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetAllowFriendlyFire"
      },{
        "args":[{
            "name":"iAmmoType",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetAmmoType"
      },{
        "args":[{
            "name":"hAttacker",
            "type":"handle"
          }],
        "returns":"void",
        "name":"SetAttacker"
      },{
        "args":[{
            "name":"bBlock",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetCanBeBlocked"
      },{
        "args":[{
            "name":"flDamage",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetDamage"
      },{
        "args":[{
            "name":"iDamageCustom",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetDamageCustom"
      },{
        "args":[{
            "name":"damageForce",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetDamageForce"
      },{
        "args":[{
            "name":"damagePosition",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetDamagePosition"
      },{
        "args":[{
            "name":"nDamageTaken",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetDamageTaken"
      },{
        "args":[{
            "name":"bitsDamageType",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetDamageType"
      },{
        "args":[{
            "name":"flMaxDamage",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetMaxDamage"
      },{
        "args":[{
            "name":"flOriginalDamage",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetOriginalDamage"
      },{
        "args":[{
            "name":"fRadius",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetRadius"
      },{
        "args":[{
            "name":"reportedPosition",
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetReportedPosition"
      },{
        "args":[{
            "name":"flStabilityDamage",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetStabilityDamage"
      }],
    "name":"CTakeDamageInfo",
    "kind":"class"
  },{
    "instance":"Convars",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetBool",
        "description":"GetBool(name) : returns the convar as a boolean flag."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetCommandClient",
        "description":"GetCommandClient() : returns the player who issued this console command."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetDOTACommandClient",
        "description":"GetDOTACommandClient() : returns the DOTA player who issued this console command."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetFloat",
        "description":"GetFloat(name) : returns the convar as a float. May return null if no such convar."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetInt",
        "description":"GetInt(name) : returns the convar as an int. May return null if no such convar."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetStr",
        "description":"GetStr(name) : returns the convar as a string. May return null if no such convar."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"RegisterCommand",
        "description":"RegisterCommand(name, fn, helpString, flags) : register a console command."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"RegisterConvar",
        "description":"RegisterConvar(name, defaultValue, helpString, flags): register a new console variable."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetBool",
        "description":"SetBool(name, val) : sets the value of the convar to the bool."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetFloat",
        "description":"SetFloat(name, val) : sets the value of the convar to the float."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetInt",
        "description":"SetInt(name, val) : sets the value of the convar to the int."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"void",
        "name":"SetStr",
        "description":"SetStr(name, val) : sets the value of the convar to the string."
      }],
    "name":"Convars",
    "kind":"class"
  },{
    "instance":"GlobalSys",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"CommandLineCheck",
        "description":"CommandLineCheck(name) : returns true if the command line param was used, otherwise false."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"float"
          }],
        "returns":"table",
        "name":"CommandLineFloat",
        "description":"CommandLineFloat(name) : returns the command line param as a float."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"table",
        "name":"CommandLineInt",
        "description":"CommandLineInt(name) : returns the command line param as an int."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"table",
        "name":"CommandLineStr",
        "description":"CommandLineStr(name) : returns the command line param as a string."
      }],
    "name":"GlobalSys",
    "kind":"class"
  },{
    "instance":"GridNav",
    "members":[{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "returns":"bool",
        "name":"CanFindPath",
        "description":"Determine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd)"
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"bool"
          }],
        "returns":"void",
        "name":"DestroyTreesAroundPoint",
        "description":"Destroy all trees in the area(vPosition, flRadius, bFullCollision"
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "returns":"float",
        "name":"FindPathLength",
        "description":"Find a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd )"
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"bool"
          }],
        "returns":"table",
        "name":"GetAllTreesAroundPoint",
        "description":"Returns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision)."
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"float",
        "name":"GridPosToWorldCenterX",
        "description":"Get the X position of the center of a given X index"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"float",
        "name":"GridPosToWorldCenterY",
        "description":"Get the Y position of the center of a given Y index"
      },{
        "args":[{
            "type":"Vector"
          }],
        "returns":"bool",
        "name":"IsBlocked",
        "description":"Checks whether the given position is blocked"
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"bool"
          }],
        "returns":"bool",
        "name":"IsNearbyTree",
        "description":"(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point"
      },{
        "args":[{
            "type":"Vector"
          }],
        "returns":"bool",
        "name":"IsTraversable",
        "description":"Checks whether the given position is traversable"
      },{
        "args":[],
        "returns":"void",
        "name":"RegrowAllTrees",
        "description":"Causes all trees in the map to regrow"
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"int",
        "name":"WorldToGridPosX",
        "description":"Get the X index of a given world X position"
      },{
        "args":[{
            "type":"float"
          }],
        "returns":"int",
        "name":"WorldToGridPosY",
        "description":"Get the Y index of a given world Y position"
      }],
    "name":"GridNav",
    "kind":"class"
  },{
    "instance":"ProjectileManager",
    "members":[{
        "args":[{
            "type":"handle"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"ChangeTrackingProjectileSpeed",
        "description":"Update speed"
      },{
        "args":[{
            "type":"handle"
          }],
        "returns":"int",
        "name":"CreateLinearProjectile",
        "description":"Creates a linear projectile and returns the projectile ID"
      },{
        "args":[{
            "type":"handle"
          }],
        "returns":"int",
        "name":"CreateTrackingProjectile",
        "description":"Creates a tracking projectile"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"DestroyLinearProjectile",
        "description":"Destroys the linear projectile matching the argument ID"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"DestroyTrackingProjectile",
        "description":"Destroy a tracking projectile early"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"Vector",
        "name":"GetLinearProjectileLocation",
        "description":"Returns current location of projectile"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"float",
        "name":"GetLinearProjectileRadius",
        "description":"Returns current radius of projectile"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"Vector",
        "name":"GetLinearProjectileVelocity",
        "description":"Returns a vector representing the current velocity of the projectile."
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"Vector",
        "name":"GetTrackingProjectileLocation",
        "description":"Returns current location of projectile"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"bool",
        "name":"IsValidProjectile",
        "description":"Is this a valid projectile?"
      },{
        "args":[{
            "type":"handle"
          }],
        "returns":"void",
        "name":"ProjectileDodge",
        "description":"Makes the specified unit dodge projectiles"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"UpdateLinearProjectileDirection",
        "description":"Update velocity"
      }],
    "name":"ProjectileManager",
    "kind":"class"
  },{
    "instance":"SteamInfo",
    "members":[{
        "args":[],
        "returns":"bool",
        "name":"IsPublicUniverse",
        "description":"Is the script connected to the public Steam universe"
      }],
    "name":"SteamInfo",
    "kind":"class"
  }]
$> cl_script_reload
Initializing script VM...
...done
[{
    "returns":"float",
    "args":[{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"AngleDiff",
    "description":"Returns the number of degrees difference between two yaw angles"
  },{
    "returns":"Vector",
    "args":[{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"AnglesToVector",
    "description":"Generate a vector given a QAngles"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"AppendToLogFile",
    "description":"AppendToLogFile is deprecated. Print to the console for logging instead."
  },{
    "returns":"Quaternion",
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"AxisAngleToQuaternion",
    "description":"(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis"
  },{
    "returns":"Vector",
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"CalcClosestPointOnEntityOBB",
    "description":"Compute the closest point on the OBB of an entity."
  },{
    "returns":"float",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CalcDistanceBetweenEntityOBB",
    "description":"Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "returns":"float",
    "name":"CalcDistanceToLineSegment2D",
    "kind":"function"
  },{
    "returns":"void",
    "args":[{
        "type":"ehandle"
      }],
    "kind":"function",
    "name":"CancelEntityIOEvents",
    "description":"Create all I/O events for a particular entity"
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateEffect",
    "description":"Pass table - Inputs: entity, effect"
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"CreateHTTPRequest",
    "description":"Create an HTTP request."
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"CreateHTTPRequestScriptVM",
    "description":"Create an HTTP request."
  },{
    "returns":"handle",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"CreateUniformRandomStream",
    "description":"( iSeed ) - Creates a separate random number stream."
  },{
    "returns":"Vector",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"CrossVectors",
    "description":"(vector,vector) cross product between two vectors"
  },{
    "returns":"void",
    "args":[],
    "kind":"function",
    "name":"DebugBreak",
    "description":"Breaks in the debugger"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawBox",
    "description":"Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawBoxDirection",
    "description":"Draw a debug forward box (cent, min, max, forward, vRgb, a, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawCircle",
    "description":"Draw a debug circle (center, vRgb, a, rad, ztest, duration)"
  },{
    "returns":"void",
    "args":[],
    "kind":"function",
    "name":"DebugDrawClear",
    "description":"Try to clear all the debug overlay info"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawLine",
    "description":"Draw a debug overlay line (origin, target, r, g, b, ztest, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawLine_vCol",
    "description":"Draw a debug line using color vec (start, end, vRgb, a, ztest, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawScreenTextLine",
    "description":"Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawSphere",
    "description":"Draw a debug sphere (center, vRgb, a, rad, ztest, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"string"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawText",
    "description":"Draw text in 3d (origin, text, bViewCheck, duration)"
  },{
    "returns":"void",
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"DebugScreenTextPretty",
    "description":"Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)"
  },{
    "returns":"bool",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DoIncludeScript",
    "description":"Execute a script (internal)"
  },{
    "returns":"void",
    "args":[{
        "type":"bool"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"DoScriptAssert",
    "description":"#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog."
  },{
    "returns":"string",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"DoUniqueString",
    "description":"#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"EmitSoundOn",
    "description":"Play named sound on Entity"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"EmitSoundOnClient",
    "description":"Play named sound only on the client for the passed in player"
  },{
    "returns":"handle",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"EntIndexToHScript",
    "description":"Turn an entity index integer to an HScript representing that entity's script instance."
  },{
    "returns":"float",
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"ExponentialDecay",
    "description":"Smooth curve decreasing slower as it approaches zero"
  },{
    "returns":"void",
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"FireEntityIOInputNameOnly",
    "description":"Fire Entity's Action Input w/no data"
  },{
    "returns":"void",
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"FireEntityIOInputString",
    "description":"Fire Entity's Action Input with passed String - you own the memory"
  },{
    "returns":"void",
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"FireEntityIOInputVec",
    "description":"Fire Entity's Action Input with passed Vector - you own the memory"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"FireGameEvent",
    "description":"Fire a game event."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"FireGameEventLocal",
    "description":"Fire a game event without broadcasting to the client."
  },{
    "returns":"float",
    "args":[],
    "kind":"function",
    "name":"FrameTime",
    "description":"Get the time spent on the server in the last frame"
  },{
    "returns":"table",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetAbilityKeyValuesByName",
    "description":"Get ability data by ability name."
  },{
    "returns":"string",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetAbilityTextureNameForAbility",
    "description":"Gets the ability texture name for an ability"
  },{
    "returns":"int",
    "args":[],
    "kind":"function",
    "name":"GetActiveSpawnGroupHandle",
    "description":"Returns the currently active spawn group handle"
  },{
    "returns":"int",
    "args":[],
    "kind":"function",
    "name":"GetFrameCount",
    "description":"Returns the engines current frame count"
  },{
    "returns":"handle",
    "args":[],
    "kind":"function",
    "name":"GetListenServerHost",
    "description":"Get the local player on a listen server."
  },{
    "returns":"int",
    "args":[],
    "kind":"function",
    "name":"GetLocalPlayerID",
    "description":"Get the local player ID."
  },{
    "returns":"int",
    "args":[],
    "kind":"function",
    "name":"GetLocalPlayerTeam",
    "description":"Get the local player team."
  },{
    "returns":"string",
    "args":[],
    "kind":"function",
    "name":"GetMapName",
    "description":"Get the name of the map."
  },{
    "returns":"float",
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetMaxOutputDelay",
    "description":"Get the longest delay for all events attached to an output"
  },{
    "returns":"Vector",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"GetPhysAngularVelocity",
    "description":"Get Angular Velocity for VPHYS or normal object. Returns a vector of the axis of rotation, multiplied by the degrees of rotation per second."
  },{
    "returns":"Vector",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"GetPhysVelocity",
    "description":"Get Velocity for VPHYS or normal object"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"InitLogFile",
    "description":"InitLogFile is deprecated. Print to the console for logging instead."
  },{
    "returns":"bool",
    "args":[],
    "kind":"function",
    "name":"IsClient",
    "description":"Returns true if this is lua running from the client.dll."
  },{
    "returns":"bool",
    "args":[],
    "kind":"function",
    "name":"IsDedicatedServer",
    "description":"Returns true if this server is a dedicated server."
  },{
    "returns":"bool",
    "args":[],
    "kind":"function",
    "name":"IsInToolsMode",
    "description":"Returns true if this is lua running within tools mode."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"IsMarkedForDeletion",
    "description":"Returns true if the entity is valid and marked for deletion."
  },{
    "returns":"bool",
    "args":[],
    "kind":"function",
    "name":"IsServer",
    "description":"Returns true if this is lua running from the server.dll."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"IsValidEntity",
    "description":"Checks to see if the given hScript is a valid entity"
  },{
    "returns":"Vector",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"LerpVectors",
    "description":"(vector,vector,float) lerp between two vectors by a float factor returning new vector"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"LinkLuaModifier",
    "description":"Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType)."
  },{
    "returns":"int",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"ListenToGameEvent",
    "description":"Register as a listener for a game event from script."
  },{
    "returns":"table",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"LoadKeyValues",
    "description":"Creates a table from the specified keyvalues text file"
  },{
    "returns":"table",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"LoadKeyValuesFromString",
    "description":"Creates a table from the specified keyvalues string"
  },{
    "returns":"table",
    "args":[],
    "kind":"function",
    "name":"LocalTime",
    "description":"Get the current local time"
  },{
    "returns":"int",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"MakeStringToken",
    "description":"Checks to see if the given hScript is a valid entity"
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"ManuallyTriggerSpawnGroupCompletion",
    "description":"Triggers the creation of entities in a manually-completed spawn group"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"Msg",
    "description":"Print a message"
  },{
    "returns":"handle",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"PlayerInstanceFromIndex",
    "description":"Get a script instance of a player by index."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheEntityFromTable",
    "description":"Precache an entity from KeyValues in table"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheEntityListFromTable",
    "description":"Precache a list of entity KeyValues tables"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"PrintLinkedConsoleMessage",
    "description":"Print a console message with a linked console command"
  },{
    "returns":"float",
    "args":[{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"RandomFloat",
    "description":"Get a random float within a range"
  },{
    "returns":"int",
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"RandomInt",
    "description":"Get a random int within a range"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"RegisterSpawnGroupFilterProxy",
    "description":"Create a C proxy for a script-based spawn group filter"
  },{
    "returns":"void",
    "args":[],
    "kind":"function",
    "name":"ReloadMOTD",
    "description":"Reloads the MotD file"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"RemoveSpawnGroupFilterProxy",
    "description":"Remove the C proxy for a script-based spawn group filter"
  },{
    "returns":"QAngle",
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"RotateOrientation",
    "description":"Rotate a QAngle by another QAngle."
  },{
    "returns":"Vector",
    "args":[{
        "type":"Vector"
      },{
        "type":"QAngle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"RotatePosition",
    "description":"Rotate a Vector around a point."
  },{
    "returns":"Quaternion",
    "args":[{
        "type":"Quaternion"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"RotateQuaternionByAxisAngle",
    "description":"(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis"
  },{
    "returns":"QAngle",
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"RotationDelta",
    "description":"Find the delta between two QAngles."
  },{
    "returns":"Vector",
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"RotationDeltaAsAngularVelocity",
    "description":"converts delta QAngle to an angular velocity Vector"
  },{
    "returns":"void",
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"ScreenShake",
    "description":"Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"SendToConsole",
    "description":"Send a string to the console as a client command"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"SetOpvarFloatAll",
    "description":"Sets an opvar value for all players"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SetOpvarFloatPlayer",
    "description":"Sets an opvar value for a single player"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"SetPhysAngularVelocity",
    "description":"Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"SetQuestName",
    "description":"Set the current quest name."
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"SetQuestPhase",
    "description":"Set the current quest phase."
  },{
    "returns":"void",
    "args":[{
        "type":"ehandle"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"SetRenderingEnabled",
    "description":"Set rendering on/off for an ehandle"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityFromTableAsynchronous",
    "description":"Asynchronously spawns a single entity from a table"
  },{
    "returns":"handle",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityFromTableSynchronous",
    "description":"Synchronously spawns a single entity from a table"
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      },{
        "type":"bool"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityGroupFromTable",
    "description":"Hierarchically spawn an entity group from a set of spawn tables."
  },{
    "returns":"int",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityListFromTableAsynchronous",
    "description":"Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete"
  },{
    "returns":"handle",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityListFromTableSynchronous",
    "description":"Synchronously spawn an entity group from a list of spawn tables."
  },{
    "returns":"Quaternion",
    "args":[{
        "type":"Quaternion"
      },{
        "type":"Quaternion"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"SplineQuaternions",
    "description":"(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]"
  },{
    "returns":"Vector",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"SplineVectors",
    "description":"(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StartSoundEvent",
    "description":"Start a sound event"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"StartSoundEventFromPosition",
    "description":"Start a sound event from position"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"StartSoundEventFromPositionReliable",
    "description":"Start a sound event from position with reliable delivery"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"StartSoundEventFromPositionUnreliable",
    "description":"Start a sound event from position with optional delivery"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StartSoundEventReliable",
    "description":"Start a sound event with reliable delivery"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StartSoundEventUnreliable",
    "description":"Start a sound event with optional delivery"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"StopEffect",
    "description":"Pass entity and effect name"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StopListeningToAllGameEvents",
    "description":"Stop listening to all game events within a specific context."
  },{
    "returns":"bool",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"StopListeningToGameEvent",
    "description":"Stop listening to a particular game event."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StopSoundEvent",
    "description":"Stops a sound event with optional delivery"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StopSoundOn",
    "description":"Stop named sound on Entity"
  },{
    "returns":"float",
    "args":[],
    "kind":"function",
    "name":"Time",
    "description":"Get the current server time"
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"TraceCollideable",
    "description":"Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal"
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"TraceHull",
    "description":"Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"TraceLine",
    "description":"Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UTIL_Remove",
    "description":"Removes the specified entity"
  },{
    "returns":"void",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UTIL_RemoveImmediate",
    "description":"Immediately removes the specified entity"
  },{
    "returns":"int",
    "args":[{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"UnitFilter",
    "description":"Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam"
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"UnloadSpawnGroup",
    "description":"Unload a spawn group by name"
  },{
    "returns":"void",
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"UnloadSpawnGroupByHandle",
    "description":"Unload a spawn group by handle"
  },{
    "returns":"QAngle",
    "args":[{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"VectorToAngles",
    "description":"Get Qangles (with no roll) for a Vector."
  },{
    "returns":"void",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"Warning",
    "description":"Print a warning"
  },{
    "returns":"float",
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"cvar_getf",
    "description":"Gets the value of the given cvar, as a float."
  },{
    "returns":"bool",
    "args":[{
        "type":"string"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"cvar_setf",
    "description":"Sets the value of the given cvar, as a float."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"rr_AddDecisionRule",
    "description":"Add a rule to the decision database."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"rr_CommitAIResponse",
    "description":"Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)"
  },{
    "returns":"handle",
    "args":[],
    "kind":"function",
    "name":"rr_GetResponseTargets",
    "description":"Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }."
  },{
    "returns":"bool",
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"rr_QueryBestResponse",
    "description":"Params: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found)."
  },{
    "enum":"AbilityLearnResult_t",
    "value":2,
    "kind":"constant",
    "name":"ABILITY_CANNOT_BE_UPGRADED_AT_MAX"
  },{
    "enum":"AbilityLearnResult_t",
    "value":1,
    "kind":"constant",
    "name":"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE"
  },{
    "enum":"AbilityLearnResult_t",
    "value":3,
    "kind":"constant",
    "name":"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL"
  },{
    "enum":"AbilityLearnResult_t",
    "value":0,
    "kind":"constant",
    "name":"ABILITY_CAN_BE_UPGRADED"
  },{
    "enum":"AbilityLearnResult_t",
    "value":4,
    "kind":"constant",
    "name":"ABILITY_NOT_LEARNABLE"
  },{
    "enum":"ABILITY_TYPES",
    "value":2,
    "kind":"constant",
    "name":"ABILITY_TYPE_ATTRIBUTES"
  },{
    "enum":"ABILITY_TYPES",
    "value":0,
    "kind":"constant",
    "name":"ABILITY_TYPE_BASIC"
  },{
    "enum":"ABILITY_TYPES",
    "value":3,
    "kind":"constant",
    "name":"ABILITY_TYPE_HIDDEN"
  },{
    "enum":"ABILITY_TYPES",
    "value":1,
    "kind":"constant",
    "name":"ABILITY_TYPE_ULTIMATE"
  },{
    "value":1791,
    "kind":"constant",
    "name":"ACD_DOTA_IDLE"
  },{
    "value":1,
    "kind":"constant",
    "name":"ACTIVATE_TYPE_DATAUPDATE_CREATION"
  },{
    "value":0,
    "kind":"constant",
    "name":"ACTIVATE_TYPE_INITIAL_CREATION"
  },{
    "value":2,
    "kind":"constant",
    "name":"ACTIVATE_TYPE_ONRESTORE"
  },{
    "value":137,
    "kind":"constant",
    "name":"ACT_180_LEFT"
  },{
    "value":138,
    "kind":"constant",
    "name":"ACT_180_RIGHT"
  },{
    "value":139,
    "kind":"constant",
    "name":"ACT_90_LEFT"
  },{
    "value":140,
    "kind":"constant",
    "name":"ACT_90_RIGHT"
  },{
    "value":48,
    "kind":"constant",
    "name":"ACT_ALIEN_BURROW_IDLE"
  },{
    "value":49,
    "kind":"constant",
    "name":"ACT_ALIEN_BURROW_OUT"
  },{
    "value":968,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_BACK"
  },{
    "value":967,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_FORWARD"
  },{
    "value":969,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_LEFT"
  },{
    "value":970,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_RIGHT"
  },{
    "value":71,
    "kind":"constant",
    "name":"ACT_ARM"
  },{
    "value":178,
    "kind":"constant",
    "name":"ACT_BARNACLE_CHEW"
  },{
    "value":177,
    "kind":"constant",
    "name":"ACT_BARNACLE_CHOMP"
  },{
    "value":175,
    "kind":"constant",
    "name":"ACT_BARNACLE_HIT"
  },{
    "value":176,
    "kind":"constant",
    "name":"ACT_BARNACLE_PULL"
  },{
    "value":64,
    "kind":"constant",
    "name":"ACT_BIG_FLINCH"
  },{
    "value":384,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_BACK"
  },{
    "value":385,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_BACK_ENTRY"
  },{
    "value":386,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_BACK_EXIT"
  },{
    "value":381,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_LEFT"
  },{
    "value":382,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_LEFT_ENTRY"
  },{
    "value":383,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_LEFT_EXIT"
  },{
    "value":394,
    "kind":"constant",
    "name":"ACT_BUSY_QUEUE"
  },{
    "value":390,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_CHAIR"
  },{
    "value":391,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_CHAIR_ENTRY"
  },{
    "value":392,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_CHAIR_EXIT"
  },{
    "value":387,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_GROUND"
  },{
    "value":388,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_GROUND_ENTRY"
  },{
    "value":389,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_GROUND_EXIT"
  },{
    "value":393,
    "kind":"constant",
    "name":"ACT_BUSY_STAND"
  },{
    "value":35,
    "kind":"constant",
    "name":"ACT_CLIMB_DISMOUNT"
  },{
    "value":34,
    "kind":"constant",
    "name":"ACT_CLIMB_DOWN"
  },{
    "value":33,
    "kind":"constant",
    "name":"ACT_CLIMB_UP"
  },{
    "value":110,
    "kind":"constant",
    "name":"ACT_COMBAT_IDLE"
  },{
    "value":3,
    "kind":"constant",
    "name":"ACT_COVER"
  },{
    "value":5,
    "kind":"constant",
    "name":"ACT_COVER_LOW"
  },{
    "value":346,
    "kind":"constant",
    "name":"ACT_COVER_LOW_RPG"
  },{
    "value":4,
    "kind":"constant",
    "name":"ACT_COVER_MED"
  },{
    "value":296,
    "kind":"constant",
    "name":"ACT_COVER_PISTOL_LOW"
  },{
    "value":297,
    "kind":"constant",
    "name":"ACT_COVER_SMG1_LOW"
  },{
    "value":62,
    "kind":"constant",
    "name":"ACT_COWER"
  },{
    "value":474,
    "kind":"constant",
    "name":"ACT_CROSSBOW_DRAW_UNLOADED"
  },{
    "value":44,
    "kind":"constant",
    "name":"ACT_CROUCH"
  },{
    "value":45,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE"
  },{
    "value":105,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE_AGITATED"
  },{
    "value":104,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE_AIM_STIMULATED"
  },{
    "value":103,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE_STIMULATED"
  },{
    "value":439,
    "kind":"constant",
    "name":"ACT_CROUCHING_GRENADEIDLE"
  },{
    "value":440,
    "kind":"constant",
    "name":"ACT_CROUCHING_GRENADEREADY"
  },{
    "value":441,
    "kind":"constant",
    "name":"ACT_CROUCHING_PRIMARYATTACK"
  },{
    "value":458,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_ATTACK"
  },{
    "value":456,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_DOWN"
  },{
    "value":459,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_KNOCKBACK"
  },{
    "value":455,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_UP"
  },{
    "value":457,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_UP_IDLE"
  },{
    "value":881,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_AUTOGUN"
  },{
    "value":890,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_DUAL"
  },{
    "value":896,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_RIFLE"
  },{
    "value":894,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_SHOTGUN"
  },{
    "value":1016,
    "kind":"constant",
    "name":"ACT_CSGO_ALIVE_LOOP"
  },{
    "value":1008,
    "kind":"constant",
    "name":"ACT_CSGO_CATCH"
  },{
    "value":1022,
    "kind":"constant",
    "name":"ACT_CSGO_CLIMB_LADDER"
  },{
    "value":993,
    "kind":"constant",
    "name":"ACT_CSGO_DEFUSE"
  },{
    "value":994,
    "kind":"constant",
    "name":"ACT_CSGO_DEFUSE_WITH_KIT"
  },{
    "value":1007,
    "kind":"constant",
    "name":"ACT_CSGO_DEPLOY"
  },{
    "value":1026,
    "kind":"constant",
    "name":"ACT_CSGO_EXIT_LADDER_BOTTOM"
  },{
    "value":1025,
    "kind":"constant",
    "name":"ACT_CSGO_EXIT_LADDER_TOP"
  },{
    "value":1021,
    "kind":"constant",
    "name":"ACT_CSGO_FALL"
  },{
    "value":996,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_PRIMARY"
  },{
    "value":997,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_PRIMARY_OPT_1"
  },{
    "value":998,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_PRIMARY_OPT_2"
  },{
    "value":999,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_SECONDARY"
  },{
    "value":1000,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_SECONDARY_OPT_1"
  },{
    "value":1001,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_SECONDARY_OPT_2"
  },{
    "value":995,
    "kind":"constant",
    "name":"ACT_CSGO_FLASHBANG_REACTION"
  },{
    "value":1017,
    "kind":"constant",
    "name":"ACT_CSGO_FLINCH"
  },{
    "value":1018,
    "kind":"constant",
    "name":"ACT_CSGO_FLINCH_HEAD"
  },{
    "value":1019,
    "kind":"constant",
    "name":"ACT_CSGO_FLINCH_MOLOTOV"
  },{
    "value":1015,
    "kind":"constant",
    "name":"ACT_CSGO_IDLE_ADJUST_STOPPEDMOVING"
  },{
    "value":1014,
    "kind":"constant",
    "name":"ACT_CSGO_IDLE_TURN_BALANCEADJUST"
  },{
    "value":1020,
    "kind":"constant",
    "name":"ACT_CSGO_JUMP"
  },{
    "value":1024,
    "kind":"constant",
    "name":"ACT_CSGO_LAND_HEAVY"
  },{
    "value":1023,
    "kind":"constant",
    "name":"ACT_CSGO_LAND_LIGHT"
  },{
    "value":992,
    "kind":"constant",
    "name":"ACT_CSGO_NULL"
  },{
    "value":1006,
    "kind":"constant",
    "name":"ACT_CSGO_OPERATE"
  },{
    "value":1027,
    "kind":"constant",
    "name":"ACT_CSGO_PARACHUTE"
  },{
    "value":1013,
    "kind":"constant",
    "name":"ACT_CSGO_PLANT_BOMB"
  },{
    "value":1002,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD"
  },{
    "value":1005,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD_END"
  },{
    "value":1004,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD_LOOP"
  },{
    "value":1003,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD_START"
  },{
    "value":1010,
    "kind":"constant",
    "name":"ACT_CSGO_SILENCER_ATTACH"
  },{
    "value":1009,
    "kind":"constant",
    "name":"ACT_CSGO_SILENCER_DETACH"
  },{
    "value":1028,
    "kind":"constant",
    "name":"ACT_CSGO_TAUNT"
  },{
    "value":1011,
    "kind":"constant",
    "name":"ACT_CSGO_TWITCH"
  },{
    "value":1012,
    "kind":"constant",
    "name":"ACT_CSGO_TWITCH_BUYZONE"
  },{
    "value":471,
    "kind":"constant",
    "name":"ACT_DEPLOY"
  },{
    "value":472,
    "kind":"constant",
    "name":"ACT_DEPLOY_IDLE"
  },{
    "value":21,
    "kind":"constant",
    "name":"ACT_DIEBACKWARD"
  },{
    "value":22,
    "kind":"constant",
    "name":"ACT_DIEFORWARD"
  },{
    "value":24,
    "kind":"constant",
    "name":"ACT_DIERAGDOLL"
  },{
    "value":20,
    "kind":"constant",
    "name":"ACT_DIESIMPLE"
  },{
    "value":23,
    "kind":"constant",
    "name":"ACT_DIEVIOLENT"
  },{
    "value":117,
    "kind":"constant",
    "name":"ACT_DIE_BACKSHOT"
  },{
    "value":404,
    "kind":"constant",
    "name":"ACT_DIE_BACKSIDE"
  },{
    "value":396,
    "kind":"constant",
    "name":"ACT_DIE_BARNACLE_SWALLOW"
  },{
    "value":115,
    "kind":"constant",
    "name":"ACT_DIE_CHESTSHOT"
  },{
    "value":990,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH"
  },{
    "value":408,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_BACKSIDE"
  },{
    "value":406,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_FRONTSIDE"
  },{
    "value":991,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_HEADSHOT"
  },{
    "value":409,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_LEFTSIDE"
  },{
    "value":407,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_RIGHTSIDE"
  },{
    "value":402,
    "kind":"constant",
    "name":"ACT_DIE_FRONTSIDE"
  },{
    "value":116,
    "kind":"constant",
    "name":"ACT_DIE_GUTSHOT"
  },{
    "value":114,
    "kind":"constant",
    "name":"ACT_DIE_HEADSHOT"
  },{
    "value":410,
    "kind":"constant",
    "name":"ACT_DIE_INCAP"
  },{
    "value":405,
    "kind":"constant",
    "name":"ACT_DIE_LEFTSIDE"
  },{
    "value":403,
    "kind":"constant",
    "name":"ACT_DIE_RIGHTSIDE"
  },{
    "value":988,
    "kind":"constant",
    "name":"ACT_DIE_STAND"
  },{
    "value":411,
    "kind":"constant",
    "name":"ACT_DIE_STANDING"
  },{
    "value":989,
    "kind":"constant",
    "name":"ACT_DIE_STAND_HEADSHOT"
  },{
    "value":72,
    "kind":"constant",
    "name":"ACT_DISARM"
  },{
    "value":416,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ANTLION"
  },{
    "value":415,
    "kind":"constant",
    "name":"ACT_DI_ALYX_HEADCRAB_MELEE"
  },{
    "value":413,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_MELEE"
  },{
    "value":418,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_SHOTGUN26"
  },{
    "value":417,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_SHOTGUN64"
  },{
    "value":414,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_TORSO_MELEE"
  },{
    "value":1580,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END"
  },{
    "value":1572,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START"
  },{
    "value":1573,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CONCOCTION"
  },{
    "value":1579,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW"
  },{
    "value":1627,
    "kind":"constant",
    "name":"ACT_DOTA_AMBUSH"
  },{
    "value":1677,
    "kind":"constant",
    "name":"ACT_DOTA_ANCESTRAL_SPIRIT"
  },{
    "value":1787,
    "kind":"constant",
    "name":"ACT_DOTA_ARCANA_STATUE"
  },{
    "value":1682,
    "kind":"constant",
    "name":"ACT_DOTA_ARCTIC_BURN_END"
  },{
    "value":1661,
    "kind":"constant",
    "name":"ACT_DOTA_AREA_DENY"
  },{
    "value":1503,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK"
  },{
    "value":1504,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK2"
  },{
    "value":1505,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK_EVENT"
  },{
    "value":1705,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK_EVENT_BASH"
  },{
    "value":1763,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK_STATUE"
  },{
    "value":1707,
    "kind":"constant",
    "name":"ACT_DOTA_AW_MAGNETIC_FIELD"
  },{
    "value":1780,
    "kind":"constant",
    "name":"ACT_DOTA_BATTLEPASS_IDLE"
  },{
    "value":1614,
    "kind":"constant",
    "name":"ACT_DOTA_BELLYACHE_END"
  },{
    "value":1613,
    "kind":"constant",
    "name":"ACT_DOTA_BELLYACHE_LOOP"
  },{
    "value":1612,
    "kind":"constant",
    "name":"ACT_DOTA_BELLYACHE_START"
  },{
    "value":1732,
    "kind":"constant",
    "name":"ACT_DOTA_BLINK_DAGGER"
  },{
    "value":1733,
    "kind":"constant",
    "name":"ACT_DOTA_BLINK_DAGGER_END"
  },{
    "value":1640,
    "kind":"constant",
    "name":"ACT_DOTA_BRIDGE_DESTROY"
  },{
    "value":1650,
    "kind":"constant",
    "name":"ACT_DOTA_BRIDGE_THREAT"
  },{
    "value":1644,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_RAGE"
  },{
    "value":1645,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_RAGE_OUT"
  },{
    "value":1646,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_SMASH"
  },{
    "value":1647,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_SMASH_OUT"
  },{
    "value":1599,
    "kind":"constant",
    "name":"ACT_DOTA_CANCEL_SIREN_SONG"
  },{
    "value":1533,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE"
  },{
    "value":1717,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE_CARD"
  },{
    "value":1698,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE_PET"
  },{
    "value":1706,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE_RARE"
  },{
    "value":1764,
    "kind":"constant",
    "name":"ACT_DOTA_CAST1_STATUE"
  },{
    "value":1769,
    "kind":"constant",
    "name":"ACT_DOTA_CAST2_STATUE"
  },{
    "value":1765,
    "kind":"constant",
    "name":"ACT_DOTA_CAST3_STATUE"
  },{
    "value":1766,
    "kind":"constant",
    "name":"ACT_DOTA_CAST4_STATUE"
  },{
    "value":1510,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_1"
  },{
    "value":1540,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_1_END"
  },{
    "value":1511,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2"
  },{
    "value":1748,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ALLY"
  },{
    "value":1541,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_END"
  },{
    "value":1653,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL"
  },{
    "value":1654,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END"
  },{
    "value":1652,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START"
  },{
    "value":1512,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_3"
  },{
    "value":1542,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_3_END"
  },{
    "value":1513,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_4"
  },{
    "value":1543,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_4_END"
  },{
    "value":1514,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_5"
  },{
    "value":1515,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_6"
  },{
    "value":1598,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_7"
  },{
    "value":1547,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_ROT"
  },{
    "value":1585,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ALACRITY"
  },{
    "value":1741,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ALACRITY_ORB"
  },{
    "value":1702,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_BURROW_END"
  },{
    "value":1586,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_CHAOS_METEOR"
  },{
    "value":1742,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_CHAOS_METEOR_ORB"
  },{
    "value":1581,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_COLD_SNAP"
  },{
    "value":1737,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_COLD_SNAP_ORB"
  },{
    "value":1590,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_DEAFENING_BLAST"
  },{
    "value":1746,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_DEAFENING_BLAST_ORB"
  },{
    "value":1538,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_DRAGONBREATH"
  },{
    "value":1584,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_EMP"
  },{
    "value":1740,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_EMP_ORB"
  },{
    "value":1795,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_FENCE"
  },{
    "value":1588,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_FORGE_SPIRIT"
  },{
    "value":1744,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_FORGE_SPIRIT_ORB"
  },{
    "value":1708,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_GHOST_SHIP"
  },{
    "value":1582,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_GHOST_WALK"
  },{
    "value":1738,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_GHOST_WALK_ORB"
  },{
    "value":1589,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ICE_WALL"
  },{
    "value":1745,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ICE_WALL_ORB"
  },{
    "value":1564,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_LIFE_BREAK_END"
  },{
    "value":1563,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_LIFE_BREAK_START"
  },{
    "value":1597,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_REFRACTION"
  },{
    "value":1779,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_STATUE"
  },{
    "value":1587,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_SUN_STRIKE"
  },{
    "value":1743,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_SUN_STRIKE_ORB"
  },{
    "value":1583,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_TORNADO"
  },{
    "value":1739,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_TORNADO_ORB"
  },{
    "value":1562,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_WILD_AXES_END"
  },{
    "value":1611,
    "kind":"constant",
    "name":"ACT_DOTA_CENTAUR_STAMPEDE"
  },{
    "value":1520,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_1"
  },{
    "value":1521,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_2"
  },{
    "value":1522,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_3"
  },{
    "value":1523,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_4"
  },{
    "value":1524,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_5"
  },{
    "value":1525,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_6"
  },{
    "value":1600,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_7"
  },{
    "value":1526,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_1"
  },{
    "value":1527,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_2"
  },{
    "value":1528,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_3"
  },{
    "value":1529,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_4"
  },{
    "value":1530,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_5"
  },{
    "value":1531,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_6"
  },{
    "value":1783,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_STATUE"
  },{
    "value":1673,
    "kind":"constant",
    "name":"ACT_DOTA_CHILLING_TOUCH"
  },{
    "value":1671,
    "kind":"constant",
    "name":"ACT_DOTA_COLD_FEET"
  },{
    "value":1532,
    "kind":"constant",
    "name":"ACT_DOTA_CONSTANT_LAYER"
  },{
    "value":1775,
    "kind":"constant",
    "name":"ACT_DOTA_CRATER_CLOSED"
  },{
    "value":1776,
    "kind":"constant",
    "name":"ACT_DOTA_CRATER_OPEN"
  },{
    "value":1734,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_ATTACK"
  },{
    "value":1736,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_DIE"
  },{
    "value":1757,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_HIGH_FIVE"
  },{
    "value":1735,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_IDLE"
  },{
    "value":1755,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_IDLE_RARE"
  },{
    "value":1756,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_TAUNT"
  },{
    "value":1800,
    "kind":"constant",
    "name":"ACT_DOTA_CYCLONE"
  },{
    "value":1651,
    "kind":"constant",
    "name":"ACT_DOTA_DAGON"
  },{
    "value":1642,
    "kind":"constant",
    "name":"ACT_DOTA_DEATH_BY_SNIPER"
  },{
    "value":1592,
    "kind":"constant",
    "name":"ACT_DOTA_DEFEAT"
  },{
    "value":1711,
    "kind":"constant",
    "name":"ACT_DOTA_DEFEAT_START"
  },{
    "value":1786,
    "kind":"constant",
    "name":"ACT_DOTA_DEFEAT_STATUE"
  },{
    "value":1506,
    "kind":"constant",
    "name":"ACT_DOTA_DIE"
  },{
    "value":1777,
    "kind":"constant",
    "name":"ACT_DOTA_DIE_ILLUSION"
  },{
    "value":1548,
    "kind":"constant",
    "name":"ACT_DOTA_DIE_SPECIAL"
  },{
    "value":1509,
    "kind":"constant",
    "name":"ACT_DOTA_DISABLED"
  },{
    "value":1792,
    "kind":"constant",
    "name":"ACT_DOTA_DISABLED_END"
  },{
    "value":1712,
    "kind":"constant",
    "name":"ACT_DOTA_DP_SPIRIT_SIPHON"
  },{
    "value":1570,
    "kind":"constant",
    "name":"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK"
  },{
    "value":1539,
    "kind":"constant",
    "name":"ACT_DOTA_ECHO_SLAM"
  },{
    "value":1674,
    "kind":"constant",
    "name":"ACT_DOTA_ENFEEBLE"
  },{
    "value":1714,
    "kind":"constant",
    "name":"ACT_DOTA_ES_STONE_CALLER"
  },{
    "value":1675,
    "kind":"constant",
    "name":"ACT_DOTA_FATAL_BONDS"
  },{
    "value":1508,
    "kind":"constant",
    "name":"ACT_DOTA_FLAIL"
  },{
    "value":1768,
    "kind":"constant",
    "name":"ACT_DOTA_FLAIL_STATUE"
  },{
    "value":1685,
    "kind":"constant",
    "name":"ACT_DOTA_FLEE"
  },{
    "value":1507,
    "kind":"constant",
    "name":"ACT_DOTA_FLINCH"
  },{
    "value":1602,
    "kind":"constant",
    "name":"ACT_DOTA_FORCESTAFF_END"
  },{
    "value":1781,
    "kind":"constant",
    "name":"ACT_DOTA_FORCESTAFF_STATUE"
  },{
    "value":1789,
    "kind":"constant",
    "name":"ACT_DOTA_FRONTPAGE"
  },{
    "value":1630,
    "kind":"constant",
    "name":"ACT_DOTA_FRUSTRATION"
  },{
    "value":1709,
    "kind":"constant",
    "name":"ACT_DOTA_FXANIM"
  },{
    "value":1728,
    "kind":"constant",
    "name":"ACT_DOTA_GENERIC_CHANNEL_1"
  },{
    "value":1754,
    "kind":"constant",
    "name":"ACT_DOTA_GENERIC_CHANNEL_1_START"
  },{
    "value":1625,
    "kind":"constant",
    "name":"ACT_DOTA_GESTURE_ACCENT"
  },{
    "value":1624,
    "kind":"constant",
    "name":"ACT_DOTA_GESTURE_POINT"
  },{
    "value":1690,
    "kind":"constant",
    "name":"ACT_DOTA_GREET"
  },{
    "value":1621,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_BLINK_BONE"
  },{
    "value":1617,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_CAST"
  },{
    "value":1620,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_HOOK_END"
  },{
    "value":1619,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_HOOK_START"
  },{
    "value":1618,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY"
  },{
    "value":1730,
    "kind":"constant",
    "name":"ACT_DOTA_GS_INK_CREATURE"
  },{
    "value":1729,
    "kind":"constant",
    "name":"ACT_DOTA_GS_SOUL_CHAIN"
  },{
    "value":1672,
    "kind":"constant",
    "name":"ACT_DOTA_ICE_VORTEX"
  },{
    "value":1500,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE"
  },{
    "value":1636,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_IMPATIENT"
  },{
    "value":1648,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP"
  },{
    "value":1501,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_RARE"
  },{
    "value":1622,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_SLEEPING"
  },{
    "value":1639,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_SLEEPING_END"
  },{
    "value":1762,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_STATUE"
  },{
    "value":1801,
    "kind":"constant",
    "name":"ACT_DOTA_IMPALE"
  },{
    "value":1623,
    "kind":"constant",
    "name":"ACT_DOTA_INTRO"
  },{
    "value":1649,
    "kind":"constant",
    "name":"ACT_DOTA_INTRO_LOOP"
  },{
    "value":1697,
    "kind":"constant",
    "name":"ACT_DOTA_ITEM_DROP"
  },{
    "value":1628,
    "kind":"constant",
    "name":"ACT_DOTA_ITEM_LOOK"
  },{
    "value":1696,
    "kind":"constant",
    "name":"ACT_DOTA_ITEM_PICKUP"
  },{
    "value":1575,
    "kind":"constant",
    "name":"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP"
  },{
    "value":1574,
    "kind":"constant",
    "name":"ACT_DOTA_JAKIRO_LIQUIDFIRE_START"
  },{
    "value":1535,
    "kind":"constant",
    "name":"ACT_DOTA_KILLTAUNT"
  },{
    "value":1679,
    "kind":"constant",
    "name":"ACT_DOTA_KINETIC_FIELD"
  },{
    "value":1578,
    "kind":"constant",
    "name":"ACT_DOTA_LASSO_LOOP"
  },{
    "value":1658,
    "kind":"constant",
    "name":"ACT_DOTA_LEAP_STUN"
  },{
    "value":1659,
    "kind":"constant",
    "name":"ACT_DOTA_LEAP_SWIPE"
  },{
    "value":1703,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_ASSIMILATE"
  },{
    "value":1704,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_EJECT"
  },{
    "value":1576,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_INFEST"
  },{
    "value":1577,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_INFEST_END"
  },{
    "value":1567,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS"
  },{
    "value":1566,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_RAGE"
  },{
    "value":1601,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT"
  },{
    "value":1771,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT_FRONTPAGE"
  },{
    "value":1772,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT_FRONTPAGE_POPUP"
  },{
    "value":1683,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT_RARE"
  },{
    "value":1785,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT_STATUE"
  },{
    "value":1643,
    "kind":"constant",
    "name":"ACT_DOTA_LOOK_AROUND"
  },{
    "value":1606,
    "kind":"constant",
    "name":"ACT_DOTA_MAGNUS_SKEWER_END"
  },{
    "value":1605,
    "kind":"constant",
    "name":"ACT_DOTA_MAGNUS_SKEWER_START"
  },{
    "value":1607,
    "kind":"constant",
    "name":"ACT_DOTA_MEDUSA_STONE_GAZE"
  },{
    "value":1676,
    "kind":"constant",
    "name":"ACT_DOTA_MIDNIGHT_PULSE"
  },{
    "value":1681,
    "kind":"constant",
    "name":"ACT_DOTA_MINI_TAUNT"
  },{
    "value":1722,
    "kind":"constant",
    "name":"ACT_DOTA_MK_FUR_ARMY"
  },{
    "value":1723,
    "kind":"constant",
    "name":"ACT_DOTA_MK_SPRING_CAST"
  },{
    "value":1719,
    "kind":"constant",
    "name":"ACT_DOTA_MK_SPRING_END"
  },{
    "value":1718,
    "kind":"constant",
    "name":"ACT_DOTA_MK_SPRING_SOAR"
  },{
    "value":1715,
    "kind":"constant",
    "name":"ACT_DOTA_MK_STRIKE"
  },{
    "value":1721,
    "kind":"constant",
    "name":"ACT_DOTA_MK_TREE_END"
  },{
    "value":1720,
    "kind":"constant",
    "name":"ACT_DOTA_MK_TREE_SOAR"
  },{
    "value":1724,
    "kind":"constant",
    "name":"ACT_DOTA_NECRO_GHOST_SHROUD"
  },{
    "value":1660,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_INTRO_LEAP"
  },{
    "value":1657,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_END"
  },{
    "value":1656,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_LOOP"
  },{
    "value":1655,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_START"
  },{
    "value":1662,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_TO_STUN"
  },{
    "value":1565,
    "kind":"constant",
    "name":"ACT_DOTA_NIGHTSTALKER_TRANSITION"
  },{
    "value":1747,
    "kind":"constant",
    "name":"ACT_DOTA_NOTICE"
  },{
    "value":1516,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_1"
  },{
    "value":1517,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_2"
  },{
    "value":1518,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_3"
  },{
    "value":1519,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_4"
  },{
    "value":1725,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ARCANA"
  },{
    "value":1751,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_LOADOUT"
  },{
    "value":1701,
    "kind":"constant",
    "name":"ACT_DOTA_PET_LEVEL"
  },{
    "value":1699,
    "kind":"constant",
    "name":"ACT_DOTA_PET_WARD_OBSERVER"
  },{
    "value":1700,
    "kind":"constant",
    "name":"ACT_DOTA_PET_WARD_SENTRY"
  },{
    "value":1603,
    "kind":"constant",
    "name":"ACT_DOTA_POOF_END"
  },{
    "value":1635,
    "kind":"constant",
    "name":"ACT_DOTA_PRESENT_ITEM"
  },{
    "value":1797,
    "kind":"constant",
    "name":"ACT_DOTA_RADIANT_CREEP_HAMMER"
  },{
    "value":1549,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_BATTERYASSAULT"
  },{
    "value":1553,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_END"
  },{
    "value":1552,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP"
  },{
    "value":1551,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_START"
  },{
    "value":1550,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_POWERCOGS"
  },{
    "value":1663,
    "kind":"constant",
    "name":"ACT_DOTA_RAZE_1"
  },{
    "value":1664,
    "kind":"constant",
    "name":"ACT_DOTA_RAZE_2"
  },{
    "value":1665,
    "kind":"constant",
    "name":"ACT_DOTA_RAZE_3"
  },{
    "value":1610,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_END"
  },{
    "value":1793,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_IN"
  },{
    "value":1609,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_LOOP"
  },{
    "value":1634,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_LOOP_END"
  },{
    "value":1794,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_OUT"
  },{
    "value":1608,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_START"
  },{
    "value":1788,
    "kind":"constant",
    "name":"ACT_DOTA_REWARD_CELL"
  },{
    "value":1615,
    "kind":"constant",
    "name":"ACT_DOTA_ROQUELAIRE_LAND"
  },{
    "value":1616,
    "kind":"constant",
    "name":"ACT_DOTA_ROQUELAIRE_LAND_IDLE"
  },{
    "value":1502,
    "kind":"constant",
    "name":"ACT_DOTA_RUN"
  },{
    "value":1799,
    "kind":"constant",
    "name":"ACT_DOTA_RUN_ALT"
  },{
    "value":1760,
    "kind":"constant",
    "name":"ACT_DOTA_RUN_STATUE"
  },{
    "value":1568,
    "kind":"constant",
    "name":"ACT_DOTA_SAND_KING_BURROW_IN"
  },{
    "value":1569,
    "kind":"constant",
    "name":"ACT_DOTA_SAND_KING_BURROW_OUT"
  },{
    "value":1687,
    "kind":"constant",
    "name":"ACT_DOTA_SHAKE"
  },{
    "value":1670,
    "kind":"constant",
    "name":"ACT_DOTA_SHALLOW_GRAVE"
  },{
    "value":1637,
    "kind":"constant",
    "name":"ACT_DOTA_SHARPEN_WEAPON"
  },{
    "value":1638,
    "kind":"constant",
    "name":"ACT_DOTA_SHARPEN_WEAPON_OUT"
  },{
    "value":1695,
    "kind":"constant",
    "name":"ACT_DOTA_SHOPKEEPER_PET_INTERACT"
  },{
    "value":1633,
    "kind":"constant",
    "name":"ACT_DOTA_SHRUG"
  },{
    "value":1749,
    "kind":"constant",
    "name":"ACT_DOTA_SHUFFLE_L"
  },{
    "value":1750,
    "kind":"constant",
    "name":"ACT_DOTA_SHUFFLE_R"
  },{
    "value":1604,
    "kind":"constant",
    "name":"ACT_DOTA_SLARK_POUNCE"
  },{
    "value":1626,
    "kind":"constant",
    "name":"ACT_DOTA_SLEEPING_END"
  },{
    "value":1726,
    "kind":"constant",
    "name":"ACT_DOTA_SLIDE"
  },{
    "value":1727,
    "kind":"constant",
    "name":"ACT_DOTA_SLIDE_LOOP"
  },{
    "value":1534,
    "kind":"constant",
    "name":"ACT_DOTA_SPAWN"
  },{
    "value":1761,
    "kind":"constant",
    "name":"ACT_DOTA_SPAWN_STATUE"
  },{
    "value":1594,
    "kind":"constant",
    "name":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END"
  },{
    "value":1593,
    "kind":"constant",
    "name":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE"
  },{
    "value":1798,
    "kind":"constant",
    "name":"ACT_DOTA_SPWN"
  },{
    "value":1629,
    "kind":"constant",
    "name":"ACT_DOTA_STARTLE"
  },{
    "value":1680,
    "kind":"constant",
    "name":"ACT_DOTA_STATIC_STORM"
  },{
    "value":1767,
    "kind":"constant",
    "name":"ACT_DOTA_STUN_STATUE"
  },{
    "value":1684,
    "kind":"constant",
    "name":"ACT_DOTA_SWIM"
  },{
    "value":1688,
    "kind":"constant",
    "name":"ACT_DOTA_SWIM_IDLE"
  },{
    "value":1536,
    "kind":"constant",
    "name":"ACT_DOTA_TAUNT"
  },{
    "value":1641,
    "kind":"constant",
    "name":"ACT_DOTA_TAUNT_SNIPER"
  },{
    "value":1752,
    "kind":"constant",
    "name":"ACT_DOTA_TAUNT_SPECIAL"
  },{
    "value":1770,
    "kind":"constant",
    "name":"ACT_DOTA_TAUNT_STATUE"
  },{
    "value":1595,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT"
  },{
    "value":1693,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_END"
  },{
    "value":1694,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_EXIT"
  },{
    "value":1691,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_START"
  },{
    "value":1692,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_WAIT"
  },{
    "value":1596,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_END"
  },{
    "value":1632,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_END_REACT"
  },{
    "value":1790,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_END_STATUE"
  },{
    "value":1631,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_REACT"
  },{
    "value":1753,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_START"
  },{
    "value":1782,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_STATUE"
  },{
    "value":1537,
    "kind":"constant",
    "name":"ACT_DOTA_THIRST"
  },{
    "value":1678,
    "kind":"constant",
    "name":"ACT_DOTA_THUNDER_STRIKE"
  },{
    "value":1555,
    "kind":"constant",
    "name":"ACT_DOTA_TINKER_REARM1"
  },{
    "value":1556,
    "kind":"constant",
    "name":"ACT_DOTA_TINKER_REARM2"
  },{
    "value":1557,
    "kind":"constant",
    "name":"ACT_DOTA_TINKER_REARM3"
  },{
    "value":1731,
    "kind":"constant",
    "name":"ACT_DOTA_TRANSITION"
  },{
    "value":1713,
    "kind":"constant",
    "name":"ACT_DOTA_TRICKS_END"
  },{
    "value":1686,
    "kind":"constant",
    "name":"ACT_DOTA_TROT"
  },{
    "value":1666,
    "kind":"constant",
    "name":"ACT_DOTA_UNDYING_DECAY"
  },{
    "value":1667,
    "kind":"constant",
    "name":"ACT_DOTA_UNDYING_SOUL_RIP"
  },{
    "value":1668,
    "kind":"constant",
    "name":"ACT_DOTA_UNDYING_TOMBSTONE"
  },{
    "value":1716,
    "kind":"constant",
    "name":"ACT_DOTA_VERSUS"
  },{
    "value":1591,
    "kind":"constant",
    "name":"ACT_DOTA_VICTORY"
  },{
    "value":1710,
    "kind":"constant",
    "name":"ACT_DOTA_VICTORY_START"
  },{
    "value":1784,
    "kind":"constant",
    "name":"ACT_DOTA_VICTORY_STATUE"
  },{
    "value":1759,
    "kind":"constant",
    "name":"ACT_DOTA_VOODOO_REST"
  },{
    "value":1689,
    "kind":"constant",
    "name":"ACT_DOTA_WAIT_IDLE"
  },{
    "value":1561,
    "kind":"constant",
    "name":"ACT_DOTA_WEAVERBUG_ATTACH"
  },{
    "value":1571,
    "kind":"constant",
    "name":"ACT_DOTA_WHEEL_LAYER"
  },{
    "value":1669,
    "kind":"constant",
    "name":"ACT_DOTA_WHIRLING_AXES_RANGED"
  },{
    "value":179,
    "kind":"constant",
    "name":"ACT_DO_NOT_DISTURB"
  },{
    "value":73,
    "kind":"constant",
    "name":"ACT_DROP_WEAPON"
  },{
    "value":74,
    "kind":"constant",
    "name":"ACT_DROP_WEAPON_SHOTGUN"
  },{
    "value":395,
    "kind":"constant",
    "name":"ACT_DUCK_DODGE"
  },{
    "value":430,
    "kind":"constant",
    "name":"ACT_DYINGLOOP"
  },{
    "value":431,
    "kind":"constant",
    "name":"ACT_DYINGTODEAD"
  },{
    "value":910,
    "kind":"constant",
    "name":"ACT_EXPLODE"
  },{
    "value":906,
    "kind":"constant",
    "name":"ACT_FIRE"
  },{
    "value":438,
    "kind":"constant",
    "name":"ACT_FIRE_END"
  },{
    "value":437,
    "kind":"constant",
    "name":"ACT_FIRE_LOOP"
  },{
    "value":907,
    "kind":"constant",
    "name":"ACT_FIRE_RECOVER"
  },{
    "value":436,
    "kind":"constant",
    "name":"ACT_FIRE_START"
  },{
    "value":900,
    "kind":"constant",
    "name":"ACT_FLICK_LEFT"
  },{
    "value":901,
    "kind":"constant",
    "name":"ACT_FLICK_LEFT_MIDDLE"
  },{
    "value":903,
    "kind":"constant",
    "name":"ACT_FLICK_RIGHT"
  },{
    "value":902,
    "kind":"constant",
    "name":"ACT_FLICK_RIGHT_MIDDLE"
  },{
    "value":119,
    "kind":"constant",
    "name":"ACT_FLINCH_CHEST"
  },{
    "value":127,
    "kind":"constant",
    "name":"ACT_FLINCH_CHEST_BACK"
  },{
    "value":130,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_BACK"
  },{
    "value":129,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_FRONT"
  },{
    "value":131,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_LEFT"
  },{
    "value":132,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_RIGHT"
  },{
    "value":118,
    "kind":"constant",
    "name":"ACT_FLINCH_HEAD"
  },{
    "value":126,
    "kind":"constant",
    "name":"ACT_FLINCH_HEAD_BACK"
  },{
    "value":121,
    "kind":"constant",
    "name":"ACT_FLINCH_LEFTARM"
  },{
    "value":123,
    "kind":"constant",
    "name":"ACT_FLINCH_LEFTLEG"
  },{
    "value":125,
    "kind":"constant",
    "name":"ACT_FLINCH_PHYSICS"
  },{
    "value":122,
    "kind":"constant",
    "name":"ACT_FLINCH_RIGHTARM"
  },{
    "value":124,
    "kind":"constant",
    "name":"ACT_FLINCH_RIGHTLEG"
  },{
    "value":120,
    "kind":"constant",
    "name":"ACT_FLINCH_STOMACH"
  },{
    "value":128,
    "kind":"constant",
    "name":"ACT_FLINCH_STOMACH_BACK"
  },{
    "value":25,
    "kind":"constant",
    "name":"ACT_FLY"
  },{
    "value":476,
    "kind":"constant",
    "name":"ACT_GAUSS_SPINCYCLE"
  },{
    "value":475,
    "kind":"constant",
    "name":"ACT_GAUSS_SPINUP"
  },{
    "value":397,
    "kind":"constant",
    "name":"ACT_GESTURE_BARNACLE_STRANGLE"
  },{
    "value":153,
    "kind":"constant",
    "name":"ACT_GESTURE_BIG_FLINCH"
  },{
    "value":154,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST"
  },{
    "value":156,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST_DAMAGED"
  },{
    "value":157,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN"
  },{
    "value":155,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST_SHOTGUN"
  },{
    "value":159,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_CHEST"
  },{
    "value":158,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_HEAD"
  },{
    "value":161,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_LEFTARM"
  },{
    "value":163,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_LEFTLEG"
  },{
    "value":162,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_RIGHTARM"
  },{
    "value":164,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_RIGHTLEG"
  },{
    "value":160,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_STOMACH"
  },{
    "value":147,
    "kind":"constant",
    "name":"ACT_GESTURE_MELEE_ATTACK1"
  },{
    "value":148,
    "kind":"constant",
    "name":"ACT_GESTURE_MELEE_ATTACK2"
  },{
    "value":313,
    "kind":"constant",
    "name":"ACT_GESTURE_MELEE_ATTACK_SWING"
  },{
    "value":145,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK1"
  },{
    "value":149,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK1_LOW"
  },{
    "value":146,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK2"
  },{
    "value":150,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK2_LOW"
  },{
    "value":298,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_AR1"
  },{
    "value":299,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_AR2"
  },{
    "value":300,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE"
  },{
    "value":301,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_HMG1"
  },{
    "value":302,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_ML"
  },{
    "value":307,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_PISTOL"
  },{
    "value":308,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW"
  },{
    "value":306,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SHOTGUN"
  },{
    "value":309,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SLAM"
  },{
    "value":303,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG1"
  },{
    "value":304,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG1_LOW"
  },{
    "value":305,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG2"
  },{
    "value":312,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE"
  },{
    "value":311,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_THROW"
  },{
    "value":310,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_TRIPWIRE"
  },{
    "value":377,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD"
  },{
    "value":378,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD_PISTOL"
  },{
    "value":380,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD_SHOTGUN"
  },{
    "value":379,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD_SMG1"
  },{
    "value":152,
    "kind":"constant",
    "name":"ACT_GESTURE_SMALL_FLINCH"
  },{
    "value":165,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT"
  },{
    "value":167,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT45"
  },{
    "value":171,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT45_FLAT"
  },{
    "value":169,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT90"
  },{
    "value":173,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT90_FLAT"
  },{
    "value":166,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT"
  },{
    "value":168,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT45"
  },{
    "value":172,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT45_FLAT"
  },{
    "value":170,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT90"
  },{
    "value":174,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT90_FLAT"
  },{
    "value":27,
    "kind":"constant",
    "name":"ACT_GLIDE"
  },{
    "value":958,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_ACTIVE"
  },{
    "value":959,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_ACTIVE_IDLE"
  },{
    "value":960,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_DEACTIVATE"
  },{
    "value":955,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_GRAB"
  },{
    "value":957,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_GRAB_IDLE"
  },{
    "value":961,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_PULL"
  },{
    "value":956,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_RELEASE"
  },{
    "value":962,
    "kind":"constant",
    "name":"ACT_HEADCRAB_SMOKE_BOMB"
  },{
    "value":963,
    "kind":"constant",
    "name":"ACT_HEADCRAB_SPIT"
  },{
    "value":500,
    "kind":"constant",
    "name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE"
  },{
    "value":501,
    "kind":"constant",
    "name":"ACT_HL2MP_GESTURE_RELOAD_MELEE"
  },{
    "value":498,
    "kind":"constant",
    "name":"ACT_HL2MP_IDLE_CROUCH_MELEE"
  },{
    "value":496,
    "kind":"constant",
    "name":"ACT_HL2MP_IDLE_MELEE"
  },{
    "value":502,
    "kind":"constant",
    "name":"ACT_HL2MP_JUMP_MELEE"
  },{
    "value":497,
    "kind":"constant",
    "name":"ACT_HL2MP_RUN_MELEE"
  },{
    "value":499,
    "kind":"constant",
    "name":"ACT_HL2MP_WALK_CROUCH_MELEE"
  },{
    "value":30,
    "kind":"constant",
    "name":"ACT_HOP"
  },{
    "value":26,
    "kind":"constant",
    "name":"ACT_HOVER"
  },{
    "value":1,
    "kind":"constant",
    "name":"ACT_IDLE"
  },{
    "value":493,
    "kind":"constant",
    "name":"ACT_IDLETORUN"
  },{
    "value":80,
    "kind":"constant",
    "name":"ACT_IDLE_AGITATED"
  },{
    "value":93,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_AGITATED"
  },{
    "value":879,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_AUTOGUN"
  },{
    "value":888,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_DUAL"
  },{
    "value":884,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_PISTOL"
  },{
    "value":91,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_RELAXED"
  },{
    "value":895,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_RIFLE"
  },{
    "value":331,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_RIFLE_STIMULATED"
  },{
    "value":893,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_SHOTGUN"
  },{
    "value":94,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_STEALTH"
  },{
    "value":92,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_STIMULATED"
  },{
    "value":77,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY"
  },{
    "value":342,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_MELEE"
  },{
    "value":318,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_PISTOL"
  },{
    "value":345,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_RPG"
  },{
    "value":319,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_SHOTGUN"
  },{
    "value":316,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_SMG1"
  },{
    "value":878,
    "kind":"constant",
    "name":"ACT_IDLE_AUTOGUN"
  },{
    "value":427,
    "kind":"constant",
    "name":"ACT_IDLE_CARRY"
  },{
    "value":887,
    "kind":"constant",
    "name":"ACT_IDLE_DUAL"
  },{
    "value":82,
    "kind":"constant",
    "name":"ACT_IDLE_HURT"
  },{
    "value":340,
    "kind":"constant",
    "name":"ACT_IDLE_MANNEDGUN"
  },{
    "value":341,
    "kind":"constant",
    "name":"ACT_IDLE_MELEE"
  },{
    "value":133,
    "kind":"constant",
    "name":"ACT_IDLE_ON_FIRE"
  },{
    "value":321,
    "kind":"constant",
    "name":"ACT_IDLE_PACKAGE"
  },{
    "value":317,
    "kind":"constant",
    "name":"ACT_IDLE_PISTOL"
  },{
    "value":78,
    "kind":"constant",
    "name":"ACT_IDLE_RELAXED"
  },{
    "value":314,
    "kind":"constant",
    "name":"ACT_IDLE_RIFLE"
  },{
    "value":344,
    "kind":"constant",
    "name":"ACT_IDLE_RPG"
  },{
    "value":343,
    "kind":"constant",
    "name":"ACT_IDLE_RPG_RELAXED"
  },{
    "value":336,
    "kind":"constant",
    "name":"ACT_IDLE_SHOTGUN_AGITATED"
  },{
    "value":334,
    "kind":"constant",
    "name":"ACT_IDLE_SHOTGUN_RELAXED"
  },{
    "value":335,
    "kind":"constant",
    "name":"ACT_IDLE_SHOTGUN_STIMULATED"
  },{
    "value":315,
    "kind":"constant",
    "name":"ACT_IDLE_SMG1"
  },{
    "value":325,
    "kind":"constant",
    "name":"ACT_IDLE_SMG1_RELAXED"
  },{
    "value":326,
    "kind":"constant",
    "name":"ACT_IDLE_SMG1_STIMULATED"
  },{
    "value":81,
    "kind":"constant",
    "name":"ACT_IDLE_STEALTH"
  },{
    "value":320,
    "kind":"constant",
    "name":"ACT_IDLE_STEALTH_PISTOL"
  },{
    "value":79,
    "kind":"constant",
    "name":"ACT_IDLE_STIMULATED"
  },{
    "value":323,
    "kind":"constant",
    "name":"ACT_IDLE_SUITCASE"
  },{
    "value":852,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_DRAW"
  },{
    "value":859,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_DRYFIRE"
  },{
    "value":853,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_HOLSTER"
  },{
    "value":854,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_IDLE"
  },{
    "value":861,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_IDLE_LOWERED"
  },{
    "value":860,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_IDLE_TO_LOWERED"
  },{
    "value":862,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_LOWERED_TO_IDLE"
  },{
    "value":856,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_PRIMARYATTACK"
  },{
    "value":855,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_PULLBACK"
  },{
    "value":858,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_RELOAD"
  },{
    "value":857,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_SECONDARYATTACK"
  },{
    "value":863,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_DRAW"
  },{
    "value":870,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_DRYFIRE"
  },{
    "value":864,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_HOLSTER"
  },{
    "value":865,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_IDLE"
  },{
    "value":872,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_IDLE_LOWERED"
  },{
    "value":871,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_IDLE_TO_LOWERED"
  },{
    "value":873,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_LOWERED_TO_IDLE"
  },{
    "value":867,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_PRIMARYATTACK"
  },{
    "value":866,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_PULLBACK"
  },{
    "value":869,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_RELOAD"
  },{
    "value":868,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_SECONDARYATTACK"
  },{
    "value":29,
    "kind":"constant",
    "name":"ACT_JUMP"
  },{
    "value":883,
    "kind":"constant",
    "name":"ACT_JUMP_AUTOGUN"
  },{
    "value":892,
    "kind":"constant",
    "name":"ACT_JUMP_DUAL"
  },{
    "value":32,
    "kind":"constant",
    "name":"ACT_LAND"
  },{
    "value":31,
    "kind":"constant",
    "name":"ACT_LEAP"
  },{
    "value":61,
    "kind":"constant",
    "name":"ACT_LOOKBACK_LEFT"
  },{
    "value":60,
    "kind":"constant",
    "name":"ACT_LOOKBACK_RIGHT"
  },{
    "value":65,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK1"
  },{
    "value":66,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK2"
  },{
    "value":291,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK_SWING"
  },{
    "value":151,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK_SWING_GESTURE"
  },{
    "value":830,
    "kind":"constant",
    "name":"ACT_MELEE_VM_DRAW"
  },{
    "value":837,
    "kind":"constant",
    "name":"ACT_MELEE_VM_DRYFIRE"
  },{
    "value":831,
    "kind":"constant",
    "name":"ACT_MELEE_VM_HOLSTER"
  },{
    "value":832,
    "kind":"constant",
    "name":"ACT_MELEE_VM_IDLE"
  },{
    "value":839,
    "kind":"constant",
    "name":"ACT_MELEE_VM_IDLE_LOWERED"
  },{
    "value":838,
    "kind":"constant",
    "name":"ACT_MELEE_VM_IDLE_TO_LOWERED"
  },{
    "value":840,
    "kind":"constant",
    "name":"ACT_MELEE_VM_LOWERED_TO_IDLE"
  },{
    "value":834,
    "kind":"constant",
    "name":"ACT_MELEE_VM_PRIMARYATTACK"
  },{
    "value":833,
    "kind":"constant",
    "name":"ACT_MELEE_VM_PULLBACK"
  },{
    "value":836,
    "kind":"constant",
    "name":"ACT_MELEE_VM_RELOAD"
  },{
    "value":835,
    "kind":"constant",
    "name":"ACT_MELEE_VM_SECONDARYATTACK"
  },{
    "value":1544,
    "kind":"constant",
    "name":"ACT_MIRANA_LEAP_END"
  },{
    "value":510,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK"
  },{
    "value":729,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_BUILDING"
  },{
    "value":646,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_ITEM1"
  },{
    "value":663,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_ITEM2"
  },{
    "value":625,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_MELEE"
  },{
    "value":748,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_PDA"
  },{
    "value":559,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_PRIMARY"
  },{
    "value":594,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_SECONDARY"
  },{
    "value":739,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_BUILDING"
  },{
    "value":535,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE"
  },{
    "value":743,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING"
  },{
    "value":641,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE"
  },{
    "value":589,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY"
  },{
    "value":620,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY"
  },{
    "value":658,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_ITEM1"
  },{
    "value":675,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_ITEM2"
  },{
    "value":637,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_MELEE"
  },{
    "value":573,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_PRIMARY"
  },{
    "value":533,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE"
  },{
    "value":604,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_SECONDARY"
  },{
    "value":534,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE"
  },{
    "value":737,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_BUILDING"
  },{
    "value":529,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE"
  },{
    "value":741,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING"
  },{
    "value":639,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_MELEE"
  },{
    "value":587,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY"
  },{
    "value":618,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY"
  },{
    "value":655,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM1"
  },{
    "value":656,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY"
  },{
    "value":672,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM2"
  },{
    "value":673,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY"
  },{
    "value":634,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_MELEE"
  },{
    "value":635,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY"
  },{
    "value":552,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_POSTFIRE"
  },{
    "value":551,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PREFIRE"
  },{
    "value":570,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARY"
  },{
    "value":526,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARYFIRE"
  },{
    "value":527,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED"
  },{
    "value":571,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED"
  },{
    "value":602,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_SECONDARY"
  },{
    "value":528,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_SECONDARYFIRE"
  },{
    "value":736,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_BUILDING"
  },{
    "value":525,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE"
  },{
    "value":740,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_BUILDING"
  },{
    "value":638,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_MELEE"
  },{
    "value":586,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_PRIMARY"
  },{
    "value":617,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_SECONDARY"
  },{
    "value":653,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM1"
  },{
    "value":654,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM1_SECONDARY"
  },{
    "value":670,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM2"
  },{
    "value":671,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM2_SECONDARY"
  },{
    "value":632,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_MELEE"
  },{
    "value":633,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_MELEE_SECONDARY"
  },{
    "value":755,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PDA"
  },{
    "value":549,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_POSTFIRE"
  },{
    "value":548,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PREFIRE"
  },{
    "value":568,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARY"
  },{
    "value":522,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARYFIRE"
  },{
    "value":523,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED"
  },{
    "value":569,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED"
  },{
    "value":601,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_SECONDARY"
  },{
    "value":524,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_SECONDARYFIRE"
  },{
    "value":550,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_STARTFIRE"
  },{
    "value":738,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_BUILDING"
  },{
    "value":532,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE"
  },{
    "value":742,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_BUILDING"
  },{
    "value":640,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_MELEE"
  },{
    "value":588,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY"
  },{
    "value":619,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY"
  },{
    "value":657,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_ITEM1"
  },{
    "value":674,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_ITEM2"
  },{
    "value":636,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_MELEE"
  },{
    "value":756,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PDA"
  },{
    "value":554,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_POSTFIRE"
  },{
    "value":553,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PREFIRE"
  },{
    "value":572,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PRIMARY"
  },{
    "value":530,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PRIMARYFIRE"
  },{
    "value":603,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_SECONDARY"
  },{
    "value":531,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_SECONDARYFIRE"
  },{
    "value":511,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK"
  },{
    "value":730,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_BUILDING"
  },{
    "value":647,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_ITEM1"
  },{
    "value":664,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_ITEM2"
  },{
    "value":626,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_MELEE"
  },{
    "value":749,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_PDA"
  },{
    "value":560,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_PRIMARY"
  },{
    "value":595,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_SECONDARY"
  },{
    "value":726,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_BUILDING"
  },{
    "value":506,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_DEPLOYED"
  },{
    "value":505,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_DEPLOYED_IDLE"
  },{
    "value":504,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_IDLE"
  },{
    "value":643,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_ITEM1"
  },{
    "value":660,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_ITEM2"
  },{
    "value":622,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_MELEE"
  },{
    "value":745,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_PDA"
  },{
    "value":556,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_PRIMARY"
  },{
    "value":591,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_SECONDARY"
  },{
    "value":519,
    "kind":"constant",
    "name":"ACT_MP_DEPLOYED"
  },{
    "value":507,
    "kind":"constant",
    "name":"ACT_MP_DEPLOYED_IDLE"
  },{
    "value":566,
    "kind":"constant",
    "name":"ACT_MP_DEPLOYED_PRIMARY"
  },{
    "value":517,
    "kind":"constant",
    "name":"ACT_MP_DOUBLEJUMP"
  },{
    "value":676,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH"
  },{
    "value":683,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_CHEST"
  },{
    "value":682,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_HEAD"
  },{
    "value":680,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_ITEM1"
  },{
    "value":681,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_ITEM2"
  },{
    "value":685,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_LEFTARM"
  },{
    "value":687,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_LEFTLEG"
  },{
    "value":679,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_MELEE"
  },{
    "value":677,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_PRIMARY"
  },{
    "value":686,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_RIGHTARM"
  },{
    "value":688,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_RIGHTLEG"
  },{
    "value":678,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_SECONDARY"
  },{
    "value":684,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_STOMACH"
  },{
    "value":758,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT"
  },{
    "value":794,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING"
  },{
    "value":782,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1"
  },{
    "value":788,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2"
  },{
    "value":776,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_MELEE"
  },{
    "value":800,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_PDA"
  },{
    "value":764,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY"
  },{
    "value":770,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY"
  },{
    "value":759,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP"
  },{
    "value":795,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_BUILDING"
  },{
    "value":783,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_ITEM1"
  },{
    "value":789,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_ITEM2"
  },{
    "value":777,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_MELEE"
  },{
    "value":801,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_PDA"
  },{
    "value":765,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY"
  },{
    "value":771,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY"
  },{
    "value":757,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH"
  },{
    "value":793,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING"
  },{
    "value":781,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1"
  },{
    "value":787,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2"
  },{
    "value":775,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_MELEE"
  },{
    "value":799,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_PDA"
  },{
    "value":763,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY"
  },{
    "value":769,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY"
  },{
    "value":762,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO"
  },{
    "value":798,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_BUILDING"
  },{
    "value":786,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_ITEM1"
  },{
    "value":792,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_ITEM2"
  },{
    "value":780,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_MELEE"
  },{
    "value":804,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_PDA"
  },{
    "value":768,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_PRIMARY"
  },{
    "value":774,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_SECONDARY"
  },{
    "value":761,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES"
  },{
    "value":797,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_BUILDING"
  },{
    "value":785,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_ITEM1"
  },{
    "value":791,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_ITEM2"
  },{
    "value":779,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_MELEE"
  },{
    "value":803,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_PDA"
  },{
    "value":767,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_PRIMARY"
  },{
    "value":773,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_SECONDARY"
  },{
    "value":760,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP"
  },{
    "value":796,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_BUILDING"
  },{
    "value":784,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_ITEM1"
  },{
    "value":790,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_ITEM2"
  },{
    "value":778,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_MELEE"
  },{
    "value":802,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_PDA"
  },{
    "value":766,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY"
  },{
    "value":772,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY"
  },{
    "value":691,
    "kind":"constant",
    "name":"ACT_MP_GRENADE1_ATTACK"
  },{
    "value":689,
    "kind":"constant",
    "name":"ACT_MP_GRENADE1_DRAW"
  },{
    "value":690,
    "kind":"constant",
    "name":"ACT_MP_GRENADE1_IDLE"
  },{
    "value":694,
    "kind":"constant",
    "name":"ACT_MP_GRENADE2_ATTACK"
  },{
    "value":692,
    "kind":"constant",
    "name":"ACT_MP_GRENADE2_DRAW"
  },{
    "value":693,
    "kind":"constant",
    "name":"ACT_MP_GRENADE2_IDLE"
  },{
    "value":715,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE1_ATTACK"
  },{
    "value":713,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE1_DRAW"
  },{
    "value":714,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE1_IDLE"
  },{
    "value":718,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE2_ATTACK"
  },{
    "value":716,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE2_DRAW"
  },{
    "value":717,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE2_IDLE"
  },{
    "value":721,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE1_ATTACK"
  },{
    "value":719,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE1_DRAW"
  },{
    "value":720,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE1_IDLE"
  },{
    "value":724,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE2_ATTACK"
  },{
    "value":722,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE2_DRAW"
  },{
    "value":723,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE2_IDLE"
  },{
    "value":513,
    "kind":"constant",
    "name":"ACT_MP_JUMP"
  },{
    "value":731,
    "kind":"constant",
    "name":"ACT_MP_JUMP_BUILDING"
  },{
    "value":515,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT"
  },{
    "value":733,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_BUILDING"
  },{
    "value":650,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_ITEM1"
  },{
    "value":667,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_ITEM2"
  },{
    "value":629,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_MELEE"
  },{
    "value":752,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_PDA"
  },{
    "value":563,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_PRIMARY"
  },{
    "value":598,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_SECONDARY"
  },{
    "value":648,
    "kind":"constant",
    "name":"ACT_MP_JUMP_ITEM1"
  },{
    "value":665,
    "kind":"constant",
    "name":"ACT_MP_JUMP_ITEM2"
  },{
    "value":516,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND"
  },{
    "value":734,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_BUILDING"
  },{
    "value":651,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_ITEM1"
  },{
    "value":668,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_ITEM2"
  },{
    "value":630,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_MELEE"
  },{
    "value":753,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_PDA"
  },{
    "value":564,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_PRIMARY"
  },{
    "value":599,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_SECONDARY"
  },{
    "value":627,
    "kind":"constant",
    "name":"ACT_MP_JUMP_MELEE"
  },{
    "value":750,
    "kind":"constant",
    "name":"ACT_MP_JUMP_PDA"
  },{
    "value":561,
    "kind":"constant",
    "name":"ACT_MP_JUMP_PRIMARY"
  },{
    "value":596,
    "kind":"constant",
    "name":"ACT_MP_JUMP_SECONDARY"
  },{
    "value":514,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START"
  },{
    "value":732,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_BUILDING"
  },{
    "value":649,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_ITEM1"
  },{
    "value":666,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_ITEM2"
  },{
    "value":628,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_MELEE"
  },{
    "value":751,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_PDA"
  },{
    "value":562,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_PRIMARY"
  },{
    "value":597,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_SECONDARY"
  },{
    "value":709,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE1_ATTACK"
  },{
    "value":707,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE1_DRAW"
  },{
    "value":708,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE1_IDLE"
  },{
    "value":712,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE2_ATTACK"
  },{
    "value":710,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE2_DRAW"
  },{
    "value":711,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE2_IDLE"
  },{
    "value":697,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE1_ATTACK"
  },{
    "value":695,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE1_DRAW"
  },{
    "value":696,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE1_IDLE"
  },{
    "value":700,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE2_ATTACK"
  },{
    "value":698,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE2_DRAW"
  },{
    "value":699,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE2_IDLE"
  },{
    "value":545,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK"
  },{
    "value":547,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_END"
  },{
    "value":546,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_LOOP"
  },{
    "value":583,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY"
  },{
    "value":585,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY_END"
  },{
    "value":584,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP"
  },{
    "value":614,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY"
  },{
    "value":616,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY_END"
  },{
    "value":615,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP"
  },{
    "value":539,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH"
  },{
    "value":541,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_END"
  },{
    "value":540,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_LOOP"
  },{
    "value":577,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY"
  },{
    "value":579,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY_END"
  },{
    "value":578,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP"
  },{
    "value":608,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY"
  },{
    "value":610,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY_END"
  },{
    "value":609,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP"
  },{
    "value":536,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND"
  },{
    "value":538,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_END"
  },{
    "value":537,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_LOOP"
  },{
    "value":574,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_PRIMARY"
  },{
    "value":576,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_PRIMARY_END"
  },{
    "value":575,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_PRIMARY_LOOP"
  },{
    "value":605,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_SECONDARY"
  },{
    "value":607,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_SECONDARY_END"
  },{
    "value":606,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_SECONDARY_LOOP"
  },{
    "value":542,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM"
  },{
    "value":544,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_END"
  },{
    "value":543,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_LOOP"
  },{
    "value":580,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY"
  },{
    "value":582,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY_END"
  },{
    "value":581,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY_LOOP"
  },{
    "value":611,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY"
  },{
    "value":613,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY_END"
  },{
    "value":612,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY_LOOP"
  },{
    "value":508,
    "kind":"constant",
    "name":"ACT_MP_RUN"
  },{
    "value":727,
    "kind":"constant",
    "name":"ACT_MP_RUN_BUILDING"
  },{
    "value":644,
    "kind":"constant",
    "name":"ACT_MP_RUN_ITEM1"
  },{
    "value":661,
    "kind":"constant",
    "name":"ACT_MP_RUN_ITEM2"
  },{
    "value":623,
    "kind":"constant",
    "name":"ACT_MP_RUN_MELEE"
  },{
    "value":746,
    "kind":"constant",
    "name":"ACT_MP_RUN_PDA"
  },{
    "value":557,
    "kind":"constant",
    "name":"ACT_MP_RUN_PRIMARY"
  },{
    "value":592,
    "kind":"constant",
    "name":"ACT_MP_RUN_SECONDARY"
  },{
    "value":703,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE1_ATTACK"
  },{
    "value":701,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE1_DRAW"
  },{
    "value":702,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE1_IDLE"
  },{
    "value":706,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE2_ATTACK"
  },{
    "value":704,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE2_DRAW"
  },{
    "value":705,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE2_IDLE"
  },{
    "value":512,
    "kind":"constant",
    "name":"ACT_MP_SPRINT"
  },{
    "value":725,
    "kind":"constant",
    "name":"ACT_MP_STAND_BUILDING"
  },{
    "value":503,
    "kind":"constant",
    "name":"ACT_MP_STAND_IDLE"
  },{
    "value":642,
    "kind":"constant",
    "name":"ACT_MP_STAND_ITEM1"
  },{
    "value":659,
    "kind":"constant",
    "name":"ACT_MP_STAND_ITEM2"
  },{
    "value":621,
    "kind":"constant",
    "name":"ACT_MP_STAND_MELEE"
  },{
    "value":744,
    "kind":"constant",
    "name":"ACT_MP_STAND_PDA"
  },{
    "value":555,
    "kind":"constant",
    "name":"ACT_MP_STAND_PRIMARY"
  },{
    "value":590,
    "kind":"constant",
    "name":"ACT_MP_STAND_SECONDARY"
  },{
    "value":518,
    "kind":"constant",
    "name":"ACT_MP_SWIM"
  },{
    "value":735,
    "kind":"constant",
    "name":"ACT_MP_SWIM_BUILDING"
  },{
    "value":520,
    "kind":"constant",
    "name":"ACT_MP_SWIM_DEPLOYED"
  },{
    "value":567,
    "kind":"constant",
    "name":"ACT_MP_SWIM_DEPLOYED_PRIMARY"
  },{
    "value":652,
    "kind":"constant",
    "name":"ACT_MP_SWIM_ITEM1"
  },{
    "value":669,
    "kind":"constant",
    "name":"ACT_MP_SWIM_ITEM2"
  },{
    "value":631,
    "kind":"constant",
    "name":"ACT_MP_SWIM_MELEE"
  },{
    "value":754,
    "kind":"constant",
    "name":"ACT_MP_SWIM_PDA"
  },{
    "value":565,
    "kind":"constant",
    "name":"ACT_MP_SWIM_PRIMARY"
  },{
    "value":600,
    "kind":"constant",
    "name":"ACT_MP_SWIM_SECONDARY"
  },{
    "value":521,
    "kind":"constant",
    "name":"ACT_MP_VCD"
  },{
    "value":509,
    "kind":"constant",
    "name":"ACT_MP_WALK"
  },{
    "value":728,
    "kind":"constant",
    "name":"ACT_MP_WALK_BUILDING"
  },{
    "value":645,
    "kind":"constant",
    "name":"ACT_MP_WALK_ITEM1"
  },{
    "value":662,
    "kind":"constant",
    "name":"ACT_MP_WALK_ITEM2"
  },{
    "value":624,
    "kind":"constant",
    "name":"ACT_MP_WALK_MELEE"
  },{
    "value":747,
    "kind":"constant",
    "name":"ACT_MP_WALK_PDA"
  },{
    "value":558,
    "kind":"constant",
    "name":"ACT_MP_WALK_PRIMARY"
  },{
    "value":593,
    "kind":"constant",
    "name":"ACT_MP_WALK_SECONDARY"
  },{
    "value":966,
    "kind":"constant",
    "name":"ACT_NEUTRAL_REF_POSE"
  },{
    "value":463,
    "kind":"constant",
    "name":"ACT_OBJ_ASSEMBLING"
  },{
    "value":469,
    "kind":"constant",
    "name":"ACT_OBJ_DETERIORATING"
  },{
    "value":464,
    "kind":"constant",
    "name":"ACT_OBJ_DISMANTLING"
  },{
    "value":467,
    "kind":"constant",
    "name":"ACT_OBJ_IDLE"
  },{
    "value":468,
    "kind":"constant",
    "name":"ACT_OBJ_PLACING"
  },{
    "value":466,
    "kind":"constant",
    "name":"ACT_OBJ_RUNNING"
  },{
    "value":465,
    "kind":"constant",
    "name":"ACT_OBJ_STARTUP"
  },{
    "value":470,
    "kind":"constant",
    "name":"ACT_OBJ_UPGRADING"
  },{
    "value":412,
    "kind":"constant",
    "name":"ACT_OPEN_DOOR"
  },{
    "value":442,
    "kind":"constant",
    "name":"ACT_OVERLAY_GRENADEIDLE"
  },{
    "value":443,
    "kind":"constant",
    "name":"ACT_OVERLAY_GRENADEREADY"
  },{
    "value":444,
    "kind":"constant",
    "name":"ACT_OVERLAY_PRIMARYATTACK"
  },{
    "value":448,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_ATTACK"
  },{
    "value":446,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_DOWN"
  },{
    "value":449,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_KNOCKBACK"
  },{
    "value":445,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_UP"
  },{
    "value":447,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_UP_IDLE"
  },{
    "value":841,
    "kind":"constant",
    "name":"ACT_PDA_VM_DRAW"
  },{
    "value":848,
    "kind":"constant",
    "name":"ACT_PDA_VM_DRYFIRE"
  },{
    "value":842,
    "kind":"constant",
    "name":"ACT_PDA_VM_HOLSTER"
  },{
    "value":843,
    "kind":"constant",
    "name":"ACT_PDA_VM_IDLE"
  },{
    "value":850,
    "kind":"constant",
    "name":"ACT_PDA_VM_IDLE_LOWERED"
  },{
    "value":849,
    "kind":"constant",
    "name":"ACT_PDA_VM_IDLE_TO_LOWERED"
  },{
    "value":851,
    "kind":"constant",
    "name":"ACT_PDA_VM_LOWERED_TO_IDLE"
  },{
    "value":845,
    "kind":"constant",
    "name":"ACT_PDA_VM_PRIMARYATTACK"
  },{
    "value":844,
    "kind":"constant",
    "name":"ACT_PDA_VM_PULLBACK"
  },{
    "value":847,
    "kind":"constant",
    "name":"ACT_PDA_VM_RELOAD"
  },{
    "value":846,
    "kind":"constant",
    "name":"ACT_PDA_VM_SECONDARYATTACK"
  },{
    "value":399,
    "kind":"constant",
    "name":"ACT_PHYSCANNON_ANIMATE"
  },{
    "value":401,
    "kind":"constant",
    "name":"ACT_PHYSCANNON_ANIMATE_POST"
  },{
    "value":400,
    "kind":"constant",
    "name":"ACT_PHYSCANNON_ANIMATE_PRE"
  },{
    "value":398,
    "kind":"constant",
    "name":"ACT_PHYSCANNON_DETACH"
  },{
    "value":272,
    "kind":"constant",
    "name":"ACT_PHYSCANNON_UPGRADE"
  },{
    "value":75,
    "kind":"constant",
    "name":"ACT_PICKUP_GROUND"
  },{
    "value":76,
    "kind":"constant",
    "name":"ACT_PICKUP_RACK"
  },{
    "value":489,
    "kind":"constant",
    "name":"ACT_PLAYER_CROUCH_FIRE"
  },{
    "value":490,
    "kind":"constant",
    "name":"ACT_PLAYER_CROUCH_WALK_FIRE"
  },{
    "value":488,
    "kind":"constant",
    "name":"ACT_PLAYER_IDLE_FIRE"
  },{
    "value":492,
    "kind":"constant",
    "name":"ACT_PLAYER_RUN_FIRE"
  },{
    "value":491,
    "kind":"constant",
    "name":"ACT_PLAYER_WALK_FIRE"
  },{
    "value":338,
    "kind":"constant",
    "name":"ACT_POLICE_HARASS1"
  },{
    "value":339,
    "kind":"constant",
    "name":"ACT_POLICE_HARASS2"
  },{
    "value":909,
    "kind":"constant",
    "name":"ACT_PREP_EXPLODE"
  },{
    "value":905,
    "kind":"constant",
    "name":"ACT_PREP_TO_FIRE"
  },{
    "value":808,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_DRAW"
  },{
    "value":815,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_DRYFIRE"
  },{
    "value":809,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_HOLSTER"
  },{
    "value":810,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_IDLE"
  },{
    "value":817,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_IDLE_LOWERED"
  },{
    "value":816,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_IDLE_TO_LOWERED"
  },{
    "value":818,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_LOWERED_TO_IDLE"
  },{
    "value":812,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_PRIMARYATTACK"
  },{
    "value":811,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_PULLBACK"
  },{
    "value":814,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_RELOAD"
  },{
    "value":813,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_SECONDARYATTACK"
  },{
    "value":952,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_BACK"
  },{
    "value":951,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_FRONT"
  },{
    "value":953,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_LEFT"
  },{
    "value":954,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_RIGHT"
  },{
    "value":295,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_AR2_LOW"
  },{
    "value":292,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_LOW"
  },{
    "value":294,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_PISTOL_LOW"
  },{
    "value":293,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_SMG1_LOW"
  },{
    "value":16,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK1"
  },{
    "value":18,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK1_LOW"
  },{
    "value":17,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK2"
  },{
    "value":19,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK2_LOW"
  },{
    "value":273,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR1"
  },{
    "value":274,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR2"
  },{
    "value":276,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR2_GRENADE"
  },{
    "value":275,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR2_LOW"
  },{
    "value":882,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AUTOGUN"
  },{
    "value":891,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_DUAL"
  },{
    "value":277,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_HMG1"
  },{
    "value":278,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_ML"
  },{
    "value":284,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_PISTOL"
  },{
    "value":285,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_PISTOL_LOW"
  },{
    "value":897,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_RIFLE"
  },{
    "value":290,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_RPG"
  },{
    "value":282,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SHOTGUN"
  },{
    "value":283,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SHOTGUN_LOW"
  },{
    "value":286,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SLAM"
  },{
    "value":279,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SMG1"
  },{
    "value":280,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SMG1_LOW"
  },{
    "value":281,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SMG2"
  },{
    "value":289,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SNIPER_RIFLE"
  },{
    "value":288,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_THROW"
  },{
    "value":287,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_TRIPWIRE"
  },{
    "value":421,
    "kind":"constant",
    "name":"ACT_READINESS_AGITATED_TO_STIMULATED"
  },{
    "value":425,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED"
  },{
    "value":423,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED"
  },{
    "value":424,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK"
  },{
    "value":426,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED"
  },{
    "value":419,
    "kind":"constant",
    "name":"ACT_READINESS_RELAXED_TO_STIMULATED"
  },{
    "value":420,
    "kind":"constant",
    "name":"ACT_READINESS_RELAXED_TO_STIMULATED_WALK"
  },{
    "value":422,
    "kind":"constant",
    "name":"ACT_READINESS_STIMULATED_TO_RELAXED"
  },{
    "value":67,
    "kind":"constant",
    "name":"ACT_RELOAD"
  },{
    "value":880,
    "kind":"constant",
    "name":"ACT_RELOAD_AUTOGUN"
  },{
    "value":889,
    "kind":"constant",
    "name":"ACT_RELOAD_DUAL"
  },{
    "value":875,
    "kind":"constant",
    "name":"ACT_RELOAD_FAIL"
  },{
    "value":69,
    "kind":"constant",
    "name":"ACT_RELOAD_FINISH"
  },{
    "value":70,
    "kind":"constant",
    "name":"ACT_RELOAD_LOW"
  },{
    "value":371,
    "kind":"constant",
    "name":"ACT_RELOAD_PISTOL"
  },{
    "value":372,
    "kind":"constant",
    "name":"ACT_RELOAD_PISTOL_LOW"
  },{
    "value":375,
    "kind":"constant",
    "name":"ACT_RELOAD_SHOTGUN"
  },{
    "value":376,
    "kind":"constant",
    "name":"ACT_RELOAD_SHOTGUN_LOW"
  },{
    "value":373,
    "kind":"constant",
    "name":"ACT_RELOAD_SMG1"
  },{
    "value":374,
    "kind":"constant",
    "name":"ACT_RELOAD_SMG1_LOW"
  },{
    "value":68,
    "kind":"constant",
    "name":"ACT_RELOAD_START"
  },{
    "value":874,
    "kind":"constant",
    "name":"ACT_RELOAD_SUCCEED"
  },{
    "value":0,
    "kind":"constant",
    "name":"ACT_RESET"
  },{
    "value":432,
    "kind":"constant",
    "name":"ACT_RIDE_MANNED_GUN"
  },{
    "value":40,
    "kind":"constant",
    "name":"ACT_ROLL_LEFT"
  },{
    "value":41,
    "kind":"constant",
    "name":"ACT_ROLL_RIGHT"
  },{
    "value":10,
    "kind":"constant",
    "name":"ACT_RUN"
  },{
    "value":494,
    "kind":"constant",
    "name":"ACT_RUNTOIDLE"
  },{
    "value":89,
    "kind":"constant",
    "name":"ACT_RUN_AGITATED"
  },{
    "value":11,
    "kind":"constant",
    "name":"ACT_RUN_AIM"
  },{
    "value":101,
    "kind":"constant",
    "name":"ACT_RUN_AIM_AGITATED"
  },{
    "value":877,
    "kind":"constant",
    "name":"ACT_RUN_AIM_AUTOGUN"
  },{
    "value":886,
    "kind":"constant",
    "name":"ACT_RUN_AIM_DUAL"
  },{
    "value":367,
    "kind":"constant",
    "name":"ACT_RUN_AIM_PISTOL"
  },{
    "value":99,
    "kind":"constant",
    "name":"ACT_RUN_AIM_RELAXED"
  },{
    "value":358,
    "kind":"constant",
    "name":"ACT_RUN_AIM_RIFLE"
  },{
    "value":333,
    "kind":"constant",
    "name":"ACT_RUN_AIM_RIFLE_STIMULATED"
  },{
    "value":363,
    "kind":"constant",
    "name":"ACT_RUN_AIM_SHOTGUN"
  },{
    "value":102,
    "kind":"constant",
    "name":"ACT_RUN_AIM_STEALTH"
  },{
    "value":370,
    "kind":"constant",
    "name":"ACT_RUN_AIM_STEALTH_PISTOL"
  },{
    "value":100,
    "kind":"constant",
    "name":"ACT_RUN_AIM_STIMULATED"
  },{
    "value":12,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH"
  },{
    "value":13,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_AIM"
  },{
    "value":360,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_AIM_RIFLE"
  },{
    "value":359,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_RIFLE"
  },{
    "value":350,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_RPG"
  },{
    "value":107,
    "kind":"constant",
    "name":"ACT_RUN_HURT"
  },{
    "value":135,
    "kind":"constant",
    "name":"ACT_RUN_ON_FIRE"
  },{
    "value":365,
    "kind":"constant",
    "name":"ACT_RUN_PISTOL"
  },{
    "value":14,
    "kind":"constant",
    "name":"ACT_RUN_PROTECTED"
  },{
    "value":87,
    "kind":"constant",
    "name":"ACT_RUN_RELAXED"
  },{
    "value":357,
    "kind":"constant",
    "name":"ACT_RUN_RIFLE"
  },{
    "value":328,
    "kind":"constant",
    "name":"ACT_RUN_RIFLE_RELAXED"
  },{
    "value":330,
    "kind":"constant",
    "name":"ACT_RUN_RIFLE_STIMULATED"
  },{
    "value":348,
    "kind":"constant",
    "name":"ACT_RUN_RPG"
  },{
    "value":352,
    "kind":"constant",
    "name":"ACT_RUN_RPG_RELAXED"
  },{
    "value":112,
    "kind":"constant",
    "name":"ACT_RUN_SCARED"
  },{
    "value":90,
    "kind":"constant",
    "name":"ACT_RUN_STEALTH"
  },{
    "value":361,
    "kind":"constant",
    "name":"ACT_RUN_STEALTH_PISTOL"
  },{
    "value":88,
    "kind":"constant",
    "name":"ACT_RUN_STIMULATED"
  },{
    "value":911,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_0"
  },{
    "value":912,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_1"
  },{
    "value":921,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_10"
  },{
    "value":922,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_11"
  },{
    "value":923,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_12"
  },{
    "value":924,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_13"
  },{
    "value":925,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_14"
  },{
    "value":926,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_15"
  },{
    "value":927,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_16"
  },{
    "value":928,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_17"
  },{
    "value":929,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_18"
  },{
    "value":930,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_19"
  },{
    "value":913,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_2"
  },{
    "value":931,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_20"
  },{
    "value":932,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_21"
  },{
    "value":933,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_22"
  },{
    "value":934,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_23"
  },{
    "value":935,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_24"
  },{
    "value":936,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_25"
  },{
    "value":937,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_26"
  },{
    "value":938,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_27"
  },{
    "value":939,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_28"
  },{
    "value":940,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_29"
  },{
    "value":914,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_3"
  },{
    "value":941,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_30"
  },{
    "value":942,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_31"
  },{
    "value":915,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_4"
  },{
    "value":916,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_5"
  },{
    "value":917,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_6"
  },{
    "value":918,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_7"
  },{
    "value":919,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_8"
  },{
    "value":920,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_9"
  },{
    "value":15,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_MOVE"
  },{
    "value":819,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_DRAW"
  },{
    "value":826,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_DRYFIRE"
  },{
    "value":820,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_HOLSTER"
  },{
    "value":821,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_IDLE"
  },{
    "value":828,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_IDLE_LOWERED"
  },{
    "value":827,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_IDLE_TO_LOWERED"
  },{
    "value":829,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_LOWERED_TO_IDLE"
  },{
    "value":823,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_PRIMARYATTACK"
  },{
    "value":822,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_PULLBACK"
  },{
    "value":825,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_RELOAD"
  },{
    "value":824,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_SECONDARYATTACK"
  },{
    "value":453,
    "kind":"constant",
    "name":"ACT_SHIELD_ATTACK"
  },{
    "value":451,
    "kind":"constant",
    "name":"ACT_SHIELD_DOWN"
  },{
    "value":454,
    "kind":"constant",
    "name":"ACT_SHIELD_KNOCKBACK"
  },{
    "value":450,
    "kind":"constant",
    "name":"ACT_SHIELD_UP"
  },{
    "value":452,
    "kind":"constant",
    "name":"ACT_SHIELD_UP_IDLE"
  },{
    "value":37,
    "kind":"constant",
    "name":"ACT_SHIPLADDER_DOWN"
  },{
    "value":36,
    "kind":"constant",
    "name":"ACT_SHIPLADDER_UP"
  },{
    "value":264,
    "kind":"constant",
    "name":"ACT_SHOTGUN_PUMP"
  },{
    "value":263,
    "kind":"constant",
    "name":"ACT_SHOTGUN_RELOAD_FINISH"
  },{
    "value":262,
    "kind":"constant",
    "name":"ACT_SHOTGUN_RELOAD_START"
  },{
    "value":50,
    "kind":"constant",
    "name":"ACT_SIGNAL1"
  },{
    "value":51,
    "kind":"constant",
    "name":"ACT_SIGNAL2"
  },{
    "value":52,
    "kind":"constant",
    "name":"ACT_SIGNAL3"
  },{
    "value":53,
    "kind":"constant",
    "name":"ACT_SIGNAL_ADVANCE"
  },{
    "value":54,
    "kind":"constant",
    "name":"ACT_SIGNAL_FORWARD"
  },{
    "value":55,
    "kind":"constant",
    "name":"ACT_SIGNAL_GROUP"
  },{
    "value":56,
    "kind":"constant",
    "name":"ACT_SIGNAL_HALT"
  },{
    "value":57,
    "kind":"constant",
    "name":"ACT_SIGNAL_LEFT"
  },{
    "value":58,
    "kind":"constant",
    "name":"ACT_SIGNAL_RIGHT"
  },{
    "value":59,
    "kind":"constant",
    "name":"ACT_SIGNAL_TAKECOVER"
  },{
    "value":258,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_DETONATE"
  },{
    "value":257,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_DRAW"
  },{
    "value":259,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_HOLSTER"
  },{
    "value":256,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_IDLE"
  },{
    "value":260,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_STICKWALL_DRAW"
  },{
    "value":261,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_THROW_DRAW"
  },{
    "value":226,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ATTACH"
  },{
    "value":227,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ATTACH2"
  },{
    "value":230,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_DETONATE"
  },{
    "value":231,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_DETONATOR_HOLSTER"
  },{
    "value":232,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_DRAW"
  },{
    "value":224,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_IDLE"
  },{
    "value":228,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_ATTACH"
  },{
    "value":229,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_ATTACH2"
  },{
    "value":233,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_DRAW"
  },{
    "value":225,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_IDLE"
  },{
    "value":234,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_TO_THROW"
  },{
    "value":235,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_TO_THROW_ND"
  },{
    "value":236,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_TO_TRIPMINE_ND"
  },{
    "value":247,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_DETONATE"
  },{
    "value":248,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_DETONATOR_HOLSTER"
  },{
    "value":243,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_DRAW"
  },{
    "value":237,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_IDLE"
  },{
    "value":244,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_ND_DRAW"
  },{
    "value":238,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_ND_IDLE"
  },{
    "value":239,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW"
  },{
    "value":240,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW2"
  },{
    "value":241,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW_ND"
  },{
    "value":242,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW_ND2"
  },{
    "value":245,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_TO_STICKWALL"
  },{
    "value":246,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_TO_STICKWALL_ND"
  },{
    "value":249,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_TO_TRIPMINE_ND"
  },{
    "value":252,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_ATTACH"
  },{
    "value":253,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_ATTACH2"
  },{
    "value":251,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_DRAW"
  },{
    "value":250,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_IDLE"
  },{
    "value":254,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_TO_STICKWALL_ND"
  },{
    "value":255,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_TO_THROW_ND"
  },{
    "value":898,
    "kind":"constant",
    "name":"ACT_SLEEP"
  },{
    "value":63,
    "kind":"constant",
    "name":"ACT_SMALL_FLINCH"
  },{
    "value":267,
    "kind":"constant",
    "name":"ACT_SMG2_DRAW2"
  },{
    "value":269,
    "kind":"constant",
    "name":"ACT_SMG2_DRYFIRE2"
  },{
    "value":266,
    "kind":"constant",
    "name":"ACT_SMG2_FIRE2"
  },{
    "value":265,
    "kind":"constant",
    "name":"ACT_SMG2_IDLE2"
  },{
    "value":268,
    "kind":"constant",
    "name":"ACT_SMG2_RELOAD2"
  },{
    "value":270,
    "kind":"constant",
    "name":"ACT_SMG2_TOAUTO"
  },{
    "value":271,
    "kind":"constant",
    "name":"ACT_SMG2_TOBURST"
  },{
    "value":108,
    "kind":"constant",
    "name":"ACT_SPECIAL_ATTACK1"
  },{
    "value":109,
    "kind":"constant",
    "name":"ACT_SPECIAL_ATTACK2"
  },{
    "value":180,
    "kind":"constant",
    "name":"ACT_SPECIFIC_SEQUENCE"
  },{
    "value":904,
    "kind":"constant",
    "name":"ACT_SPINAROUND"
  },{
    "value":908,
    "kind":"constant",
    "name":"ACT_SPRAY"
  },{
    "value":46,
    "kind":"constant",
    "name":"ACT_STAND"
  },{
    "value":429,
    "kind":"constant",
    "name":"ACT_STARTDYING"
  },{
    "value":143,
    "kind":"constant",
    "name":"ACT_STEP_BACK"
  },{
    "value":144,
    "kind":"constant",
    "name":"ACT_STEP_FORE"
  },{
    "value":141,
    "kind":"constant",
    "name":"ACT_STEP_LEFT"
  },{
    "value":142,
    "kind":"constant",
    "name":"ACT_STEP_RIGHT"
  },{
    "value":1554,
    "kind":"constant",
    "name":"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE"
  },{
    "value":38,
    "kind":"constant",
    "name":"ACT_STRAFE_LEFT"
  },{
    "value":39,
    "kind":"constant",
    "name":"ACT_STRAFE_RIGHT"
  },{
    "value":28,
    "kind":"constant",
    "name":"ACT_SWIM"
  },{
    "value":1558,
    "kind":"constant",
    "name":"ACT_TINY_AVALANCHE"
  },{
    "value":1560,
    "kind":"constant",
    "name":"ACT_TINY_GROWL"
  },{
    "value":1559,
    "kind":"constant",
    "name":"ACT_TINY_TOSS"
  },{
    "value":2,
    "kind":"constant",
    "name":"ACT_TRANSITION"
  },{
    "value":462,
    "kind":"constant",
    "name":"ACT_TURN"
  },{
    "value":461,
    "kind":"constant",
    "name":"ACT_TURNLEFT45"
  },{
    "value":460,
    "kind":"constant",
    "name":"ACT_TURNRIGHT45"
  },{
    "value":42,
    "kind":"constant",
    "name":"ACT_TURN_LEFT"
  },{
    "value":43,
    "kind":"constant",
    "name":"ACT_TURN_RIGHT"
  },{
    "value":473,
    "kind":"constant",
    "name":"ACT_UNDEPLOY"
  },{
    "value":47,
    "kind":"constant",
    "name":"ACT_USE"
  },{
    "value":113,
    "kind":"constant",
    "name":"ACT_VICTORY_DANCE"
  },{
    "value":222,
    "kind":"constant",
    "name":"ACT_VM_ATTACH_SILENCER"
  },{
    "value":181,
    "kind":"constant",
    "name":"ACT_VM_DEPLOY"
  },{
    "value":223,
    "kind":"constant",
    "name":"ACT_VM_DETACH_SILENCER"
  },{
    "value":183,
    "kind":"constant",
    "name":"ACT_VM_DRAW"
  },{
    "value":495,
    "kind":"constant",
    "name":"ACT_VM_DRAW_DEPLOYED"
  },{
    "value":481,
    "kind":"constant",
    "name":"ACT_VM_DRAW_SILENCED"
  },{
    "value":191,
    "kind":"constant",
    "name":"ACT_VM_DROP"
  },{
    "value":196,
    "kind":"constant",
    "name":"ACT_VM_DRYFIRE"
  },{
    "value":483,
    "kind":"constant",
    "name":"ACT_VM_DRYFIRE_LEFT"
  },{
    "value":479,
    "kind":"constant",
    "name":"ACT_VM_DRYFIRE_SILENCED"
  },{
    "value":186,
    "kind":"constant",
    "name":"ACT_VM_FIDGET"
  },{
    "value":209,
    "kind":"constant",
    "name":"ACT_VM_HAULBACK"
  },{
    "value":201,
    "kind":"constant",
    "name":"ACT_VM_HITCENTER"
  },{
    "value":202,
    "kind":"constant",
    "name":"ACT_VM_HITCENTER2"
  },{
    "value":197,
    "kind":"constant",
    "name":"ACT_VM_HITLEFT"
  },{
    "value":198,
    "kind":"constant",
    "name":"ACT_VM_HITLEFT2"
  },{
    "value":199,
    "kind":"constant",
    "name":"ACT_VM_HITRIGHT"
  },{
    "value":200,
    "kind":"constant",
    "name":"ACT_VM_HITRIGHT2"
  },{
    "value":184,
    "kind":"constant",
    "name":"ACT_VM_HOLSTER"
  },{
    "value":185,
    "kind":"constant",
    "name":"ACT_VM_IDLE"
  },{
    "value":482,
    "kind":"constant",
    "name":"ACT_VM_IDLE_EMPTY_LEFT"
  },{
    "value":214,
    "kind":"constant",
    "name":"ACT_VM_IDLE_LOWERED"
  },{
    "value":480,
    "kind":"constant",
    "name":"ACT_VM_IDLE_SILENCED"
  },{
    "value":213,
    "kind":"constant",
    "name":"ACT_VM_IDLE_TO_LOWERED"
  },{
    "value":484,
    "kind":"constant",
    "name":"ACT_VM_IS_DRAW"
  },{
    "value":485,
    "kind":"constant",
    "name":"ACT_VM_IS_HOLSTER"
  },{
    "value":486,
    "kind":"constant",
    "name":"ACT_VM_IS_IDLE"
  },{
    "value":487,
    "kind":"constant",
    "name":"ACT_VM_IS_PRIMARYATTACK"
  },{
    "value":215,
    "kind":"constant",
    "name":"ACT_VM_LOWERED_TO_IDLE"
  },{
    "value":221,
    "kind":"constant",
    "name":"ACT_VM_MAUL_LOOP"
  },{
    "value":207,
    "kind":"constant",
    "name":"ACT_VM_MISSCENTER"
  },{
    "value":208,
    "kind":"constant",
    "name":"ACT_VM_MISSCENTER2"
  },{
    "value":203,
    "kind":"constant",
    "name":"ACT_VM_MISSLEFT"
  },{
    "value":204,
    "kind":"constant",
    "name":"ACT_VM_MISSLEFT2"
  },{
    "value":205,
    "kind":"constant",
    "name":"ACT_VM_MISSRIGHT"
  },{
    "value":206,
    "kind":"constant",
    "name":"ACT_VM_MISSRIGHT2"
  },{
    "value":219,
    "kind":"constant",
    "name":"ACT_VM_PICKUP"
  },{
    "value":193,
    "kind":"constant",
    "name":"ACT_VM_PRIMARYATTACK"
  },{
    "value":477,
    "kind":"constant",
    "name":"ACT_VM_PRIMARYATTACK_SILENCED"
  },{
    "value":187,
    "kind":"constant",
    "name":"ACT_VM_PULLBACK"
  },{
    "value":188,
    "kind":"constant",
    "name":"ACT_VM_PULLBACK_HIGH"
  },{
    "value":189,
    "kind":"constant",
    "name":"ACT_VM_PULLBACK_LOW"
  },{
    "value":192,
    "kind":"constant",
    "name":"ACT_VM_PULLPIN"
  },{
    "value":216,
    "kind":"constant",
    "name":"ACT_VM_RECOIL1"
  },{
    "value":217,
    "kind":"constant",
    "name":"ACT_VM_RECOIL2"
  },{
    "value":218,
    "kind":"constant",
    "name":"ACT_VM_RECOIL3"
  },{
    "value":220,
    "kind":"constant",
    "name":"ACT_VM_RELEASE"
  },{
    "value":195,
    "kind":"constant",
    "name":"ACT_VM_RELOAD"
  },{
    "value":182,
    "kind":"constant",
    "name":"ACT_VM_RELOAD_EMPTY"
  },{
    "value":478,
    "kind":"constant",
    "name":"ACT_VM_RELOAD_SILENCED"
  },{
    "value":194,
    "kind":"constant",
    "name":"ACT_VM_SECONDARYATTACK"
  },{
    "value":433,
    "kind":"constant",
    "name":"ACT_VM_SPRINT_ENTER"
  },{
    "value":434,
    "kind":"constant",
    "name":"ACT_VM_SPRINT_IDLE"
  },{
    "value":435,
    "kind":"constant",
    "name":"ACT_VM_SPRINT_LEAVE"
  },{
    "value":210,
    "kind":"constant",
    "name":"ACT_VM_SWINGHARD"
  },{
    "value":212,
    "kind":"constant",
    "name":"ACT_VM_SWINGHIT"
  },{
    "value":211,
    "kind":"constant",
    "name":"ACT_VM_SWINGMISS"
  },{
    "value":190,
    "kind":"constant",
    "name":"ACT_VM_THROW"
  },{
    "value":805,
    "kind":"constant",
    "name":"ACT_VM_UNUSABLE"
  },{
    "value":806,
    "kind":"constant",
    "name":"ACT_VM_UNUSABLE_TO_USABLE"
  },{
    "value":807,
    "kind":"constant",
    "name":"ACT_VM_USABLE_TO_UNUSABLE"
  },{
    "value":986,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_BURST_ATTACK"
  },{
    "value":984,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_BURST_TOGGLE"
  },{
    "value":947,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_IN_CHAMBERED"
  },{
    "value":948,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_IN_SLIDE_BACK"
  },{
    "value":945,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_OUT_CHAMBERED"
  },{
    "value":946,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_OUT_SLIDE_BACK"
  },{
    "value":971,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_EMPTY_CLIP_IN_SLIDE_BACK"
  },{
    "value":949,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_IDLE_SLIDE_BACK"
  },{
    "value":950,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_IDLE_SLIDE_BACK_CLIP_READY"
  },{
    "value":943,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LAST_SHOT"
  },{
    "value":982,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LONG_CLIP_IN_CHAMBERED"
  },{
    "value":983,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LONG_CLIP_IN_SLIDE_BACK"
  },{
    "value":985,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LOW_KICK"
  },{
    "value":944,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_SLIDE_RELEASE"
  },{
    "value":977,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_CLOSE_CHAMBER"
  },{
    "value":987,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_GRENADE_TWIST"
  },{
    "value":972,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_IDLE"
  },{
    "value":973,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_OPEN_CHAMBER"
  },{
    "value":974,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_RELOAD_1"
  },{
    "value":975,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_RELOAD_2"
  },{
    "value":976,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_RELOAD_3"
  },{
    "value":979,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_SHOOT"
  },{
    "value":980,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_SLIDE_BACK"
  },{
    "value":981,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_SLIDE_FORWARD"
  },{
    "value":978,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_TRIGGER_SQUEEZE"
  },{
    "value":899,
    "kind":"constant",
    "name":"ACT_WAKE"
  },{
    "value":6,
    "kind":"constant",
    "name":"ACT_WALK"
  },{
    "value":85,
    "kind":"constant",
    "name":"ACT_WALK_AGITATED"
  },{
    "value":7,
    "kind":"constant",
    "name":"ACT_WALK_AIM"
  },{
    "value":97,
    "kind":"constant",
    "name":"ACT_WALK_AIM_AGITATED"
  },{
    "value":876,
    "kind":"constant",
    "name":"ACT_WALK_AIM_AUTOGUN"
  },{
    "value":885,
    "kind":"constant",
    "name":"ACT_WALK_AIM_DUAL"
  },{
    "value":366,
    "kind":"constant",
    "name":"ACT_WALK_AIM_PISTOL"
  },{
    "value":95,
    "kind":"constant",
    "name":"ACT_WALK_AIM_RELAXED"
  },{
    "value":354,
    "kind":"constant",
    "name":"ACT_WALK_AIM_RIFLE"
  },{
    "value":332,
    "kind":"constant",
    "name":"ACT_WALK_AIM_RIFLE_STIMULATED"
  },{
    "value":362,
    "kind":"constant",
    "name":"ACT_WALK_AIM_SHOTGUN"
  },{
    "value":98,
    "kind":"constant",
    "name":"ACT_WALK_AIM_STEALTH"
  },{
    "value":369,
    "kind":"constant",
    "name":"ACT_WALK_AIM_STEALTH_PISTOL"
  },{
    "value":96,
    "kind":"constant",
    "name":"ACT_WALK_AIM_STIMULATED"
  },{
    "value":337,
    "kind":"constant",
    "name":"ACT_WALK_ANGRY"
  },{
    "value":428,
    "kind":"constant",
    "name":"ACT_WALK_CARRY"
  },{
    "value":8,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH"
  },{
    "value":9,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_AIM"
  },{
    "value":356,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_AIM_RIFLE"
  },{
    "value":355,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_RIFLE"
  },{
    "value":349,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_RPG"
  },{
    "value":106,
    "kind":"constant",
    "name":"ACT_WALK_HURT"
  },{
    "value":134,
    "kind":"constant",
    "name":"ACT_WALK_ON_FIRE"
  },{
    "value":322,
    "kind":"constant",
    "name":"ACT_WALK_PACKAGE"
  },{
    "value":364,
    "kind":"constant",
    "name":"ACT_WALK_PISTOL"
  },{
    "value":83,
    "kind":"constant",
    "name":"ACT_WALK_RELAXED"
  },{
    "value":353,
    "kind":"constant",
    "name":"ACT_WALK_RIFLE"
  },{
    "value":327,
    "kind":"constant",
    "name":"ACT_WALK_RIFLE_RELAXED"
  },{
    "value":329,
    "kind":"constant",
    "name":"ACT_WALK_RIFLE_STIMULATED"
  },{
    "value":347,
    "kind":"constant",
    "name":"ACT_WALK_RPG"
  },{
    "value":351,
    "kind":"constant",
    "name":"ACT_WALK_RPG_RELAXED"
  },{
    "value":111,
    "kind":"constant",
    "name":"ACT_WALK_SCARED"
  },{
    "value":86,
    "kind":"constant",
    "name":"ACT_WALK_STEALTH"
  },{
    "value":368,
    "kind":"constant",
    "name":"ACT_WALK_STEALTH_PISTOL"
  },{
    "value":84,
    "kind":"constant",
    "name":"ACT_WALK_STIMULATED"
  },{
    "value":324,
    "kind":"constant",
    "name":"ACT_WALK_SUITCASE"
  },{
    "value":1546,
    "kind":"constant",
    "name":"ACT_WAVEFORM_END"
  },{
    "value":1545,
    "kind":"constant",
    "name":"ACT_WAVEFORM_START"
  },{
    "value":965,
    "kind":"constant",
    "name":"ACT_ZOMBIE_LUNGE"
  },{
    "value":964,
    "kind":"constant",
    "name":"ACT_ZOMBIE_TRIP"
  },{
    "value":7,
    "kind":"constant",
    "name":"AE_CLIENT_EFFECT_ATTACH"
  },{
    "value":10,
    "kind":"constant",
    "name":"AE_CL_ADD_PARTICLE_EFFECT_CP"
  },{
    "value":27,
    "kind":"constant",
    "name":"AE_CL_BODYGROUP_SET_VALUE"
  },{
    "value":29,
    "kind":"constant",
    "name":"AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN"
  },{
    "value":39,
    "kind":"constant",
    "name":"AE_CL_CLOTH_ATTR"
  },{
    "value":42,
    "kind":"constant",
    "name":"AE_CL_CLOTH_EFFECT"
  },{
    "value":40,
    "kind":"constant",
    "name":"AE_CL_CLOTH_GROUND_OFFSET"
  },{
    "value":41,
    "kind":"constant",
    "name":"AE_CL_CLOTH_STIFFEN"
  },{
    "value":43,
    "kind":"constant",
    "name":"AE_CL_CREATE_ANIM_SCOPE_PROP"
  },{
    "value":8,
    "kind":"constant",
    "name":"AE_CL_CREATE_PARTICLE_EFFECT"
  },{
    "value":11,
    "kind":"constant",
    "name":"AE_CL_CREATE_PARTICLE_EFFECT_CFG"
  },{
    "value":26,
    "kind":"constant",
    "name":"AE_CL_DISABLE_BODYGROUP"
  },{
    "value":47,
    "kind":"constant",
    "name":"AE_CL_DOTA_NPC_CREATE_PARTICLE_EFFECT"
  },{
    "value":45,
    "kind":"constant",
    "name":"AE_CL_DOTA_PLAY_STATUS_EFFECT"
  },{
    "value":48,
    "kind":"constant",
    "name":"AE_CL_DOTA_RUBICK_ARCANA_CREATE_PARTICLE_EFFECT"
  },{
    "value":46,
    "kind":"constant",
    "name":"AE_CL_DOTA_STOP_STATUS_EFFECT"
  },{
    "value":25,
    "kind":"constant",
    "name":"AE_CL_ENABLE_BODYGROUP"
  },{
    "value":18,
    "kind":"constant",
    "name":"AE_CL_FOOTSTEP_LEFT"
  },{
    "value":19,
    "kind":"constant",
    "name":"AE_CL_FOOTSTEP_RIGHT"
  },{
    "value":20,
    "kind":"constant",
    "name":"AE_CL_MFOOTSTEP_LEFT"
  },{
    "value":22,
    "kind":"constant",
    "name":"AE_CL_MFOOTSTEP_LEFT_LOUD"
  },{
    "value":21,
    "kind":"constant",
    "name":"AE_CL_MFOOTSTEP_RIGHT"
  },{
    "value":23,
    "kind":"constant",
    "name":"AE_CL_MFOOTSTEP_RIGHT_LOUD"
  },{
    "value":1,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND"
  },{
    "value":2,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND_ATTACHMENT"
  },{
    "value":6,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND_LOOPING"
  },{
    "value":3,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND_POSITION"
  },{
    "value":33,
    "kind":"constant",
    "name":"AE_CL_SPEECH"
  },{
    "value":5,
    "kind":"constant",
    "name":"AE_CL_STOPSOUND"
  },{
    "value":9,
    "kind":"constant",
    "name":"AE_CL_STOP_PARTICLE_EFFECT"
  },{
    "value":12,
    "kind":"constant",
    "name":"AE_CL_SUPPRESS_EVENTS_WITH_TAG"
  },{
    "value":53,
    "kind":"constant",
    "name":"AE_DOTA_CREATE_CLINKZ_ATTACK"
  },{
    "value":55,
    "kind":"constant",
    "name":"AE_DOTA_DIE_PHANTOM_DEATH_PARTICLES"
  },{
    "value":50,
    "kind":"constant",
    "name":"AE_DOTA_PET_ITEM_DROP"
  },{
    "value":49,
    "kind":"constant",
    "name":"AE_DOTA_PET_ITEM_PICKUP"
  },{
    "value":54,
    "kind":"constant",
    "name":"AE_DOTA_PLAY_SOUND_ATTACK_BACKSTAB"
  },{
    "value":52,
    "kind":"constant",
    "name":"AE_DOTA_PLAY_SOUND_ATTACK_SPECIAL"
  },{
    "value":51,
    "kind":"constant",
    "name":"AE_DOTA_SUPPRESS_CONSTANT_LAYER"
  },{
    "value":56,
    "kind":"constant",
    "name":"AE_DOTA_SWITCH_ATTACK_COMBO"
  },{
    "value":0,
    "kind":"constant",
    "name":"AE_EMPTY"
  },{
    "value":34,
    "kind":"constant",
    "name":"AE_FIRE_INPUT"
  },{
    "value":17,
    "kind":"constant",
    "name":"AE_FOOTSTEP"
  },{
    "value":44,
    "kind":"constant",
    "name":"AE_HAPTIC_PULSE"
  },{
    "value":36,
    "kind":"constant",
    "name":"AE_IK_ALLOW_PLANE_TILT_NORMAL_UPDATES"
  },{
    "value":38,
    "kind":"constant",
    "name":"AE_IK_SET_CHAIN_BLEND_AMOUNT"
  },{
    "value":35,
    "kind":"constant",
    "name":"AE_IK_SET_LOCK_ROTATION_ALPHA"
  },{
    "value":37,
    "kind":"constant",
    "name":"AE_IK_SET_MASTER_BLEND_AMOUNT"
  },{
    "value":15,
    "kind":"constant",
    "name":"AE_MUZZLEFLASH"
  },{
    "value":24,
    "kind":"constant",
    "name":"AE_RAGDOLL"
  },{
    "value":13,
    "kind":"constant",
    "name":"AE_START_SCRIPTED_EFFECT"
  },{
    "value":14,
    "kind":"constant",
    "name":"AE_STOP_SCRIPTED_EFFECT"
  },{
    "value":28,
    "kind":"constant",
    "name":"AE_SV_BODYGROUP_SET_VALUE"
  },{
    "value":16,
    "kind":"constant",
    "name":"AE_SV_DUSTTRAIL"
  },{
    "value":4,
    "kind":"constant",
    "name":"AE_SV_PLAYSOUND"
  },{
    "value":31,
    "kind":"constant",
    "name":"AE_WPN_PLAYWPNSOUND"
  },{
    "value":30,
    "kind":"constant",
    "name":"AE_WPN_PRIMARYATTACK"
  },{
    "value":32,
    "kind":"constant",
    "name":"AE_WPN_SECONDARYATTACK"
  },{
    "value":1,
    "kind":"constant",
    "name":"CLIENT_DLL"
  },{
    "value":1048576,
    "kind":"constant",
    "name":"DMG_ACID"
  },{
    "value":8192,
    "kind":"constant",
    "name":"DMG_ALWAYSGIB"
  },{
    "value":64,
    "kind":"constant",
    "name":"DMG_BLAST"
  },{
    "value":2,
    "kind":"constant",
    "name":"DMG_BULLET"
  },{
    "value":8,
    "kind":"constant",
    "name":"DMG_BURN"
  },{
    "value":128,
    "kind":"constant",
    "name":"DMG_CLUB"
  },{
    "value":1,
    "kind":"constant",
    "name":"DMG_CRUSH"
  },{
    "value":16384,
    "kind":"constant",
    "name":"DMG_DROWN"
  },{
    "value":524288,
    "kind":"constant",
    "name":"DMG_DROWNRECOVER"
  },{
    "value":1024,
    "kind":"constant",
    "name":"DMG_ENERGYBEAM"
  },{
    "value":32,
    "kind":"constant",
    "name":"DMG_FALL"
  },{
    "value":0,
    "kind":"constant",
    "name":"DMG_GENERIC"
  },{
    "value":65536,
    "kind":"constant",
    "name":"DMG_NERVEGAS"
  },{
    "value":4096,
    "kind":"constant",
    "name":"DMG_NEVERGIB"
  },{
    "value":32768,
    "kind":"constant",
    "name":"DMG_PARALYZE"
  },{
    "value":8388608,
    "kind":"constant",
    "name":"DMG_PHYSGUN"
  },{
    "value":16777216,
    "kind":"constant",
    "name":"DMG_PLASMA"
  },{
    "value":131072,
    "kind":"constant",
    "name":"DMG_POISON"
  },{
    "value":2048,
    "kind":"constant",
    "name":"DMG_PREVENT_PHYSICS_FORCE"
  },{
    "value":262144,
    "kind":"constant",
    "name":"DMG_RADIATION"
  },{
    "value":4194304,
    "kind":"constant",
    "name":"DMG_REMOVENORAGDOLL"
  },{
    "value":256,
    "kind":"constant",
    "name":"DMG_SHOCK"
  },{
    "value":4,
    "kind":"constant",
    "name":"DMG_SLASH"
  },{
    "value":2097152,
    "kind":"constant",
    "name":"DMG_SLOWBURN"
  },{
    "value":512,
    "kind":"constant",
    "name":"DMG_SONIC"
  },{
    "value":16,
    "kind":"constant",
    "name":"DMG_VEHICLE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":32,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_AOE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":131072,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_ATTACK"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":65536,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_AURA"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":4096,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_AUTOCAST"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":128,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_CHANNELLED"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":1024,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":16777216,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":536870912,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":8388608,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":33554432,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":262144,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_HIDDEN"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":134217728,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":4194304,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":2097152,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":2048,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":256,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_ITEM"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":-2147483648,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NONE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":67108864,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":64,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":4,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":32768,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":16384,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":8192,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":2,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_PASSIVE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":16,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_POINT"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":524288,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":268435456,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":512,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_TOGGLE"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":8,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":1048576,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED"
  },{
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "value":1073741824,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING"
  },{
    "enum":"DOTAAbilitySpeakTrigger_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ABILITY_SPEAK_CAST"
  },{
    "enum":"DOTAAbilitySpeakTrigger_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_SPEAK_START_ACTION_PHASE"
  },{
    "enum":"Attributes",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY"
  },{
    "enum":"AttributeDerivedStats",
    "value":4,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY_ARMOR"
  },{
    "enum":"AttributeDerivedStats",
    "value":5,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED"
  },{
    "enum":"AttributeDerivedStats",
    "value":3,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY_DAMAGE"
  },{
    "enum":"Attributes",
    "value":2,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLECT"
  },{
    "enum":"AttributeDerivedStats",
    "value":6,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE"
  },{
    "enum":"AttributeDerivedStats",
    "value":7,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA"
  },{
    "enum":"AttributeDerivedStats",
    "value":8,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN"
  },{
    "enum":"Attributes",
    "value":-1,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INVALID"
  },{
    "enum":"Attributes",
    "value":3,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_MAX"
  },{
    "enum":"Attributes",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH"
  },{
    "enum":"AttributeDerivedStats",
    "value":0,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH_DAMAGE"
  },{
    "enum":"AttributeDerivedStats",
    "value":1,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH_HP"
  },{
    "enum":"AttributeDerivedStats",
    "value":2,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH_HP_REGEN"
  },{
    "enum":"modifierremove",
    "value":0,
    "kind":"constant",
    "name":"DOTA_BUFF_REMOVE_ALL"
  },{
    "enum":"modifierremove",
    "value":2,
    "kind":"constant",
    "name":"DOTA_BUFF_REMOVE_ALLY"
  },{
    "enum":"modifierremove",
    "value":1,
    "kind":"constant",
    "name":"DOTA_BUFF_REMOVE_ENEMY"
  },{
    "enum":"DOTALimits_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_DEFAULT_MAX_TEAM",
    "description":"Default number of players per team."
  },{
    "enum":"DOTALimits_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_DEFAULT_MAX_TEAM_PLAYERS",
    "description":"Default number of non-spectator players supported."
  },{
    "enum":"DOTA_HeroPickState",
    "value":57,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":1,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_AP_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":32,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_AR_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":54,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_BD_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":37,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN1"
  },{
    "enum":"DOTA_HeroPickState",
    "value":38,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN2"
  },{
    "enum":"DOTA_HeroPickState",
    "value":39,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN3"
  },{
    "enum":"DOTA_HeroPickState",
    "value":40,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN4"
  },{
    "enum":"DOTA_HeroPickState",
    "value":41,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN5"
  },{
    "enum":"DOTA_HeroPickState",
    "value":42,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN6"
  },{
    "enum":"DOTA_HeroPickState",
    "value":36,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_CAPTAINPICK"
  },{
    "enum":"DOTA_HeroPickState",
    "value":35,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_INTRO"
  },{
    "enum":"DOTA_HeroPickState",
    "value":53,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_PICK"
  },{
    "enum":"DOTA_HeroPickState",
    "value":43,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT1"
  },{
    "enum":"DOTA_HeroPickState",
    "value":52,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT10"
  },{
    "enum":"DOTA_HeroPickState",
    "value":44,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT2"
  },{
    "enum":"DOTA_HeroPickState",
    "value":45,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT3"
  },{
    "enum":"DOTA_HeroPickState",
    "value":46,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT4"
  },{
    "enum":"DOTA_HeroPickState",
    "value":47,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT5"
  },{
    "enum":"DOTA_HeroPickState",
    "value":48,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT6"
  },{
    "enum":"DOTA_HeroPickState",
    "value":49,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT7"
  },{
    "enum":"DOTA_HeroPickState",
    "value":50,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT8"
  },{
    "enum":"DOTA_HeroPickState",
    "value":51,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT9"
  },{
    "enum":"DOTA_HeroPickState",
    "value":7,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN1"
  },{
    "enum":"DOTA_HeroPickState",
    "value":16,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN10"
  },{
    "enum":"DOTA_HeroPickState",
    "value":17,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN11"
  },{
    "enum":"DOTA_HeroPickState",
    "value":18,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN12"
  },{
    "enum":"DOTA_HeroPickState",
    "value":19,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN13"
  },{
    "enum":"DOTA_HeroPickState",
    "value":20,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN14"
  },{
    "enum":"DOTA_HeroPickState",
    "value":8,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN2"
  },{
    "enum":"DOTA_HeroPickState",
    "value":9,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN3"
  },{
    "enum":"DOTA_HeroPickState",
    "value":10,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN4"
  },{
    "enum":"DOTA_HeroPickState",
    "value":11,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN5"
  },{
    "enum":"DOTA_HeroPickState",
    "value":12,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN6"
  },{
    "enum":"DOTA_HeroPickState",
    "value":13,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN7"
  },{
    "enum":"DOTA_HeroPickState",
    "value":14,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN8"
  },{
    "enum":"DOTA_HeroPickState",
    "value":15,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN9"
  },{
    "enum":"DOTA_HeroPickState",
    "value":6,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_CAPTAINPICK"
  },{
    "enum":"DOTA_HeroPickState",
    "value":5,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_INTRO"
  },{
    "enum":"DOTA_HeroPickState",
    "value":31,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_PICK"
  },{
    "enum":"DOTA_HeroPickState",
    "value":21,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT1"
  },{
    "enum":"DOTA_HeroPickState",
    "value":30,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT10"
  },{
    "enum":"DOTA_HeroPickState",
    "value":22,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT2"
  },{
    "enum":"DOTA_HeroPickState",
    "value":23,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT3"
  },{
    "enum":"DOTA_HeroPickState",
    "value":24,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT4"
  },{
    "enum":"DOTA_HeroPickState",
    "value":25,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT5"
  },{
    "enum":"DOTA_HeroPickState",
    "value":26,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT6"
  },{
    "enum":"DOTA_HeroPickState",
    "value":27,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT7"
  },{
    "enum":"DOTA_HeroPickState",
    "value":28,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT8"
  },{
    "enum":"DOTA_HeroPickState",
    "value":29,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT9"
  },{
    "enum":"DOTA_HeroPickState",
    "value":61,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_COUNT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":60,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES"
  },{
    "enum":"DOTA_HeroPickState",
    "value":34,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_FH_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":3,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED"
  },{
    "enum":"DOTA_HeroPickState",
    "value":33,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_MO_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":0,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_NONE"
  },{
    "enum":"DOTA_HeroPickState",
    "value":4,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_RD_SELECT_UNUSED"
  },{
    "enum":"DOTA_HeroPickState",
    "value":2,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_SD_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":59,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_SELECT_PENALTY"
  },{
    "enum":"DOTA_HeroPickState",
    "value":55,
    "kind":"constant",
    "name":"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":56,
    "kind":"constant",
    "name":"DOTA_HERO_PICK_STATE_ARDM_SELECT"
  },{
    "enum":"DOTA_HeroPickState",
    "value":58,
    "kind":"constant",
    "name":"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_MAX_ABILITIES"
  },{
    "enum":"DOTALimits_t",
    "value":64,
    "kind":"constant",
    "name":"DOTA_MAX_PLAYERS",
    "description":"Max number of players connected to the server including spectators."
  },{
    "enum":"DOTALimits_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_MAX_PLAYER_TEAMS",
    "description":"Max number of player teams supported."
  },{
    "enum":"DOTALimits_t",
    "value":15,
    "kind":"constant",
    "name":"DOTA_MAX_SPECTATOR_LOBBY_SIZE",
    "description":"Max number of viewers in a spectator lobby."
  },{
    "enum":"DOTALimits_t",
    "value":40,
    "kind":"constant",
    "name":"DOTA_MAX_SPECTATOR_TEAM_SIZE",
    "description":"How many spectators can watch."
  },{
    "enum":"DOTALimits_t",
    "value":24,
    "kind":"constant",
    "name":"DOTA_MAX_TEAM",
    "description":"Max number of players per team."
  },{
    "enum":"DOTALimits_t",
    "value":24,
    "kind":"constant",
    "name":"DOTA_MAX_TEAM_PLAYERS",
    "description":"Max number of non-spectator players supported."
  },{
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "value":3,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH"
  },{
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "value":4,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST"
  },{
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "value":1,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOW"
  },{
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "value":0,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST"
  },{
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "value":2,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_1"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_2"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_3"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_4"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_HITLOCATION"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_LAST"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_NONE"
  },{
    "enum":"DOTA_RUNES",
    "value":6,
    "kind":"constant",
    "name":"DOTA_RUNE_ARCANE"
  },{
    "enum":"DOTA_RUNES",
    "value":5,
    "kind":"constant",
    "name":"DOTA_RUNE_BOUNTY"
  },{
    "enum":"DOTA_RUNES",
    "value":8,
    "kind":"constant",
    "name":"DOTA_RUNE_COUNT"
  },{
    "enum":"DOTA_RUNES",
    "value":0,
    "kind":"constant",
    "name":"DOTA_RUNE_DOUBLEDAMAGE"
  },{
    "enum":"DOTA_RUNES",
    "value":1,
    "kind":"constant",
    "name":"DOTA_RUNE_HASTE"
  },{
    "enum":"DOTA_RUNES",
    "value":2,
    "kind":"constant",
    "name":"DOTA_RUNE_ILLUSION"
  },{
    "enum":"DOTA_RUNES",
    "value":-1,
    "kind":"constant",
    "name":"DOTA_RUNE_INVALID"
  },{
    "enum":"DOTA_RUNES",
    "value":3,
    "kind":"constant",
    "name":"DOTA_RUNE_INVISIBILITY"
  },{
    "enum":"DOTA_RUNES",
    "value":4,
    "kind":"constant",
    "name":"DOTA_RUNE_REGENERATION"
  },{
    "enum":"DOTA_RUNES",
    "value":7,
    "kind":"constant",
    "name":"DOTA_RUNE_WATER"
  },{
    "value":1778,
    "kind":"constant",
    "name":"DOTA_RUN_STATUE"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":6,
    "kind":"constant",
    "name":"DOTA_SHOP_CUSTOM"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":3,
    "kind":"constant",
    "name":"DOTA_SHOP_GROUND"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":0,
    "kind":"constant",
    "name":"DOTA_SHOP_HOME"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":7,
    "kind":"constant",
    "name":"DOTA_SHOP_NEUTRALS"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":8,
    "kind":"constant",
    "name":"DOTA_SHOP_NONE"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":2,
    "kind":"constant",
    "name":"DOTA_SHOP_SECRET"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":5,
    "kind":"constant",
    "name":"DOTA_SHOP_SECRET2"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":1,
    "kind":"constant",
    "name":"DOTA_SHOP_SIDE"
  },{
    "enum":"DOTA_SHOP_TYPE",
    "value":4,
    "kind":"constant",
    "name":"DOTA_SHOP_SIDE2"
  },{
    "enum":"DOTASpeechType_t",
    "value":7,
    "kind":"constant",
    "name":"DOTA_SPEECH_BAD_TEAM"
  },{
    "enum":"DOTASpeechType_t",
    "value":6,
    "kind":"constant",
    "name":"DOTA_SPEECH_GOOD_TEAM"
  },{
    "enum":"DOTASpeechType_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_SPEECH_RECIPIENT_TYPE_MAX"
  },{
    "enum":"DOTASpeechType_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_SPEECH_SPECTATOR"
  },{
    "enum":"DOTASpeechType_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_ALL"
  },{
    "enum":"DOTASpeechType_t",
    "value":0,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_INVALID"
  },{
    "enum":"DOTASpeechType_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_NEARBY"
  },{
    "enum":"DOTASpeechType_t",
    "value":1,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_SINGLE"
  },{
    "enum":"DOTASpeechType_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_TEAM"
  },{
    "enum":"DOTASpeechType_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_TEAM_NEARBY"
  },{
    "enum":"DOTASpeechType_t",
    "value":9,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_TEAM_NOSPECTATOR"
  },{
    "enum":"DOTATeam_t",
    "value":3,
    "kind":"constant",
    "name":"DOTA_TEAM_BADGUYS"
  },{
    "enum":"DOTATeam_t",
    "value":14,
    "kind":"constant",
    "name":"DOTA_TEAM_COUNT"
  },{
    "enum":"DOTATeam_t",
    "value":6,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_1"
  },{
    "enum":"DOTATeam_t",
    "value":7,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_2"
  },{
    "enum":"DOTATeam_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_3"
  },{
    "enum":"DOTATeam_t",
    "value":9,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_4"
  },{
    "enum":"DOTATeam_t",
    "value":10,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_5"
  },{
    "enum":"DOTATeam_t",
    "value":11,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_6"
  },{
    "enum":"DOTATeam_t",
    "value":12,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_7"
  },{
    "enum":"DOTATeam_t",
    "value":13,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_8"
  },{
    "enum":"DOTATeam_t",
    "value":8,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_COUNT"
  },{
    "enum":"DOTATeam_t",
    "value":13,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_MAX"
  },{
    "enum":"DOTATeam_t",
    "value":6,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_MIN"
  },{
    "enum":"DOTATeam_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_TEAM_FIRST"
  },{
    "enum":"DOTATeam_t",
    "value":2,
    "kind":"constant",
    "name":"DOTA_TEAM_GOODGUYS"
  },{
    "enum":"DOTATeam_t",
    "value":4,
    "kind":"constant",
    "name":"DOTA_TEAM_NEUTRALS"
  },{
    "enum":"DOTATeam_t",
    "value":5,
    "kind":"constant",
    "name":"DOTA_TEAM_NOTEAM"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":55,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_ALL"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":18,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_BASIC"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_BUILDING"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":16,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_COURIER"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_CREEP"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":128,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_CUSTOM"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":65536,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":8,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_DEAD"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":128,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":64,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_INVULNERABLE"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":16,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":32768,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_MANA_ONLY"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NONE"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":512,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":16384,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":131072,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":2048,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":8192,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":32,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":524288,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":4096,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":256,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NO_INVIS"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":262144,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":1024,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":1048576,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY"
  },{
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "value":2097152,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_HERO"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_NONE"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":32,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_OTHER"
  },{
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "value":3,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_BOTH"
  },{
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_CUSTOM"
  },{
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_ENEMY"
  },{
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
  },{
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_NONE"
  },{
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "value":64,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TREE"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOUBLE_SHOT"
  },{
    "value":0,
    "kind":"constant",
    "name":"EMPTY"
  },{
    "value":128,
    "kind":"constant",
    "name":"FCVAR_ARCHIVE"
  },{
    "value":16384,
    "kind":"constant",
    "name":"FCVAR_CHEAT"
  },{
    "value":65536,
    "kind":"constant",
    "name":"FCVAR_DEMO"
  },{
    "value":2,
    "kind":"constant",
    "name":"FCVAR_DEVELOPMENTONLY"
  },{
    "value":131072,
    "kind":"constant",
    "name":"FCVAR_DONTRECORD"
  },{
    "value":16,
    "kind":"constant",
    "name":"FCVAR_HIDDEN"
  },{
    "value":4096,
    "kind":"constant",
    "name":"FCVAR_NEVER_AS_STRING"
  },{
    "value":0,
    "kind":"constant",
    "name":"FCVAR_NONE"
  },{
    "value":256,
    "kind":"constant",
    "name":"FCVAR_NOTIFY"
  },{
    "value":4194304,
    "kind":"constant",
    "name":"FCVAR_NOT_CONNECTED"
  },{
    "value":1024,
    "kind":"constant",
    "name":"FCVAR_PRINTABLEONLY"
  },{
    "value":32,
    "kind":"constant",
    "name":"FCVAR_PROTECTED"
  },{
    "value":8192,
    "kind":"constant",
    "name":"FCVAR_REPLICATED"
  },{
    "value":64,
    "kind":"constant",
    "name":"FCVAR_SPONLY"
  },{
    "value":32768,
    "kind":"constant",
    "name":"FCVAR_SS"
  },{
    "value":2048,
    "kind":"constant",
    "name":"FCVAR_UNLOGGED"
  },{
    "value":1,
    "kind":"constant",
    "name":"FCVAR_UNREGISTERED"
  },{
    "value":512,
    "kind":"constant",
    "name":"FCVAR_USERINFO"
  },{
    "value":1073741824,
    "kind":"constant",
    "name":"FCVAR_VCONSOLE_SET_FOCUS"
  },{
    "value":0,
    "kind":"constant",
    "name":"FIND_ANY_ORDER"
  },{
    "value":1,
    "kind":"constant",
    "name":"FIND_CLOSEST"
  },{
    "value":2,
    "kind":"constant",
    "name":"FIND_FARTHEST"
  },{
    "value":-1,
    "kind":"constant",
    "name":"FIND_UNITS_EVERYWHERE"
  },{
    "enum":"LuaModifierType",
    "value":4,
    "kind":"constant",
    "name":"LUA_MODIFIER_INVALID"
  },{
    "enum":"LuaModifierType",
    "value":3,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_BOTH"
  },{
    "enum":"LuaModifierType",
    "value":1,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_HORIZONTAL"
  },{
    "enum":"LuaModifierType",
    "value":0,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_NONE"
  },{
    "enum":"LuaModifierType",
    "value":2,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_VERTICAL"
  },{
    "enum":"ParticleAttachment_t",
    "value":16,
    "kind":"constant",
    "name":"MAX_PATTACH_TYPES"
  },{
    "value":5,
    "kind":"constant",
    "name":"MELEE_HIT"
  },{
    "value":7,
    "kind":"constant",
    "name":"MELEE_HIT_PLAYER"
  },{
    "value":6,
    "kind":"constant",
    "name":"MELEE_HIT_WORLD"
  },{
    "value":4,
    "kind":"constant",
    "name":"MELEE_MISS"
  },{
    "enum":"DOTAModifierAttribute_t",
    "value":8,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_AURA_PRIORITY"
  },{
    "enum":"DOTAModifierAttribute_t",
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE"
  },{
    "enum":"DOTAModifierAttribute_t",
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_MULTIPLE"
  },{
    "enum":"DOTAModifierAttribute_t",
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_NONE"
  },{
    "enum":"DOTAModifierAttribute_t",
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_PERMANENT"
  },{
    "enum":"modifierfunction",
    "value":183,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL",
    "description":"OnAbilityEndChannel"
  },{
    "enum":"modifierfunction",
    "value":180,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_EXECUTED",
    "description":"OnAbilityExecuted"
  },{
    "enum":"modifierfunction",
    "value":181,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST",
    "description":"OnAbilityFullyCast"
  },{
    "enum":"modifierfunction",
    "value":179,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_START",
    "description":"OnAbilityStart"
  },{
    "enum":"modifierfunction",
    "value":172,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK",
    "description":"OnAttack"
  },{
    "enum":"modifierfunction",
    "value":192,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACKED",
    "description":"OnAttacked"
  },{
    "enum":"modifierfunction",
    "value":175,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_ALLIED",
    "description":"OnAttackAllied"
  },{
    "enum":"modifierfunction",
    "value":238,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_CANCELLED",
    "description":"OnAttackCancelled"
  },{
    "enum":"modifierfunction",
    "value":174,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_FAIL",
    "description":"OnAttackFail"
  },{
    "enum":"modifierfunction",
    "value":228,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_FINISHED",
    "description":"OnAttackFinished"
  },{
    "enum":"modifierfunction",
    "value":173,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_LANDED",
    "description":"OnAttackLanded"
  },{
    "enum":"modifierfunction",
    "value":170,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_RECORD",
    "description":"OnAttackRecord"
  },{
    "enum":"modifierfunction",
    "value":235,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY",
    "description":"OnAttackRecordDestroy"
  },{
    "enum":"modifierfunction",
    "value":171,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_START",
    "description":"OnAttackStart"
  },{
    "enum":"modifierfunction",
    "value":245,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTEMPT_PROJECTILE_DODGE",
    "description":"OnAttemptProjectileDodge"
  },{
    "enum":"modifierfunction",
    "value":182,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_BREAK_INVISIBILITY",
    "description":"OnBreakInvisibility"
  },{
    "enum":"modifierfunction",
    "value":204,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_BUILDING_KILLED",
    "description":"OnBuildingKilled"
  },{
    "enum":"modifierfunction",
    "value":191,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DAMAGE_CALCULATED",
    "description":"OnDamageCalculated"
  },{
    "enum":"modifierfunction",
    "value":193,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DEATH",
    "description":"OnDeath"
  },{
    "enum":"modifierfunction",
    "value":187,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DEATH_PREVENTED",
    "description":"OnDamagePrevented"
  },{
    "enum":"modifierfunction",
    "value":225,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DOMINATED",
    "description":"OnDominated"
  },{
    "enum":"modifierfunction",
    "value":199,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_HEALTH_GAINED",
    "description":"OnHealthGained"
  },{
    "enum":"modifierfunction",
    "value":203,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_HEAL_RECEIVED",
    "description":"OnHealReceived"
  },{
    "enum":"modifierfunction",
    "value":202,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_HERO_KILLED",
    "description":"OnHeroKilled"
  },{
    "enum":"modifierfunction",
    "value":200,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_MANA_GAINED",
    "description":"OnManaGained"
  },{
    "enum":"modifierfunction",
    "value":205,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_MODEL_CHANGED",
    "description":"OnModelChanged"
  },{
    "enum":"modifierfunction",
    "value":206,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_MODIFIER_ADDED",
    "description":"OnModifierAdded"
  },{
    "enum":"modifierfunction",
    "value":189,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ORB_EFFECT",
    "description":"Unused"
  },{
    "enum":"modifierfunction",
    "value":177,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ORDER",
    "description":"OnOrder"
  },{
    "enum":"modifierfunction",
    "value":246,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PREDEBUFF_APPLIED",
    "description":"OnPreDebuffApplied"
  },{
    "enum":"modifierfunction",
    "value":190,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROCESS_CLEAVE",
    "description":"OnProcessCleave"
  },{
    "enum":"modifierfunction",
    "value":184,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROCESS_UPGRADE",
    "description":"Unused"
  },{
    "enum":"modifierfunction",
    "value":176,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROJECTILE_DODGE",
    "description":"OnProjectileDodge"
  },{
    "enum":"modifierfunction",
    "value":236,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT",
    "description":"OnProjectileObstructionHit"
  },{
    "enum":"modifierfunction",
    "value":185,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_REFRESH",
    "description":"Unused"
  },{
    "enum":"modifierfunction",
    "value":194,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_RESPAWN",
    "description":"OnRespawn"
  },{
    "enum":"modifierfunction",
    "value":198,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_SET_LOCATION",
    "description":"OnSetLocation"
  },{
    "enum":"modifierfunction",
    "value":169,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_SPELL_TARGET_READY",
    "description":"OnSpellTargetReady"
  },{
    "enum":"modifierfunction",
    "value":195,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_SPENT_MANA",
    "description":"OnSpentMana"
  },{
    "enum":"modifierfunction",
    "value":188,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_STATE_CHANGED",
    "description":"OnStateChanged"
  },{
    "enum":"modifierfunction",
    "value":186,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TAKEDAMAGE",
    "description":"OnTakeDamage"
  },{
    "enum":"modifierfunction",
    "value":201,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT",
    "description":"OnTakeDamageKillCredit"
  },{
    "enum":"modifierfunction",
    "value":197,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TELEPORTED",
    "description":"OnTeleported"
  },{
    "enum":"modifierfunction",
    "value":196,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TELEPORTING",
    "description":"OnTeleporting"
  },{
    "enum":"modifierfunction",
    "value":178,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_UNIT_MOVED",
    "description":"OnUnitMoved"
  },{
    "enum":"modifierfunction",
    "value":255,
    "kind":"constant",
    "name":"MODIFIER_FUNCTION_INVALID"
  },{
    "enum":"modifierfunction",
    "value":247,
    "kind":"constant",
    "name":"MODIFIER_FUNCTION_LAST"
  },{
    "enum":"modifierpriority",
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_HIGH"
  },{
    "enum":"modifierpriority",
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_LOW"
  },{
    "enum":"modifierpriority",
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_NORMAL"
  },{
    "enum":"modifierpriority",
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_SUPER_ULTRA"
  },{
    "enum":"modifierpriority",
    "value":3,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_ULTRA"
  },{
    "enum":"modifierfunction",
    "value":224,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABILITY_LAYOUT",
    "description":"GetModifierAbilityLayout"
  },{
    "enum":"modifierfunction",
    "value":145,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL",
    "description":"GetAbsoluteNoDamageMagical"
  },{
    "enum":"modifierfunction",
    "value":144,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL",
    "description":"GetAbsoluteNoDamagePhysical"
  },{
    "enum":"modifierfunction",
    "value":146,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE",
    "description":"GetAbsoluteNoDamagePure"
  },{
    "enum":"modifierfunction",
    "value":134,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSORB_SPELL",
    "description":"GetAbsorbSpell"
  },{
    "enum":"modifierfunction",
    "value":156,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK",
    "description":"GetAlwaysAllowAttack"
  },{
    "enum":"modifierfunction",
    "value":168,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ALWAYS_AUTOATTACK_WHILE_HOLD_POSITION",
    "description":"GetAlwaysAutoAttackWhileHoldPosition"
  },{
    "enum":"modifierfunction",
    "value":157,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK",
    "description":"GetAllowEtherealAttack"
  },{
    "enum":"modifierfunction",
    "value":29,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE",
    "description":"GetModifierAttackSpeedBaseOverride"
  },{
    "enum":"modifierfunction",
    "value":31,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT",
    "description":"GetModifierAttackSpeedBonus_Constant"
  },{
    "enum":"modifierfunction",
    "value":244,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_PERCENTAGE",
    "description":"GetModifierAttackSpeedPercentage"
  },{
    "enum":"modifierfunction",
    "value":241,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE",
    "description":"GetModifierAttackSpeedReductionPercentage"
  },{
    "enum":"modifierfunction",
    "value":118,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_ANIM_TIME_PERCENTAGE",
    "description":"GetModifierPercentageAttackAnimTime"
  },{
    "enum":"modifierfunction",
    "value":38,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT",
    "description":"GetModifierAttackPointConstant"
  },{
    "enum":"modifierfunction",
    "value":103,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE",
    "description":"GetModifierAttackRangeOverride"
  },{
    "enum":"modifierfunction",
    "value":104,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS",
    "description":"GetModifierAttackRangeBonus"
  },{
    "enum":"modifierfunction",
    "value":106,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE",
    "description":"GetModifierAttackRangeBonusPercentage"
  },{
    "enum":"modifierfunction",
    "value":105,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE",
    "description":"GetModifierAttackRangeBonusUnique"
  },{
    "enum":"modifierfunction",
    "value":243,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET"
  },{
    "enum":"modifierfunction",
    "value":66,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_AVOID_DAMAGE",
    "description":"GetModifierAvoidDamage"
  },{
    "enum":"modifierfunction",
    "value":67,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_AVOID_SPELL",
    "description":"GetModifierAvoidSpell"
  },{
    "enum":"modifierfunction",
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE",
    "description":"GetModifierBaseAttack_BonusDamage"
  },{
    "enum":"modifierfunction",
    "value":55,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierBaseDamageOutgoing_Percentage"
  },{
    "enum":"modifierfunction",
    "value":56,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE",
    "description":"GetModifierBaseDamageOutgoing_PercentageUnique"
  },{
    "enum":"modifierfunction",
    "value":35,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT",
    "description":"GetModifierBaseAttackTimeConstant"
  },{
    "enum":"modifierfunction",
    "value":36,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST",
    "description":"GetModifierBaseAttackTimeConstant_Adjust"
  },{
    "enum":"modifierfunction",
    "value":37,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_PERCENTAGE",
    "description":"GetModifierBaseAttackTimePercentage"
  },{
    "enum":"modifierfunction",
    "value":80,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_MANA_REGEN",
    "description":"GetModifierBaseRegen"
  },{
    "enum":"modifierfunction",
    "value":39,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierBonusDamageOutgoing_Percentage"
  },{
    "enum":"modifierfunction",
    "value":137,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_DAY_VISION",
    "description":"GetBonusDayVision"
  },{
    "enum":"modifierfunction",
    "value":138,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION",
    "description":"GetBonusNightVision"
  },{
    "enum":"modifierfunction",
    "value":139,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE",
    "description":"GetBonusNightVisionUnique"
  },{
    "enum":"modifierfunction",
    "value":140,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE",
    "description":"GetBonusVisionPercentage"
  },{
    "enum":"modifierfunction",
    "value":240,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS",
    "description":"BotAttackScoreBonus"
  },{
    "enum":"modifierfunction",
    "value":160,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER",
    "description":"Unused"
  },{
    "enum":"modifierfunction",
    "value":161,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER",
    "description":"Unused"
  },{
    "enum":"modifierfunction",
    "value":230,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAN_ATTACK_TREES",
    "description":"GetModifierCanAttackTrees"
  },{
    "enum":"modifierfunction",
    "value":117,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE",
    "description":"GetModifierPercentageCasttime"
  },{
    "enum":"modifierfunction",
    "value":100,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS",
    "description":"GetModifierCastRangeBonus"
  },{
    "enum":"modifierfunction",
    "value":102,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING",
    "description":"GetModifierCastRangeBonusStacking"
  },{
    "enum":"modifierfunction",
    "value":101,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET",
    "description":"GetModifierCastRangeBonusTarget"
  },{
    "enum":"modifierfunction",
    "value":221,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE",
    "description":"GetModifierChangeAbilityValue"
  },{
    "enum":"modifierfunction",
    "value":115,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE",
    "description":"GetModifierPercentageCooldown"
  },{
    "enum":"modifierfunction",
    "value":116,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING",
    "description":"GetModifierPercentageCooldownOngoing"
  },{
    "enum":"modifierfunction",
    "value":33,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT",
    "description":"GetModifierCooldownReduction_Constant"
  },{
    "enum":"modifierfunction",
    "value":40,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierDamageOutgoing_Percentage"
  },{
    "enum":"modifierfunction",
    "value":41,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION",
    "description":"GetModifierDamageOutgoing_Percentage_Illusion"
  },{
    "enum":"modifierfunction",
    "value":42,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY",
    "description":"GetModifierDamageOutgoing_Percentage_Illusion_Amplify"
  },{
    "enum":"modifierfunction",
    "value":121,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DEATHGOLDCOST",
    "description":"GetModifierConstantDeathGoldCost"
  },{
    "enum":"modifierfunction",
    "value":136,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DISABLE_AUTOATTACK",
    "description":"GetDisableAutoAttack"
  },{
    "enum":"modifierfunction",
    "value":155,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DISABLE_HEALING",
    "description":"GetDisableHealing"
  },{
    "enum":"modifierfunction",
    "value":219,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DISABLE_TURNING",
    "description":"GetModifierDisableTurning"
  },{
    "enum":"modifierfunction",
    "value":163,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DODGE_PROJECTILE",
    "description":"GetModifierDodgeProjectile"
  },{
    "enum":"modifierfunction",
    "value":233,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER",
    "description":"GetModifierNoVisionOfAttacker"
  },{
    "enum":"modifierfunction",
    "value":61,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EVASION_CONSTANT",
    "description":"GetModifierEvasion_Constant"
  },{
    "enum":"modifierfunction",
    "value":122,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXP_RATE_BOOST",
    "description":"GetModifierPercentageExpRateBoost"
  },{
    "enum":"modifierfunction",
    "value":90,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS",
    "description":"GetModifierExtraHealthBonus"
  },{
    "enum":"modifierfunction",
    "value":92,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE",
    "description":"GetModifierExtraHealthPercentage"
  },{
    "enum":"modifierfunction",
    "value":91,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS",
    "description":"GetModifierExtraManaBonus"
  },{
    "enum":"modifierfunction",
    "value":93,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE",
    "description":"GetModifierExtraManaPercentage"
  },{
    "enum":"modifierfunction",
    "value":89,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS",
    "description":"GetModifierExtraStrengthBonus"
  },{
    "enum":"modifierfunction",
    "value":30,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FIXED_ATTACK_RATE",
    "description":"GetModifierFixedAttackRate"
  },{
    "enum":"modifierfunction",
    "value":141,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FIXED_DAY_VISION",
    "description":"GetFixedDayVision"
  },{
    "enum":"modifierfunction",
    "value":142,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FIXED_NIGHT_VISION",
    "description":"GetFixedNightVision"
  },{
    "enum":"modifierfunction",
    "value":218,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP",
    "description":"GetForceDrawOnMinimap"
  },{
    "enum":"modifierfunction",
    "value":123,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_GOLD_RATE_BOOST",
    "description":"GetModifierPercentageGoldRateBoost"
  },{
    "enum":"modifierfunction",
    "value":87,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_BONUS",
    "description":"GetModifierHealthBonus"
  },{
    "enum":"modifierfunction",
    "value":84,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT",
    "description":"GetModifierConstantHealthRegen"
  },{
    "enum":"modifierfunction",
    "value":85,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE",
    "description":"GetModifierHealthRegenPercentage"
  },{
    "enum":"modifierfunction",
    "value":86,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE",
    "description":"GetModifierHealthRegenPercentageUnique"
  },{
    "enum":"modifierfunction",
    "value":47,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE",
    "description":"GetModifierHealAmplify_PercentageSource"
  },{
    "enum":"modifierfunction",
    "value":48,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET",
    "description":"GetModifierHealAmplify_PercentageTarget"
  },{
    "enum":"modifierfunction",
    "value":49,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE",
    "description":"GetModifierHPRegenAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":32,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_ATTACKSPEED_LIMIT",
    "description":"GetModifierAttackSpeed_Limit"
  },{
    "enum":"modifierfunction",
    "value":220,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE",
    "description":"GetModifierIgnoreCastAngle"
  },{
    "enum":"modifierfunction",
    "value":229,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_COOLDOWN",
    "description":"GetModifierIgnoreCooldown"
  },{
    "enum":"modifierfunction",
    "value":27,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT",
    "description":"GetModifierIgnoreMovespeedLimit"
  },{
    "enum":"modifierfunction",
    "value":74,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR",
    "description":"GetModifierIgnorePhysicalArmor"
  },{
    "enum":"modifierfunction",
    "value":148,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ILLUSION_LABEL",
    "description":"GetModifierIllusionLabel"
  },{
    "enum":"modifierfunction",
    "value":232,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION"
  },{
    "enum":"modifierfunction",
    "value":57,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE",
    "description":"GetModifierIncomingDamage_Percentage"
  },{
    "enum":"modifierfunction",
    "value":59,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT",
    "description":"GetModifierIncomingPhysicalDamageConstant"
  },{
    "enum":"modifierfunction",
    "value":58,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE",
    "description":"GetModifierIncomingPhysicalDamage_Percentage"
  },{
    "enum":"modifierfunction",
    "value":60,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT",
    "description":"GetModifierIncomingSpellDamageConstant"
  },{
    "enum":"modifierfunction",
    "value":13,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION",
    "description":"GetModifierInvisibilityAttackBehaviorException"
  },{
    "enum":"modifierfunction",
    "value":12,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INVISIBILITY_LEVEL",
    "description":"GetModifierInvisibilityLevel"
  },{
    "enum":"modifierfunction",
    "value":147,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IS_ILLUSION",
    "description":"GetIsIllusion"
  },{
    "enum":"modifierfunction",
    "value":210,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IS_SCEPTER",
    "description":"GetModifierScepter"
  },{
    "enum":"modifierfunction",
    "value":211,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IS_SHARD",
    "description":"GetModifierShard"
  },{
    "enum":"modifierfunction",
    "value":50,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE",
    "description":"GetModifierLifestealRegenAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":215,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_LIFETIME_FRACTION",
    "description":"GetUnitLifetimeFraction"
  },{
    "enum":"modifierfunction",
    "value":126,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK",
    "description":"GetModifierMagical_ConstantBlock"
  },{
    "enum":"modifierfunction",
    "value":75,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION",
    "description":"GetModifierMagicalResistanceBaseReduction"
  },{
    "enum":"modifierfunction",
    "value":77,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS",
    "description":"GetModifierMagicalResistanceBonus"
  },{
    "enum":"modifierfunction",
    "value":78,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS",
    "description":"GetModifierMagicalResistanceBonusIllusions"
  },{
    "enum":"modifierfunction",
    "value":79,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE",
    "description":"GetModifierMagicalResistanceDecrepifyUnique"
  },{
    "enum":"modifierfunction",
    "value":76,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION",
    "description":"GetModifierMagicalResistanceDirectModification"
  },{
    "enum":"modifierfunction",
    "value":119,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE",
    "description":"GetModifierPercentageManacost"
  },{
    "enum":"modifierfunction",
    "value":120,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING",
    "description":"GetModifierPercentageManacostStacking"
  },{
    "enum":"modifierfunction",
    "value":34,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT",
    "description":"GetModifierManacostReduction_Constant"
  },{
    "enum":"modifierfunction",
    "value":88,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_BONUS",
    "description":"GetModifierManaBonus"
  },{
    "enum":"modifierfunction",
    "value":53,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE",
    "description":"GetModifierManaDrainAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":81,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT",
    "description":"GetModifierConstantManaRegen"
  },{
    "enum":"modifierfunction",
    "value":82,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE",
    "description":"GetModifierConstantManaRegenUnique"
  },{
    "enum":"modifierfunction",
    "value":83,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE",
    "description":"GetModifierTotalPercentageManaRegen"
  },{
    "enum":"modifierfunction",
    "value":107,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAX_ATTACK_RANGE",
    "description":"GetModifierMaxAttackRange"
  },{
    "enum":"modifierfunction",
    "value":165,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAX_DEBUFF_DURATION",
    "description":"GetModifierMaxDebuffDuration"
  },{
    "enum":"modifierfunction",
    "value":143,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MIN_HEALTH",
    "description":"GetMinHealth"
  },{
    "enum":"modifierfunction",
    "value":68,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MISS_PERCENTAGE",
    "description":"GetModifierMiss_Percentage"
  },{
    "enum":"modifierfunction",
    "value":208,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MODEL_CHANGE",
    "description":"GetModifierModelChange"
  },{
    "enum":"modifierfunction",
    "value":209,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MODEL_SCALE",
    "description":"GetModifierModelScale"
  },{
    "enum":"modifierfunction",
    "value":24,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE",
    "description":"GetModifierMoveSpeed_Absolute"
  },{
    "enum":"modifierfunction",
    "value":26,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX",
    "description":"GetModifierMoveSpeed_AbsoluteMax"
  },{
    "enum":"modifierfunction",
    "value":25,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN",
    "description":"GetModifierMoveSpeed_AbsoluteMin"
  },{
    "enum":"modifierfunction",
    "value":16,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE",
    "description":"GetModifierMoveSpeedOverride"
  },{
    "enum":"modifierfunction",
    "value":15,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT",
    "description":"GetModifierMoveSpeedBonus_Constant"
  },{
    "enum":"modifierfunction",
    "value":22,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE",
    "description":"GetModifierMoveSpeedBonus_Constant_Unique"
  },{
    "enum":"modifierfunction",
    "value":23,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2",
    "description":"GetModifierMoveSpeedBonus_Constant_Unique_2"
  },{
    "enum":"modifierfunction",
    "value":17,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE",
    "description":"GetModifierMoveSpeedBonus_Percentage"
  },{
    "enum":"modifierfunction",
    "value":18,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE",
    "description":"GetModifierMoveSpeedBonus_Percentage_Unique"
  },{
    "enum":"modifierfunction",
    "value":19,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2",
    "description":"GetModifierMoveSpeedBonus_Percentage_Unique_2"
  },{
    "enum":"modifierfunction",
    "value":20,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE",
    "description":"GetModifierMoveSpeedBonus_Special_Boots"
  },{
    "enum":"modifierfunction",
    "value":21,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2",
    "description":"GetModifierMoveSpeedBonus_Special_Boots_2"
  },{
    "enum":"modifierfunction",
    "value":28,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_LIMIT",
    "description":"GetModifierMoveSpeed_Limit"
  },{
    "enum":"modifierfunction",
    "value":242,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE",
    "description":"GetModifierMoveSpeedReductionPercentage"
  },{
    "enum":"modifierfunction",
    "value":52,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE",
    "description":"GetModifierMPRegenAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":54,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE",
    "description":"GetModifierMPRestoreAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":62,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT",
    "description":"GetModifierNegativeEvasion_Constant"
  },{
    "enum":"modifierfunction",
    "value":222,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL",
    "description":"GetModifierOverrideAbilitySpecial"
  },{
    "enum":"modifierfunction",
    "value":223,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE",
    "description":"GetModifierOverrideAbilitySpecialValue"
  },{
    "enum":"modifierfunction",
    "value":131,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION",
    "description":"GetOverrideAnimation"
  },{
    "enum":"modifierfunction",
    "value":133,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE",
    "description":"GetOverrideAnimationRate"
  },{
    "enum":"modifierfunction",
    "value":132,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT",
    "description":"GetOverrideAnimationWeight"
  },{
    "enum":"modifierfunction",
    "value":10,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE",
    "description":"GetModifierOverrideAttackDamage"
  },{
    "enum":"modifierfunction",
    "value":158,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL",
    "description":"GetOverrideAttackMagical"
  },{
    "enum":"modifierfunction",
    "value":14,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY",
    "description":"GetModifierPersistentInvisibility"
  },{
    "enum":"modifierfunction",
    "value":69,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE",
    "description":"GetModifierPhysicalArmorBase_Percentage"
  },{
    "enum":"modifierfunction",
    "value":71,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS",
    "description":"GetModifierPhysicalArmorBonus"
  },{
    "enum":"modifierfunction",
    "value":72,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE",
    "description":"GetModifierPhysicalArmorBonusUnique"
  },{
    "enum":"modifierfunction",
    "value":73,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE",
    "description":"GetModifierPhysicalArmorBonusUniqueActive"
  },{
    "enum":"modifierfunction",
    "value":70,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE",
    "description":"GetModifierPhysicalArmorTotal_Percentage"
  },{
    "enum":"modifierfunction",
    "value":127,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK",
    "description":"GetModifierPhysical_ConstantBlock"
  },{
    "enum":"modifierfunction",
    "value":128,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL",
    "description":"GetModifierPhysical_ConstantBlockSpecial"
  },{
    "enum":"modifierfunction",
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE",
    "description":"GetModifierPreAttack_BonusDamage"
  },{
    "enum":"modifierfunction",
    "value":3,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT",
    "description":"GetModifierPreAttack_BonusDamagePostCrit"
  },{
    "enum":"modifierfunction",
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC",
    "description":"GetModifierPreAttack_BonusDamage_Proc"
  },{
    "enum":"modifierfunction",
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET",
    "description":"GetModifierPreAttack_BonusDamage_Target"
  },{
    "enum":"modifierfunction",
    "value":124,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE",
    "description":"GetModifierPreAttack_CriticalStrike"
  },{
    "enum":"modifierfunction",
    "value":167,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_DEADLY_BLOW",
    "description":"GetModifierPreAttack_DeadlyBlow"
  },{
    "enum":"modifierfunction",
    "value":125,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE",
    "description":"GetModifierPreAttack_Target_CriticalStrike"
  },{
    "enum":"modifierfunction",
    "value":227,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE",
    "description":"PreserveParticlesOnModelChanged"
  },{
    "enum":"modifierfunction",
    "value":11,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PRE_ATTACK",
    "description":"GetModifierPreAttack"
  },{
    "enum":"modifierfunction",
    "value":166,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PRIMARY_STAT_DAMAGE_MULTIPLIER",
    "description":"GetPrimaryStatDamageMultiplier"
  },{
    "enum":"modifierfunction",
    "value":6,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL",
    "description":"GetModifierProcAttack_BonusDamage_Magical"
  },{
    "enum":"modifierfunction",
    "value":8,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL_TARGET",
    "description":"GetModifierProcAttack_BonusDamage_Magical_Target"
  },{
    "enum":"modifierfunction",
    "value":5,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL",
    "description":"GetModifierProcAttack_BonusDamage_Physical"
  },{
    "enum":"modifierfunction",
    "value":7,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE",
    "description":"GetModifierProcAttack_BonusDamage_Pure"
  },{
    "enum":"modifierfunction",
    "value":9,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK",
    "description":"GetModifierProcAttack_Feedback"
  },{
    "enum":"modifierfunction",
    "value":110,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROJECTILE_NAME",
    "description":"GetModifierProjectileName"
  },{
    "enum":"modifierfunction",
    "value":108,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS",
    "description":"GetModifierProjectileSpeedBonus"
  },{
    "enum":"modifierfunction",
    "value":109,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE",
    "description":"GetModifierProjectileSpeedBonusPercentage"
  },{
    "enum":"modifierfunction",
    "value":216,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION",
    "description":"GetModifierProvidesFOWVision"
  },{
    "enum":"modifierfunction",
    "value":212,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION",
    "description":"GetModifierRadarCooldownReduction"
  },{
    "enum":"modifierfunction",
    "value":135,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_REFLECT_SPELL",
    "description":"GetReflectSpell"
  },{
    "enum":"modifierfunction",
    "value":111,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_REINCARNATION",
    "description":"ReincarnateTime"
  },{
    "enum":"modifierfunction",
    "value":112,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME",
    "description":"GetModifierConstantRespawnTime"
  },{
    "enum":"modifierfunction",
    "value":113,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE",
    "description":"GetModifierPercentageRespawnTime"
  },{
    "enum":"modifierfunction",
    "value":114,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME_STACKING",
    "description":"GetModifierStackingRespawnTime"
  },{
    "enum":"modifierfunction",
    "value":217,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP",
    "description":"GetModifierSpellsRequireHP"
  },{
    "enum":"modifierfunction",
    "value":45,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE",
    "description":"GetModifierSpellAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":44,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_CREEP",
    "description":"GetModifierSpellAmplify_PercentageCreep"
  },{
    "enum":"modifierfunction",
    "value":46,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE",
    "description":"GetModifierSpellAmplify_PercentageUnique"
  },{
    "enum":"modifierfunction",
    "value":51,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE",
    "description":"GetModifierSpellLifestealRegenAmplify_Percentage"
  },{
    "enum":"modifierfunction",
    "value":95,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS",
    "description":"GetModifierBonusStats_Agility"
  },{
    "enum":"modifierfunction",
    "value":98,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE",
    "description":"GetModifierBonusStats_Agility_Percentage"
  },{
    "enum":"modifierfunction",
    "value":96,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS",
    "description":"GetModifierBonusStats_Intellect"
  },{
    "enum":"modifierfunction",
    "value":99,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE",
    "description":"GetModifierBonusStats_Intellect_Percentage"
  },{
    "enum":"modifierfunction",
    "value":94,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS",
    "description":"GetModifierBonusStats_Strength"
  },{
    "enum":"modifierfunction",
    "value":97,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE",
    "description":"GetModifierBonusStats_Strength_Percentage"
  },{
    "enum":"modifierfunction",
    "value":63,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE",
    "description":"GetModifierStatusResistance"
  },{
    "enum":"modifierfunction",
    "value":65,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER",
    "description":"GetModifierStatusResistanceCaster"
  },{
    "enum":"modifierfunction",
    "value":64,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING",
    "description":"GetModifierStatusResistanceStacking"
  },{
    "enum":"modifierfunction",
    "value":149,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STRONG_ILLUSION",
    "description":"GetModifierStrongIllusion"
  },{
    "enum":"modifierfunction",
    "value":150,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPER_ILLUSION",
    "description":"GetModifierSuperIllusion"
  },{
    "enum":"modifierfunction",
    "value":151,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE",
    "description":"GetModifierSuperIllusionWithUltimate"
  },{
    "enum":"modifierfunction",
    "value":239,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPPRESS_CLEAVE",
    "description":"GetSuppressCleave"
  },{
    "enum":"modifierfunction",
    "value":237,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPPRESS_TELEPORT",
    "description":"GetSuppressTeleport"
  },{
    "enum":"modifierfunction",
    "value":226,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TEMPEST_DOUBLE",
    "description":"GetModifierTempestDouble"
  },{
    "enum":"modifierfunction",
    "value":207,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOOLTIP",
    "description":"OnTooltip"
  },{
    "enum":"modifierfunction",
    "value":234,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOOLTIP2",
    "description":"OnTooltip2"
  },{
    "enum":"modifierfunction",
    "value":43,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierTotalDamageOutgoing_Percentage"
  },{
    "enum":"modifierfunction",
    "value":130,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK",
    "description":"GetModifierTotal_ConstantBlock"
  },{
    "enum":"modifierfunction",
    "value":129,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR",
    "description":"GetModifierPhysical_ConstantBlockUnavoidablePreArmor"
  },{
    "enum":"modifierfunction",
    "value":213,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS",
    "description":"GetActivityTranslationModifiers"
  },{
    "enum":"modifierfunction",
    "value":214,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND",
    "description":"GetAttackSound"
  },{
    "enum":"modifierfunction",
    "value":164,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK",
    "description":"GetTriggerCosmeticAndEndAttack"
  },{
    "enum":"modifierfunction",
    "value":154,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TURN_RATE_OVERRIDE",
    "description":"GetModifierTurnRate_Override"
  },{
    "enum":"modifierfunction",
    "value":153,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE",
    "description":"GetModifierTurnRate_Percentage"
  },{
    "enum":"modifierfunction",
    "value":162,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING",
    "description":"GetModifierUnitDisllowUpgrading"
  },{
    "enum":"modifierfunction",
    "value":159,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH",
    "description":"GetModifierUnitStatsNeedsRefresh"
  },{
    "enum":"modifierfunction",
    "value":231,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_VISUAL_Z_DELTA",
    "description":"GetVisualZDelta"
  },{
    "enum":"modifierfunction",
    "value":152,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_XP_DURING_DEATH",
    "description":"GetModifierXPDuringDeath"
  },{
    "enum":"modifierstate",
    "value":46,
    "kind":"constant",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS"
  },{
    "enum":"modifierstate",
    "value":47,
    "kind":"constant",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE"
  },{
    "enum":"modifierstate",
    "value":36,
    "kind":"constant",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES"
  },{
    "enum":"modifierstate",
    "value":45,
    "kind":"constant",
    "name":"MODIFIER_STATE_ATTACK_ALLIES"
  },{
    "enum":"modifierstate",
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_STATE_ATTACK_IMMUNE"
  },{
    "enum":"modifierstate",
    "value":29,
    "kind":"constant",
    "name":"MODIFIER_STATE_BLIND"
  },{
    "enum":"modifierstate",
    "value":12,
    "kind":"constant",
    "name":"MODIFIER_STATE_BLOCK_DISABLED"
  },{
    "enum":"modifierstate",
    "value":43,
    "kind":"constant",
    "name":"MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED"
  },{
    "enum":"modifierstate",
    "value":16,
    "kind":"constant",
    "name":"MODIFIER_STATE_CANNOT_MISS"
  },{
    "enum":"modifierstate",
    "value":15,
    "kind":"constant",
    "name":"MODIFIER_STATE_CANNOT_TARGET_ENEMIES"
  },{
    "enum":"modifierstate",
    "value":19,
    "kind":"constant",
    "name":"MODIFIER_STATE_COMMAND_RESTRICTED"
  },{
    "enum":"modifierstate",
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_STATE_DISARMED"
  },{
    "enum":"modifierstate",
    "value":28,
    "kind":"constant",
    "name":"MODIFIER_STATE_DOMINATED"
  },{
    "enum":"modifierstate",
    "value":13,
    "kind":"constant",
    "name":"MODIFIER_STATE_EVADE_DISABLED"
  },{
    "enum":"modifierstate",
    "value":31,
    "kind":"constant",
    "name":"MODIFIER_STATE_FAKE_ALLY"
  },{
    "enum":"modifierstate",
    "value":41,
    "kind":"constant",
    "name":"MODIFIER_STATE_FEARED"
  },{
    "enum":"modifierstate",
    "value":23,
    "kind":"constant",
    "name":"MODIFIER_STATE_FLYING"
  },{
    "enum":"modifierstate",
    "value":32,
    "kind":"constant",
    "name":"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY"
  },{
    "enum":"modifierstate",
    "value":44,
    "kind":"constant",
    "name":"MODIFIER_STATE_FORCED_FLYING_VISION"
  },{
    "enum":"modifierstate",
    "value":18,
    "kind":"constant",
    "name":"MODIFIER_STATE_FROZEN"
  },{
    "enum":"modifierstate",
    "value":6,
    "kind":"constant",
    "name":"MODIFIER_STATE_HEXED"
  },{
    "enum":"modifierstate",
    "value":35,
    "kind":"constant",
    "name":"MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS"
  },{
    "enum":"modifierstate",
    "value":40,
    "kind":"constant",
    "name":"MODIFIER_STATE_IGNORING_STOP_ORDERS"
  },{
    "enum":"modifierstate",
    "value":7,
    "kind":"constant",
    "name":"MODIFIER_STATE_INVISIBLE"
  },{
    "enum":"modifierstate",
    "value":8,
    "kind":"constant",
    "name":"MODIFIER_STATE_INVULNERABLE"
  },{
    "enum":"modifierstate",
    "value":49,
    "kind":"constant",
    "name":"MODIFIER_STATE_LAST"
  },{
    "enum":"modifierstate",
    "value":21,
    "kind":"constant",
    "name":"MODIFIER_STATE_LOW_ATTACK_PRIORITY"
  },{
    "enum":"modifierstate",
    "value":9,
    "kind":"constant",
    "name":"MODIFIER_STATE_MAGIC_IMMUNE"
  },{
    "enum":"modifierstate",
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_STATE_MUTED"
  },{
    "enum":"modifierstate",
    "value":11,
    "kind":"constant",
    "name":"MODIFIER_STATE_NIGHTMARED"
  },{
    "enum":"modifierstate",
    "value":20,
    "kind":"constant",
    "name":"MODIFIER_STATE_NOT_ON_MINIMAP"
  },{
    "enum":"modifierstate",
    "value":37,
    "kind":"constant",
    "name":"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES"
  },{
    "enum":"modifierstate",
    "value":22,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_HEALTH_BAR"
  },{
    "enum":"modifierstate",
    "value":25,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_TEAM_MOVE_TO"
  },{
    "enum":"modifierstate",
    "value":26,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_TEAM_SELECT"
  },{
    "enum":"modifierstate",
    "value":24,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_UNIT_COLLISION"
  },{
    "enum":"modifierstate",
    "value":30,
    "kind":"constant",
    "name":"MODIFIER_STATE_OUT_OF_GAME"
  },{
    "enum":"modifierstate",
    "value":27,
    "kind":"constant",
    "name":"MODIFIER_STATE_PASSIVES_DISABLED"
  },{
    "enum":"modifierstate",
    "value":10,
    "kind":"constant",
    "name":"MODIFIER_STATE_PROVIDES_VISION"
  },{
    "enum":"modifierstate",
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_STATE_ROOTED"
  },{
    "enum":"modifierstate",
    "value":3,
    "kind":"constant",
    "name":"MODIFIER_STATE_SILENCED"
  },{
    "enum":"modifierstate",
    "value":17,
    "kind":"constant",
    "name":"MODIFIER_STATE_SPECIALLY_DENIABLE"
  },{
    "enum":"modifierstate",
    "value":48,
    "kind":"constant",
    "name":"MODIFIER_STATE_SPECIALLY_UNDENIABLE"
  },{
    "enum":"modifierstate",
    "value":5,
    "kind":"constant",
    "name":"MODIFIER_STATE_STUNNED"
  },{
    "enum":"modifierstate",
    "value":42,
    "kind":"constant",
    "name":"MODIFIER_STATE_TAUNTED"
  },{
    "enum":"modifierstate",
    "value":39,
    "kind":"constant",
    "name":"MODIFIER_STATE_TETHERED"
  },{
    "enum":"modifierstate",
    "value":33,
    "kind":"constant",
    "name":"MODIFIER_STATE_TRUESIGHT_IMMUNE"
  },{
    "enum":"modifierstate",
    "value":14,
    "kind":"constant",
    "name":"MODIFIER_STATE_UNSELECTABLE"
  },{
    "enum":"modifierstate",
    "value":38,
    "kind":"constant",
    "name":"MODIFIER_STATE_UNSLOWABLE"
  },{
    "enum":"modifierstate",
    "value":34,
    "kind":"constant",
    "name":"MODIFIER_STATE_UNTARGETABLE"
  },{
    "value":0.01023,
    "kind":"constant",
    "name":"NDEBUG_PERSIST_TILL_NEXT_SERVER"
  },{
    "enum":"ParticleAttachment_t",
    "value":0,
    "kind":"constant",
    "name":"PATTACH_ABSORIGIN"
  },{
    "enum":"ParticleAttachment_t",
    "value":1,
    "kind":"constant",
    "name":"PATTACH_ABSORIGIN_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":13,
    "kind":"constant",
    "name":"PATTACH_CENTER_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":2,
    "kind":"constant",
    "name":"PATTACH_CUSTOMORIGIN"
  },{
    "enum":"ParticleAttachment_t",
    "value":3,
    "kind":"constant",
    "name":"PATTACH_CUSTOMORIGIN_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":14,
    "kind":"constant",
    "name":"PATTACH_CUSTOM_GAME_STATE_1"
  },{
    "enum":"ParticleAttachment_t",
    "value":6,
    "kind":"constant",
    "name":"PATTACH_EYES_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":15,
    "kind":"constant",
    "name":"PATTACH_HEALTHBAR"
  },{
    "enum":"ParticleAttachment_t",
    "value":-1,
    "kind":"constant",
    "name":"PATTACH_INVALID"
  },{
    "enum":"ParticleAttachment_t",
    "value":11,
    "kind":"constant",
    "name":"PATTACH_MAIN_VIEW"
  },{
    "enum":"ParticleAttachment_t",
    "value":7,
    "kind":"constant",
    "name":"PATTACH_OVERHEAD_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":4,
    "kind":"constant",
    "name":"PATTACH_POINT"
  },{
    "enum":"ParticleAttachment_t",
    "value":5,
    "kind":"constant",
    "name":"PATTACH_POINT_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":10,
    "kind":"constant",
    "name":"PATTACH_RENDERORIGIN_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":9,
    "kind":"constant",
    "name":"PATTACH_ROOTBONE_FOLLOW"
  },{
    "enum":"ParticleAttachment_t",
    "value":12,
    "kind":"constant",
    "name":"PATTACH_WATERWAKE"
  },{
    "enum":"ParticleAttachment_t",
    "value":8,
    "kind":"constant",
    "name":"PATTACH_WORLDORIGIN"
  },{
    "value":2,
    "kind":"constant",
    "name":"POSTSENSING"
  },{
    "value":1,
    "kind":"constant",
    "name":"PRESENSING"
  },{
    "value":0,
    "kind":"constant",
    "name":"PRESIM"
  },{
    "value":3,
    "kind":"constant",
    "name":"RELOAD"
  },{
    "value":1,
    "kind":"constant",
    "name":"SINGLE_SHOT"
  },{
    "value":0,
    "kind":"constant",
    "name":"SPAWN_GROUP_HANDLE_INVALID"
  },{
    "value":8,
    "kind":"constant",
    "name":"SPECIAL1"
  },{
    "value":9,
    "kind":"constant",
    "name":"SPECIAL2"
  },{
    "value":10,
    "kind":"constant",
    "name":"SPECIAL3"
  },{
    "value":6,
    "kind":"constant",
    "name":"ScriptDebugFirstLine"
  },{
    "value":0,
    "kind":"constant",
    "name":"ScriptDebugTextIndent"
  },{
    "value":20,
    "kind":"constant",
    "name":"ScriptDebugTextLines"
  },{
    "value":10,
    "kind":"constant",
    "name":"ScriptDebugTextTime"
  },{
    "value":26,
    "kind":"constant",
    "name":"ScriptDebugWatchFistLine"
  },{
    "enum":"UnitFilterResult",
    "value":9,
    "kind":"constant",
    "name":"UF_FAIL_ANCIENT"
  },{
    "enum":"UnitFilterResult",
    "value":22,
    "kind":"constant",
    "name":"UF_FAIL_ATTACK_IMMUNE"
  },{
    "enum":"UnitFilterResult",
    "value":6,
    "kind":"constant",
    "name":"UF_FAIL_BUILDING"
  },{
    "enum":"UnitFilterResult",
    "value":4,
    "kind":"constant",
    "name":"UF_FAIL_CONSIDERED_HERO"
  },{
    "enum":"UnitFilterResult",
    "value":7,
    "kind":"constant",
    "name":"UF_FAIL_COURIER"
  },{
    "enum":"UnitFilterResult",
    "value":5,
    "kind":"constant",
    "name":"UF_FAIL_CREEP"
  },{
    "enum":"UnitFilterResult",
    "value":23,
    "kind":"constant",
    "name":"UF_FAIL_CUSTOM"
  },{
    "enum":"UnitFilterResult",
    "value":15,
    "kind":"constant",
    "name":"UF_FAIL_DEAD"
  },{
    "enum":"UnitFilterResult",
    "value":25,
    "kind":"constant",
    "name":"UF_FAIL_DISABLE_HELP"
  },{
    "enum":"UnitFilterResult",
    "value":12,
    "kind":"constant",
    "name":"UF_FAIL_DOMINATED"
  },{
    "enum":"UnitFilterResult",
    "value":2,
    "kind":"constant",
    "name":"UF_FAIL_ENEMY"
  },{
    "enum":"UnitFilterResult",
    "value":1,
    "kind":"constant",
    "name":"UF_FAIL_FRIENDLY"
  },{
    "enum":"UnitFilterResult",
    "value":3,
    "kind":"constant",
    "name":"UF_FAIL_HERO"
  },{
    "enum":"UnitFilterResult",
    "value":10,
    "kind":"constant",
    "name":"UF_FAIL_ILLUSION"
  },{
    "enum":"UnitFilterResult",
    "value":24,
    "kind":"constant",
    "name":"UF_FAIL_INVALID_LOCATION"
  },{
    "enum":"UnitFilterResult",
    "value":20,
    "kind":"constant",
    "name":"UF_FAIL_INVISIBLE"
  },{
    "enum":"UnitFilterResult",
    "value":18,
    "kind":"constant",
    "name":"UF_FAIL_INVULNERABLE"
  },{
    "enum":"UnitFilterResult",
    "value":19,
    "kind":"constant",
    "name":"UF_FAIL_IN_FOW"
  },{
    "enum":"UnitFilterResult",
    "value":16,
    "kind":"constant",
    "name":"UF_FAIL_MAGIC_IMMUNE_ALLY"
  },{
    "enum":"UnitFilterResult",
    "value":17,
    "kind":"constant",
    "name":"UF_FAIL_MAGIC_IMMUNE_ENEMY"
  },{
    "enum":"UnitFilterResult",
    "value":13,
    "kind":"constant",
    "name":"UF_FAIL_MELEE"
  },{
    "enum":"UnitFilterResult",
    "value":27,
    "kind":"constant",
    "name":"UF_FAIL_NIGHTMARED"
  },{
    "enum":"UnitFilterResult",
    "value":21,
    "kind":"constant",
    "name":"UF_FAIL_NOT_PLAYER_CONTROLLED"
  },{
    "enum":"UnitFilterResult",
    "value":28,
    "kind":"constant",
    "name":"UF_FAIL_OBSTRUCTED"
  },{
    "enum":"UnitFilterResult",
    "value":8,
    "kind":"constant",
    "name":"UF_FAIL_OTHER"
  },{
    "enum":"UnitFilterResult",
    "value":26,
    "kind":"constant",
    "name":"UF_FAIL_OUT_OF_WORLD"
  },{
    "enum":"UnitFilterResult",
    "value":14,
    "kind":"constant",
    "name":"UF_FAIL_RANGED"
  },{
    "enum":"UnitFilterResult",
    "value":11,
    "kind":"constant",
    "name":"UF_FAIL_SUMMONED"
  },{
    "enum":"UnitFilterResult",
    "value":0,
    "kind":"constant",
    "name":"UF_SUCCESS"
  },{
    "value":1773,
    "kind":"constant",
    "name":"debut_end"
  },{
    "value":1774,
    "kind":"constant",
    "name":"debut_start"
  },{
    "value":1796,
    "kind":"constant",
    "name":"radiant_melee_mars_shieldbash"
  },{
    "value":1758,
    "kind":"constant",
    "name":"time_remap_smoke_side"
  },{
    "members":[{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"AddImpulseAtPosition",
        "description":"Apply an impulse at a worldspace position to the physics"
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"AddVelocity",
        "description":"Add linear and angular velocity to the physics object"
      },{
        "args":[],
        "returns":"void",
        "name":"DetachFromParent",
        "description":"Detach from its parent"
      },{
        "args":[],
        "returns":"<unknown>",
        "name":"GetSequence",
        "description":"Returns the active sequence\n"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAttachedToParent",
        "description":"Is attached to parent"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"<unknown>",
        "name":"LookupSequence",
        "description":"Returns a sequence id given a name\n"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"float",
        "name":"SequenceDuration",
        "description":"Returns the duration in seconds of the specified sequence"
      },{
        "args":[{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetAngularVelocity"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"SetAnimation",
        "description":"Pass string for the animation to play on this model"
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "returns":"void",
        "name":"SetMaterialGroup"
      },{
        "args":[{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetVelocity"
      }],
    "name":"CBodyComponent",
    "kind":"class"
  },{
    "instance":"CustomNetTables",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetTableValue",
        "description":"( string TableName, string KeyName )"
      }],
    "name":"CCustomNetTableManager",
    "kind":"class"
  },{
    "instance":"DOTAGameManager",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetHeroDataByName_Script",
        "description":"Get the hero unit "
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"int",
        "name":"GetHeroIDByName",
        "description":"Get the hero ID given the hero name."
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"string",
        "name":"GetHeroNameByID",
        "description":"Get the hero name given a hero ID."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"string",
        "name":"GetHeroNameForUnitName",
        "description":"Get the hero name given a unit name."
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"string",
        "name":"GetHeroUnitNameByID",
        "description":"Get the hero unit name given the hero ID."
      }],
    "name":"CDOTAGameManager",
    "kind":"class"
  },{
    "instance":"GameRules",
    "members":[{
        "args":[],
        "returns":"table",
        "name":"GetBannedHeroIDs",
        "description":"Returns the hero unit IDs banned in this game, if any"
      },{
        "args":[],
        "returns":"table",
        "name":"GetBannedHeroes",
        "description":"Returns the hero unit names banned in this game, if any"
      },{
        "args":[],
        "returns":"int",
        "name":"GetCustomGameDifficulty",
        "description":"Returns the difficulty level of the custom game mode"
      },{
        "args":[{
            "type":"bool"
          },{
            "type":"bool"
          }],
        "returns":"float",
        "name":"GetDOTATime",
        "description":"(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time."
      },{
        "args":[],
        "returns":"int",
        "name":"GetDifficulty",
        "description":"Returns difficulty level of the custom game mode"
      },{
        "args":[],
        "returns":"float",
        "name":"GetGameFrameTime",
        "description":"Returns the number of seconds elapsed since the last frame was renderered. This time doesn't count up when the game is paused"
      },{
        "args":[],
        "returns":"float",
        "name":"GetGameTime",
        "description":"Returns the number of seconds elapsed since map start. This time doesn't count up when the game is paused"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"int",
        "name":"GetItemStockCount",
        "description":"Get the stock count of the item"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"float",
        "name":"GetItemStockDuration",
        "description":"Get the time it takes to add a new item to stock"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"float",
        "name":"GetItemStockTime",
        "description":"Get the time an item will be added to stock"
      },{
        "args":[],
        "returns":"Vector",
        "name":"GetWeatherWindDirection",
        "description":"Get Weather Wind Direction Vector"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCheatMode",
        "description":"Are cheats enabled on the server"
      },{
        "args":[],
        "returns":"int",
        "name":"State_Get",
        "description":"Get the current Gamerules state"
      }],
    "name":"CDOTAGamerules",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "name":"i",
            "type":"int"
          },{
            "name":"bDestroyImmediately",
            "type":"bool"
          },{
            "name":"bStatusEffect",
            "type":"bool"
          },{
            "name":"iPriority",
            "type":"int"
          },{
            "name":"bHeroEffect",
            "type":"bool"
          },{
            "name":"bOverheadEffect",
            "type":"bool"
          }],
        "returns":"void",
        "name":"AddParticle",
        "description":"(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect"
      },{
        "args":[{
            "name":"table",
            "type":"handle"
          }],
        "returns":"void",
        "name":"CheckStateToTable"
      },{
        "args":[],
        "returns":"void",
        "name":"DecrementStackCount",
        "description":"Decrease this modifier's stack count by 1."
      },{
        "args":[],
        "returns":"void",
        "name":"Destroy",
        "description":"Run all associated destroy functions, then remove the modifier."
      },{
        "args":[],
        "returns":"bool",
        "name":"DestroyOnExpire"
      },{
        "args":[],
        "returns":"void",
        "name":"ForceRefresh",
        "description":"Run all associated refresh functions on this modifier as if it was re-applied."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetAbility",
        "description":"Get the ability that generated the modifier."
      },{
        "args":[],
        "returns":"float",
        "name":"GetAuraDuration",
        "description":"Returns aura stickiness (default 0.5)"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetAuraOwner"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetCaster",
        "description":"Get the owner of the ability responsible for the modifier."
      },{
        "args":[],
        "returns":"string",
        "name":"GetClass"
      },{
        "args":[],
        "returns":"float",
        "name":"GetCreationTime"
      },{
        "args":[],
        "returns":"float",
        "name":"GetDieTime"
      },{
        "args":[],
        "returns":"float",
        "name":"GetDuration"
      },{
        "args":[],
        "returns":"float",
        "name":"GetElapsedTime"
      },{
        "args":[],
        "returns":"float",
        "name":"GetLastAppliedTime"
      },{
        "args":[],
        "returns":"string",
        "name":"GetName"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetParent",
        "description":"Get the unit the modifier is parented to."
      },{
        "args":[],
        "returns":"float",
        "name":"GetRemainingTime"
      },{
        "args":[],
        "returns":"int",
        "name":"GetSerialNumber"
      },{
        "args":[],
        "returns":"int",
        "name":"GetStackCount"
      },{
        "args":[{
            "name":"iFunction",
            "type":"int"
          }],
        "returns":"bool",
        "name":"HasFunction"
      },{
        "args":[],
        "returns":"void",
        "name":"IncrementStackCount",
        "description":"Increase this modifier's stack count by 1."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDebuff"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHexDebuff"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStunDebuff"
      },{
        "args":[{
            "name":"flDuration",
            "type":"float"
          },{
            "name":"bInformClient",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetDuration",
        "description":"(flTime, bInformClients)"
      },{
        "args":[{
            "name":"iCount",
            "type":"int"
          }],
        "returns":"void",
        "name":"SetStackCount"
      },{
        "args":[{
            "name":"flInterval",
            "type":"float"
          }],
        "returns":"void",
        "name":"StartIntervalThink",
        "description":"Start this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1."
      }],
    "name":"CDOTA_Buff",
    "kind":"class"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"OnHorizontalMotionInterrupted",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[{
            "name":"me",
            "type":"handle"
          },{
            "name":"dt",
            "type":"float"
          }],
        "returns":"void",
        "name":"UpdateHorizontalMotion",
        "description":"Perform any motion from the given interval on the NPC."
      }],
    "kind":"class",
    "name":"CDOTA_Modifier_Lua_Horizontal_Motion",
    "extend":"C_DOTA_Modifier_Lua"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"OnHorizontalMotionInterrupted",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[],
        "returns":"void",
        "name":"OnVerticalMotionInterrupted",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[{
            "name":"me",
            "type":"handle"
          },{
            "name":"dt",
            "type":"float"
          }],
        "returns":"void",
        "name":"UpdateHorizontalMotion",
        "description":"Perform any motion from the given interval on the NPC."
      },{
        "args":[{
            "name":"me",
            "type":"handle"
          },{
            "name":"dt",
            "type":"float"
          }],
        "returns":"void",
        "name":"UpdateVerticalMotion",
        "description":"Perform any motion from the given interval on the NPC."
      }],
    "kind":"class",
    "name":"CDOTA_Modifier_Lua_Motion_Both",
    "extend":"C_DOTA_Modifier_Lua"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"OnVerticalMotionInterrupted",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[{
            "name":"me",
            "type":"handle"
          },{
            "name":"dt",
            "type":"float"
          }],
        "returns":"void",
        "name":"UpdateVerticalMotion",
        "description":"Perform any motion from the given interval on the NPC."
      }],
    "kind":"class",
    "name":"CDOTA_Modifier_Lua_Vertical_Motion",
    "extend":"C_DOTA_Modifier_Lua"
  },{
    "instance":"debugoverlay",
    "members":[{
        "args":[{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"float"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Axis",
        "description":"Draws an axis. Specify origin + orientation in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Box",
        "description":"Draws a world-space axis-aligned box. Specify bounds in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"BoxAngles",
        "description":"Draws an oriented box at the origin. Specify bounds in local space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Capsule",
        "description":"Draws a capsule. Specify base in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Circle",
        "description":"Draws a circle. Specify center in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"CircleScreenOriented",
        "description":"Draws a circle oriented to the screen. Specify center in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Cone",
        "description":"Draws a wireframe cone. Specify endpoint and direction in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Cross",
        "description":"Draws a screen-aligned cross. Specify origin in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Cross3D",
        "description":"Draws a world-aligned cross. Specify origin in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Cross3DOriented",
        "description":"Draws an oriented cross. Specify origin in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"DrawTickMarkedLine",
        "description":"Draws a dashed line. Specify endpoints in world space."
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"EntityAttachments",
        "description":"Draws the attachments of the entity"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"EntityAxis",
        "description":"Draws the axis of the entity origin"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"EntityBounds",
        "description":"Draws bounds of an entity"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"EntitySkeleton",
        "description":"Draws the skeleton of the entity"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"EntityText",
        "description":"Draws text on an entity"
      },{
        "args":[{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"FilledRect2D",
        "description":"Draws a screen-space filled 2D rectangle. Coordinates are in pixels."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"HorzArrow",
        "description":"Draws a horizontal arrow. Specify endpoints in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Line",
        "description":"Draws a line between two points"
      },{
        "args":[{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Line2D",
        "description":"Draws a line between two points in screenspace"
      },{
        "args":[],
        "returns":"void",
        "name":"PopDebugOverlayScope",
        "description":"Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "returns":"void",
        "name":"PushAndClearDebugOverlayScope",
        "description":"Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id."
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "returns":"void",
        "name":"PushDebugOverlayScope",
        "description":"Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "returns":"void",
        "name":"RemoveAllInScope",
        "description":"Removes all overlays marked with a specific identifier, regardless of their lifetime."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"SolidCone",
        "description":"Draws a solid cone. Specify endpoint and direction in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Sphere",
        "description":"Draws a wireframe sphere. Specify center in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"SweptBox",
        "description":"Draws a swept box. Specify endpoints in world space and the bounds in local space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Text",
        "description":"Draws 2D text. Specify origin in world space."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Texture",
        "description":"Draws a screen-space texture. Coordinates are in pixels."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"Triangle",
        "description":"Draws a filled triangle. Specify vertices in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Quaternion"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"VectorText3D",
        "description":"Draws 3D text. Specify origin + orientation in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"VertArrow",
        "description":"Draws a vertical arrow. Specify endpoints in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"YawArrow",
        "description":"Draws a arrow associated with a specific yaw. Specify endpoints in world space."
      }],
    "name":"CDebugOverlayScriptHelper",
    "kind":"class"
  },{
    "instance":"Entities",
    "members":[{
        "args":[],
        "returns":"handle",
        "name":"First",
        "description":"Begin an iteration over the list of entities"
      },{
        "args":[{
            "type":"handle"
          }],
        "returns":"handle",
        "name":"Next",
        "description":"Continue an iteration over the list of entities, providing reference to a previously found entity"
      }],
    "name":"CEntities",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"void",
        "name":"ConnectOutput",
        "description":"Adds an I/O connection that will call the named function on this entity when the specified output fires."
      },{
        "args":[],
        "returns":"void",
        "name":"Destroy"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"void",
        "name":"DisconnectOutput",
        "description":"Removes a connected script function from an I/O event on this entity."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"void",
        "name":"DisconnectRedirectedOutput",
        "description":"Removes a connected script function from an I/O event on the passed entity."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          },{
            "type":"handle"
          },{
            "type":"table"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"FireOutput",
        "description":"Fire an entity output"
      },{
        "args":[],
        "returns":"string",
        "name":"GetClassname"
      },{
        "args":[],
        "returns":"string",
        "name":"GetDebugName",
        "description":"Get the entity name w/help if not defined (i.e. classname/etc)"
      },{
        "args":[],
        "returns":"ehandle",
        "name":"GetEntityHandle",
        "description":"Get the entity as an EHANDLE"
      },{
        "args":[],
        "returns":"int",
        "name":"GetEntityIndex"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"int",
        "name":"GetIntAttr",
        "description":"Get Integer Attribute"
      },{
        "args":[],
        "returns":"string",
        "name":"GetName"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetOrCreatePrivateScriptScope",
        "description":"Retrieve, creating if necessary, the private per-instance script-side data associated with an entity"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetOrCreatePublicScriptScope",
        "description":"Retrieve, creating if necessary, the public script-side data associated with an entity"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetPrivateScriptScope",
        "description":"Retrieve the private per-instance script-side data associated with an entity"
      },{
        "args":[],
        "returns":"handle",
        "name":"GetPublicScriptScope",
        "description":"Retrieve the public script-side data associated with an entity"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"void",
        "name":"RedirectOutput",
        "description":"Adds an I/O connection that will call the named function on the passed entity when the specified output fires."
      },{
        "args":[],
        "returns":"void",
        "name":"RemoveSelf",
        "description":"Delete this entity"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetIntAttr",
        "description":"Set Integer Attribute"
      },{
        "args":[],
        "returns":"int",
        "name":"entindex"
      }],
    "name":"CEntityInstance",
    "kind":"class"
  },{
    "instance":"NativeFunctions",
    "members":[],
    "name":"CEntityScriptFramework",
    "kind":"class"
  },{
    "members":[{
        "args":[],
        "returns":"void",
        "name":"HideWorldLayer",
        "description":"Hides this layer"
      },{
        "args":[],
        "returns":"void",
        "name":"ShowWorldLayer",
        "description":"Shows this layer"
      }],
    "kind":"class",
    "name":"CInfoWorldLayer",
    "extend":"C_BaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"hActivator",
            "type":"handle"
          },{
            "name":"hCaller",
            "type":"handle"
          }],
        "returns":"void",
        "name":"Trigger",
        "description":"Trigger( hActivator, hCaller ) : Triggers the logic_relay"
      }],
    "kind":"class",
    "name":"CLogicRelay",
    "extend":"C_BaseEntity"
  },{
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"void",
        "name":"AddOutput",
        "description":"Add an output"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"Init",
        "description":"Initialize with number of outputs"
      }],
    "name":"CNativeOutputs",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "type":"handle"
          }],
        "returns":"bool",
        "name":"Send",
        "description":"Send a HTTP request."
      },{
        "args":[{
            "type":"unsigned"
          }],
        "returns":"bool",
        "name":"SetHTTPRequestAbsoluteTimeoutMS",
        "description":"Set the total timeout on the request."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"bool",
        "name":"SetHTTPRequestGetOrPostParameter",
        "description":"Set a POST or GET parameter on the request."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"bool",
        "name":"SetHTTPRequestHeaderValue",
        "description":"Set a header value on the request."
      },{
        "args":[{
            "type":"unsigned"
          }],
        "returns":"bool",
        "name":"SetHTTPRequestNetworkActivityTimeout",
        "description":"Set the network timeout on the request - this timer is reset when any data is received."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"bool",
        "name":"SetHTTPRequestRawPostBody",
        "description":"Set the literal body of a post - invalid after setting a post parameter."
      }],
    "name":"CScriptHTTPRequest",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetValue",
        "description":"Reads a spawn key"
      }],
    "name":"CScriptKeyValues",
    "kind":"class"
  },{
    "instance":"ParticleManager",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          }],
        "returns":"int",
        "name":"CreateParticle",
        "description":"Creates a new particle effect"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"handle"
          }],
        "returns":"int",
        "name":"CreateParticleForPlayer",
        "description":"Creates a new particle effect that only plays for the specified player"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"int"
          }],
        "returns":"int",
        "name":"CreateParticleForTeam",
        "description":"Creates a new particle effect that only plays for the specified team"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"bool"
          }],
        "returns":"void",
        "name":"DestroyParticle",
        "description":"(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          }],
        "returns":"string",
        "name":"GetParticleReplacement"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"ReleaseParticleIndex",
        "description":"Frees the specified particle index"
      },{
        "args":[{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetParticleAlwaysSimulate"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetParticleControl",
        "description":"Set the control point data for a control on a particle effect"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetParticleControlEnt"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetParticleControlFallback",
        "description":"(int iIndex, int iPoint, Vector vecPosition)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetParticleControlForward",
        "description":"(int nFXIndex, int nPoint, vForward)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetParticleControlOrientation",
        "description":"(int nFXIndex, int nPoint, vForward, vRight, vUp) - Set the orientation for a control on a particle effect (NOTE: This is left handed -- bad!!)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "returns":"void",
        "name":"SetParticleControlOrientationFLU",
        "description":"(int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetParticleFoWProperties",
        "description":"int nfxindex, int nPoint, int nPoint2, float flRadius"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"bool"
          }],
        "returns":"bool",
        "name":"SetParticleShouldCheckFoW",
        "description":"int nfxindex, bool bCheckFoW"
      }],
    "name":"CScriptParticleManager",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "type":"string"
          }],
        "returns":"void",
        "name":"AddResource",
        "description":"Precaches a specific resource"
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetValue",
        "description":"Reads a spawn key"
      }],
    "name":"CScriptPrecacheContext",
    "kind":"class"
  },{
    "members":[{
        "args":[{
            "name":"flMinVal",
            "type":"float"
          },{
            "name":"flMaxVal",
            "type":"float"
          }],
        "returns":"float",
        "name":"RandomFloat"
      },{
        "args":[{
            "name":"flMinVal",
            "type":"float"
          },{
            "name":"flMaxVal",
            "type":"float"
          },{
            "name":"flExponent",
            "type":"float"
          }],
        "returns":"float",
        "name":"RandomFloatExp"
      },{
        "args":[{
            "name":"iMinVal",
            "type":"int"
          },{
            "name":"iMaxVal",
            "type":"int"
          }],
        "returns":"int",
        "name":"RandomInt"
      },{
        "args":[{
            "name":"iPercentage",
            "type":"int"
          }],
        "returns":"bool",
        "name":"RollPercentage"
      }],
    "name":"CScriptUniformRandomStream",
    "kind":"class"
  },{
    "members":[],
    "kind":"class",
    "name":"C_BaseAnimating",
    "extend":"C_BaseModelEntity"
  },{
    "members":[],
    "kind":"class",
    "name":"C_BaseCombatCharacter",
    "extend":"C_BaseFlex"
  },{
    "members":[{
        "args":[],
        "returns":"Vector",
        "name":"GetAbsOrigin"
      },{
        "args":[],
        "returns":"int",
        "name":"GetMaxHealth"
      },{
        "args":[],
        "returns":"int",
        "name":"GetTeamNumber"
      },{
        "args":[{
            "name":"pszContextName",
            "type":"string"
          },{
            "name":"hThinkFunc",
            "type":"handle"
          },{
            "name":"flInterval",
            "type":"float"
          }],
        "returns":"void",
        "name":"SetContextThink",
        "description":"Set a think function on this entity."
      }],
    "kind":"class",
    "name":"C_BaseEntity",
    "extend":"CEntityInstance"
  },{
    "members":[],
    "kind":"class",
    "name":"C_BaseFlex",
    "extend":"C_BaseAnimating"
  },{
    "members":[{
        "args":[],
        "returns":"int",
        "name":"GetRenderAlpha",
        "description":"GetRenderAlpha(): Get the alpha modulation of this entity."
      }],
    "kind":"class",
    "name":"C_BaseModelEntity",
    "extend":"C_BaseEntity"
  },{
    "members":[{
        "args":[],
        "returns":"string",
        "name":"GetAbilityName",
        "description":"Name of this ability."
      },{
        "args":[],
        "returns":"int",
        "name":"GetBehavior"
      },{
        "args":[],
        "returns":"int",
        "name":"GetBehaviorInt",
        "description":"Get ability behavior flags as an int for compatability."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetCaster"
      },{
        "args":[],
        "returns":"int",
        "name":"GetCurrentAbilityCharges"
      },{
        "args":[],
        "returns":"int",
        "name":"GetLevel",
        "description":"Return the level of the ability"
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"nLevel",
            "type":"int"
          }],
        "returns":"table",
        "name":"GetLevelSpecialValueFor",
        "description":"Gets a value from this ability's special value block for passed level."
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"nLevel",
            "type":"int"
          }],
        "returns":"table",
        "name":"GetLevelSpecialValueNoOverride"
      },{
        "args":[{
            "name":"szName",
            "type":"string"
          }],
        "returns":"table",
        "name":"GetSpecialValueFor",
        "description":"Gets a value from this ability's special value block for its current level."
      },{
        "args":[],
        "returns":"bool",
        "name":"GetToggleState",
        "description":"Whether or not this ability is toggled."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsItem",
        "description":"Whether or not this ability is an item."
      }],
    "kind":"class",
    "name":"C_DOTABaseAbility",
    "extend":"C_BaseEntity"
  },{
    "members":[{
        "args":[],
        "returns":"int",
        "name":"CastFilterResult",
        "description":"Determine whether an issued command with no target is valid."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"int",
        "name":"CastFilterResultLocation",
        "description":"(Vector vLocation) Determine whether an issued command on a location is valid."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"CastFilterResultTarget",
        "description":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
      },{
        "args":[],
        "returns":"float",
        "name":"GetAOERadius",
        "description":"Controls the size of the AOE casting cursor."
      },{
        "args":[],
        "returns":"string",
        "name":"GetAbilityTextureName",
        "description":"Allows code overriding of the ability texture shown in the HUD."
      },{
        "args":[],
        "returns":"uint64",
        "name":"GetBehavior",
        "description":"Return cast behavior type of this ability."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCastPoint",
        "description":"Return cast point of this ability."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetCastRange",
        "description":"Return cast range of this ability."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetCastRangeBonus"
      },{
        "args":[],
        "returns":"float",
        "name":"GetChannelTime",
        "description":"Return the channel time of this ability."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetChannelledManaCostPerSecond",
        "description":"Return mana cost at the given level per second while channeling (-1 is current)."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetCooldown",
        "description":"Return cooldown of this ability."
      },{
        "args":[],
        "returns":"string",
        "name":"GetCustomCastError",
        "description":"Return the error string of a failed command with no target."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"string",
        "name":"GetCustomCastErrorLocation",
        "description":"(Vector vLocation) Return the error string of a failed command on a location."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"string",
        "name":"GetCustomCastErrorTarget",
        "description":"(HSCRIPT hTarget) Return the error string of a failed command on a target."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetEffectiveCastRange",
        "description":"Return cast range of this ability, accounting for modifiers."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGoldCost",
        "description":"Return gold cost at the given level (-1 is current)."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetManaCost",
        "description":"Return mana cost at the given level (-1 is current)."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHiddenAbilityCastable",
        "description":"Returns true if this ability can be used when not on the action panel."
      }],
    "kind":"class",
    "name":"C_DOTA_Ability_Lua",
    "extend":"C_DOTABaseAbility"
  },{
    "members":[{
        "args":[{
            "name":"pAbilityName",
            "type":"string"
          }],
        "returns":"handle",
        "name":"FindAbilityByName",
        "description":"Retrieve an ability by name from the unit."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAbilityCount"
      },{
        "args":[],
        "returns":"float",
        "name":"GetAttackSpeed"
      },{
        "args":[],
        "returns":"float",
        "name":"GetAttacksPerSecond"
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseAttackTime"
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseMagicalResistanceValue",
        "description":"Returns base magical armor value."
      },{
        "args":[],
        "returns":"float",
        "name":"GetBaseMoveSpeed"
      },{
        "args":[],
        "returns":"float",
        "name":"GetCastRangeBonus"
      },{
        "args":[],
        "returns":"float",
        "name":"GetCollisionPadding",
        "description":"Returns the size of the collision padding around the hull."
      },{
        "args":[],
        "returns":"float",
        "name":"GetCooldownReduction"
      },{
        "args":[],
        "returns":"int",
        "name":"GetCurrentVisionRange",
        "description":"Gets the current vision range."
      },{
        "args":[],
        "returns":"int",
        "name":"GetDamageMax"
      },{
        "args":[],
        "returns":"int",
        "name":"GetDamageMin"
      },{
        "args":[],
        "returns":"int",
        "name":"GetDayTimeVisionRange",
        "description":"Returns the vision range after modifiers."
      },{
        "args":[],
        "returns":"float",
        "name":"GetHasteFactor"
      },{
        "args":[],
        "returns":"int",
        "name":"GetHealthPercent",
        "description":"Get the current health percent of the unit."
      },{
        "args":[],
        "returns":"float",
        "name":"GetHullRadius",
        "description":"Get the collision hull radius of this NPC."
      },{
        "args":[],
        "returns":"float",
        "name":"GetIdealSpeed",
        "description":"Returns speed after all modifiers."
      },{
        "args":[],
        "returns":"float",
        "name":"GetIdealSpeedNoSlows",
        "description":"Returns speed after all modifiers, but excluding those that reduce speed."
      },{
        "args":[],
        "returns":"float",
        "name":"GetIncreasedAttackSpeed"
      },{
        "args":[],
        "returns":"int",
        "name":"GetLevel",
        "description":"Returns the level of this unit."
      },{
        "args":[],
        "returns":"float",
        "name":"GetMagicalArmorValue",
        "description":"Returns current magical armor value."
      },{
        "args":[],
        "returns":"float",
        "name":"GetMana",
        "description":"Get the mana on this unit."
      },{
        "args":[],
        "returns":"float",
        "name":"GetManaRegen"
      },{
        "args":[],
        "returns":"float",
        "name":"GetMaxMana",
        "description":"Get the maximum mana of this unit."
      },{
        "args":[],
        "returns":"float",
        "name":"GetModelRadius"
      },{
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          },{
            "name":"hCaster",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetModifierStackCount",
        "description":"Gets the stack count of a given modifier."
      },{
        "args":[{
            "name":"flBaseSpeed",
            "type":"float"
          },{
            "name":"bReturnUnslowed",
            "type":"bool"
          }],
        "returns":"float",
        "name":"GetMoveSpeedModifier"
      },{
        "args":[],
        "returns":"int",
        "name":"GetNightTimeVisionRange",
        "description":"Returns the vision range after modifiers."
      },{
        "args":[],
        "returns":"int",
        "name":"GetOpposingTeamNumber"
      },{
        "args":[],
        "returns":"float",
        "name":"GetPaddedCollisionRadius",
        "description":"Get the collision hull radius (including padding) of this NPC."
      },{
        "args":[],
        "returns":"float",
        "name":"GetPhysicalArmorBaseValue",
        "description":"Returns base physical armor value."
      },{
        "args":[{
            "name":"bIgnoreBase",
            "type":"bool"
          }],
        "returns":"float",
        "name":"GetPhysicalArmorValue",
        "description":"Returns current physical armor value."
      },{
        "args":[],
        "returns":"int",
        "name":"GetPlayerOwnerID",
        "description":"Get the owner player ID for this unit."
      },{
        "args":[],
        "returns":"float",
        "name":"GetSecondsPerAttack"
      },{
        "args":[],
        "returns":"int",
        "name":"GetTotalPurchasedUpgradeGoldCost",
        "description":"Get how much gold has been spent on ability upgrades."
      },{
        "args":[],
        "returns":"string",
        "name":"GetUnitLabel"
      },{
        "args":[],
        "returns":"string",
        "name":"GetUnitName",
        "description":"Get the name of this unit."
      },{
        "args":[],
        "returns":"bool",
        "name":"HasAttackCapability"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasFlyMovementCapability"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasFlyingVision"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasGroundMovementCapability"
      },{
        "args":[{
            "name":"pItemName",
            "type":"string"
          }],
        "returns":"bool",
        "name":"HasItemInInventory",
        "description":"See whether this unit has an item by name."
      },{
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          }],
        "returns":"bool",
        "name":"HasModifier",
        "description":"Sees if this unit has a given modifier."
      },{
        "args":[],
        "returns":"bool",
        "name":"HasMovementCapability"
      },{
        "args":[],
        "returns":"bool",
        "name":"HasScepter"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAncient",
        "description":"Is this unit an Ancient?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAttackImmune"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsBarracks",
        "description":"Is this unit a Barracks?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsBlind"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsBoss",
        "description":"Is this unit a boss?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsBuilding",
        "description":"Is this unit a building?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCommandRestricted"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsConsideredHero",
        "description":"Is this unit a considered a hero for targeting purposes?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsControllableByAnyPlayer",
        "description":"Is this unit controlled by any non-bot player?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCourier",
        "description":"Is this unit a courier?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCreature",
        "description":"Is this a Creature type NPC?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCreep",
        "description":"Is this unit a creep?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCreepHero",
        "description":"Is this a creep hero?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDisarmed"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDominated"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsEvadeDisabled"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsFort",
        "description":"Is this unit an Ancient?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsFrozen"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHero",
        "description":"Is this a hero or hero illusion?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHexed"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsIllusion"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsInventoryEnabled",
        "description":"Does this unit have an inventory."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsInvisible"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsInvulnerable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsLowAttackPriority"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsMagicImmune"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsMoving",
        "description":"Is this unit moving?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsMuted"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsNeutralUnitType",
        "description":"Is this a neutral?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsNightmared"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsOther",
        "description":"Is this unit a ward-type unit?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsOutOfGame"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsOwnedByAnyPlayer",
        "description":"Is this unit owned by any non-bot player?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPhantom",
        "description":"Is this a phantom unit?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRangedAttacker",
        "description":"Is this unit a ranged attacker?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRealHero",
        "description":"Is this a real hero?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRooted"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSilenced"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSpeciallyDeniable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSpeciallyUndeniable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStunned"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSummoned",
        "description":"Is this unit summoned?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsTower",
        "description":"Is this a tower?"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsUnselectable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsUntargetable"
      },{
        "args":[],
        "returns":"bool",
        "name":"NoHealthBar"
      },{
        "args":[],
        "returns":"bool",
        "name":"NoTeamMoveTo"
      },{
        "args":[],
        "returns":"bool",
        "name":"NoTeamSelect"
      },{
        "args":[],
        "returns":"bool",
        "name":"NoUnitCollision"
      },{
        "args":[],
        "returns":"bool",
        "name":"NotOnMinimap"
      },{
        "args":[],
        "returns":"bool",
        "name":"NotOnMinimapForEnemies"
      },{
        "args":[],
        "returns":"bool",
        "name":"PassivesDisabled"
      },{
        "args":[],
        "returns":"bool",
        "name":"ProvidesVision"
      },{
        "args":[],
        "returns":"float",
        "name":"Script_GetAttackRange",
        "description":"Gets this unit's attack range after all modifiers."
      },{
        "args":[],
        "returns":"bool",
        "name":"Script_IsDeniable"
      },{
        "args":[],
        "returns":"bool",
        "name":"UnitCanRespawn",
        "description":"Can the unit respawn?"
      }],
    "kind":"class",
    "name":"C_DOTA_BaseNPC",
    "extend":"C_BaseEntity"
  },{
    "members":[{
        "args":[],
        "returns":"float",
        "name":"GetAgility"
      },{
        "args":[],
        "returns":"float",
        "name":"GetIntellect"
      },{
        "args":[],
        "returns":"float",
        "name":"GetStrength"
      }],
    "kind":"class",
    "name":"C_DOTA_BaseNPC_Hero",
    "extend":"C_DOTA_BaseNPC"
  },{
    "members":[{
        "args":[],
        "returns":"bool",
        "name":"CanOnlyPlayerHeroPickup"
      },{
        "args":[],
        "returns":"int",
        "name":"GetCurrentCharges"
      },{
        "args":[],
        "returns":"int",
        "name":"GetInitialCharges"
      },{
        "args":[],
        "returns":"int",
        "name":"GetItemSlot"
      },{
        "args":[],
        "returns":"int",
        "name":"GetSecondaryCharges"
      },{
        "args":[],
        "returns":"int",
        "name":"GetShareability"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAlertableItem"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsCastOnPickup"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDisassemblable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDroppable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsInBackpack"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsItem"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsKillable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsMuted"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPermanent"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPurchasable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRecipe"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsRecipeGenerated"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsSellable"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStackable"
      },{
        "args":[],
        "returns":"bool",
        "name":"RequiresCharges"
      }],
    "kind":"class",
    "name":"C_DOTA_Item",
    "extend":"C_DOTABaseAbility"
  },{
    "members":[{
        "args":[],
        "returns":"int",
        "name":"CastFilterResult",
        "description":"Determine whether an issued command with no target is valid."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"int",
        "name":"CastFilterResultLocation",
        "description":"(Vector vLocation) Determine whether an issued command on a location is valid."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"CastFilterResultTarget",
        "description":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
      },{
        "args":[],
        "returns":"float",
        "name":"GetAOERadius",
        "description":"Controls the size of the AOE casting cursor."
      },{
        "args":[],
        "returns":"string",
        "name":"GetAbilityTextureName",
        "description":"Allows code overriding of the item texture shown in the HUD."
      },{
        "args":[],
        "returns":"int",
        "name":"GetBehavior",
        "description":"Return cast behavior type of this ability."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetCastRange",
        "description":"Return cast range of this ability."
      },{
        "args":[],
        "returns":"float",
        "name":"GetChannelTime",
        "description":"Return the channel time of this ability."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetChannelledManaCostPerSecond",
        "description":"Return mana cost at the given level per second while channeling (-1 is current)."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"float",
        "name":"GetCooldown",
        "description":"Return cooldown of this ability."
      },{
        "args":[],
        "returns":"string",
        "name":"GetCustomCastError",
        "description":"Return the error string of a failed command with no target."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "returns":"string",
        "name":"GetCustomCastErrorLocation",
        "description":"(Vector vLocation) Return the error string of a failed command on a location."
      },{
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"string",
        "name":"GetCustomCastErrorTarget",
        "description":"(HSCRIPT hTarget) Return the error string of a failed command on a target."
      },{
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "returns":"int",
        "name":"GetEffectiveCastRange",
        "description":"Return cast range of this ability, taking modifiers into account."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetGoldCost",
        "description":"Return gold cost at the given level (-1 is current)."
      },{
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "returns":"int",
        "name":"GetManaCost",
        "description":"Return mana cost at the given level (-1 is current)."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsMuted",
        "description":"Returns whether this item is muted or not."
      }],
    "kind":"class",
    "name":"C_DOTA_Item_Lua",
    "extend":"C_DOTA_Item"
  },{
    "members":[{
        "args":[],
        "returns":"bool",
        "name":"AllowIllusionDuplicate",
        "description":"True/false if this modifier is active on illusions."
      },{
        "args":[],
        "returns":"bool",
        "name":"CanParentBeAutoAttacked"
      },{
        "args":[],
        "returns":"bool",
        "name":"DestroyOnExpire",
        "description":"True/false if this buff is removed when the duration expires."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAttributes",
        "description":"Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t"
      },{
        "args":[],
        "returns":"float",
        "name":"GetAuraDuration",
        "description":"Returns aura stickiness"
      },{
        "args":[{
            "name":"hEntity",
            "type":"handle"
          }],
        "returns":"bool",
        "name":"GetAuraEntityReject",
        "description":"Return true/false if this entity should receive the aura under specific conditions"
      },{
        "args":[],
        "returns":"int",
        "name":"GetAuraRadius",
        "description":"Return the range around the parent this aura tries to apply its buff."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAuraSearchFlags",
        "description":"Return the unit flags this aura respects when placing buffs."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAuraSearchTeam",
        "description":"Return the teams this aura applies its buff to."
      },{
        "args":[],
        "returns":"int",
        "name":"GetAuraSearchType",
        "description":"Return the unit classifications this aura applies its buff to."
      },{
        "args":[],
        "returns":"int",
        "name":"GetEffectAttachType",
        "description":"Return the attach type of the particle system from GetEffectName."
      },{
        "args":[],
        "returns":"string",
        "name":"GetEffectName",
        "description":"Return the name of the particle system that is created while this modifier is active."
      },{
        "args":[],
        "returns":"string",
        "name":"GetHeroEffectName",
        "description":"Return the name of the hero effect particle system that is created while this modifier is active."
      },{
        "args":[],
        "returns":"string",
        "name":"GetModifierAura",
        "description":"The name of the secondary modifier that will be applied by this modifier (if it is an aura)."
      },{
        "args":[],
        "returns":"int",
        "name":"GetPriority",
        "description":"Return the priority order this modifier will be applied over others."
      },{
        "args":[],
        "returns":"string",
        "name":"GetStatusEffectName",
        "description":"Return the name of the status effect particle system that is created while this modifier is active."
      },{
        "args":[],
        "returns":"string",
        "name":"GetTexture",
        "description":"Return the name of the buff icon to be shown for this modifier."
      },{
        "args":[],
        "returns":"int",
        "name":"HeroEffectPriority",
        "description":"Relationship of this hero effect with those from other buffs (higher is more likely to be shown)."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAura",
        "description":"True/false if this modifier is an aura."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsAuraActiveOnDeath",
        "description":"True/false if this aura provides buffs when the parent is dead."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsDebuff",
        "description":"True/false if this modifier should be displayed as a debuff."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsHidden",
        "description":"True/false if this modifier should be displayed on the buff bar."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPermanent"
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPurgable",
        "description":"True/false if this modifier can be purged."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsPurgeException",
        "description":"True/false if this modifier can be purged by strong dispels."
      },{
        "args":[],
        "returns":"bool",
        "name":"IsStunDebuff",
        "description":"True/false if this modifier is considered a stun for purge reasons."
      },{
        "args":[{
            "name":"table",
            "type":"handle"
          }],
        "returns":"void",
        "name":"OnCreated",
        "description":"Runs when the modifier is created."
      },{
        "args":[],
        "returns":"void",
        "name":"OnDestroy",
        "description":"Runs when the modifier is destroyed (after unit loses modifier)."
      },{
        "args":[],
        "returns":"void",
        "name":"OnIntervalThink",
        "description":"Runs when the think interval occurs."
      },{
        "args":[{
            "name":"table",
            "type":"handle"
          }],
        "returns":"void",
        "name":"OnRefresh",
        "description":"Runs when the modifier is refreshed."
      },{
        "args":[],
        "returns":"void",
        "name":"OnRemoved",
        "description":"Runs when the modifier is destroyed (before unit loses modifier)."
      },{
        "args":[{
            "name":"iStackCount",
            "type":"int"
          }],
        "returns":"void",
        "name":"OnStackCountChanged",
        "description":"Runs when stack count changes (param is old count)."
      },{
        "args":[],
        "returns":"bool",
        "name":"RemoveOnDeath",
        "description":"True/false if this modifier is removed when the parent dies."
      },{
        "args":[{
            "name":"bHasCustomData",
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetHasCustomTransmitterData"
      },{
        "args":[],
        "returns":"bool",
        "name":"ShouldUseOverheadOffset",
        "description":"Apply the overhead offset to the attached effect."
      },{
        "args":[],
        "returns":"int",
        "name":"StatusEffectPriority",
        "description":"Relationship of this status effect with those from other buffs (higher is more likely to be shown)."
      }],
    "kind":"class",
    "name":"C_DOTA_Modifier_Lua",
    "extend":"CDOTA_Buff"
  },{
    "members":[],
    "kind":"class",
    "name":"C_PointEntity",
    "extend":"C_BaseEntity"
  },{
    "members":[{
        "args":[{
            "name":"pMessage",
            "type":"string"
          }],
        "returns":"void",
        "name":"SetMessage",
        "description":"Set the message on this entity."
      }],
    "kind":"class",
    "name":"C_PointWorldText",
    "extend":"C_BaseModelEntity"
  },{
    "instance":"Convars",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetBool",
        "description":"GetBool(name) : returns the convar as a boolean flag."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetCommandClient",
        "description":"GetCommandClient() : returns the player who issued this console command."
      },{
        "args":[],
        "returns":"handle",
        "name":"GetDOTACommandClient",
        "description":"GetDOTACommandClient() : returns the DOTA player who issued this console command."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetFloat",
        "description":"GetFloat(name) : returns the convar as a float. May return null if no such convar."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetInt",
        "description":"GetInt(name) : returns the convar as an int. May return null if no such convar."
      },{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"GetStr",
        "description":"GetStr(name) : returns the convar as a string. May return null if no such convar."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"RegisterCommand",
        "description":"RegisterCommand(name, fn, helpString, flags) : register a console command."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"RegisterConvar",
        "description":"RegisterConvar(name, defaultValue, helpString, flags): register a new console variable."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"bool"
          }],
        "returns":"void",
        "name":"SetBool",
        "description":"SetBool(name, val) : sets the value of the convar to the bool."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"float"
          }],
        "returns":"void",
        "name":"SetFloat",
        "description":"SetFloat(name, val) : sets the value of the convar to the float."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"void",
        "name":"SetInt",
        "description":"SetInt(name, val) : sets the value of the convar to the int."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"void",
        "name":"SetStr",
        "description":"SetStr(name, val) : sets the value of the convar to the string."
      }],
    "name":"Convars",
    "kind":"class"
  },{
    "instance":"GlobalSys",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "returns":"table",
        "name":"CommandLineCheck",
        "description":"CommandLineCheck(name) : returns true if the command line param was used, otherwise false."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"float"
          }],
        "returns":"table",
        "name":"CommandLineFloat",
        "description":"CommandLineFloat(name) : returns the command line param as a float."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "returns":"table",
        "name":"CommandLineInt",
        "description":"CommandLineInt(name) : returns the command line param as an int."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "returns":"table",
        "name":"CommandLineStr",
        "description":"CommandLineStr(name) : returns the command line param as a string."
      }],
    "name":"GlobalSys",
    "kind":"class"
  }]