$> dump_panorama_css_properties
=== align ===
&lt;Needs a description&gt;


=== animation ===
&lt;Needs a description&gt;


=== animation-delay ===
&lt;Needs a description&gt;


=== animation-direction ===
&lt;Needs a description&gt;


=== animation-duration ===
&lt;Needs a description&gt;


=== animation-fill-mode ===
&lt;Needs a description&gt;


=== animation-iteration-count ===
&lt;Needs a description&gt;


=== animation-name ===
&lt;Needs a description&gt;


=== animation-timing-function ===
&lt;Needs a description&gt;


=== background-blur ===
Sets the amount of blur to apply to the contents behind this panel during composition.  Default is no blur, for now Gaussian is the only blur type and takes a horizontal standard deviation, vertical standard deviation, and number of passes.  Good std deviation values are around 0-10, if 10 is still not intense enough consider more passes, but more than one pass is bad for perf.  As shorthand you can specify with just one value, which will be used for the standard deviation in both directions and 1 pass will be set.<br><br><b>Examples:</b><pre>background-blur: gaussian( 2.5 );
background-blur: gaussian( 6, 6, 1 );</pre>


=== background-color ===
Sets the background fill color/gradient/combination for a panel.<br><br><b>Examples:</b><pre>background-color: #FFFFFFFF;
background-color: gradient( linear, 0% 0%, 0% 100%, from( #fbfbfbff ), to( #c0c0c0c0 ) );
background-color: gradient( linear, 0% 0%, 0% 100%, from( #fbfbfbff ), color-stop( 0.3, #ebebebff ), to( #c0c0c0c0 ) );
background-color: gradient( radial, 50% 50%, 0% 0%, 80% 80%, from( #00ff00ff ), to( #0000ffff ) );
background-color: #0d1c22ff, gradient( radial, 100% -0%, 100px -40px, 320% 270%, from( #3a464bff ), color-stop( 0.23, #0d1c22ff ), to( #0d1c22ff ) );</pre>


=== background-color-opacity ===
Sets the background color opacity for a panel (does nothing on its own, but when merged with a full background-color it overrides the opacity).<br><br><b>Examples:</b><pre>background-color-opacity: 0.5;
</pre>


=== background-image ===
Comma separated list of images or movies to draw in the background. Can specify "none" to not draw a background layer. Combined with background-position, background-size, background-texture-size and background-repeat values.<br><br><b>Example:</b><pre>background-image: url("file://{images}/default.tga"), url( "file://{movies}/Background1080p.webm" );</pre>


=== background-img-opacity ===
Sets the Opacity of background-image<br><br><b>Examples:</b><pre>background-img-opacity: 0.5;</pre>


=== background-position ===
Controls the horizontal and vertical placement of the background image, with the format: &lt;left|center|right&gt; &lt;horizontal length&gt; &lt;top|center|bottom&gt; &lt;vertical length&gt;<br><br>If length is a percent, the specified location within the image is positioned over that same specified position in the background. If the length is pixels, the top left corner is placed relative to the provided alignment keywords (left, bottom, etc.). See examples for more details.<br><br>If 1 value is specified, the other value is assumed to be center. If 2 values are specified, the first value must be for horizontal placement and the second for vertical.<br><br><b>Examples:</b><pre>// aligns the top left corner of the image with the top left corner of the panel (default)
background-position: 0% 0%;

// centers the image within the background (same as "center center")
background-position: center;

// aligns the bottom right corner of the image with the bottom right corner of the panel (same as "100% 100%")
background-position: right bottom;

// the top left corner of the image is placed 10px to the right of, 40px below the top left corner of the panel
background-position: left 10px top 40px;</pre>


=== background-repeat ===
Controls if the background should be repeated in the horizontal and vertical directions.<br><br>Possible values per direction:<br>"repeat" - (default) Repeated in the specified direction until it fills the panel<br>"space" - Repeated as many times as required to fill the panel w/o being clipped. Space is added between images to to align first and last image with panel edges.<br>"round" - Repeated as many times as required to fill the panel w/o being clipped. The image is resized to align first and last image with panel edges.<br>"no-repeat" - Not repeated<br><br>Possible single values:<br>"repeat-x" - equals "repeat no-repeat"<br>"repeat-y" - equals "no-repeat repeat"<br><br><b>Examples:</b><pre>background-repeat: repeat; // equals "repeat repeat" (default)
background-repeat: repeat space; // repeats horizontally, spaces vertically
background-repeat: no-repeat round; // 1 column of images, scaled to fit evenly</pre>


=== background-size ===
Sets the horizontal and vertical dimensions used to draw the background image. Can be set in pixels, percent, "contains" to size down to panel dimensions or "auto" preserves the image aspect ratio. By default, set to "auto" which preveres the image's original size.<br><br>Multiple background layers can be specified in a comma separated list, which are then combined with background-image, background-position, background-texture-size and background-repeat values.<br><br><b>Examples:</b><pre>background-size: auto; // same as "auto auto" (default)
background-size: 100% 100%; // image fills the panel
background-size: 50% 75%; // image fills 50% of the panel's width, and 75% of the panel's height
background-size: 300px 200px; // image is drawn 300px wide, 200px tall</pre>


=== background-texture-size ===
Sets the size used for generating textures from vector graphics (.svg files), default is -1 which takes the size from the svg file.<br><br><b>Example:</b><pre>background-texture-size: 100px 50px; // width 100px, height 50px</pre>


=== blur ===
Sets the amount of blur to apply to the panel and all it's children during composition.  Default is no blur, for now Gaussian is the only blur type and takes a horizontal standard deviation, vertical standard deviation, and number of passes.  Good std deviation values are around 0-10, if 10 is still not intense enough consider more passes, but more than one pass is bad for perf.  As shorthand you can specify with just one value, which will be used for the standard deviation in both directions and 1 pass will be set.<br><br><b>Examples:</b><pre>blur: gaussian( 2.5 );
blur: gaussian( 6, 6, 1 );
</pre>


=== border ===
Shorthand for setting panel border. Specify width, style, and color.  Supported styles are: solid, none.<br><br><b>Examples:</b><pre>border: 2px solid #111111FF;</pre>


=== border-bottom ===
Shorthand for setting the bottom panel border. Specify width, style, and color.  Supported styles are: solid, none.<br><br><b>Examples:</b><pre>border-bottom: 2px solid #111111FF;</pre>


=== border-bottom-color ===
Specifies border color for the bottom edge of the panel. <br><br><b>Examples:</b><pre>border-bottom-color: #111111FF;</pre>


=== border-bottom-left-radius ===
Specifies border-radius for bottom-left corner which rounds off border and clips background/foreground content to rounded edge.  Takes 1 or 2 values in px or %, first value is horizontal radii for elliptical corner, second is vertical radii, if only one is specified then horizontal/vertical will both be set and corner will be circular.<br><br><b>Examples:</b><pre>border-bottom-left-radius: 2px 2px;
border-bottom-left-radius: 5%;</pre>


=== border-bottom-right-radius ===
Specifies border-radius for bottom-right corner which rounds off border and clips background/foreground content to rounded edge.  Takes 1 or 2 values in px or %, first value is horizontal radii for elliptical corner, second is vertical radii, if only one is specified then horizontal/vertical will both be set and corner will be circular.<br><br><b>Examples:</b><pre>border-bottom-right-radius: 2px 2px;
border-bottom-right-radius: 5%;</pre>


=== border-bottom-style ===
Specifies border style for the bottom edge of the panel. <br><br><b>Examples:</b><pre>border-bottom-style: solid;</pre>


=== border-bottom-width ===
Specifies border width for the bottom edge of the panel. <br><br><b>Examples:</b><pre>border-bottom-width: 2px;</pre>


=== border-brush ===
EXPERIMENTAL: Sets a more-complex brush for the entire border paint area (ignores normal border color).<br><br><b>Examples:</b><pre>border-brush: gradient( linear, 0% 0%, 0% 100%, from( #fbfbfbff ), to( #c0c0c0c0 ) );
border-brush: gradient( linear, 0% 0%, 0% 100%, from( #fbfbfbff ), color-stop( 0.3, #ebebebff ), to( #c0c0c0c0 ) );
border-brush: gradient( radial, 50% 50%, 0% 0%, 80% 80%, from( #00ff00ff ), to( #0000ffff ) );</pre>


=== border-color ===
Specifies border color for panel.  If a single color value is set it applies to all sides, if 2 are set the first is top/bottom and the second is left/right, if all four are set then they are top, right, bottom, left in order.<br><br><b>Examples:</b><pre>border-color: #111111FF;
border-color: #FF0000FF #00FF00FF #0000FFFF #00FFFFFF;</pre>


=== border-left ===
Shorthand for setting the left panel border. Specify width, style, and color.  Supported styles are: solid, none.<br><br><b>Examples:</b><pre>border-left: 2px solid #111111FF;</pre>


=== border-left-color ===
Specifies border color for the left edge of the panel. <br><br><b>Examples:</b><pre>border-left-color: #111111FF;</pre>


=== border-left-style ===
Specifies border style for the left edge of the panel. <br><br><b>Examples:</b><pre>border-left-style: solid;</pre>


=== border-left-width ===
Specifies border width for the left edge of the panel. <br><br><b>Examples:</b><pre>border-left-width: 2px;</pre>


=== border-radius ===
Shorthand to set border radius for all corners at once.  Border radius rounds off corners of the panel, adjusting the border to smoothly round and also clipping background image/color and contents to the specified elliptical or circular values.  In this shorthand version you may specify a single value for all raddi, or horizontal / vertical separated by the '/' character.  For both horizontal and vertical you may specify 1 to 4 values in pixels or %, they will be taken in order as top-left, top-right, bottom-right, bottom-left radii values.<br><br><b>Examples:</b><pre>// 2 px circular corners on all sides
border-radius: 2px;
// Perfect circular or elliptical panel (circular if box was square)
border-radius: 50% / 50%;
// 2 px horizontal radii 4px vertical elliptical corners on all sides
border-radius: 2px / 4px;
// All corners fully specified
border-radius: 2px 3px 4px 2px / 2px 3px 3px 2px;</pre>


=== border-right ===
Shorthand for setting the right panel border. Specify width, style, and color.  Supported styles are: solid, none.<br><br><b>Examples:</b><pre>border-right: 2px solid #111111FF;</pre>


=== border-right-color ===
Specifies border color for the right edge of the panel. <br><br><b>Examples:</b><pre>border-right-color: #111111FF;</pre>


=== border-right-style ===
Specifies border style for the right edge of the panel. <br><br><b>Examples:</b><pre>border-right-style: solid;</pre>


=== border-right-width ===
Specifies border width for the right edge of the panel. <br><br><b>Examples:</b><pre>border-right-width: 2px;</pre>


=== border-style ===
Specifies border style for panel.  If a single style value is set it applies to all sides, if 2 are set the first is top/bottom and the second is left/right, if all four are set then they are top, right, bottom, left in order.<br><br><b>Examples:</b><pre>border-style: solid;
border-style: solid none solid none;</pre>


=== border-top ===
Shorthand for setting the top panel border. Specify width, style, and color.  Supported styles are: solid, none.<br><br><b>Examples:</b><pre>border-top: 2px solid #111111FF;</pre>


=== border-top-color ===
Specifies border color for the top edge of the panel. <br><br><b>Examples:</b><pre>border-top-color: #111111FF;</pre>


=== border-top-left-radius ===
Specifies border-radius for top-left corner which rounds off border and clips background/foreground content to rounded edge.  Takes 1 or 2 values in px or %, first value is horizontal radii for elliptical corner, second is vertical radii, if only one is specified then horizontal/vertical will both be set and corner will be circular.<br><br><b>Examples:</b><pre>border-top-left-radius: 2px 2px;
border-top-left-radius: 5%;</pre>


=== border-top-right-radius ===
Specifies border-radius for top-right corner which rounds off border and clips background/foreground content to rounded edge.  Takes 1 or 2 values in px or %, first value is horizontal radii for elliptical corner, second is vertical radii, if only one is specified then horizontal/vertical will both be set and corner will be circular.<br><br><b>Examples:</b><pre>border-top-right-radius: 2px 2px;
border-top-right-radius: 5%;</pre>


=== border-top-style ===
Specifies border style for the top edge of the panel. <br><br><b>Examples:</b><pre>border-top-style: solid;</pre>


=== border-top-width ===
Specifies border width for the top edge of the panel. <br><br><b>Examples:</b><pre>border-top-width: 2px;</pre>


=== border-width ===
Specifies border width for panel.  If a single width value is set it applies to all sides, if 2 are set the first is top/bottom and the second is left/right, if all four are set then they are top, right, bottom, left in order.<br><br><b>Examples:</b><pre>border-width: 1px;'
border-width: 20px 1px 20px 1px;</pre>


=== box-shadow ===
Specifies shadows for boxes, or inset shadows/glows.  The shadow shape will match the border box for the panel,so use border-radius to affect rounding.  Syntax takes optional shape 'inset', 'fill', or 'hollow', then color, horizontal offset pixels, vertical offset pixels, blur radius pixels, and spread distance in pixels. Inset means the shadow is an inner shadow/glow, fill is a a shadow behind the entire box, hollow means clipping it to outside the border area only (before offset). A negative blur radius will give a hard-edged look to the shadow, effectively a rounded outline of the same size as the blur.<br><br><b>Examples:</b><pre>box-shadow: #ffffff80 4px 4px 8px 0px; // outer, filled
box-shadow: hollow #ffffff80 4px 4px 8px 0px; // outer, hollow
box-shadow: inset #333333b0 0px 0px 8px 12px; // inner</pre>


=== brightness ===
Sets the brightness that applies to the panel and all it's children during composition. The value is a multiplier on the HSB brightness value.<br><br><b>Example:</b><pre>brightness: 1.5;</pre>


=== clip ===
Specifies a clip region within the panel, where contents will be clipped at render time. This clipping has no impact on layout, and is fast and supported for transitions/animations. Radial clip mode takes a center point, start angle and angular width of the revealed sector.<br><br><b>Example:</b><pre>clip: rect( 10%, 90%, 90%, 10% );
clip: radial( 50% %50, 0deg, 90deg );</pre>


=== color ===
Sets the foreground fill color/gradient/combination for a panel.  This color is the color used to render text within the panel.<br><br><b>Examples:</b><pre>color: #FFFFFFFF;
color: gradient( linear, 0% 0%, 0% 100%, from( #cbcbcbff ), to( #a0a0a0a0 ) );</pre>


=== context-menu-arrow-position ===
Specifies where to point the arrow of a context menu at on this panel. The first value controls how the arrow is positioned horizontally when the context menu is to the top or bottom of the panel, and the second value controls how the arrow is positioned vertically when the context menu is to the left or right of the panel. Default is '50% 50%'.<br><br><b>Example:</b><pre>context-menu-arrow-position: 25% 50%;</pre>


=== context-menu-body-position ===
Specifies where to position the body of a context menu relative to this panel. The first value controls how the body is aligned horizontally when the context menu is to the top or bottom of the panel, and the second value controls how the body is aligned vertically when the context menu is to the left or right of the panel. 0% means left/top aligned, 50% means center/middle aligned, and 100% means right/bottom aligned. Default is '50% 50%'.<br><br><b>Example:</b><pre>context-menu-body-position: 50% 100%;</pre>


=== context-menu-position ===
Specifies where to position a context menu relative to this panel. Valid options include 'left', 'top', 'right', and 'bottom'. List up to 4 positions to determine the order that positions are tried if the context menu doesn't fully fit on screen. Default is 'right left bottom top'. If less than 4 positions are specified, the context menu first tries the opposite of the specified position along the same axis before switching to the other axis.<br><br><b>Examples:</b><pre>context-menu-position: bottom;
context-menu-position: left bottom;</pre>


=== contrast ===
Sets the contrast that applies to the panel and all it's children during composition.<br><br><b>Example:</b><pre>contrast: 1.5;</pre>


=== flow-children ===
&lt;Needs a description&gt;


=== font ===
&lt;Needs a description&gt;


=== font-family ===
Specifies the font face to use.<br><br><b>Examples:</b><pre>font-family: Arial;
font-family: "Comic Sans MS";</pre>


=== font-size ===
Specifies the target font face height in pixels.<br><br><b>Example:</b><pre>font-size: 12;</pre>


=== font-stretch ===
Specifies the font stretch to use. Supported values are normal, condensed, and expanded.<br><br><b>Examples:</b><pre>font-stretch: normal;
font-stretch: condensed;
font-stretch: expanded;</pre>


=== font-style ===
Specifies the font style to use. Supported values are normal, and italic<br><br><b>Example:</b><pre>font-style: normal;</pre>


=== font-weight ===
Specifies the font weight to use. Supported values are light, thin, normal, medium, bold, and black.<br><br><b>Examples:</b><pre>font-weight: normal;
font-weight: bold;
font-weight: thin;</pre>


=== height ===
Sets the height for this panel. Possible values:<br>"fit-children" - Panel size is set to the required size of all children (default)<br>&lt;pixels&gt; - Any fixed pixel value (ex: "100px")<br>&lt;percentage&gt; - Percentage of parent height (ex: "100%")<br>"fill-parent-flow( &lt;weight&gt; )" - Fills to remaining parent width. If multiple children are set to this value, weight is used to determine final height. For example, if three children are set to fill-parent-flow of 1.0 and the parent is 300px tall, each child will be 100px tall. (ex: "fill-parent-flow( 1.0 )" )<br>"width-percentage( &lt;percentage&gt; )" - Percentage of the panel's width, which allows you to enforce a particular aspect ratio.  The width cannot also be height-percentage.


=== horizontal-align ===
&lt;Needs a description&gt;


=== hue-rotation ===
Sets the hue rotation to apply to the panel and all it's children during composition. Default of 0.0 means no adjustment, domain is in degrees.<br><br><b>Example:</b><pre>hue-rotation: 180deg;</pre>


=== ignore-parent-flow ===
&lt;Needs a description&gt;


=== img-shadow ===
Specifies image shadows.  The shadow shape will match the image the panel can generate,and this is only meaningful for images.  Syntax takes horizontal offset pixels, vertical offset pixels, blur radius pixels, strength, and then shadow color.<br><br><b>Example:</b><pre>img-shadow: 2px 2px 8px 3.0 #333333b0;</pre>


=== layout-position ===
Sets how the panel is positioned relative to its parent. "static" means position in the default way. "fixed" means position in the default way, but ignoring the parent's scroll offset.<br><br><b>Example:</b><pre>layout-position: fixed;</pre>


=== letter-spacing ===
Sets letter-spacing for text in a string. Possible values:<br>normal - no manual spacing<br>&lt;pixels&gt; - Any fixed pixel value (ex: "1px")


=== line-height ===
Specifies the line height (distance between top edge of line above and line below) to use for text. By default this is 'normal' and a value that matches the font-size reasonably will be used automatically. Unlike the web, we don't have a weird CSS inheritence problem with the 120% vs 1.2 styles.<br><br><b>Example:</b><pre>line-height: normal;
line-height: 20px;
line-height: 1.2;
line-height: 120%;</pre>


=== margin ===
&lt;Needs a description&gt;


=== margin-bottom ===
&lt;Needs a description&gt;


=== margin-left ===
&lt;Needs a description&gt;


=== margin-right ===
&lt;Needs a description&gt;


=== margin-top ===
&lt;Needs a description&gt;


=== max-height ===
&lt;Needs a description&gt;


=== max-width ===
&lt;Needs a description&gt;


=== min-height ===
&lt;Needs a description&gt;


=== min-width ===
&lt;Needs a description&gt;


=== opacity ===
Sets the opacity or amount of transparency applied to the panel and all it's children during composition. Default of 1.0 means fully opaque, 0.0 means fully transparent.<br><br><b>Example:</b><pre>opacity: 0.8;</pre>


=== opacity-brush ===
Sets an opacity brush to apply to the panel and all it's children during composition.<br><br><b>Example:</b><pre>opacity-brush: gradient( linear, 0% 0%, 0% 100%, from( #ffffffff ), to( #ffffff00 ) );</pre>


=== opacity-mask ===
Applies an image as an opacity mask that stretches to the panel bounds and fades out it's content based on the alpha channel. The second float value is an optional opacity value for the mask itself, the image won't interpolate/cross-fade, but you can animate the opacity to fade the mask in/out. The -scroll-up, -scroll-down, and -scroll-up-down varients override the mask and apply only when the various vertical scroll scenarios affect the panel based on the overflow property.<br><br><b>Examples:</b><pre>opacity-mask: url( "file://{images}/upper_row_mask.tga" );
opacity-mask: url( "file://{images}/upper_row_mask.tga" ) 0.5;
opacity-mask-scroll-up: url( "file://{images}/upper_row_mask_up.tga" ) 0.5;
opacity-mask-scroll-down: url( "file://{images}/upper_row_mask_down.tga" ) 0.5;
opacity-mask-scroll-up-down: url( "file://{images}/upper_row_mask_up_down.tga" ) 0.5;</pre>


=== opacity-mask-scroll-down ===



=== opacity-mask-scroll-up ===



=== opacity-mask-scroll-up-down ===



=== overflow ===
Specifies what to do with contents that overflow the available space for the panel. Possible values:<br>"squish" - Children are squished to fit within the panel's bounds if needed (default)<br>"clip" - Children maintain their desired size but their contents are clipped<br>"scroll" - Children maintain their desired size and a scrollbar is added to this panel<br><br>"noclip" - Children maintain their desired size and content is allowed to overflow this panel<br><br><b>Examples:</b><pre>overflow: squish squish; // squishes contents in horizontal and vertical directions
overflow: squish scroll; // scrolls contents in the Y direction</pre>


=== padding ===
&lt;Needs a description&gt;


=== padding-bottom ===
&lt;Needs a description&gt;


=== padding-left ===
&lt;Needs a description&gt;


=== padding-right ===
&lt;Needs a description&gt;


=== padding-top ===
&lt;Needs a description&gt;


=== perspective ===
Sets the perspective depth space available for children of the panel.  Default of 1000 would mean that children at 1000px zpos are right at the viewers eye, -1000px are just out of view distance faded to nothing.<br><br><b>Example:</b><pre>perspective: 1000;</pre>


=== perspective-origin ===
Sets the perspective origin which will be used when transforming children of this panel.  This can be thought of as the camera x/y position relative to the panel.<br><br><b>Example:</b><pre>perspective-origin: 50% 50%;</pre>


=== position ===
Sets the x, y, z position for a panel. Must not be in a flowing layout.<br><br><b>Example:</b><pre>position: 3% 20px 0px;</pre>


=== pre-transform-rotate2d ===
Sets 2 dimensional rotation degrees that apply to the quad for this panel prior to 3 dimensional transforms. This rotation applies without perspective and leaves the panel centered at the same spot as it started.<br><br><b>Example:</b><pre>pre-transform-rotate2d: 45deg;</pre>


=== pre-transform-scale2d ===
Sets 2 dimensional X/Y scale factors that apply to the quad for this panel prior to 3 dimensional transforms. This scaling applies without perspective and leaves the panel centered at the same spot as it started. Default of 1.0 means no scaling, 0.5 would be half size.<br><br><b>Examples:</b><pre>pre-transform-scale2d: 0.8
pre-transform-scale2d: 0.4, 0.6</pre>


=== saturation ===
Sets the amount of saturation to apply to the panel and all it's children during composition.  Default of 1.0 means no adjustment, 0.0 means fully desaturated to gray scale, greater than 1.0 means over-saturation.<br><br><b>Example:</b><pre>saturation: 0.4;</pre>


=== sound ===
Specifies a sound name to play when this selector is applied.<br><br><b>Example:</b><pre>sound: "whoosh_in";</pre>


=== sound-out ===
Specifies a sound name to play when this selector is removed.<br><br><b>Example:</b><pre>sound-out: "whoosh_out";</pre>


=== text-align ===
Specifies the text alignment for text within this panel, defaults to left.<br><br><b>Examples:</b><pre>text-align: left;
text-align: right;
text-align: center;
text-align: justify;
text-align: justify-letter-spacing;</pre>


=== text-decoration ===
Specifies the decoration for text within this panel, defaults to none. Possible values: none, underline, line-through.<br><br><b>Example:</b><pre>text-decoration: underline;</pre>


=== text-decoration-style ===
Specifies the decoration style for text within this panel, defaults to none. Possible values: none, dashed, dotted, wavy.<br><br><b>Example:</b><pre>text-decoration-style: dotted;</pre>


=== text-overflow ===
Controls truncation of text that doesn't fit in a panel.  "clip" means to simply truncate (on char boundaries), "ellipsis" means to end with '...', and "shrink" means lower the font size to fit.  "noclip" allows the text to overflow based on the "overflow" style.<br>"shrink min( 10px )" won't shrink beyond a minimum font size, clipping the overflow. "shrink min( 10px ) ellipsis" is similar but will ellipsis the overflow.<br><br>We default to ellipsis, which is contrary to the normal CSS spec.<br><br><b>Examples:</b><pre>text-overflow: ellipsis;
text-overflow: clip;
text-overflow: shrink;
text-overflow: shrink min( 10px );
text-overflow: shrink min( 10px ) ellipsis;
text-overflow: noclip;</pre>


=== text-shadow ===
Specifies text shadows.  The shadow shape will match the text the panel can generate,and this is only meaningful for labels.  Syntax takes horizontal offset pixels, vertical offset pixels, blur radius pixels, strength, and then shadow color.<br><br><b>Example:</b><pre>text-shadow: 2px 2px 8px 3.0 #333333b0;</pre>


=== text-transform ===
Specifies the transform for text within this panel, defaults to none. Possible values: none, uppercase, lowercase.<br><br><b>Example:</b><pre>text-transform: uppercase;</pre>


=== texture-sampling ===
Controls texture sampling mode for the panel. Set to alpha-only to use the textures alpha data across all 3 color channels, or point for point sampling.<br><br><b>Examples:</b><pre>texture-sampling: normal;
texture-sampling: alpha-only;
texture-sampling: point;</pre>


=== tooltip-arrow-position ===
Specifies where to point the arrow of a tooltip at on this panel. The first value controls how the arrow is positioned horizontally when the tooltip is to the top or bottom of the panel, and the second value controls how the arrow is positioned vertically when the tooltip is to the left or right of the panel. Default is '50% 50%'.<br><br><b>Example:</b><pre>tooltip-arrow-position: 25% 50%;</pre>


=== tooltip-body-position ===
Specifies where to position the body of a tooltip relative to this panel. The first value controls how the body is aligned horizontally when the tooltip is to the top or bottom of the panel, and the second value controls how the body is aligned vertically when the tooltip is to the left or right of the panel. 0% means left/top aligned, 50% means center/middle aligned, and 100% means right/bottom aligned. Default is '50% 50%'.<br><br><b>Example:</b><pre>tooltip-body-position: 50% 100%;</pre>


=== tooltip-position ===
Specifies where to position a tooltip relative to this panel. Valid options include 'left', 'top', 'right', and 'bottom'. List up to 4 positions to determine the order that positions are tried if the tooltip doesn't fully fit on screen. Default is 'right left bottom top'. If less than 4 positions are specified, the tooltip first tries the opposite of the specified position along the same axis before switching to the other axis.<br><br><b>Examples:</b><pre>tooltip-position: bottom;
tooltip-position: left bottom;</pre>


=== transform ===
Sets the transforms to apply to the panel in 2d or 3d space.  You can combine various transforms (comma separated) and they will be applied in order to create a 4x4 3d transform matrix.  The possible operations are: translate3d( x, y, z ), translatex( x ), translatey( y ), translatez( z ), scale3d( x, y, z), rotate3d( x, y, z ), rotatex( x ), rotatey( y ), rotatez( z ).<br><br><b>Examples:</b><pre>transform: translate3d( -100px, -100px, 0px );
transform: rotateZ( -32deg ) rotateX( 30deg ) translate3d( 125px, 520px, 230px );</pre>


=== transform-origin ===
Sets the transform origin about which transforms will be applied.  Default is 50% 50% on the panel so a rotation/scale is centered.<br><br><b>Example:</b><pre>transform-origin: 50% 50%</pre>


=== transition ===
Specifies which properties should transition smoothly to new values if a class/pseudo class changes the styles.  Also specifies duration, timing function, and delay.  Valid timing functions are: ease, ease-in, ease-out, ease-in-out, linear.<br><br><b>Example:</b><pre>transition: position 2.0s ease-in-out 0.0s, perspective-origin 1.2s ease-in-out 0.8s;</pre>


=== transition-delay ===
Specifies the delay in seconds to use for transition properties on this panel, if more than one comma delimited value is specified then the values are applied to each property specified in 'transition-property' in order.  If only one value is specified then it applies to all the properties specified in transition-property.<br><br><b>Examples:</b><pre>transition-delay: 0.0s;
transition-delay: 0.0s, 1.2s;</pre>


=== transition-duration ===
Specifies the durating in seconds to use for transition properties on this panel, if more than one comma delimited value is specified then the values are applied to each property specified in 'transition-property' in order.  If only one value is specified then it applies to all the properties specified in transition-property.<br><br><b>Examples:</b><pre>transition-duration: 2.0s;
transition-duration: 2.0s, 1.2s, 1.2s, 4.0s, 2.0s;</pre>


=== transition-high-framerate ===
Specifies the desire for higher framerate during this transition, if we have control.<br><br><b>Examples:</b><pre>transition-high-framerate: true;
transition-high-framerate: false, true, false;</pre>


=== transition-property ===
Specifies which properties should transition smoothly to new values if a class/pseudo class changes the styles.<br><br><b>Examples:</b><pre>transition: position, transform, background-color;</pre>


=== transition-timing-function ===
Specifies the timing function to use for transition properties on this panel, if more than one comma delimited value is specified then the values are applied to each property specified in 'transition-property' in order.  If only one value is specified then it applies to all the properties specified in transition-property. Valid timing functions are: ease, ease-in, ease-out, ease-in-out, linear.<br><br><b>Examples:</b><pre>transition-timing-function: ease-in-out;
transition-timing-function: ease-in-out, linear;
transition-timing-function: cubic-bezier( 0.785, 0.385, 0.555, 1.505 );</pre>


=== ui-scale ===
Specifies a scale to apply to this panel's layout and all descendants. This scale happens at the layout level ratherthan the bitmap level, so things like text will increase their font size rather than just bitmap scaling. <br><br><b>Examples:</b><pre>ui-scale: 150%; // 150% scaling for X, Y, and Z.
ui-scale: 50% 100% 150%; // 50% scaling for X, 100% for Y. 150% for Z.</pre>


=== ui-scale-x ===
Specifies a scale to apply to this panel's layout and all descendants. This scale happens at the layout level ratherthan the bitmap level, so things like text will increase their font size rather than just bitmap scaling. <br><br><b>Examples:</b><pre>ui-scale: 150%; // 150% scaling for X, Y, and Z.
ui-scale: 50% 100% 150%; // 50% scaling for X, 100% for Y. 150% for Z.</pre>


=== ui-scale-y ===
Specifies a scale to apply to this panel's layout and all descendants. This scale happens at the layout level ratherthan the bitmap level, so things like text will increase their font size rather than just bitmap scaling. <br><br><b>Examples:</b><pre>ui-scale: 150%; // 150% scaling for X, Y, and Z.
ui-scale: 50% 100% 150%; // 50% scaling for X, 100% for Y. 150% for Z.</pre>


=== ui-scale-z ===
Specifies a scale to apply to this panel's layout and all descendants. This scale happens at the layout level ratherthan the bitmap level, so things like text will increase their font size rather than just bitmap scaling. <br><br><b>Examples:</b><pre>ui-scale: 150%; // 150% scaling for X, Y, and Z.
ui-scale: 50% 100% 150%; // 50% scaling for X, 100% for Y. 150% for Z.</pre>


=== vertical-align ===
&lt;Needs a description&gt;


=== visibility ===
Controls if the panel is visible and is included in panel layout. Possible values:<br>"visible" - panel is visible and included in layout (default)<br>"collapse" - panel is invisible and not included in layout


=== wash-color ===
Specifies a 'wash' color, which means a color that will be blended over the panel and all it's children at composition time, tinting them.  The alpha value of the color determines the intensity of the tinting.<br><br><b>Example:</b><pre>wash-color: #39b0d325;</pre>


=== white-space ===
Controls white-space wrapping on rendered text.  "normal" means wrap on whitespace, "nowrap" means do no wrapping at all.<br><br><b>Examples:</b><pre>white-space: normal;
white-space: nowrap;</pre>


=== width ===
Sets the width for this panel. Possible values:<br>"fit-children" - Panel size is set to the required size of all children (default)<br>&lt;pixels&gt; - Any fixed pixel value (ex: "100px")<br>&lt;percentage&gt; - Percentage of parent width (ex: "100%")<br>"fill-parent-flow( &lt;weight&gt; )" - Fills to remaining parent width. If multiple children are set to this value, weight is used to determine final width. For example, if three children are set to fill-parent-flow of 1.0 and the parent is 300px wide, each child will be 100px wide. (ex: "fill-parent-flow( 1.0 )" )<br>"height-percentage( &lt;percentage&gt; )" - Percentage of the panel's height, which allows you to enforce a particular aspect ratio.  The height cannot also be width-percentage.


=== world-blur ===
Sets the amount of blur to apply to the world / backbuffer before drawing.<br><br><b>Examples:</b><pre>world-blur: gaussian( 2.5 );
world-blur: gaussian( 6, 6, 1 );
world-blur: mipmapgaussian( 6, 6, 4 );  In this version each gaussian pass is preceded by a quarter area downsample.</pre>


=== x ===
Sets the x, y, z position for a panel. Must not be in a flowing layout.<br><br><b>Example:</b><pre>position: 3% 20px 0px;</pre>


=== y ===
Sets the x, y, z position for a panel. Must not be in a flowing layout.<br><br><b>Example:</b><pre>position: 3% 20px 0px;</pre>


=== z ===
Sets the x, y, z position for a panel. Must not be in a flowing layout.<br><br><b>Example:</b><pre>position: 3% 20px 0px;</pre>


=== z-index ===
Sets the z-index for a panel, panels will be sorted and painted in order within a parent panel.  The sorting first sorts by the z-pos computed from position and transforms, then if panels have matching zpos zindex is used. z-index is different than z-pos in that it doesn't affect rendering perspective, just paint/hit-test ordering. The default z-index value is 0, and any floating point value is accepted.<br><br><b>Example:</b><pre>z-index: 1;</pre>


$> dump_panorama_events
{| class="wikitable"
! Event
! Panel Event
! Description
|-
| <code>AddStyle(panoramasymbol class)</code>
| Yes
| Add a CSS class to a panel.
|-
| <code>AddStyleAfterDelay(panoramasymbol class, float pre-delay)</code>
| Yes
| Add a CSS class to a panel after a specified delay.
|-
| <code>AddStyleToEachChild(panoramasymbol class)</code>
| Yes
| Add a CSS class to all children of this panel.
|-
| <code>AddTimedStyle(panoramasymbol class, float duration, float pre-delay)</code>
| Yes
| Add a class for a specified duration, with optional pre-delay; clears existing timers when called with same class.
|-
| <code>AsyncEvent(float delay, event eventToFire)</code>
| No
| Fire another event after a delay (in seconds).
|-
| <code>DOTADisplayDashboardTip(string string, string optional string)</code>
| No
| Tip to display, panel to attach to (default 'DefaultTipAttachment')
|-
| <code>DOTAHideAbilityTooltip()</code>
| Yes
| Hide the ability tooltip
|-
| <code>DOTAHideBuffTooltip()</code>
| Yes
| Hide the buff tooltip
|-
| <code>DOTAHideDroppedItemTooltip()</code>
| Yes
| Hide the dropped item tooltip
|-
| <code>DOTAHideEconItemTooltip()</code>
| Yes
| Hide the econ item tooltip.
|-
| <code>DOTAHideProfileCardBattleCupTooltip()</code>
| Yes
| Hide the profile card / battle cup tooltip.
|-
| <code>DOTAHideProfileCardTooltip()</code>
| Yes
| Hide the profile card tooltip.
|-
| <code>DOTAHideRankTierTooltip()</code>
| Yes
| Hide the rank tier tooltip.
|-
| <code>DOTAHideRuneTooltip()</code>
| Yes
| Hide the rune tooltip
|-
| <code>DOTAHideTextTooltip()</code>
| Yes
| Hide the text tooltip
|-
| <code>DOTAHideTI10EventGameTooltip()</code>
| Yes
| Hide the ti10 event game tooltip
|-
| <code>DOTAHideTitleImageTextTooltip()</code>
| Yes
| Hide the title image text tooltip.
|-
| <code>DOTAHideTitleTextTooltip()</code>
| Yes
| Hide the title text tooltip.
|-
| <code>DOTALiveStreamUpcoming(uint32 time)</code>
| Yes
| Notify change in RTime32 we expect the stream to start
|-
| <code>DOTALiveStreamVideoLive(bool isLive)</code>
| Yes
| Notify change in stream state (we detected the stream going live)
|-
| <code>DOTALiveStreamVideoPlaying(bool isShowingVideo)</code>
| Yes
| Notify change in video state (is it pointing at a live stream page or not)
|-
| <code>DOTAShowAbilityInventoryItemTooltip(int32 entityIndex, int32 inventorySlot)</code>
| Yes
| Show tooltip for an item in the entityIndex NPC's inventory.
|-
| <code>DOTAShowAbilityShopItemTooltip(string abilityName, string guideName, int32 entityIndex)</code>
| Yes
| Show tooltip for an item in the entityIndex NPC's shop.
|-
| <code>DOTAShowAbilityTooltip(string abilityName)</code>
| Yes
| Show an ability tooltip.
|-
| <code>DOTAShowAbilityTooltipForEntityIndex(string abilityName, int32 entityIndex)</code>
| Yes
| Show an ability tooltip. Level information comes from the entity specified by the entityIndex.
|-
| <code>DOTAShowAbilityTooltipForGuide(string abilityName, string guideName)</code>
| Yes
| Show an ability tooltip annotated with a particular guide's info.
|-
| <code>DOTAShowAbilityTooltipForHero(string abilityName, int32 heroid, bool)</code>
| Yes
| Show an ability tooltip for the specified hero.
|-
| <code>DOTAShowAbilityTooltipForLevel(string abilityName, int32)</code>
| Yes
| Show an ability tooltip for a specific level.
|-
| <code>DOTAShowBuffTooltip(int32 entityIndex, int32 buffSerial, bool bOnEnemy)</code>
| Yes
| Show a buff tooltip for the specified entityIndex + buff serial.
|-
| <code>DOTAShowEconItemTooltip(class item_definition_index_t itemDef, class style_index_t styleIndex, int32 heroID)</code>
| Yes
| Show the econ item tooltip for a given item, style, and hero. Use 0 for the default style, and -1 for the default hero.
|-
| <code>DOTAShowProfileCardBattleCupTooltip(uint64 steamID)</code>
| Yes
| Show the battle cup portion of the user's profile card, if it exists
|-
| <code>DOTAShowProfileCardTooltip(uint64 steamID, bool useProName)</code>
| Yes
| Show a user's profile card. Use pro name determines whether to use their professional team name if applicable.
|-
| <code>DOTAShowRankTierTooltip(uint64 steamID)</code>
| Yes
| Show the rank tier tooltip for a user
|-
| <code>DOTAShowRuneTooltip(int32 X, int32 Y, int32 RuneType)</code>
| Yes
| Show a rune tooltip in the X Y location for the rune type
|-
| <code>DOTAShowTextTooltip(string text)</code>
| Yes
| Show a tooltip with the given text.
|-
| <code>DOTAShowTextTooltipStyled(string text, panoramasymbol style)</code>
| Yes
| Show a tooltip with the given text. Also apply a CSS class named "style" to allow custom styling.
|-
| <code>DOTAShowTI10EventGameTooltip(struct TI10EventGameTooltipInfo_t const * __ptr64 X)</code>
| Yes
| Show a ti10 event game tooltip
|-
| <code>DOTAShowTitleImageTextTooltip(string title, string imagePath, string text)</code>
| Yes
| Show a tooltip with the given title, image, and text.
|-
| <code>DOTAShowTitleImageTextTooltipStyled(string title, string imagePath, string text, panoramasymbol style)</code>
| Yes
| Show a tooltip with the given title, image, and text. Also apply a CSS class named "style" to allow custom styling.
|-
| <code>DOTAShowTitleTextTooltip(string title, string text)</code>
| Yes
| Show a tooltip with the given title and text.
|-
| <code>DOTAShowTitleTextTooltipStyled(string title, string text, panoramasymbol style)</code>
| Yes
| Show a tooltip with the given title and text. Also apply a CSS class named "style" to allow custom styling.
|-
| <code>DropInputFocus()</code>
| Yes
| Drop focus entirely from the window containing this panel.
|-
| <code>IfHasClassEvent(panoramasymbol class, event eventToFire)</code>
| Yes
| Fire another event if this panel has a given class.
|-
| <code>IfHoverOtherEvent(string otherPanelID, event eventToFire)</code>
| Yes
| Fire another event if currently hovering over a panel with the given ID.
|-
| <code>IfNotHasClassEvent(panoramasymbol class, event eventToFire)</code>
| Yes
| Fire another event if this panel does not have a given class.
|-
| <code>IfNotHoverOtherEvent(string otherPanelID, event eventToFire)</code>
| Yes
| Fire another event if not currently hovering over a panel with the given ID.
|-
| <code>MovePanelDown(int32 repeatCount)</code>
| Yes
| Move down from the panel. By default, this will change the focus position, but other panel types may implement this differently.
|-
| <code>MovePanelLeft(int32 repeatCount)</code>
| Yes
| Move left from the panel. By default, this will change the focus position, but other panel types may implement this differently.
|-
| <code>MovePanelRight(int32 repeatCount)</code>
| Yes
| Move right from the panel. By default, this will change the focus position, but other panel types may implement this differently.
|-
| <code>MovePanelUp(int32 repeatCount)</code>
| Yes
| Move up from the panel. By default, this will change the focus position, but other panel types may implement this differently.
|-
| <code>PageDown()</code>
| No
| Scroll the panel down by one page.
|-
| <code>PageLeft()</code>
| No
| Scroll the panel left by one page.
|-
| <code>PagePanelDown()</code>
| Yes
| Scroll the panel down by one page.
|-
| <code>PagePanelLeft()</code>
| Yes
| Scroll the panel left by one page.
|-
| <code>PagePanelRight()</code>
| Yes
| Scroll the panel left by one page.
|-
| <code>PagePanelUp()</code>
| Yes
| Scroll the panel up by one page.
|-
| <code>PageRight()</code>
| No
| Scroll the panel right by one page.
|-
| <code>PageUp()</code>
| No
| Scroll the panel up by one page.
|-
| <code>RemoveStyle(panoramasymbol class)</code>
| Yes
| Remove a CSS class from a panel.
|-
| <code>RemoveStyleAfterDelay(panoramasymbol class, float pre-delay)</code>
| Yes
| Remove a CSS class from a panel after a specified delay.
|-
| <code>RemoveStyleFromEachChild(panoramasymbol class)</code>
| Yes
| Remove a CSS class from all children of this panel.
|-
| <code>ScrollDown()</code>
| No
| Scroll the panel down by one line.
|-
| <code>ScrollLeft()</code>
| No
| Scroll the panel left by one line.
|-
| <code>ScrollPanelDown()</code>
| Yes
| Scroll the panel down by one line.
|-
| <code>ScrollPanelLeft()</code>
| Yes
| Scroll the panel left by one line.
|-
| <code>ScrollPanelRight()</code>
| Yes
| Scroll the panel right by one line.
|-
| <code>ScrollPanelUp()</code>
| Yes
| Scroll the panel up by one line.
|-
| <code>ScrollRight()</code>
| No
| Scroll the panel right by one line.
|-
| <code>ScrollToBottom()</code>
| Yes
| Scroll this panel to the bottom.
|-
| <code>ScrollToTop()</code>
| Yes
| Scroll this panel to the top.
|-
| <code>ScrollUp()</code>
| No
| Scroll the panel up by one line.
|-
| <code>SetChildPanelsSelected(bool selected)</code>
| Yes
| Set whether any child panels are :selected.
|-
| <code>SetInputFocus()</code>
| Yes
| Set focus to this panel.
|-
| <code>SetPanelEnabled(bool enabled)</code>
| Yes
| Sets whether the given panel is enabled
|-
| <code>SetPanelSelected(bool selected)</code>
| Yes
| Set whether this panel is :selected.
|-
| <code>SwitchStyle(panoramasymbol slot, panoramasymbol class)</code>
| Yes
| Switch which class the panel has for a given attribute slot. Allows easily changing between multiple states.
|-
| <code>TogglePanelSelected()</code>
| Yes
| Toggle whether this panel is :selected.
|-
| <code>ToggleStyle(panoramasymbol class)</code>
| Yes
| Toggle whether a panel has the given CSS class.
|-
| <code>TriggerStyle(panoramasymbol class)</code>
| Yes
| Remove then immediately add back a CSS class from a panel. Useful to re-trigger events like animations or sound effects.
|}
$> cl_panorama_script_help *
declare enum SteamUGCQuery
{
    RankedByVote = 0,
    RankedByPublicationDate = 1,
    AcceptedForGameRankedByAcceptanceDate = 2,
    RankedByTrend = 3,
    FavoritedByFriendsRankedByPublicationDate = 4,
    CreatedByFriendsRankedByPublicationDate = 5,
    RankedByNumTimesReported = 6,
    CreatedByFollowedUsersRankedByPublicationDate = 7,
    NotYetRated = 8,
    RankedByTotalVotesAsc = 9,
    RankedByVotesUp = 10,
    RankedByTextSearch = 11,
    RankedByTotalUniqueSubscriptions = 12,
    RankedByPlaytimeTrend = 13,
    RankedByTotalPlaytime = 14,
    RankedByAveragePlaytimeTrend = 15,
    RankedByLifetimeAveragePlaytime = 16,
    RankedByPlaytimeSessionsTrend = 17,
    RankedByLifetimePlaytimeSessions = 18,
}

declare enum SteamUGCMatchingUGCType
{
    Items = 0,
    Items_Mtx = 1,
    Items_ReadyToUse = 2,
    Collections = 3,
    Artwork = 4,
    Videos = 5,
    Screenshots = 6,
    AllGuides = 7,
    WebGuides = 8,
    IntegratedGuides = 9,
    UsableInGame = 10,
    ControllerBindings = 11,
    GameManagedItems = 12,
    All = -1,
}

declare enum SteamUniverse
{
    Invalid = 0,
    Internal = 3,
    Dev = 4,
    Beta = 2,
    Public = 1,
}

declare enum DOTA_GameState
{
    DOTA_GAMERULES_STATE_INIT = 0,
    DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD = 1,
    DOTA_GAMERULES_STATE_HERO_SELECTION = 3,
    DOTA_GAMERULES_STATE_STRATEGY_TIME = 4,
    DOTA_GAMERULES_STATE_PRE_GAME = 7,
    DOTA_GAMERULES_STATE_GAME_IN_PROGRESS = 9,
    DOTA_GAMERULES_STATE_POST_GAME = 10,
    DOTA_GAMERULES_STATE_DISCONNECT = 11,
    DOTA_GAMERULES_STATE_TEAM_SHOWCASE = 5,
    DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP = 2,
    DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD = 6,
    DOTA_GAMERULES_STATE_SCENARIO_SETUP = 8,
    DOTA_GAMERULES_STATE_LAST = 0,
}

declare enum DOTA_GC_TEAM
{
    DOTA_GC_TEAM_GOOD_GUYS = 0,
    DOTA_GC_TEAM_BAD_GUYS = 1,
    DOTA_GC_TEAM_BROADCASTER = 2,
    DOTA_GC_TEAM_SPECTATOR = 3,
    DOTA_GC_TEAM_PLAYER_POOL = 4,
    DOTA_GC_TEAM_NOTEAM = 5,
    DOTA_GC_TEAM_CUSTOM_1 = 6,
    DOTA_GC_TEAM_CUSTOM_2 = 7,
    DOTA_GC_TEAM_CUSTOM_3 = 8,
    DOTA_GC_TEAM_CUSTOM_4 = 9,
    DOTA_GC_TEAM_CUSTOM_5 = 10,
    DOTA_GC_TEAM_CUSTOM_6 = 11,
    DOTA_GC_TEAM_CUSTOM_7 = 12,
    DOTA_GC_TEAM_CUSTOM_8 = 13,
    DOTA_GC_TEAM_NEUTRALS = 14,
}

declare enum DOTA_GameMode
{
    DOTA_GAMEMODE_NONE = 0,
    DOTA_GAMEMODE_AP = 1,
    DOTA_GAMEMODE_CM = 2,
    DOTA_GAMEMODE_RD = 3,
    DOTA_GAMEMODE_SD = 4,
    DOTA_GAMEMODE_AR = 5,
    DOTA_GAMEMODE_INTRO = 6,
    DOTA_GAMEMODE_HW = 7,
    DOTA_GAMEMODE_REVERSE_CM = 8,
    DOTA_GAMEMODE_XMAS = 9,
    DOTA_GAMEMODE_TUTORIAL = 10,
    DOTA_GAMEMODE_MO = 11,
    DOTA_GAMEMODE_LP = 12,
    DOTA_GAMEMODE_POOL1 = 13,
    DOTA_GAMEMODE_FH = 14,
    DOTA_GAMEMODE_CUSTOM = 15,
    DOTA_GAMEMODE_CD = 16,
    DOTA_GAMEMODE_BD = 17,
    DOTA_GAMEMODE_ABILITY_DRAFT = 18,
    DOTA_GAMEMODE_EVENT = 19,
    DOTA_GAMEMODE_ARDM = 20,
    DOTA_GAMEMODE_1V1MID = 21,
    DOTA_GAMEMODE_ALL_DRAFT = 22,
    DOTA_GAMEMODE_TURBO = 23,
    DOTA_GAMEMODE_MUTATION = 24,
    DOTA_GAMEMODE_COACHES_CHALLENGE = 25,
}

declare enum DOTAConnectionState_t
{
    DOTA_CONNECTION_STATE_UNKNOWN = 0,
    DOTA_CONNECTION_STATE_NOT_YET_CONNECTED = 1,
    DOTA_CONNECTION_STATE_CONNECTED = 2,
    DOTA_CONNECTION_STATE_DISCONNECTED = 3,
    DOTA_CONNECTION_STATE_ABANDONED = 4,
    DOTA_CONNECTION_STATE_LOADING = 5,
    DOTA_CONNECTION_STATE_FAILED = 6,
}

declare enum dotaunitorder_t
{
    DOTA_UNIT_ORDER_NONE = 0,
    DOTA_UNIT_ORDER_MOVE_TO_POSITION = 1,
    DOTA_UNIT_ORDER_MOVE_TO_TARGET = 2,
    DOTA_UNIT_ORDER_ATTACK_MOVE = 3,
    DOTA_UNIT_ORDER_ATTACK_TARGET = 4,
    DOTA_UNIT_ORDER_CAST_POSITION = 5,
    DOTA_UNIT_ORDER_CAST_TARGET = 6,
    DOTA_UNIT_ORDER_CAST_TARGET_TREE = 7,
    DOTA_UNIT_ORDER_CAST_NO_TARGET = 8,
    DOTA_UNIT_ORDER_CAST_TOGGLE = 9,
    DOTA_UNIT_ORDER_HOLD_POSITION = 10,
    DOTA_UNIT_ORDER_TRAIN_ABILITY = 11,
    DOTA_UNIT_ORDER_DROP_ITEM = 12,
    DOTA_UNIT_ORDER_GIVE_ITEM = 13,
    DOTA_UNIT_ORDER_PICKUP_ITEM = 14,
    DOTA_UNIT_ORDER_PICKUP_RUNE = 15,
    DOTA_UNIT_ORDER_PURCHASE_ITEM = 16,
    DOTA_UNIT_ORDER_SELL_ITEM = 17,
    DOTA_UNIT_ORDER_DISASSEMBLE_ITEM = 18,
    DOTA_UNIT_ORDER_MOVE_ITEM = 19,
    DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO = 20,
    DOTA_UNIT_ORDER_STOP = 21,
    DOTA_UNIT_ORDER_TAUNT = 22,
    DOTA_UNIT_ORDER_BUYBACK = 23,
    DOTA_UNIT_ORDER_GLYPH = 24,
    DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH = 25,
    DOTA_UNIT_ORDER_CAST_RUNE = 26,
    DOTA_UNIT_ORDER_PING_ABILITY = 27,
    DOTA_UNIT_ORDER_MOVE_TO_DIRECTION = 28,
    DOTA_UNIT_ORDER_PATROL = 29,
    DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION = 30,
    DOTA_UNIT_ORDER_RADAR = 31,
    DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK = 32,
    DOTA_UNIT_ORDER_CONTINUE = 33,
    DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED = 34,
    DOTA_UNIT_ORDER_CAST_RIVER_PAINT = 35,
    DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT = 36,
    DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN = 37,
    DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH = 38,
    DOTA_UNIT_ORDER_MOVE_RELATIVE = 39,
}

declare enum DOTA_OVERHEAD_ALERT
{
    OVERHEAD_ALERT_GOLD = 0,
    OVERHEAD_ALERT_DENY = 1,
    OVERHEAD_ALERT_CRITICAL = 2,
    OVERHEAD_ALERT_XP = 3,
    OVERHEAD_ALERT_BONUS_SPELL_DAMAGE = 4,
    OVERHEAD_ALERT_MISS = 5,
    OVERHEAD_ALERT_DAMAGE = 6,
    OVERHEAD_ALERT_EVADE = 7,
    OVERHEAD_ALERT_BLOCK = 8,
    OVERHEAD_ALERT_BONUS_POISON_DAMAGE = 9,
    OVERHEAD_ALERT_HEAL = 10,
    OVERHEAD_ALERT_MANA_ADD = 11,
    OVERHEAD_ALERT_MANA_LOSS = 12,
    OVERHEAD_ALERT_LAST_HIT_EARLY = 13,
    OVERHEAD_ALERT_LAST_HIT_CLOSE = 14,
    OVERHEAD_ALERT_LAST_HIT_MISS = 15,
    OVERHEAD_ALERT_MAGICAL_BLOCK = 16,
    OVERHEAD_ALERT_INCOMING_DAMAGE = 17,
    OVERHEAD_ALERT_OUTGOING_DAMAGE = 18,
    OVERHEAD_ALERT_DISABLE_RESIST = 19,
    OVERHEAD_ALERT_DEATH = 20,
    OVERHEAD_ALERT_BLOCKED = 21,
    OVERHEAD_ALERT_ITEM_RECEIVED = 22,
    OVERHEAD_ALERT_SHARD = 23,
    OVERHEAD_ALERT_DEADLY_BLOW = 24,
}

declare enum DOTA_HeroPickState
{
    DOTA_HEROPICK_STATE_NONE = 0,
    DOTA_HEROPICK_STATE_AP_SELECT = 1,
    DOTA_HEROPICK_STATE_SD_SELECT = 2,
    DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED = 3,
    DOTA_HEROPICK_STATE_RD_SELECT_UNUSED = 4,
    DOTA_HEROPICK_STATE_CM_INTRO = 5,
    DOTA_HEROPICK_STATE_CM_CAPTAINPICK = 6,
    DOTA_HEROPICK_STATE_CM_BAN1 = 7,
    DOTA_HEROPICK_STATE_CM_BAN2 = 8,
    DOTA_HEROPICK_STATE_CM_BAN3 = 9,
    DOTA_HEROPICK_STATE_CM_BAN4 = 10,
    DOTA_HEROPICK_STATE_CM_BAN5 = 11,
    DOTA_HEROPICK_STATE_CM_BAN6 = 12,
    DOTA_HEROPICK_STATE_CM_BAN7 = 13,
    DOTA_HEROPICK_STATE_CM_BAN8 = 14,
    DOTA_HEROPICK_STATE_CM_BAN9 = 15,
    DOTA_HEROPICK_STATE_CM_BAN10 = 16,
    DOTA_HEROPICK_STATE_CM_BAN11 = 17,
    DOTA_HEROPICK_STATE_CM_BAN12 = 18,
    DOTA_HEROPICK_STATE_CM_BAN13 = 19,
    DOTA_HEROPICK_STATE_CM_BAN14 = 20,
    DOTA_HEROPICK_STATE_CM_SELECT1 = 21,
    DOTA_HEROPICK_STATE_CM_SELECT2 = 22,
    DOTA_HEROPICK_STATE_CM_SELECT3 = 23,
    DOTA_HEROPICK_STATE_CM_SELECT4 = 24,
    DOTA_HEROPICK_STATE_CM_SELECT5 = 25,
    DOTA_HEROPICK_STATE_CM_SELECT6 = 26,
    DOTA_HEROPICK_STATE_CM_SELECT7 = 27,
    DOTA_HEROPICK_STATE_CM_SELECT8 = 28,
    DOTA_HEROPICK_STATE_CM_SELECT9 = 29,
    DOTA_HEROPICK_STATE_CM_SELECT10 = 30,
    DOTA_HEROPICK_STATE_CM_PICK = 31,
    DOTA_HEROPICK_STATE_AR_SELECT = 32,
    DOTA_HEROPICK_STATE_MO_SELECT = 33,
    DOTA_HEROPICK_STATE_FH_SELECT = 34,
    DOTA_HEROPICK_STATE_CD_INTRO = 35,
    DOTA_HEROPICK_STATE_CD_CAPTAINPICK = 36,
    DOTA_HEROPICK_STATE_CD_BAN1 = 37,
    DOTA_HEROPICK_STATE_CD_BAN2 = 38,
    DOTA_HEROPICK_STATE_CD_BAN3 = 39,
    DOTA_HEROPICK_STATE_CD_BAN4 = 40,
    DOTA_HEROPICK_STATE_CD_BAN5 = 41,
    DOTA_HEROPICK_STATE_CD_BAN6 = 42,
    DOTA_HEROPICK_STATE_CD_SELECT1 = 43,
    DOTA_HEROPICK_STATE_CD_SELECT2 = 44,
    DOTA_HEROPICK_STATE_CD_SELECT3 = 45,
    DOTA_HEROPICK_STATE_CD_SELECT4 = 46,
    DOTA_HEROPICK_STATE_CD_SELECT5 = 47,
    DOTA_HEROPICK_STATE_CD_SELECT6 = 48,
    DOTA_HEROPICK_STATE_CD_SELECT7 = 49,
    DOTA_HEROPICK_STATE_CD_SELECT8 = 50,
    DOTA_HEROPICK_STATE_CD_SELECT9 = 51,
    DOTA_HEROPICK_STATE_CD_SELECT10 = 52,
    DOTA_HEROPICK_STATE_CD_PICK = 53,
    DOTA_HEROPICK_STATE_BD_SELECT = 54,
    DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT = 55,
    DOTA_HERO_PICK_STATE_ARDM_SELECT = 56,
    DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT = 57,
    DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT = 58,
    DOTA_HEROPICK_STATE_SELECT_PENALTY = 59,
    DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES = 60,
    DOTA_HEROPICK_STATE_SCENARIO_PICK = 61,
    DOTA_HEROPICK_STATE_COUNT = 62,
}

declare enum DOTATeam_t
{
    DOTA_TEAM_FIRST = 2,
    DOTA_TEAM_GOODGUYS = 2,
    DOTA_TEAM_BADGUYS = 3,
    DOTA_TEAM_NEUTRALS = 4,
    DOTA_TEAM_NOTEAM = 5,
    DOTA_TEAM_CUSTOM_1 = 6,
    DOTA_TEAM_CUSTOM_2 = 7,
    DOTA_TEAM_CUSTOM_3 = 8,
    DOTA_TEAM_CUSTOM_4 = 9,
    DOTA_TEAM_CUSTOM_5 = 10,
    DOTA_TEAM_CUSTOM_6 = 11,
    DOTA_TEAM_CUSTOM_7 = 12,
    DOTA_TEAM_CUSTOM_8 = 13,
    DOTA_TEAM_COUNT = 14,
    DOTA_TEAM_CUSTOM_MIN = 6,
    DOTA_TEAM_CUSTOM_MAX = 13,
    DOTA_TEAM_CUSTOM_COUNT = 8,
}

declare enum DOTA_RUNES
{
    DOTA_RUNE_INVALID = -1,
    DOTA_RUNE_DOUBLEDAMAGE = 0,
    DOTA_RUNE_HASTE = 1,
    DOTA_RUNE_ILLUSION = 2,
    DOTA_RUNE_INVISIBILITY = 3,
    DOTA_RUNE_REGENERATION = 4,
    DOTA_RUNE_BOUNTY = 5,
    DOTA_RUNE_ARCANE = 6,
    DOTA_RUNE_WATER = 7,
    DOTA_RUNE_COUNT = 8,
}

declare enum DOTA_UNIT_TARGET_TEAM
{
    DOTA_UNIT_TARGET_TEAM_NONE = 0,
    DOTA_UNIT_TARGET_TEAM_FRIENDLY = 1,
    DOTA_UNIT_TARGET_TEAM_ENEMY = 2,
    DOTA_UNIT_TARGET_TEAM_CUSTOM = 4,
    DOTA_UNIT_TARGET_TEAM_BOTH = 3,
}

declare enum DOTA_UNIT_TARGET_TYPE
{
    DOTA_UNIT_TARGET_NONE = 0,
    DOTA_UNIT_TARGET_HERO = 1,
    DOTA_UNIT_TARGET_CREEP = 2,
    DOTA_UNIT_TARGET_BUILDING = 4,
    DOTA_UNIT_TARGET_COURIER = 16,
    DOTA_UNIT_TARGET_OTHER = 32,
    DOTA_UNIT_TARGET_TREE = 64,
    DOTA_UNIT_TARGET_CUSTOM = 128,
    DOTA_UNIT_TARGET_SELF = 256,
    DOTA_UNIT_TARGET_BASIC = 18,
    DOTA_UNIT_TARGET_ALL = 55,
}

declare enum DOTA_UNIT_TARGET_FLAGS
{
    DOTA_UNIT_TARGET_FLAG_NONE = 0,
    DOTA_UNIT_TARGET_FLAG_RANGED_ONLY = 2,
    DOTA_UNIT_TARGET_FLAG_MELEE_ONLY = 4,
    DOTA_UNIT_TARGET_FLAG_DEAD = 8,
    DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES = 16,
    DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES = 32,
    DOTA_UNIT_TARGET_FLAG_INVULNERABLE = 64,
    DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE = 128,
    DOTA_UNIT_TARGET_FLAG_NO_INVIS = 256,
    DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS = 512,
    DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED = 1024,
    DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED = 2048,
    DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED = 4096,
    DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS = 8192,
    DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE = 16384,
    DOTA_UNIT_TARGET_FLAG_MANA_ONLY = 32768,
    DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP = 65536,
    DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO = 131072,
    DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD = 262144,
    DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED = 524288,
    DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES = 1048576,
    DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS = 2097152,
}

declare enum DOTALimits_t
{
    /** Max number of players connected to the server including spectators. */
    DOTA_MAX_PLAYERS = 64,
    /** Max number of players per team. */
    DOTA_MAX_TEAM = 24,
    /** Max number of player teams supported. */
    DOTA_MAX_PLAYER_TEAMS = 10,
    /** Max number of non-spectator players supported. */
    DOTA_MAX_TEAM_PLAYERS = 24,
    /** How many spectators can watch. */
    DOTA_MAX_SPECTATOR_TEAM_SIZE = 40,
    /** Max number of viewers in a spectator lobby. */
    DOTA_MAX_SPECTATOR_LOBBY_SIZE = 15,
    /** Default number of players per team. */
    DOTA_DEFAULT_MAX_TEAM = 5,
    /** Default number of non-spectator players supported. */
    DOTA_DEFAULT_MAX_TEAM_PLAYERS = 10,
}

declare enum DOTAInventoryFlags_t
{
    DOTA_INVENTORY_ALLOW_NONE = 0,
    DOTA_INVENTORY_ALLOW_MAIN = 1,
    DOTA_INVENTORY_ALLOW_STASH = 2,
    DOTA_INVENTORY_ALLOW_DROP_ON_GROUND = 4,
    DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN = 8,
    DOTA_INVENTORY_LIMIT_DROP_ON_GROUND = 16,
    DOTA_INVENTORY_ALL_ACCESS = 3,
}

declare enum EDOTA_ModifyGold_Reason
{
    DOTA_ModifyGold_Unspecified = 0,
    DOTA_ModifyGold_Death = 1,
    DOTA_ModifyGold_Buyback = 2,
    DOTA_ModifyGold_PurchaseConsumable = 3,
    DOTA_ModifyGold_PurchaseItem = 4,
    DOTA_ModifyGold_AbandonedRedistribute = 5,
    DOTA_ModifyGold_SellItem = 6,
    DOTA_ModifyGold_AbilityCost = 7,
    DOTA_ModifyGold_CheatCommand = 8,
    DOTA_ModifyGold_SelectionPenalty = 9,
    DOTA_ModifyGold_GameTick = 10,
    DOTA_ModifyGold_Building = 11,
    DOTA_ModifyGold_HeroKill = 12,
    DOTA_ModifyGold_CreepKill = 13,
    DOTA_ModifyGold_NeutralKill = 14,
    DOTA_ModifyGold_RoshanKill = 15,
    DOTA_ModifyGold_CourierKill = 16,
    DOTA_ModifyGold_BountyRune = 17,
    DOTA_ModifyGold_SharedGold = 18,
    DOTA_ModifyGold_AbilityGold = 19,
    DOTA_ModifyGold_WardKill = 20,
    DOTA_ModifyGold_CourierKilledByThisPlayer = 21,
}

declare enum DOTAUnitAttackCapability_t
{
    DOTA_UNIT_CAP_NO_ATTACK = 0,
    DOTA_UNIT_CAP_MELEE_ATTACK = 1,
    DOTA_UNIT_CAP_RANGED_ATTACK = 2,
    DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL = 4,
    DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT = 3,
}

declare enum DOTAUnitMoveCapability_t
{
    DOTA_UNIT_CAP_MOVE_NONE = 0,
    DOTA_UNIT_CAP_MOVE_GROUND = 1,
    DOTA_UNIT_CAP_MOVE_FLY = 2,
}

declare enum EShareAbility
{
    ITEM_FULLY_SHAREABLE = 0,
    ITEM_PARTIALLY_SHAREABLE = 1,
    ITEM_NOT_SHAREABLE = 2,
}

declare enum DOTAMusicStatus_t
{
    DOTA_MUSIC_STATUS_NONE = 0,
    DOTA_MUSIC_STATUS_EXPLORATION = 1,
    DOTA_MUSIC_STATUS_BATTLE = 2,
    DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION = 3,
    DOTA_MUSIC_STATUS_DEAD = 4,
    DOTA_MUSIC_STATUS_LAST = 5,
}

declare enum DOTA_ABILITY_BEHAVIOR
{
    DOTA_ABILITY_BEHAVIOR_NONE = 0,
    DOTA_ABILITY_BEHAVIOR_HIDDEN = 1,
    DOTA_ABILITY_BEHAVIOR_PASSIVE = 2,
    DOTA_ABILITY_BEHAVIOR_NO_TARGET = 4,
    DOTA_ABILITY_BEHAVIOR_UNIT_TARGET = 8,
    DOTA_ABILITY_BEHAVIOR_POINT = 16,
    DOTA_ABILITY_BEHAVIOR_AOE = 32,
    DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE = 64,
    DOTA_ABILITY_BEHAVIOR_CHANNELLED = 128,
    DOTA_ABILITY_BEHAVIOR_ITEM = 256,
    DOTA_ABILITY_BEHAVIOR_TOGGLE = 512,
    DOTA_ABILITY_BEHAVIOR_DIRECTIONAL = 1024,
    DOTA_ABILITY_BEHAVIOR_IMMEDIATE = 2048,
    DOTA_ABILITY_BEHAVIOR_AUTOCAST = 4096,
    DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET = 8192,
    DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT = 16384,
    DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET = 32768,
    DOTA_ABILITY_BEHAVIOR_AURA = 65536,
    DOTA_ABILITY_BEHAVIOR_ATTACK = 131072,
    DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT = 262144,
    DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES = 524288,
    DOTA_ABILITY_BEHAVIOR_UNRESTRICTED = 1048576,
    DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE = 2097152,
    DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL = 4194304,
    DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT = 8388608,
    DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET = 16777216,
    DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK = 33554432,
    DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN = 67108864,
    DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING = 134217728,
    DOTA_ABILITY_BEHAVIOR_RUNE_TARGET = 268435456,
    DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL = 536870912,
    DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING = 1073741824,
    DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT = 2147483648,
    DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST = 4294967296,
    DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES = 8589934592,
    DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX = 17179869184,
    DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE = 34359738368,
    DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING = 68719476736,
    DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE = 137438953472,
    DOTA_ABILITY_BEHAVIOR_OVERSHOOT = 274877906944,
    DOTA_ABILITY_BEHAVIOR_IGNORE_MUTED = 549755813888,
}

declare enum DAMAGE_TYPES
{
    DAMAGE_TYPE_NONE = 0,
    DAMAGE_TYPE_PHYSICAL = 1,
    DAMAGE_TYPE_MAGICAL = 2,
    DAMAGE_TYPE_PURE = 4,
    DAMAGE_TYPE_HP_REMOVAL = 8,
    DAMAGE_TYPE_ABILITY_DEFINED = 22,
    DAMAGE_TYPE_ALL = 7,
}

declare enum ABILITY_TYPES
{
    ABILITY_TYPE_BASIC = 0,
    ABILITY_TYPE_ULTIMATE = 1,
    ABILITY_TYPE_ATTRIBUTES = 2,
    ABILITY_TYPE_HIDDEN = 3,
}

declare enum SPELL_IMMUNITY_TYPES
{
    SPELL_IMMUNITY_NONE = 0,
    SPELL_IMMUNITY_ALLIES_YES = 1,
    SPELL_IMMUNITY_ALLIES_NO = 2,
    SPELL_IMMUNITY_ENEMIES_YES = 3,
    SPELL_IMMUNITY_ENEMIES_NO = 4,
    SPELL_IMMUNITY_ALLIES_YES_ENEMIES_NO = 5,
}

declare enum DOTADamageFlag_t
{
    DOTA_DAMAGE_FLAG_NONE = 0,
    DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR = 1,
    DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR = 2,
    DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY = 4,
    DOTA_DAMAGE_FLAG_BYPASSES_BLOCK = 8,
    DOTA_DAMAGE_FLAG_REFLECTION = 16,
    DOTA_DAMAGE_FLAG_HPLOSS = 32,
    DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT = 64,
    DOTA_DAMAGE_FLAG_NON_LETHAL = 128,
    DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY = 256,
    DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS = 512,
    DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION = 1024,
    DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN = 2048,
    DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL = 4096,
    DOTA_DAMAGE_FLAG_PROPERTY_FIRE = 8192,
    DOTA_DAMAGE_FLAG_IGNORES_BASE_PHYSICAL_ARMOR = 16384,
    DOTA_DAMAGE_FLAG_SECONDARY_PROJECTILE_ATTACK = 32768,
    DOTA_DAMAGE_FLAG_FORCE_SPELL_AMPLIFICATION = 65536,
    DOTA_DAMAGE_FLAG_MAGIC_AUTO_ATTACK = 131072,
}

declare enum EDOTA_ModifyXP_Reason
{
    DOTA_ModifyXP_Unspecified = 0,
    DOTA_ModifyXP_HeroKill = 1,
    DOTA_ModifyXP_CreepKill = 2,
    DOTA_ModifyXP_RoshanKill = 3,
    DOTA_ModifyXP_TomeOfKnowledge = 4,
    DOTA_ModifyXP_Outpost = 5,
    DOTA_ModifyXP_MAX = 6,
}

declare enum GameActivity_t
{
    ACT_DOTA_IDLE = 1500,
    ACT_DOTA_IDLE_RARE = 1501,
    ACT_DOTA_RUN = 1502,
    ACT_DOTA_ATTACK = 1503,
    ACT_DOTA_ATTACK2 = 1504,
    ACT_DOTA_ATTACK_EVENT = 1505,
    ACT_DOTA_DIE = 1506,
    ACT_DOTA_FLINCH = 1507,
    ACT_DOTA_FLAIL = 1508,
    ACT_DOTA_DISABLED = 1509,
    ACT_DOTA_CAST_ABILITY_1 = 1510,
    ACT_DOTA_CAST_ABILITY_2 = 1511,
    ACT_DOTA_CAST_ABILITY_3 = 1512,
    ACT_DOTA_CAST_ABILITY_4 = 1513,
    ACT_DOTA_CAST_ABILITY_5 = 1514,
    ACT_DOTA_CAST_ABILITY_6 = 1515,
    ACT_DOTA_OVERRIDE_ABILITY_1 = 1516,
    ACT_DOTA_OVERRIDE_ABILITY_2 = 1517,
    ACT_DOTA_OVERRIDE_ABILITY_3 = 1518,
    ACT_DOTA_OVERRIDE_ABILITY_4 = 1519,
    ACT_DOTA_CHANNEL_ABILITY_1 = 1520,
    ACT_DOTA_CHANNEL_ABILITY_2 = 1521,
    ACT_DOTA_CHANNEL_ABILITY_3 = 1522,
    ACT_DOTA_CHANNEL_ABILITY_4 = 1523,
    ACT_DOTA_CHANNEL_ABILITY_5 = 1524,
    ACT_DOTA_CHANNEL_ABILITY_6 = 1525,
    ACT_DOTA_CHANNEL_END_ABILITY_1 = 1526,
    ACT_DOTA_CHANNEL_END_ABILITY_2 = 1527,
    ACT_DOTA_CHANNEL_END_ABILITY_3 = 1528,
    ACT_DOTA_CHANNEL_END_ABILITY_4 = 1529,
    ACT_DOTA_CHANNEL_END_ABILITY_5 = 1530,
    ACT_DOTA_CHANNEL_END_ABILITY_6 = 1531,
    ACT_DOTA_CONSTANT_LAYER = 1532,
    ACT_DOTA_CAPTURE = 1533,
    ACT_DOTA_SPAWN = 1534,
    ACT_DOTA_KILLTAUNT = 1535,
    ACT_DOTA_TAUNT = 1536,
    ACT_DOTA_THIRST = 1537,
    ACT_DOTA_CAST_DRAGONBREATH = 1538,
    ACT_DOTA_ECHO_SLAM = 1539,
    ACT_DOTA_CAST_ABILITY_1_END = 1540,
    ACT_DOTA_CAST_ABILITY_2_END = 1541,
    ACT_DOTA_CAST_ABILITY_3_END = 1542,
    ACT_DOTA_CAST_ABILITY_4_END = 1543,
    ACT_MIRANA_LEAP_END = 1544,
    ACT_WAVEFORM_START = 1545,
    ACT_WAVEFORM_END = 1546,
    ACT_DOTA_CAST_ABILITY_ROT = 1547,
    ACT_DOTA_DIE_SPECIAL = 1548,
    ACT_DOTA_RATTLETRAP_BATTERYASSAULT = 1549,
    ACT_DOTA_RATTLETRAP_POWERCOGS = 1550,
    ACT_DOTA_RATTLETRAP_HOOKSHOT_START = 1551,
    ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP = 1552,
    ACT_DOTA_RATTLETRAP_HOOKSHOT_END = 1553,
    ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE = 1554,
    ACT_DOTA_TINKER_REARM1 = 1555,
    ACT_DOTA_TINKER_REARM2 = 1556,
    ACT_DOTA_TINKER_REARM3 = 1557,
    ACT_TINY_AVALANCHE = 1558,
    ACT_TINY_TOSS = 1559,
    ACT_TINY_GROWL = 1560,
    ACT_DOTA_WEAVERBUG_ATTACH = 1561,
    ACT_DOTA_CAST_WILD_AXES_END = 1562,
    ACT_DOTA_CAST_LIFE_BREAK_START = 1563,
    ACT_DOTA_CAST_LIFE_BREAK_END = 1564,
    ACT_DOTA_NIGHTSTALKER_TRANSITION = 1565,
    ACT_DOTA_LIFESTEALER_RAGE = 1566,
    ACT_DOTA_LIFESTEALER_OPEN_WOUNDS = 1567,
    ACT_DOTA_SAND_KING_BURROW_IN = 1568,
    ACT_DOTA_SAND_KING_BURROW_OUT = 1569,
    ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK = 1570,
    ACT_DOTA_WHEEL_LAYER = 1571,
    ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START = 1572,
    ACT_DOTA_ALCHEMIST_CONCOCTION = 1573,
    ACT_DOTA_JAKIRO_LIQUIDFIRE_START = 1574,
    ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP = 1575,
    ACT_DOTA_LIFESTEALER_INFEST = 1576,
    ACT_DOTA_LIFESTEALER_INFEST_END = 1577,
    ACT_DOTA_LASSO_LOOP = 1578,
    ACT_DOTA_ALCHEMIST_CONCOCTION_THROW = 1579,
    ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END = 1580,
    ACT_DOTA_CAST_COLD_SNAP = 1581,
    ACT_DOTA_CAST_GHOST_WALK = 1582,
    ACT_DOTA_CAST_TORNADO = 1583,
    ACT_DOTA_CAST_EMP = 1584,
    ACT_DOTA_CAST_ALACRITY = 1585,
    ACT_DOTA_CAST_CHAOS_METEOR = 1586,
    ACT_DOTA_CAST_SUN_STRIKE = 1587,
    ACT_DOTA_CAST_FORGE_SPIRIT = 1588,
    ACT_DOTA_CAST_ICE_WALL = 1589,
    ACT_DOTA_CAST_DEAFENING_BLAST = 1590,
    ACT_DOTA_VICTORY = 1591,
    ACT_DOTA_DEFEAT = 1592,
    ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE = 1593,
    ACT_DOTA_SPIRIT_BREAKER_CHARGE_END = 1594,
    ACT_DOTA_TELEPORT = 1595,
    ACT_DOTA_TELEPORT_END = 1596,
    ACT_DOTA_CAST_REFRACTION = 1597,
    ACT_DOTA_CAST_ABILITY_7 = 1598,
    ACT_DOTA_CANCEL_SIREN_SONG = 1599,
    ACT_DOTA_CHANNEL_ABILITY_7 = 1600,
    ACT_DOTA_LOADOUT = 1601,
    ACT_DOTA_FORCESTAFF_END = 1602,
    ACT_DOTA_POOF_END = 1603,
    ACT_DOTA_SLARK_POUNCE = 1604,
    ACT_DOTA_MAGNUS_SKEWER_START = 1605,
    ACT_DOTA_MAGNUS_SKEWER_END = 1606,
    ACT_DOTA_MEDUSA_STONE_GAZE = 1607,
    ACT_DOTA_RELAX_START = 1608,
    ACT_DOTA_RELAX_LOOP = 1609,
    ACT_DOTA_RELAX_END = 1610,
    ACT_DOTA_CENTAUR_STAMPEDE = 1611,
    ACT_DOTA_BELLYACHE_START = 1612,
    ACT_DOTA_BELLYACHE_LOOP = 1613,
    ACT_DOTA_BELLYACHE_END = 1614,
    ACT_DOTA_ROQUELAIRE_LAND = 1615,
    ACT_DOTA_ROQUELAIRE_LAND_IDLE = 1616,
    ACT_DOTA_GREEVIL_CAST = 1617,
    ACT_DOTA_GREEVIL_OVERRIDE_ABILITY = 1618,
    ACT_DOTA_GREEVIL_HOOK_START = 1619,
    ACT_DOTA_GREEVIL_HOOK_END = 1620,
    ACT_DOTA_GREEVIL_BLINK_BONE = 1621,
    ACT_DOTA_IDLE_SLEEPING = 1622,
    ACT_DOTA_INTRO = 1623,
    ACT_DOTA_GESTURE_POINT = 1624,
    ACT_DOTA_GESTURE_ACCENT = 1625,
    ACT_DOTA_SLEEPING_END = 1626,
    ACT_DOTA_AMBUSH = 1627,
    ACT_DOTA_ITEM_LOOK = 1628,
    ACT_DOTA_STARTLE = 1629,
    ACT_DOTA_FRUSTRATION = 1630,
    ACT_DOTA_TELEPORT_REACT = 1631,
    ACT_DOTA_TELEPORT_END_REACT = 1632,
    ACT_DOTA_SHRUG = 1633,
    ACT_DOTA_RELAX_LOOP_END = 1634,
    ACT_DOTA_PRESENT_ITEM = 1635,
    ACT_DOTA_IDLE_IMPATIENT = 1636,
    ACT_DOTA_SHARPEN_WEAPON = 1637,
    ACT_DOTA_SHARPEN_WEAPON_OUT = 1638,
    ACT_DOTA_IDLE_SLEEPING_END = 1639,
    ACT_DOTA_BRIDGE_DESTROY = 1640,
    ACT_DOTA_TAUNT_SNIPER = 1641,
    ACT_DOTA_DEATH_BY_SNIPER = 1642,
    ACT_DOTA_LOOK_AROUND = 1643,
    ACT_DOTA_CAGED_CREEP_RAGE = 1644,
    ACT_DOTA_CAGED_CREEP_RAGE_OUT = 1645,
    ACT_DOTA_CAGED_CREEP_SMASH = 1646,
    ACT_DOTA_CAGED_CREEP_SMASH_OUT = 1647,
    ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP = 1648,
    ACT_DOTA_INTRO_LOOP = 1649,
    ACT_DOTA_BRIDGE_THREAT = 1650,
    ACT_DOTA_DAGON = 1651,
    ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START = 1652,
    ACT_DOTA_CAST_ABILITY_2_ES_ROLL = 1653,
    ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END = 1654,
    ACT_DOTA_NIAN_PIN_START = 1655,
    ACT_DOTA_NIAN_PIN_LOOP = 1656,
    ACT_DOTA_NIAN_PIN_END = 1657,
    ACT_DOTA_LEAP_STUN = 1658,
    ACT_DOTA_LEAP_SWIPE = 1659,
    ACT_DOTA_NIAN_INTRO_LEAP = 1660,
    ACT_DOTA_AREA_DENY = 1661,
    ACT_DOTA_NIAN_PIN_TO_STUN = 1662,
    ACT_DOTA_RAZE_1 = 1663,
    ACT_DOTA_RAZE_2 = 1664,
    ACT_DOTA_RAZE_3 = 1665,
    ACT_DOTA_UNDYING_DECAY = 1666,
    ACT_DOTA_UNDYING_SOUL_RIP = 1667,
    ACT_DOTA_UNDYING_TOMBSTONE = 1668,
    ACT_DOTA_WHIRLING_AXES_RANGED = 1669,
    ACT_DOTA_SHALLOW_GRAVE = 1670,
    ACT_DOTA_COLD_FEET = 1671,
    ACT_DOTA_ICE_VORTEX = 1672,
    ACT_DOTA_CHILLING_TOUCH = 1673,
    ACT_DOTA_ENFEEBLE = 1674,
    ACT_DOTA_FATAL_BONDS = 1675,
    ACT_DOTA_MIDNIGHT_PULSE = 1676,
    ACT_DOTA_ANCESTRAL_SPIRIT = 1677,
    ACT_DOTA_THUNDER_STRIKE = 1678,
    ACT_DOTA_KINETIC_FIELD = 1679,
    ACT_DOTA_STATIC_STORM = 1680,
    ACT_DOTA_MINI_TAUNT = 1681,
    ACT_DOTA_ARCTIC_BURN_END = 1682,
    ACT_DOTA_LOADOUT_RARE = 1683,
    ACT_DOTA_SWIM = 1684,
    ACT_DOTA_FLEE = 1685,
    ACT_DOTA_TROT = 1686,
    ACT_DOTA_SHAKE = 1687,
    ACT_DOTA_SWIM_IDLE = 1688,
    ACT_DOTA_WAIT_IDLE = 1689,
    ACT_DOTA_GREET = 1690,
    ACT_DOTA_TELEPORT_COOP_START = 1691,
    ACT_DOTA_TELEPORT_COOP_WAIT = 1692,
    ACT_DOTA_TELEPORT_COOP_END = 1693,
    ACT_DOTA_TELEPORT_COOP_EXIT = 1694,
    ACT_DOTA_SHOPKEEPER_PET_INTERACT = 1695,
    ACT_DOTA_ITEM_PICKUP = 1696,
    ACT_DOTA_ITEM_DROP = 1697,
    ACT_DOTA_CAPTURE_PET = 1698,
    ACT_DOTA_PET_WARD_OBSERVER = 1699,
    ACT_DOTA_PET_WARD_SENTRY = 1700,
    ACT_DOTA_PET_LEVEL = 1701,
    ACT_DOTA_CAST_BURROW_END = 1702,
    ACT_DOTA_LIFESTEALER_ASSIMILATE = 1703,
    ACT_DOTA_LIFESTEALER_EJECT = 1704,
    ACT_DOTA_ATTACK_EVENT_BASH = 1705,
    ACT_DOTA_CAPTURE_RARE = 1706,
    ACT_DOTA_AW_MAGNETIC_FIELD = 1707,
    ACT_DOTA_CAST_GHOST_SHIP = 1708,
    ACT_DOTA_FXANIM = 1709,
    ACT_DOTA_VICTORY_START = 1710,
    ACT_DOTA_DEFEAT_START = 1711,
    ACT_DOTA_DP_SPIRIT_SIPHON = 1712,
    ACT_DOTA_TRICKS_END = 1713,
    ACT_DOTA_ES_STONE_CALLER = 1714,
    ACT_DOTA_MK_STRIKE = 1715,
    ACT_DOTA_VERSUS = 1716,
    ACT_DOTA_CAPTURE_CARD = 1717,
    ACT_DOTA_MK_SPRING_SOAR = 1718,
    ACT_DOTA_MK_SPRING_END = 1719,
    ACT_DOTA_MK_TREE_SOAR = 1720,
    ACT_DOTA_MK_TREE_END = 1721,
    ACT_DOTA_MK_FUR_ARMY = 1722,
    ACT_DOTA_MK_SPRING_CAST = 1723,
    ACT_DOTA_NECRO_GHOST_SHROUD = 1724,
    ACT_DOTA_OVERRIDE_ARCANA = 1725,
    ACT_DOTA_SLIDE = 1726,
    ACT_DOTA_SLIDE_LOOP = 1727,
    ACT_DOTA_GENERIC_CHANNEL_1 = 1728,
    ACT_DOTA_GS_SOUL_CHAIN = 1729,
    ACT_DOTA_GS_INK_CREATURE = 1730,
    ACT_DOTA_TRANSITION = 1731,
    ACT_DOTA_BLINK_DAGGER = 1732,
    ACT_DOTA_BLINK_DAGGER_END = 1733,
    ACT_DOTA_CUSTOM_TOWER_ATTACK = 1734,
    ACT_DOTA_CUSTOM_TOWER_IDLE = 1735,
    ACT_DOTA_CUSTOM_TOWER_DIE = 1736,
    ACT_DOTA_CAST_COLD_SNAP_ORB = 1737,
    ACT_DOTA_CAST_GHOST_WALK_ORB = 1738,
    ACT_DOTA_CAST_TORNADO_ORB = 1739,
    ACT_DOTA_CAST_EMP_ORB = 1740,
    ACT_DOTA_CAST_ALACRITY_ORB = 1741,
    ACT_DOTA_CAST_CHAOS_METEOR_ORB = 1742,
    ACT_DOTA_CAST_SUN_STRIKE_ORB = 1743,
    ACT_DOTA_CAST_FORGE_SPIRIT_ORB = 1744,
    ACT_DOTA_CAST_ICE_WALL_ORB = 1745,
    ACT_DOTA_CAST_DEAFENING_BLAST_ORB = 1746,
    ACT_DOTA_NOTICE = 1747,
    ACT_DOTA_CAST_ABILITY_2_ALLY = 1748,
    ACT_DOTA_SHUFFLE_L = 1749,
    ACT_DOTA_SHUFFLE_R = 1750,
    ACT_DOTA_OVERRIDE_LOADOUT = 1751,
    ACT_DOTA_TAUNT_SPECIAL = 1752,
    ACT_DOTA_TELEPORT_START = 1753,
    ACT_DOTA_GENERIC_CHANNEL_1_START = 1754,
    ACT_DOTA_CUSTOM_TOWER_IDLE_RARE = 1755,
    ACT_DOTA_CUSTOM_TOWER_TAUNT = 1756,
    ACT_DOTA_CUSTOM_TOWER_HIGH_FIVE = 1757,
    ACT_DOTA_ATTACK_SPECIAL = 1758,
    ACT_DOTA_TRANSITION_IDLE = 1759,
    ACT_DOTA_PIERCE_THE_VEIL = 1760,
    ACT_DOTA_RUN_RARE = 1761,
    ACT_DOTA_VIPER_DIVE = 1762,
    ACT_DOTA_VIPER_DIVE_END = 1763,
    ACT_DOTA_MK_STRIKE_END = 1764,
}

declare enum DOTAMinimapEvent_t
{
    DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK = 2,
    DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK = 4,
    DOTA_MINIMAP_EVENT_BASE_GLYPHED = 8,
    DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK = 16,
    DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING = 32,
    DOTA_MINIMAP_EVENT_TEAMMATE_DIED = 64,
    DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE = 128,
    DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED = 256,
    DOTA_MINIMAP_EVENT_HINT_LOCATION = 512,
    DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING = 1024,
    DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING = 2048,
    DOTA_MINIMAP_EVENT_RADAR = 4096,
    DOTA_MINIMAP_EVENT_RADAR_TARGET = 8192,
    DOTA_MINIMAP_EVENT_MOVE_TO_TARGET = 16384,
}

declare enum DOTASlotType_t
{
    DOTA_LOADOUT_TYPE_INVALID = -1,
    DOTA_LOADOUT_TYPE_WEAPON = 0,
    DOTA_LOADOUT_TYPE_OFFHAND_WEAPON = 1,
    DOTA_LOADOUT_TYPE_WEAPON2 = 2,
    DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2 = 3,
    DOTA_LOADOUT_TYPE_HEAD = 4,
    DOTA_LOADOUT_TYPE_SHOULDER = 5,
    DOTA_LOADOUT_TYPE_ARMS = 6,
    DOTA_LOADOUT_TYPE_ARMOR = 7,
    DOTA_LOADOUT_TYPE_BELT = 8,
    DOTA_LOADOUT_TYPE_NECK = 9,
    DOTA_LOADOUT_TYPE_BACK = 10,
    DOTA_LOADOUT_TYPE_GLOVES = 11,
    DOTA_LOADOUT_TYPE_LEGS = 12,
    DOTA_LOADOUT_TYPE_TAIL = 13,
    DOTA_LOADOUT_TYPE_MISC = 14,
    DOTA_LOADOUT_TYPE_COSTUME = 15,
    DOTA_LOADOUT_TYPE_BODY_HEAD = 16,
    DOTA_LOADOUT_TYPE_MOUNT = 17,
    DOTA_LOADOUT_TYPE_SUMMON = 18,
    DOTA_LOADOUT_TYPE_SHAPESHIFT = 19,
    DOTA_LOADOUT_TYPE_TAUNT = 20,
    DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS = 21,
    DOTA_LOADOUT_TYPE_ABILITY_ATTACK = 22,
    DOTA_LOADOUT_TYPE_ABILITY1 = 23,
    DOTA_LOADOUT_TYPE_ABILITY2 = 24,
    DOTA_LOADOUT_TYPE_ABILITY3 = 25,
    DOTA_LOADOUT_TYPE_ABILITY4 = 26,
    DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE = 27,
    DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_1 = 28,
    DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_2 = 29,
    DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_3 = 30,
    DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_4 = 31,
    DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_5 = 32,
    DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_6 = 33,
    DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_7 = 34,
    DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_8 = 35,
    DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_9 = 36,
    DOTA_LOADOUT_TYPE_VOICE = 37,
    DOTA_LOADOUT_TYPE_WEAPON_PERSONA_1 = 38,
    DOTA_LOADOUT_TYPE_OFFHAND_WEAPON_PERSONA_1 = 39,
    DOTA_LOADOUT_TYPE_WEAPON2_PERSONA_1 = 40,
    DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2_PERSONA_1 = 41,
    DOTA_LOADOUT_TYPE_HEAD_PERSONA_1 = 42,
    DOTA_LOADOUT_TYPE_SHOULDER_PERSONA_1 = 43,
    DOTA_LOADOUT_TYPE_ARMS_PERSONA_1 = 44,
    DOTA_LOADOUT_TYPE_ARMOR_PERSONA_1 = 45,
    DOTA_LOADOUT_TYPE_BELT_PERSONA_1 = 46,
    DOTA_LOADOUT_TYPE_NECK_PERSONA_1 = 47,
    DOTA_LOADOUT_TYPE_BACK_PERSONA_1 = 48,
    DOTA_LOADOUT_TYPE_LEGS_PERSONA_1 = 49,
    DOTA_LOADOUT_TYPE_GLOVES_PERSONA_1 = 50,
    DOTA_LOADOUT_TYPE_TAIL_PERSONA_1 = 51,
    DOTA_LOADOUT_TYPE_MISC_PERSONA_1 = 52,
    DOTA_LOADOUT_TYPE_BODY_HEAD_PERSONA_1 = 53,
    DOTA_LOADOUT_TYPE_MOUNT_PERSONA_1 = 54,
    DOTA_LOADOUT_TYPE_SUMMON_PERSONA_1 = 55,
    DOTA_LOADOUT_TYPE_SHAPESHIFT_PERSONA_1 = 56,
    DOTA_LOADOUT_TYPE_TAUNT_PERSONA_1 = 57,
    DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS_PERSONA_1 = 58,
    DOTA_LOADOUT_TYPE_ABILITY_ATTACK_PERSONA_1 = 59,
    DOTA_LOADOUT_TYPE_ABILITY1_PERSONA_1 = 60,
    DOTA_LOADOUT_TYPE_ABILITY2_PERSONA_1 = 61,
    DOTA_LOADOUT_TYPE_ABILITY3_PERSONA_1 = 62,
    DOTA_LOADOUT_TYPE_ABILITY4_PERSONA_1 = 63,
    DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE_PERSONA_1 = 64,
    DOTA_LOADOUT_TYPE_VOICE_PERSONA_1 = 65,
    DOTA_LOADOUT_PERSONA_1_START = 38,
    DOTA_LOADOUT_PERSONA_1_END = 65,
    DOTA_LOADOUT_TYPE_PERSONA_SELECTOR = 66,
    DOTA_LOADOUT_TYPE_COURIER = 67,
    DOTA_LOADOUT_TYPE_ANNOUNCER = 68,
    DOTA_LOADOUT_TYPE_MEGA_KILLS = 69,
    DOTA_LOADOUT_TYPE_MUSIC = 70,
    DOTA_LOADOUT_TYPE_WARD = 71,
    DOTA_LOADOUT_TYPE_HUD_SKIN = 72,
    DOTA_LOADOUT_TYPE_LOADING_SCREEN = 73,
    DOTA_LOADOUT_TYPE_WEATHER = 74,
    DOTA_LOADOUT_TYPE_HEROIC_STATUE = 75,
    DOTA_LOADOUT_TYPE_MULTIKILL_BANNER = 76,
    DOTA_LOADOUT_TYPE_CURSOR_PACK = 77,
    DOTA_LOADOUT_TYPE_TELEPORT_EFFECT = 78,
    DOTA_LOADOUT_TYPE_BLINK_EFFECT = 79,
    DOTA_LOADOUT_TYPE_EMBLEM = 80,
    DOTA_LOADOUT_TYPE_TERRAIN = 81,
    DOTA_LOADOUT_TYPE_RADIANT_CREEPS = 82,
    DOTA_LOADOUT_TYPE_DIRE_CREEPS = 83,
    DOTA_LOADOUT_TYPE_RADIANT_TOWER = 84,
    DOTA_LOADOUT_TYPE_DIRE_TOWER = 85,
    DOTA_LOADOUT_TYPE_VERSUS_SCREEN = 86,
    DOTA_LOADOUT_TYPE_STREAK_EFFECT = 87,
    DOTA_LOADOUT_TYPE_KILL_EFFECT = 88,
    DOTA_LOADOUT_TYPE_DEATH_EFFECT = 89,
    DOTA_LOADOUT_TYPE_HEAD_EFFECT = 90,
    DOTA_LOADOUT_TYPE_MAP_EFFECT = 91,
    DOTA_LOADOUT_TYPE_COURIER_EFFECT = 92,
    DOTA_LOADOUT_TYPE_RADIANT_SIEGE_CREEPS = 93,
    DOTA_LOADOUT_TYPE_DIRE_SIEGE_CREEPS = 94,
    DOTA_LOADOUT_TYPE_ROSHAN = 95,
    DOTA_PLAYER_LOADOUT_START = 67,
    DOTA_PLAYER_LOADOUT_END = 95,
    DOTA_LOADOUT_TYPE_NONE = 96,
    DOTA_LOADOUT_TYPE_COUNT = 97,
}

declare enum modifierfunction
{
    /** GetModifierPreAttack_BonusDamage */
    MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE = 0,
    /** GetModifierPreAttack_BonusDamage_Target */
    MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET = 1,
    /** GetModifierPreAttack_BonusDamage_Proc */
    MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC = 2,
    /** GetModifierPreAttack_BonusDamagePostCrit */
    MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT = 3,
    /** GetModifierBaseAttack_BonusDamage */
    MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE = 4,
    /** GetModifierProcAttack_BonusDamage_Physical */
    MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL = 5,
    /** GetModifierProcAttack_ConvertPhysicalToMagical */
    MODIFIER_PROPERTY_PROCATTACK_CONVERT_PHYSICAL_TO_MAGICAL = 6,
    /** GetModifierProcAttack_BonusDamage_Magical */
    MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL = 7,
    /** GetModifierProcAttack_BonusDamage_Pure */
    MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE = 8,
    /** GetModifierProcAttack_BonusDamage_Magical_Target */
    MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL_TARGET = 9,
    /** GetModifierProcAttack_Feedback */
    MODIFIER_PROPERTY_PROCATTACK_FEEDBACK = 10,
    /** GetModifierOverrideAttackDamage */
    MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE = 11,
    /** GetModifierPreAttack */
    MODIFIER_PROPERTY_PRE_ATTACK = 12,
    /** GetModifierInvisibilityLevel */
    MODIFIER_PROPERTY_INVISIBILITY_LEVEL = 13,
    /** GetModifierInvisibilityAttackBehaviorException */
    MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION = 14,
    /** GetModifierPersistentInvisibility */
    MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY = 15,
    /** GetModifierMoveSpeedBonus_Constant */
    MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT = 16,
    /** GetModifierMoveSpeedOverride */
    MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE = 17,
    /** GetModifierMoveSpeedBonus_Percentage */
    MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE = 18,
    /** GetModifierMoveSpeedBonus_Percentage_Unique */
    MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE = 19,
    /** GetModifierMoveSpeedBonus_Special_Boots */
    MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE = 20,
    /** GetModifierMoveSpeedBonus_Special_Boots_2 */
    MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2 = 21,
    /** GetModifierMoveSpeedBonus_Constant_Unique */
    MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE = 22,
    /** GetModifierMoveSpeedBonus_Constant_Unique_2 */
    MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2 = 23,
    /** GetModifierMoveSpeed_Absolute */
    MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE = 24,
    /** GetModifierMoveSpeed_AbsoluteMin */
    MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN = 25,
    /** GetModifierMoveSpeed_AbsoluteMax */
    MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX = 26,
    /** GetModifierIgnoreMovespeedLimit */
    MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT = 27,
    /** GetModifierMoveSpeed_Limit */
    MODIFIER_PROPERTY_MOVESPEED_LIMIT = 28,
    /** GetModifierAttackSpeedBaseOverride */
    MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE = 29,
    /** GetModifierFixedAttackRate */
    MODIFIER_PROPERTY_FIXED_ATTACK_RATE = 30,
    /** GetModifierAttackSpeedBonus_Constant */
    MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT = 31,
    /** GetModifierAttackSpeed_Limit */
    MODIFIER_PROPERTY_IGNORE_ATTACKSPEED_LIMIT = 32,
    /** GetModifierCooldownReduction_Constant */
    MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT = 33,
    /** GetModifierManacostReduction_Constant */
    MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT = 34,
    /** GetModifierBaseAttackTimeConstant */
    MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT = 35,
    /** GetModifierBaseAttackTimeConstant_Adjust */
    MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST = 36,
    /** GetModifierBaseAttackTimePercentage */
    MODIFIER_PROPERTY_BASE_ATTACK_TIME_PERCENTAGE = 37,
    /** GetModifierAttackPointConstant */
    MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT = 38,
    /** GetModifierBonusDamageOutgoing_Percentage */
    MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE = 39,
    /** GetModifierDamageOutgoing_Percentage */
    MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE = 40,
    /** GetModifierDamageOutgoing_Percentage_Illusion */
    MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION = 41,
    /** GetModifierDamageOutgoing_Percentage_Illusion_Amplify */
    MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY = 42,
    /** GetModifierTotalDamageOutgoing_Percentage */
    MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE = 43,
    /** GetModifierSpellAmplify_PercentageCreep */
    MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_CREEP = 44,
    /** GetModifierSpellAmplify_Percentage */
    MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE = 45,
    /** GetModifierSpellAmplify_PercentageUnique */
    MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE = 46,
    /** GetModifierHealAmplify_PercentageSource */
    MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE = 47,
    /** GetModifierHealAmplify_PercentageTarget */
    MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET = 48,
    /** GetModifierHPRegen_CanBeNegative */
    MODIFIER_PROPERTY_HP_REGEN_CAN_BE_NEGATIVE = 49,
    /** GetModifierHPRegenAmplify_Percentage */
    MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE = 50,
    /** GetModifierLifestealRegenAmplify_Percentage */
    MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE = 51,
    /** GetModifierSpellLifestealRegenAmplify_Percentage */
    MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE = 52,
    /** GetModifierMPRegenAmplify_Percentage */
    MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE = 53,
    /** GetModifierManaDrainAmplify_Percentage */
    MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE = 54,
    /** GetModifierMPRestoreAmplify_Percentage */
    MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE = 55,
    /** GetModifierBaseDamageOutgoing_Percentage */
    MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE = 56,
    /** GetModifierBaseDamageOutgoing_PercentageUnique */
    MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE = 57,
    /** GetModifierIncomingDamage_Percentage */
    MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE = 58,
    /** GetModifierIncomingPhysicalDamage_Percentage */
    MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE = 59,
    /** GetModifierIncomingPhysicalDamageConstant */
    MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT = 60,
    /** GetModifierIncomingSpellDamageConstant */
    MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT = 61,
    /** GetModifierEvasion_Constant */
    MODIFIER_PROPERTY_EVASION_CONSTANT = 62,
    /** GetModifierNegativeEvasion_Constant */
    MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT = 63,
    /** GetModifierStatusResistance */
    MODIFIER_PROPERTY_STATUS_RESISTANCE = 64,
    /** GetModifierStatusResistanceStacking */
    MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING = 65,
    /** GetModifierStatusResistanceCaster */
    MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER = 66,
    /** GetModifierAvoidDamage */
    MODIFIER_PROPERTY_AVOID_DAMAGE = 67,
    /** GetModifierAvoidSpell */
    MODIFIER_PROPERTY_AVOID_SPELL = 68,
    /** GetModifierMiss_Percentage */
    MODIFIER_PROPERTY_MISS_PERCENTAGE = 69,
    /** GetModifierPhysicalArmorBase_Percentage */
    MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE = 70,
    /** GetModifierPhysicalArmorTotal_Percentage */
    MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE = 71,
    /** GetModifierPhysicalArmorBonus */
    MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS = 72,
    /** GetModifierPhysicalArmorBonusUnique */
    MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE = 73,
    /** GetModifierPhysicalArmorBonusUniqueActive */
    MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE = 74,
    /** GetModifierPhysicalArmorBonusPost */
    MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_POST = 75,
    /** GetModifierIgnorePhysicalArmor */
    MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR = 76,
    /** GetModifierMagicalResistanceBaseReduction */
    MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION = 77,
    /** GetModifierMagicalResistanceDirectModification */
    MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION = 78,
    /** GetModifierMagicalResistanceBonus */
    MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS = 79,
    /** GetModifierMagicalResistanceBonusIllusions */
    MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS = 80,
    /** GetModifierMagicalResistanceDecrepifyUnique */
    MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE = 81,
    /** GetModifierBaseRegen */
    MODIFIER_PROPERTY_BASE_MANA_REGEN = 82,
    /** GetModifierConstantManaRegen */
    MODIFIER_PROPERTY_MANA_REGEN_CONSTANT = 83,
    /** GetModifierConstantManaRegenUnique */
    MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE = 84,
    /** GetModifierTotalPercentageManaRegen */
    MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE = 85,
    /** GetModifierConstantHealthRegen */
    MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT = 86,
    /** GetModifierHealthRegenPercentage */
    MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE = 87,
    /** GetModifierHealthRegenPercentageUnique */
    MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE = 88,
    /** GetModifierHealthBonus */
    MODIFIER_PROPERTY_HEALTH_BONUS = 89,
    /** GetModifierManaBonus */
    MODIFIER_PROPERTY_MANA_BONUS = 90,
    /** GetModifierExtraStrengthBonus */
    MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS = 91,
    /** GetModifierExtraHealthBonus */
    MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS = 92,
    /** GetModifierExtraManaBonus */
    MODIFIER_PROPERTY_EXTRA_MANA_BONUS = 93,
    /** GetModifierExtraManaBonusPercentage */
    MODIFIER_PROPERTY_EXTRA_MANA_BONUS_PERCENTAGE = 94,
    /** GetModifierExtraHealthPercentage */
    MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE = 95,
    /** GetModifierExtraManaPercentage */
    MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE = 96,
    /** GetModifierBonusStats_Strength */
    MODIFIER_PROPERTY_STATS_STRENGTH_BONUS = 97,
    /** GetModifierBonusStats_Agility */
    MODIFIER_PROPERTY_STATS_AGILITY_BONUS = 98,
    /** GetModifierBonusStats_Intellect */
    MODIFIER_PROPERTY_STATS_INTELLECT_BONUS = 99,
    /** GetModifierBonusStats_Strength_Percentage */
    MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE = 100,
    /** GetModifierBonusStats_Agility_Percentage */
    MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE = 101,
    /** GetModifierBonusStats_Intellect_Percentage */
    MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE = 102,
    /** GetModifierCastRangeBonus */
    MODIFIER_PROPERTY_CAST_RANGE_BONUS = 103,
    /** GetModifierCastRangeBonusPercentage */
    MODIFIER_PROPERTY_CAST_RANGE_BONUS_PERCENTAGE = 104,
    /** GetModifierCastRangeBonusTarget */
    MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET = 105,
    /** GetModifierCastRangeBonusStacking */
    MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING = 106,
    /** GetModifierAttackRangeOverride */
    MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE = 107,
    /** GetModifierAttackRangeBonus */
    MODIFIER_PROPERTY_ATTACK_RANGE_BONUS = 108,
    /** GetModifierAttackRangeBonusUnique */
    MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE = 109,
    /** GetModifierAttackRangeBonusPercentage */
    MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE = 110,
    /** GetModifierMaxAttackRange */
    MODIFIER_PROPERTY_MAX_ATTACK_RANGE = 111,
    /** GetModifierProjectileSpeedBonus */
    MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS = 112,
    /** GetModifierProjectileSpeedBonusPercentage */
    MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE = 113,
    /** GetModifierProjectileName */
    MODIFIER_PROPERTY_PROJECTILE_NAME = 114,
    /** ReincarnateTime */
    MODIFIER_PROPERTY_REINCARNATION = 115,
    /** GetModifierConstantRespawnTime */
    MODIFIER_PROPERTY_RESPAWNTIME = 116,
    /** GetModifierPercentageRespawnTime */
    MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE = 117,
    /** GetModifierStackingRespawnTime */
    MODIFIER_PROPERTY_RESPAWNTIME_STACKING = 118,
    /** GetModifierPercentageCooldown */
    MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE = 119,
    /** GetModifierPercentageCooldownOngoing */
    MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING = 120,
    /** GetModifierPercentageCasttime */
    MODIFIER_PROPERTY_CASTTIME_PERCENTAGE = 121,
    /** GetModifierPercentageAttackAnimTime */
    MODIFIER_PROPERTY_ATTACK_ANIM_TIME_PERCENTAGE = 122,
    /** GetModifierPercentageManacost */
    MODIFIER_PROPERTY_MANACOST_PERCENTAGE = 123,
    /** GetModifierPercentageManacostStacking */
    MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING = 124,
    /** GetModifierConstantDeathGoldCost */
    MODIFIER_PROPERTY_DEATHGOLDCOST = 125,
    /** GetModifierPercentageExpRateBoost */
    MODIFIER_PROPERTY_EXP_RATE_BOOST = 126,
    /** GetModifierPercentageGoldRateBoost */
    MODIFIER_PROPERTY_GOLD_RATE_BOOST = 127,
    /** GetModifierPreAttack_CriticalStrike */
    MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE = 128,
    /** GetModifierPreAttack_Target_CriticalStrike */
    MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE = 129,
    /** GetModifierMagical_ConstantBlock */
    MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK = 130,
    /** GetModifierPhysical_ConstantBlock */
    MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK = 131,
    /** GetModifierPhysical_ConstantBlockSpecial */
    MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL = 132,
    /** GetModifierPhysical_ConstantBlockUnavoidablePreArmor */
    MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR = 133,
    /** GetModifierTotal_ConstantBlock */
    MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK = 134,
    /** GetOverrideAnimation */
    MODIFIER_PROPERTY_OVERRIDE_ANIMATION = 135,
    /** GetOverrideAnimationWeight */
    MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT = 136,
    /** GetOverrideAnimationRate */
    MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE = 137,
    /** GetAbsorbSpell */
    MODIFIER_PROPERTY_ABSORB_SPELL = 138,
    /** GetReflectSpell */
    MODIFIER_PROPERTY_REFLECT_SPELL = 139,
    /** GetDisableAutoAttack */
    MODIFIER_PROPERTY_DISABLE_AUTOATTACK = 140,
    /** GetBonusDayVision */
    MODIFIER_PROPERTY_BONUS_DAY_VISION = 141,
    /** GetBonusNightVision */
    MODIFIER_PROPERTY_BONUS_NIGHT_VISION = 142,
    /** GetBonusNightVisionUnique */
    MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE = 143,
    /** GetBonusVisionPercentage */
    MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE = 144,
    /** GetFixedDayVision */
    MODIFIER_PROPERTY_FIXED_DAY_VISION = 145,
    /** GetFixedNightVision */
    MODIFIER_PROPERTY_FIXED_NIGHT_VISION = 146,
    /** GetMinHealth */
    MODIFIER_PROPERTY_MIN_HEALTH = 147,
    /** GetAbsoluteNoDamagePhysical */
    MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL = 148,
    /** GetAbsoluteNoDamageMagical */
    MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL = 149,
    /** GetAbsoluteNoDamagePure */
    MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE = 150,
    /** GetIsIllusion */
    MODIFIER_PROPERTY_IS_ILLUSION = 151,
    /** GetModifierIllusionLabel */
    MODIFIER_PROPERTY_ILLUSION_LABEL = 152,
    /** GetModifierStrongIllusion */
    MODIFIER_PROPERTY_STRONG_ILLUSION = 153,
    /** GetModifierSuperIllusion */
    MODIFIER_PROPERTY_SUPER_ILLUSION = 154,
    /** GetModifierSuperIllusionWithUltimate */
    MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE = 155,
    /** GetModifierXPDuringDeath */
    MODIFIER_PROPERTY_XP_DURING_DEATH = 156,
    /** GetModifierTurnRate_Percentage */
    MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE = 157,
    /** GetModifierTurnRate_Override */
    MODIFIER_PROPERTY_TURN_RATE_OVERRIDE = 158,
    /** GetDisableHealing */
    MODIFIER_PROPERTY_DISABLE_HEALING = 159,
    /** GetAlwaysAllowAttack */
    MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK = 160,
    /** GetAllowEtherealAttack */
    MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK = 161,
    /** GetOverrideAttackMagical */
    MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL = 162,
    /** GetModifierUnitStatsNeedsRefresh */
    MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH = 163,
    /** Unused */
    MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER = 164,
    /** Unused */
    MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER = 165,
    /** GetModifierUnitDisllowUpgrading */
    MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING = 166,
    /** GetModifierDodgeProjectile */
    MODIFIER_PROPERTY_DODGE_PROJECTILE = 167,
    /** GetTriggerCosmeticAndEndAttack */
    MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK = 168,
    /** GetModifierMaxDebuffDuration */
    MODIFIER_PROPERTY_MAX_DEBUFF_DURATION = 169,
    /** GetPrimaryStatDamageMultiplier */
    MODIFIER_PROPERTY_PRIMARY_STAT_DAMAGE_MULTIPLIER = 170,
    /** GetModifierPreAttack_DeadlyBlow */
    MODIFIER_PROPERTY_PREATTACK_DEADLY_BLOW = 171,
    /** GetAlwaysAutoAttackWhileHoldPosition */
    MODIFIER_PROPERTY_ALWAYS_AUTOATTACK_WHILE_HOLD_POSITION = 172,
    /** OnSpellTargetReady */
    MODIFIER_EVENT_ON_SPELL_TARGET_READY = 173,
    /** OnAttackRecord */
    MODIFIER_EVENT_ON_ATTACK_RECORD = 174,
    /** OnAttackStart */
    MODIFIER_EVENT_ON_ATTACK_START = 175,
    /** OnAttack */
    MODIFIER_EVENT_ON_ATTACK = 176,
    /** OnAttackLanded */
    MODIFIER_EVENT_ON_ATTACK_LANDED = 177,
    /** OnAttackFail */
    MODIFIER_EVENT_ON_ATTACK_FAIL = 178,
    /** OnAttackAllied */
    MODIFIER_EVENT_ON_ATTACK_ALLIED = 179,
    /** OnProjectileDodge */
    MODIFIER_EVENT_ON_PROJECTILE_DODGE = 180,
    /** OnOrder */
    MODIFIER_EVENT_ON_ORDER = 181,
    /** OnUnitMoved */
    MODIFIER_EVENT_ON_UNIT_MOVED = 182,
    /** OnAbilityStart */
    MODIFIER_EVENT_ON_ABILITY_START = 183,
    /** OnAbilityExecuted */
    MODIFIER_EVENT_ON_ABILITY_EXECUTED = 184,
    /** OnAbilityFullyCast */
    MODIFIER_EVENT_ON_ABILITY_FULLY_CAST = 185,
    /** OnBreakInvisibility */
    MODIFIER_EVENT_ON_BREAK_INVISIBILITY = 186,
    /** OnAbilityEndChannel */
    MODIFIER_EVENT_ON_ABILITY_END_CHANNEL = 187,
    /** Unused */
    MODIFIER_EVENT_ON_PROCESS_UPGRADE = 188,
    /** Unused */
    MODIFIER_EVENT_ON_REFRESH = 189,
    /** OnTakeDamage */
    MODIFIER_EVENT_ON_TAKEDAMAGE = 190,
    /** OnDamagePrevented */
    MODIFIER_EVENT_ON_DEATH_PREVENTED = 191,
    /** OnStateChanged */
    MODIFIER_EVENT_ON_STATE_CHANGED = 192,
    /** Unused */
    MODIFIER_EVENT_ON_ORB_EFFECT = 193,
    /** OnProcessCleave */
    MODIFIER_EVENT_ON_PROCESS_CLEAVE = 194,
    /** OnDamageCalculated */
    MODIFIER_EVENT_ON_DAMAGE_CALCULATED = 195,
    /** OnMagicDamageCalculated */
    MODIFIER_EVENT_ON_MAGIC_DAMAGE_CALCULATED = 196,
    /** OnAttacked */
    MODIFIER_EVENT_ON_ATTACKED = 197,
    /** OnDeath */
    MODIFIER_EVENT_ON_DEATH = 198,
    /** OnRespawn */
    MODIFIER_EVENT_ON_RESPAWN = 199,
    /** OnSpentMana */
    MODIFIER_EVENT_ON_SPENT_MANA = 200,
    /** OnTeleporting */
    MODIFIER_EVENT_ON_TELEPORTING = 201,
    /** OnTeleported */
    MODIFIER_EVENT_ON_TELEPORTED = 202,
    /** OnSetLocation */
    MODIFIER_EVENT_ON_SET_LOCATION = 203,
    /** OnHealthGained */
    MODIFIER_EVENT_ON_HEALTH_GAINED = 204,
    /** OnManaGained */
    MODIFIER_EVENT_ON_MANA_GAINED = 205,
    /** OnTakeDamageKillCredit */
    MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT = 206,
    /** OnHeroKilled */
    MODIFIER_EVENT_ON_HERO_KILLED = 207,
    /** OnHealReceived */
    MODIFIER_EVENT_ON_HEAL_RECEIVED = 208,
    /** OnBuildingKilled */
    MODIFIER_EVENT_ON_BUILDING_KILLED = 209,
    /** OnModelChanged */
    MODIFIER_EVENT_ON_MODEL_CHANGED = 210,
    /** OnModifierAdded */
    MODIFIER_EVENT_ON_MODIFIER_ADDED = 211,
    /** OnTooltip */
    MODIFIER_PROPERTY_TOOLTIP = 212,
    /** GetModifierModelChange */
    MODIFIER_PROPERTY_MODEL_CHANGE = 213,
    /** GetModifierModelScale */
    MODIFIER_PROPERTY_MODEL_SCALE = 214,
    /** GetModifierModelScaleAnimateTime */
    MODIFIER_PROPERTY_MODEL_SCALE_ANIMATE_TIME = 215,
    /** GetModifierScepter */
    MODIFIER_PROPERTY_IS_SCEPTER = 216,
    /** GetModifierShard */
    MODIFIER_PROPERTY_IS_SHARD = 217,
    /** GetModifierRadarCooldownReduction */
    MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION = 218,
    /** GetActivityTranslationModifiers */
    MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS = 219,
    /** GetAttackSound */
    MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND = 220,
    /** GetUnitLifetimeFraction */
    MODIFIER_PROPERTY_LIFETIME_FRACTION = 221,
    /** GetModifierProvidesFOWVision */
    MODIFIER_PROPERTY_PROVIDES_FOW_POSITION = 222,
    /** GetModifierSpellsRequireHP */
    MODIFIER_PROPERTY_SPELLS_REQUIRE_HP = 223,
    /** GetForceDrawOnMinimap */
    MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP = 224,
    /** GetModifierDisableTurning */
    MODIFIER_PROPERTY_DISABLE_TURNING = 225,
    /** GetModifierIgnoreCastAngle */
    MODIFIER_PROPERTY_IGNORE_CAST_ANGLE = 226,
    /** GetModifierChangeAbilityValue */
    MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE = 227,
    /** GetModifierOverrideAbilitySpecial */
    MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL = 228,
    /** GetModifierOverrideAbilitySpecialValue */
    MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE = 229,
    /** GetModifierAbilityLayout */
    MODIFIER_PROPERTY_ABILITY_LAYOUT = 230,
    /** OnDominated */
    MODIFIER_EVENT_ON_DOMINATED = 231,
    /** OnKill */
    MODIFIER_EVENT_ON_KILL = 232,
    /** OnAssist */
    MODIFIER_EVENT_ON_ASSIST = 233,
    /** GetModifierTempestDouble */
    MODIFIER_PROPERTY_TEMPEST_DOUBLE = 234,
    /** PreserveParticlesOnModelChanged */
    MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE = 235,
    /** OnAttackFinished */
    MODIFIER_EVENT_ON_ATTACK_FINISHED = 236,
    /** GetModifierIgnoreCooldown */
    MODIFIER_PROPERTY_IGNORE_COOLDOWN = 237,
    /** GetModifierCanAttackTrees */
    MODIFIER_PROPERTY_CAN_ATTACK_TREES = 238,
    /** GetVisualZDelta */
    MODIFIER_PROPERTY_VISUAL_Z_DELTA = 239,
    /** GetVisualZSpeedBaseOverride */
    MODIFIER_PROPERTY_VISUAL_Z_SPEED_BASE_OVERRIDE = 240,
    MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION = 241,
    /** GetModifierNoVisionOfAttacker */
    MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER = 242,
    /** OnTooltip2 */
    MODIFIER_PROPERTY_TOOLTIP2 = 243,
    /** OnAttackRecordDestroy */
    MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY = 244,
    /** OnProjectileObstructionHit */
    MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT = 245,
    /** GetSuppressTeleport */
    MODIFIER_PROPERTY_SUPPRESS_TELEPORT = 246,
    /** OnAttackCancelled */
    MODIFIER_EVENT_ON_ATTACK_CANCELLED = 247,
    /** GetSuppressCleave */
    MODIFIER_PROPERTY_SUPPRESS_CLEAVE = 248,
    /** BotAttackScoreBonus */
    MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS = 249,
    /** GetModifierAttackSpeedReductionPercentage */
    MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE = 250,
    /** GetModifierMoveSpeedReductionPercentage */
    MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE = 251,
    MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET = 252,
    /** GetModifierAttackSpeedPercentage */
    MODIFIER_PROPERTY_ATTACKSPEED_PERCENTAGE = 253,
    /** OnAttemptProjectileDodge */
    MODIFIER_EVENT_ON_ATTEMPT_PROJECTILE_DODGE = 254,
    /** OnPreDebuffApplied */
    MODIFIER_EVENT_ON_PREDEBUFF_APPLIED = 255,
    /** GetModifierPercentageCooldownStacking */
    MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING = 256,
    /** GetModifierSpellRedirectTarget */
    MODIFIER_PROPERTY_SPELL_REDIRECT_TARGET = 257,
    /** GetModifierTurnRateConstant */
    MODIFIER_PROPERTY_TURN_RATE_CONSTANT = 258,
    /** GetModifierIsRatPack */
    MODIFIER_PROPERTY_RAT_PACK = 259,
    /** GetModifierPhysicalDamageOutgoing_Percentage */
    MODIFIER_PROPERTY_PHYSICALDAMAGEOUTGOING_PERCENTAGE = 260,
    /** GetModifierKnockbackAmplification_Percentage */
    MODIFIER_PROPERTY_KNOCKBACK_AMPLIFICATION_PERCENTAGE = 261,
    MODIFIER_FUNCTION_LAST = 262,
    MODIFIER_FUNCTION_INVALID = 65535,
}

declare enum modifierstate
{
    MODIFIER_STATE_ROOTED = 0,
    MODIFIER_STATE_DISARMED = 1,
    MODIFIER_STATE_ATTACK_IMMUNE = 2,
    MODIFIER_STATE_SILENCED = 3,
    MODIFIER_STATE_MUTED = 4,
    MODIFIER_STATE_STUNNED = 5,
    MODIFIER_STATE_HEXED = 6,
    MODIFIER_STATE_INVISIBLE = 7,
    MODIFIER_STATE_INVULNERABLE = 8,
    MODIFIER_STATE_MAGIC_IMMUNE = 9,
    MODIFIER_STATE_PROVIDES_VISION = 10,
    MODIFIER_STATE_NIGHTMARED = 11,
    MODIFIER_STATE_BLOCK_DISABLED = 12,
    MODIFIER_STATE_EVADE_DISABLED = 13,
    MODIFIER_STATE_UNSELECTABLE = 14,
    MODIFIER_STATE_CANNOT_TARGET_ENEMIES = 15,
    MODIFIER_STATE_CANNOT_TARGET_BUILDINGS = 16,
    MODIFIER_STATE_CANNOT_MISS = 17,
    MODIFIER_STATE_SPECIALLY_DENIABLE = 18,
    MODIFIER_STATE_FROZEN = 19,
    MODIFIER_STATE_COMMAND_RESTRICTED = 20,
    MODIFIER_STATE_NOT_ON_MINIMAP = 21,
    MODIFIER_STATE_LOW_ATTACK_PRIORITY = 22,
    MODIFIER_STATE_NO_HEALTH_BAR = 23,
    MODIFIER_STATE_NO_HEALTH_BAR_FOR_ENEMIES = 24,
    MODIFIER_STATE_FLYING = 25,
    MODIFIER_STATE_NO_UNIT_COLLISION = 26,
    MODIFIER_STATE_NO_TEAM_MOVE_TO = 27,
    MODIFIER_STATE_NO_TEAM_SELECT = 28,
    MODIFIER_STATE_PASSIVES_DISABLED = 29,
    MODIFIER_STATE_DOMINATED = 30,
    MODIFIER_STATE_BLIND = 31,
    MODIFIER_STATE_OUT_OF_GAME = 32,
    MODIFIER_STATE_FAKE_ALLY = 33,
    MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY = 34,
    MODIFIER_STATE_TRUESIGHT_IMMUNE = 35,
    MODIFIER_STATE_UNTARGETABLE = 36,
    MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS = 37,
    MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES = 38,
    MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES = 39,
    MODIFIER_STATE_UNSLOWABLE = 40,
    MODIFIER_STATE_TETHERED = 41,
    MODIFIER_STATE_IGNORING_STOP_ORDERS = 42,
    MODIFIER_STATE_FEARED = 43,
    MODIFIER_STATE_TAUNTED = 44,
    MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED = 45,
    MODIFIER_STATE_FORCED_FLYING_VISION = 46,
    MODIFIER_STATE_ATTACK_ALLIES = 47,
    MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS = 48,
    MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE = 49,
    MODIFIER_STATE_SPECIALLY_UNDENIABLE = 50,
    MODIFIER_STATE_ALLOW_PATHING_THROUGH_OBSTRUCTIONS = 51,
    MODIFIER_STATE_LAST = 52,
}

declare enum DOTAModifierAttribute_t
{
    MODIFIER_ATTRIBUTE_NONE = 0,
    MODIFIER_ATTRIBUTE_PERMANENT = 1,
    MODIFIER_ATTRIBUTE_MULTIPLE = 2,
    MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE = 4,
    MODIFIER_ATTRIBUTE_AURA_PRIORITY = 8,
    MODIFIER_ATTRIBUTE_IGNORE_DODGE = 16,
}

declare enum Attributes
{
    DOTA_ATTRIBUTE_STRENGTH = 0,
    DOTA_ATTRIBUTE_AGILITY = 1,
    DOTA_ATTRIBUTE_INTELLECT = 2,
    DOTA_ATTRIBUTE_MAX = 3,
    DOTA_ATTRIBUTE_INVALID = -1,
}

declare enum ParticleAttachment_t
{
    PATTACH_INVALID = -1,
    PATTACH_ABSORIGIN = 0,
    PATTACH_ABSORIGIN_FOLLOW = 1,
    PATTACH_CUSTOMORIGIN = 2,
    PATTACH_CUSTOMORIGIN_FOLLOW = 3,
    PATTACH_POINT = 4,
    PATTACH_POINT_FOLLOW = 5,
    PATTACH_EYES_FOLLOW = 6,
    PATTACH_OVERHEAD_FOLLOW = 7,
    PATTACH_WORLDORIGIN = 8,
    PATTACH_ROOTBONE_FOLLOW = 9,
    PATTACH_RENDERORIGIN_FOLLOW = 10,
    PATTACH_MAIN_VIEW = 11,
    PATTACH_WATERWAKE = 12,
    PATTACH_CENTER_FOLLOW = 13,
    PATTACH_CUSTOM_GAME_STATE_1 = 14,
    PATTACH_HEALTHBAR = 15,
    MAX_PATTACH_TYPES = 16,
}

declare enum DOTA_MOTION_CONTROLLER_PRIORITY
{
    DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST = 0,
    DOTA_MOTION_CONTROLLER_PRIORITY_LOW = 1,
    DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM = 2,
    DOTA_MOTION_CONTROLLER_PRIORITY_HIGH = 3,
    DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST = 4,
}

declare enum DOTASpeechType_t
{
    DOTA_SPEECH_USER_INVALID = 0,
    DOTA_SPEECH_USER_SINGLE = 1,
    DOTA_SPEECH_USER_TEAM = 2,
    DOTA_SPEECH_USER_TEAM_NEARBY = 3,
    DOTA_SPEECH_USER_NEARBY = 4,
    DOTA_SPEECH_USER_ALL = 5,
    DOTA_SPEECH_GOOD_TEAM = 6,
    DOTA_SPEECH_BAD_TEAM = 7,
    DOTA_SPEECH_SPECTATOR = 8,
    DOTA_SPEECH_USER_TEAM_NOSPECTATOR = 9,
    DOTA_SPEECH_RECIPIENT_TYPE_MAX = 10,
}

declare enum DOTAAbilitySpeakTrigger_t
{
    DOTA_ABILITY_SPEAK_START_ACTION_PHASE = 0,
    DOTA_ABILITY_SPEAK_CAST = 1,
}

declare enum DotaCustomUIType_t
{
    DOTA_CUSTOM_UI_TYPE_HUD = 0,
    DOTA_CUSTOM_UI_TYPE_HERO_SELECTION = 1,
    DOTA_CUSTOM_UI_TYPE_PREGAME_STRATEGY = 2,
    DOTA_CUSTOM_UI_TYPE_GAME_INFO = 3,
    DOTA_CUSTOM_UI_TYPE_GAME_SETUP = 4,
    DOTA_CUSTOM_UI_TYPE_FLYOUT_SCOREBOARD = 5,
    DOTA_CUSTOM_UI_TYPE_HUD_TOP_BAR = 6,
    DOTA_CUSTOM_UI_TYPE_END_SCREEN = 7,
    DOTA_CUSTOM_UI_TYPE_COUNT = 8,
    DOTA_CUSTOM_UI_TYPE_INVALID = -1,
}

declare enum DotaDefaultUIElement_t
{
    DOTA_DEFAULT_UI_INVALID = -1,
    DOTA_DEFAULT_UI_TOP_TIMEOFDAY = 0,
    DOTA_DEFAULT_UI_TOP_HEROES = 1,
    DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD = 2,
    DOTA_DEFAULT_UI_ACTION_PANEL = 3,
    DOTA_DEFAULT_UI_ACTION_MINIMAP = 4,
    DOTA_DEFAULT_UI_INVENTORY_PANEL = 5,
    DOTA_DEFAULT_UI_INVENTORY_SHOP = 6,
    DOTA_DEFAULT_UI_INVENTORY_ITEMS = 7,
    DOTA_DEFAULT_UI_INVENTORY_QUICKBUY = 8,
    DOTA_DEFAULT_UI_INVENTORY_COURIER = 9,
    DOTA_DEFAULT_UI_INVENTORY_PROTECT = 10,
    DOTA_DEFAULT_UI_INVENTORY_GOLD = 11,
    DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS = 12,
    DOTA_DEFAULT_UI_SHOP_COMMONITEMS = 13,
    DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS = 14,
    DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME = 15,
    DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK = 16,
    DOTA_DEFAULT_UI_HERO_SELECTION_HEADER = 17,
    DOTA_DEFAULT_UI_TOP_MENU_BUTTONS = 18,
    DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND = 19,
    DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM = 20,
    DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM = 21,
    DOTA_DEFAULT_UI_TOP_BAR_SCORE = 22,
    DOTA_DEFAULT_UI_ENDGAME = 23,
    DOTA_DEFAULT_UI_ENDGAME_CHAT = 24,
    DOTA_DEFAULT_UI_QUICK_STATS = 25,
    DOTA_DEFAULT_UI_PREGAME_STRATEGYUI = 26,
    DOTA_DEFAULT_UI_KILLCAM = 27,
    DOTA_DEFAULT_UI_FIGHT_RECAP = 28,
    DOTA_DEFAULT_UI_TOP_BAR = 29,
    DOTA_DEFAULT_UI_CUSTOMUI_BEHIND_HUD_ELEMENTS = 30,
    DOTA_DEFAULT_UI_AGHANIMS_STATUS = 31,
    DOTA_DEFAULT_UI_ELEMENT_COUNT = 32,
}

declare enum PlayerUltimateStateOrTime_t
{
    PLAYER_ULTIMATE_STATE_READY = 0,
    PLAYER_ULTIMATE_STATE_NO_MANA = -1,
    PLAYER_ULTIMATE_STATE_NOT_LEVELED = -2,
    PLAYER_ULTIMATE_STATE_HIDDEN = -3,
}

declare enum PlayerOrderIssuer_t
{
    DOTA_ORDER_ISSUER_SELECTED_UNITS = 0,
    DOTA_ORDER_ISSUER_CURRENT_UNIT_ONLY = 1,
    DOTA_ORDER_ISSUER_HERO_ONLY = 2,
    DOTA_ORDER_ISSUER_PASSED_UNIT_ONLY = 3,
}

declare enum OrderQueueBehavior_t
{
    DOTA_ORDER_QUEUE_DEFAULT = 0,
    DOTA_ORDER_QUEUE_NEVER = 1,
    DOTA_ORDER_QUEUE_ALWAYS = 2,
}

declare enum CLICK_BEHAVIORS
{
    DOTA_CLICK_BEHAVIOR_NONE = 0,
    DOTA_CLICK_BEHAVIOR_MOVE = 1,
    DOTA_CLICK_BEHAVIOR_ATTACK = 2,
    DOTA_CLICK_BEHAVIOR_CAST = 3,
    DOTA_CLICK_BEHAVIOR_DROP_ITEM = 4,
    DOTA_CLICK_BEHAVIOR_DROP_SHOP_ITEM = 5,
    DOTA_CLICK_BEHAVIOR_DRAG = 6,
    DOTA_CLICK_BEHAVIOR_LEARN_ABILITY = 7,
    DOTA_CLICK_BEHAVIOR_PATROL = 8,
    DOTA_CLICK_BEHAVIOR_VECTOR_CAST = 9,
    DOTA_CLICK_BEHAVIOR_UNUSED = 10,
    DOTA_CLICK_BEHAVIOR_RADAR = 11,
    DOTA_CLICK_BEHAVIOR_LAST = 12,
}

declare enum AbilityLearnResult_t
{
    ABILITY_CAN_BE_UPGRADED = 0,
    ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE = 1,
    ABILITY_CANNOT_BE_UPGRADED_AT_MAX = 2,
    ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL = 3,
    ABILITY_NOT_LEARNABLE = 4,
}

declare enum DOTAKeybindCommand_t
{
    DOTA_KEYBIND_NONE = 0,
    DOTA_KEYBIND_FIRST = 1,
    DOTA_KEYBIND_CAMERA_UP = 1,
    DOTA_KEYBIND_CAMERA_DOWN = 2,
    DOTA_KEYBIND_CAMERA_LEFT = 3,
    DOTA_KEYBIND_CAMERA_RIGHT = 4,
    DOTA_KEYBIND_CAMERA_GRIP = 5,
    DOTA_KEYBIND_CAMERA_YAW_GRIP = 6,
    DOTA_KEYBIND_CAMERA_SAVED_POSITION_1 = 7,
    DOTA_KEYBIND_CAMERA_SAVED_POSITION_2 = 8,
    DOTA_KEYBIND_CAMERA_SAVED_POSITION_3 = 9,
    DOTA_KEYBIND_CAMERA_SAVED_POSITION_4 = 10,
    DOTA_KEYBIND_CAMERA_SAVED_POSITION_5 = 11,
    DOTA_KEYBIND_CAMERA_SAVED_POSITION_6 = 12,
    DOTA_KEYBIND_CAMERA_SAVED_POSITION_7 = 13,
    DOTA_KEYBIND_CAMERA_SAVED_POSITION_8 = 14,
    DOTA_KEYBIND_CAMERA_SAVED_POSITION_9 = 15,
    DOTA_KEYBIND_CAMERA_SAVED_POSITION_10 = 16,
    DOTA_KEYBIND_HERO_ATTACK = 17,
    DOTA_KEYBIND_HERO_MOVE = 18,
    DOTA_KEYBIND_HERO_MOVE_DIRECTION = 19,
    DOTA_KEYBIND_PATROL = 20,
    DOTA_KEYBIND_HERO_STOP = 21,
    DOTA_KEYBIND_HERO_HOLD = 22,
    DOTA_KEYBIND_HERO_SELECT = 23,
    DOTA_KEYBIND_COURIER_SELECT = 24,
    DOTA_KEYBIND_COURIER_DELIVER = 25,
    DOTA_KEYBIND_COURIER_BURST = 26,
    DOTA_KEYBIND_COURIER_SHIELD = 27,
    DOTA_KEYBIND_PAUSE = 28,
    DOTA_SELECT_ALL = 29,
    DOTA_SELECT_ALL_OTHERS = 30,
    DOTA_RECENT_EVENT = 31,
    DOTA_KEYBIND_CHAT_TEAM = 32,
    DOTA_KEYBIND_CHAT_GLOBAL = 33,
    DOTA_KEYBIND_CHAT_TEAM2 = 34,
    DOTA_KEYBIND_CHAT_GLOBAL2 = 35,
    DOTA_KEYBIND_CHAT_VOICE_PARTY = 36,
    DOTA_KEYBIND_CHAT_VOICE_TEAM = 37,
    DOTA_KEYBIND_CHAT_WHEEL = 38,
    DOTA_KEYBIND_CHAT_WHEEL2 = 39,
    DOTA_KEYBIND_CHAT_WHEEL_CARE = 40,
    DOTA_KEYBIND_CHAT_WHEEL_BACK = 41,
    DOTA_KEYBIND_CHAT_WHEEL_NEED_WARDS = 42,
    DOTA_KEYBIND_CHAT_WHEEL_STUN = 43,
    DOTA_KEYBIND_CHAT_WHEEL_HELP = 44,
    DOTA_KEYBIND_CHAT_WHEEL_GET_PUSH = 45,
    DOTA_KEYBIND_CHAT_WHEEL_GOOD_JOB = 46,
    DOTA_KEYBIND_CHAT_WHEEL_MISSING = 47,
    DOTA_KEYBIND_CHAT_WHEEL_MISSING_TOP = 48,
    DOTA_KEYBIND_CHAT_WHEEL_MISSING_MIDDLE = 49,
    DOTA_KEYBIND_CHAT_WHEEL_MISSING_BOTTOM = 50,
    DOTA_KEYBIND_HERO_CHAT_WHEEL = 51,
    DOTA_KEYBIND_SPRAY_WHEEL = 52,
    DOTA_KEYBIND_ABILITY_PRIMARY1 = 53,
    DOTA_KEYBIND_ABILITY_PRIMARY2 = 54,
    DOTA_KEYBIND_ABILITY_PRIMARY3 = 55,
    DOTA_KEYBIND_ABILITY_SECONDARY1 = 56,
    DOTA_KEYBIND_ABILITY_SECONDARY2 = 57,
    DOTA_KEYBIND_ABILITY_ULTIMATE = 58,
    DOTA_KEYBIND_TALENT_UPGRADE_LEFT = 59,
    DOTA_KEYBIND_TALENT_UPGRADE_RIGHT = 60,
    DOTA_KEYBIND_TALENT_UPGRADE_ATTRIBUTE = 61,
    DOTA_KEYBIND_ABILITY_PRIMARY1_QUICKCAST = 62,
    DOTA_KEYBIND_ABILITY_PRIMARY2_QUICKCAST = 63,
    DOTA_KEYBIND_ABILITY_PRIMARY3_QUICKCAST = 64,
    DOTA_KEYBIND_ABILITY_SECONDARY1_QUICKCAST = 65,
    DOTA_KEYBIND_ABILITY_SECONDARY2_QUICKCAST = 66,
    DOTA_KEYBIND_ABILITY_ULTIMATE_QUICKCAST = 67,
    DOTA_KEYBIND_ABILITY_PRIMARY1_EXPLICIT_AUTOCAST = 68,
    DOTA_KEYBIND_ABILITY_PRIMARY2_EXPLICIT_AUTOCAST = 69,
    DOTA_KEYBIND_ABILITY_PRIMARY3_EXPLICIT_AUTOCAST = 70,
    DOTA_KEYBIND_ABILITY_SECONDARY1_EXPLICIT_AUTOCAST = 71,
    DOTA_KEYBIND_ABILITY_SECONDARY2_EXPLICIT_AUTOCAST = 72,
    DOTA_KEYBIND_ABILITY_ULTIMATE_EXPLICIT_AUTOCAST = 73,
    DOTA_KEYBIND_ABILITY_PRIMARY1_QUICKCAST_AUTOCAST = 74,
    DOTA_KEYBIND_ABILITY_PRIMARY2_QUICKCAST_AUTOCAST = 75,
    DOTA_KEYBIND_ABILITY_PRIMARY3_QUICKCAST_AUTOCAST = 76,
    DOTA_KEYBIND_ABILITY_SECONDARY1_QUICKCAST_AUTOCAST = 77,
    DOTA_KEYBIND_ABILITY_SECONDARY2_QUICKCAST_AUTOCAST = 78,
    DOTA_KEYBIND_ABILITY_ULTIMATE_QUICKCAST_AUTOCAST = 79,
    DOTA_KEYBIND_ABILITY_PRIMARY1_AUTOMATIC_AUTOCAST = 80,
    DOTA_KEYBIND_ABILITY_PRIMARY2_AUTOMATIC_AUTOCAST = 81,
    DOTA_KEYBIND_ABILITY_PRIMARY3_AUTOMATIC_AUTOCAST = 82,
    DOTA_KEYBIND_ABILITY_SECONDARY1_AUTOMATIC_AUTOCAST = 83,
    DOTA_KEYBIND_ABILITY_SECONDARY2_AUTOMATIC_AUTOCAST = 84,
    DOTA_KEYBIND_ABILITY_ULTIMATE_AUTOMATIC_AUTOCAST = 85,
    DOTA_KEYBIND_INVENTORY1 = 86,
    DOTA_KEYBIND_INVENTORY2 = 87,
    DOTA_KEYBIND_INVENTORY3 = 88,
    DOTA_KEYBIND_INVENTORY4 = 89,
    DOTA_KEYBIND_INVENTORY5 = 90,
    DOTA_KEYBIND_INVENTORY6 = 91,
    DOTA_KEYBIND_INVENTORYTP = 92,
    DOTA_KEYBIND_INVENTORYNEUTRAL = 93,
    DOTA_KEYBIND_INVENTORY1_QUICKCAST = 94,
    DOTA_KEYBIND_INVENTORY2_QUICKCAST = 95,
    DOTA_KEYBIND_INVENTORY3_QUICKCAST = 96,
    DOTA_KEYBIND_INVENTORY4_QUICKCAST = 97,
    DOTA_KEYBIND_INVENTORY5_QUICKCAST = 98,
    DOTA_KEYBIND_INVENTORY6_QUICKCAST = 99,
    DOTA_KEYBIND_INVENTORYTP_QUICKCAST = 100,
    DOTA_KEYBIND_INVENTORYNEUTRAL_QUICKCAST = 101,
    DOTA_KEYBIND_INVENTORY1_AUTOCAST = 102,
    DOTA_KEYBIND_INVENTORY2_AUTOCAST = 103,
    DOTA_KEYBIND_INVENTORY3_AUTOCAST = 104,
    DOTA_KEYBIND_INVENTORY4_AUTOCAST = 105,
    DOTA_KEYBIND_INVENTORY5_AUTOCAST = 106,
    DOTA_KEYBIND_INVENTORY6_AUTOCAST = 107,
    DOTA_KEYBIND_INVENTORYTP_AUTOCAST = 108,
    DOTA_KEYBIND_INVENTORYNEUTRAL_AUTOCAST = 109,
    DOTA_KEYBIND_INVENTORY1_QUICKAUTOCAST = 110,
    DOTA_KEYBIND_INVENTORY2_QUICKAUTOCAST = 111,
    DOTA_KEYBIND_INVENTORY3_QUICKAUTOCAST = 112,
    DOTA_KEYBIND_INVENTORY4_QUICKAUTOCAST = 113,
    DOTA_KEYBIND_INVENTORY5_QUICKAUTOCAST = 114,
    DOTA_KEYBIND_INVENTORY6_QUICKAUTOCAST = 115,
    DOTA_KEYBIND_INVENTORYTP_QUICKAUTOCAST = 116,
    DOTA_KEYBIND_INVENTORYNEUTRAL_QUICKAUTOCAST = 117,
    DOTA_KEYBIND_CONTROL_GROUP1 = 118,
    DOTA_KEYBIND_CONTROL_GROUP2 = 119,
    DOTA_KEYBIND_CONTROL_GROUP3 = 120,
    DOTA_KEYBIND_CONTROL_GROUP4 = 121,
    DOTA_KEYBIND_CONTROL_GROUP5 = 122,
    DOTA_KEYBIND_CONTROL_GROUP6 = 123,
    DOTA_KEYBIND_CONTROL_GROUP7 = 124,
    DOTA_KEYBIND_CONTROL_GROUP8 = 125,
    DOTA_KEYBIND_CONTROL_GROUP9 = 126,
    DOTA_KEYBIND_CONTROL_GROUP10 = 127,
    DOTA_KEYBIND_CONTROL_GROUPCYCLE = 128,
    DOTA_KEYBIND_SELECT_ALLY1 = 129,
    DOTA_KEYBIND_SELECT_ALLY2 = 130,
    DOTA_KEYBIND_SELECT_ALLY3 = 131,
    DOTA_KEYBIND_SELECT_ALLY4 = 132,
    DOTA_KEYBIND_SELECT_ALLY5 = 133,
    DOTA_KEYBIND_SHOP_TOGGLE = 134,
    DOTA_KEYBIND_SCOREBOARD_TOGGLE = 135,
    DOTA_KEYBIND_COMBATLOG_TOGGLE = 136,
    DOTA_KEYBIND_SCREENSHOT = 137,
    DOTA_KEYBIND_ESCAPE = 138,
    DOTA_KEYBIND_CONSOLE = 139,
    DOTA_KEYBIND_DEATH_SUMMARY = 140,
    DOTA_KEYBIND_LEARN_ABILITIES = 141,
    DOTA_KEYBIND_LEARN_STATS = 142,
    DOTA_KEYBIND_ACTIVATE_GLYPH = 143,
    DOTA_KEYBIND_ACTIVATE_RADAR = 144,
    DOTA_KEYBIND_PURCHASE_QUICKBUY = 145,
    DOTA_KEYBIND_PURCHASE_STICKY = 146,
    DOTA_KEYBIND_GRAB_STASH_ITEMS = 147,
    DOTA_KEYBIND_TOGGLE_AUTOATTACK = 148,
    DOTA_KEYBIND_TAUNT = 149,
    DOTA_KEYBIND_SHOP_CONSUMABLES = 150,
    DOTA_KEYBIND_SHOP_ATTRIBUTES = 151,
    DOTA_KEYBIND_SHOP_ARMAMENTS = 152,
    DOTA_KEYBIND_SHOP_ARCANE = 153,
    DOTA_KEYBIND_SHOP_BASICS = 154,
    DOTA_KEYBIND_SHOP_SUPPORT = 155,
    DOTA_KEYBIND_SHOP_CASTER = 156,
    DOTA_KEYBIND_SHOP_WEAPONS = 157,
    DOTA_KEYBIND_SHOP_ARMOR = 158,
    DOTA_KEYBIND_SHOP_ARTIFACTS = 159,
    DOTA_KEYBIND_SHOP_SIDE_PAGE_1 = 160,
    DOTA_KEYBIND_SHOP_SIDE_PAGE_2 = 161,
    DOTA_KEYBIND_SHOP_SECRET = 162,
    DOTA_KEYBIND_SHOP_SEARCHBOX = 163,
    DOTA_KEYBIND_SHOP_SLOT_1 = 164,
    DOTA_KEYBIND_SHOP_SLOT_2 = 165,
    DOTA_KEYBIND_SHOP_SLOT_3 = 166,
    DOTA_KEYBIND_SHOP_SLOT_4 = 167,
    DOTA_KEYBIND_SHOP_SLOT_5 = 168,
    DOTA_KEYBIND_SHOP_SLOT_6 = 169,
    DOTA_KEYBIND_SHOP_SLOT_7 = 170,
    DOTA_KEYBIND_SHOP_SLOT_8 = 171,
    DOTA_KEYBIND_SHOP_SLOT_9 = 172,
    DOTA_KEYBIND_SHOP_SLOT_10 = 173,
    DOTA_KEYBIND_SHOP_SLOT_11 = 174,
    DOTA_KEYBIND_SHOP_SLOT_12 = 175,
    DOTA_KEYBIND_SHOP_SLOT_13 = 176,
    DOTA_KEYBIND_SHOP_SLOT_14 = 177,
    DOTA_KEYBIND_SPEC_CAMERA_UP = 178,
    DOTA_KEYBIND_SPEC_CAMERA_DOWN = 179,
    DOTA_KEYBIND_SPEC_CAMERA_LEFT = 180,
    DOTA_KEYBIND_SPEC_CAMERA_RIGHT = 181,
    DOTA_KEYBIND_SPEC_CAMERA_GRIP = 182,
    DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_1 = 183,
    DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_2 = 184,
    DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_3 = 185,
    DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_4 = 186,
    DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_5 = 187,
    DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_6 = 188,
    DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_7 = 189,
    DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_8 = 190,
    DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_9 = 191,
    DOTA_KEYBIND_SPEC_CAMERA_SAVED_POSITION_10 = 192,
    DOTA_KEYBIND_SPEC_UNIT_SELECT = 193,
    DOTA_KEYBIND_SPEC_HERO_SELECT = 194,
    DOTA_KEYBIND_SPEC_PAUSE = 195,
    DOTA_KEYBIND_SPEC_CHAT = 196,
    DOTA_KEYBIND_SPEC_SCOREBOARD = 197,
    DOTA_KEYBIND_SPEC_INCREASE_REPLAY_SPEED = 198,
    DOTA_KEYBIND_SPEC_DECREASE_REPLAY_SPEED = 199,
    DOTA_KEYBIND_SPEC_STATS_HARVEST = 200,
    DOTA_KEYBIND_SPEC_STATS_ITEM = 201,
    DOTA_KEYBIND_SPEC_STATS_GOLD = 202,
    DOTA_KEYBIND_SPEC_STATS_XP = 203,
    DOTA_KEYBIND_SPEC_STATS_FANTASY = 204,
    DOTA_KEYBIND_SPEC_STATS_WINCHANCE = 205,
    DOTA_KEYBIND_SPEC_FOW_TOGGLEBOTH = 206,
    DOTA_KEYBIND_SPEC_FOW_TOGGLERADIENT = 207,
    DOTA_KEYBIND_SPEC_FOW_TOGGLEDIRE = 208,
    DOTA_KEYBIND_SPEC_OPEN_BROADCASTER_MENU = 209,
    DOTA_KEYBIND_SPEC_DROPDOWN_KDA = 210,
    DOTA_KEYBIND_SPEC_DROPDOWN_LASTHITS_DENIES = 211,
    DOTA_KEYBIND_SPEC_DROPDOWN_LEVEL = 212,
    DOTA_KEYBIND_SPEC_DROPDOWN_XP_PER_MIN = 213,
    DOTA_KEYBIND_SPEC_DROPDOWN_GOLD = 214,
    DOTA_KEYBIND_SPEC_DROPDOWN_TOTALGOLD = 215,
    DOTA_KEYBIND_SPEC_DROPDOWN_GOLD_PER_MIN = 216,
    DOTA_KEYBIND_SPEC_DROPDOWN_BUYBACK = 217,
    DOTA_KEYBIND_SPEC_DROPDOWN_NETWORTH = 218,
    DOTA_KEYBIND_SPEC_DROPDOWN_FANTASY = 219,
    DOTA_KEYBIND_SPEC_DROPDOWN_SORT = 220,
    DOTA_KEYBIND_SPEC_DROPDOWN_CLOSE = 221,
    DOTA_KEYBIND_SPEC_FOCUS_PLAYER_1 = 222,
    DOTA_KEYBIND_SPEC_FOCUS_PLAYER_2 = 223,
    DOTA_KEYBIND_SPEC_FOCUS_PLAYER_3 = 224,
    DOTA_KEYBIND_SPEC_FOCUS_PLAYER_4 = 225,
    DOTA_KEYBIND_SPEC_FOCUS_PLAYER_5 = 226,
    DOTA_KEYBIND_SPEC_FOCUS_PLAYER_6 = 227,
    DOTA_KEYBIND_SPEC_FOCUS_PLAYER_7 = 228,
    DOTA_KEYBIND_SPEC_FOCUS_PLAYER_8 = 229,
    DOTA_KEYBIND_SPEC_FOCUS_PLAYER_9 = 230,
    DOTA_KEYBIND_SPEC_FOCUS_PLAYER_10 = 231,
    DOTA_KEYBIND_SPEC_COACH_VIEWTOGGLE = 232,
    DOTA_KEYBIND_INSPECTHEROINWORLD = 233,
    DOTA_KEYBIND_CAMERA_ZOOM_IN = 234,
    DOTA_KEYBIND_CAMERA_ZOOM_OUT = 235,
    DOTA_KEYBIND_CONTROL_GROUPCYCLEPREV = 236,
    DOTA_KEYBIND_DOTA_ALT = 237,
    DOTA_KEYBIND_COUNT = 238,
}

declare enum DOTA_SHOP_TYPE
{
    DOTA_SHOP_HOME = 0,
    DOTA_SHOP_SIDE = 1,
    DOTA_SHOP_SECRET = 2,
    DOTA_SHOP_GROUND = 3,
    DOTA_SHOP_SIDE2 = 4,
    DOTA_SHOP_SECRET2 = 5,
    DOTA_SHOP_CUSTOM = 6,
    DOTA_SHOP_NEUTRALS = 7,
    DOTA_SHOP_NONE = 8,
}

$> script_reload
Initializing script VM...
...done
[{
    "args":[{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"AddFOWViewer",
    "returns":"int",
    "description":"Add temporary vision for a given team, returns a ViewerID ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision)"
  },{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"AngleDiff",
    "returns":"float",
    "description":"Returns the number of degrees difference between two yaw angles"
  },{
    "args":[{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"AnglesToVector",
    "returns":"Vector",
    "description":"Generate a vector given a QAngles"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"AppendToLogFile",
    "returns":"void",
    "description":"AppendToLogFile is deprecated. Print to the console for logging instead."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"ApplyDamage",
    "returns":"float",
    "description":"Damage an npc."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"AxisAngleToQuaternion",
    "returns":"Quaternion",
    "description":"(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"CalcClosestPointOnEntityOBB",
    "returns":"Vector",
    "description":"Compute the closest point on the OBB of an entity."
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CalcDistanceBetweenEntityOBB",
    "returns":"float",
    "description":"Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping."
  },{
    "kind":"function",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "returns":"float",
    "name":"CalcDistanceToLineSegment2D"
  },{
    "args":[{
        "type":"ehandle"
      }],
    "kind":"function",
    "name":"CancelEntityIOEvents",
    "returns":"void",
    "description":"Create all I/O events for a particular entity"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CenterCameraOnUnit",
    "returns":"void",
    "description":"CenterCameraOnUnit( nPlayerId, hUnit ): Centers each players' camera on a unit."
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"ClearTeamCustomHealthbarColor",
    "returns":"void",
    "description":"( teamNumber )"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"CreateDamageInfo",
    "returns":"handle",
    "description":"(hInflictor, hAttacker, flDamage) - Allocate a damageinfo object, used as an argument to TakeDamage(). Call DestroyDamageInfo( hInfo ) to free the object."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateEffect",
    "returns":"bool",
    "description":"Pass table - Inputs: entity, effect"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"CreateHTTPRequest",
    "returns":"handle",
    "description":"Create an HTTP request."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"CreateHTTPRequestScriptVM",
    "returns":"handle",
    "description":"Create an HTTP request."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateHeroForPlayer",
    "returns":"handle",
    "description":"Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"bool"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"CreateIllusions",
    "returns":"table",
    "description":"Create illusions of the passed hero that belong to passed unit using passed modifier data. ( hOwner, hHeroToCopy, hModiiferKeys, nNumIllusions, nPadding, bScramblePosition, bFindClearSpace ) \nSupported keys: \noutgoing_damage\nincoming_damage\nbounty_base\nbounty_growth\noutgoing_damage_structure\noutgoing_damage_roshan"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateItem",
    "returns":"handle",
    "description":"Create a DOTA item"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateItemOnPositionForLaunch",
    "returns":"handle",
    "description":"Create a physical item at a given location, can start in air (but doesn't clear a space)"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateItemOnPositionSync",
    "returns":"handle",
    "description":"Create a physical item at a given location"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"CreateModifierThinker",
    "returns":"handle",
    "description":"Create a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker )"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"CreateRune",
    "returns":"handle",
    "description":"Create a rune of the specified type (vLocation, iRuneType)."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"CreateSceneEntity",
    "returns":"handle",
    "description":"Create a scene entity to play the specified scene."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"CreateTempTree",
    "returns":"handle",
    "description":"Create a temporary tree, uses a default tree model. (vLocation, flDuration)."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"CreateTempTreeWithModel",
    "returns":"handle",
    "description":"Create a temporary tree, specifying the tree model name. (vLocation, flDuration, szModelName)."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"CreateTrigger",
    "returns":"handle",
    "description":"CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"CreateTriggerRadiusApproximate",
    "returns":"handle",
    "description":"CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"CreateUniformRandomStream",
    "returns":"handle",
    "description":"( iSeed ) - Creates a separate random number stream."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"CreateUnitByName",
    "returns":"handle",
    "description":"Creates a DOTA unit by its dota_npc_units.txt name"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"CreateUnitByNameAsync",
    "returns":"int",
    "description":"Creates a DOTA unit by its dota_npc_units.txt name"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"CreateUnitFromTable",
    "returns":"handle",
    "description":"Creates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"CrossVectors",
    "returns":"Vector",
    "description":"(vector,vector) cross product between two vectors"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DOTA_SpawnMapAtPosition",
    "returns":"int",
    "description":"Spawn a .vmap at the target location."
  },{
    "args":[],
    "kind":"function",
    "name":"DebugBreak",
    "returns":"void",
    "description":"Breaks in the debugger"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"bool"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DebugCreateUnit",
    "returns":"int",
    "description":"Creates a test unit controllable by the specified player."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawBox",
    "returns":"void",
    "description":"Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawBoxDirection",
    "returns":"void",
    "description":"Draw a debug forward box (cent, min, max, forward, vRgb, a, duration)"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawCircle",
    "returns":"void",
    "description":"Draw a debug circle (center, vRgb, a, rad, ztest, duration)"
  },{
    "args":[],
    "kind":"function",
    "name":"DebugDrawClear",
    "returns":"void",
    "description":"Try to clear all the debug overlay info"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawLine",
    "returns":"void",
    "description":"Draw a debug overlay line (origin, target, r, g, b, ztest, duration)"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawLine_vCol",
    "returns":"void",
    "description":"Draw a debug line using color vec (start, end, vRgb, a, ztest, duration)"
  },{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawScreenTextLine",
    "returns":"void",
    "description":"Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawSphere",
    "returns":"void",
    "description":"Draw a debug sphere (center, vRgb, a, rad, ztest, duration)"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"string"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"DebugDrawText",
    "returns":"void",
    "description":"Draw text in 3d (origin, text, bViewCheck, duration)"
  },{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"DebugScreenTextPretty",
    "returns":"void",
    "description":"Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DestroyDamageInfo",
    "returns":"void",
    "description":"Free a damageinfo object that was created with CreateDamageInfo()."
  },{
    "args":[{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"DisconnectClient",
    "returns":"void",
    "description":"Kick a specific player from the game"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"DoCleaveAttack",
    "returns":"int",
    "description":"(hAttacker, hTarget, hAbility, fDamage, fRadius, effectName)"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DoEntFire",
    "returns":"void",
    "description":"#EntFire:Generate and entity i/o event"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DoEntFireByInstanceHandle",
    "returns":"void",
    "description":"#EntFireByHandle:Generate and entity i/o event"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"DoIncludeScript",
    "returns":"bool",
    "description":"Execute a script (internal)"
  },{
    "args":[{
        "type":"bool"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"DoScriptAssert",
    "returns":"void",
    "description":"#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"DoUniqueString",
    "returns":"string",
    "description":"#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table."
  },{
    "kind":"function",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "returns":"float",
    "name":"DotProduct"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      },{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"DropNeutralItemAtPositionForHero",
    "returns":"handle",
    "description":"Drop a neutral item for the team of the hero at the given tier."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      },{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"bool"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"DropNeutralItemAtPositionForHeroWithOffset",
    "returns":"handle",
    "description":"Drop a neutral item for the team of the hero at the given tier."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"EmitAnnouncerSound",
    "returns":"void",
    "description":"Emit an announcer sound for all players."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"EmitAnnouncerSoundForPlayer",
    "returns":"void",
    "description":"Emit an announcer sound for a player."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"EmitAnnouncerSoundForTeam",
    "returns":"void",
    "description":"Emit an announcer sound for a team."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"EmitAnnouncerSoundForTeamOnLocation",
    "returns":"void",
    "description":"Emit an announcer sound for a team at a specific location."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"EmitGlobalSound",
    "returns":"void",
    "description":"Play named sound for all players"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"EmitSoundOn",
    "returns":"void",
    "description":"Play named sound on Entity"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"EmitSoundOnClient",
    "returns":"void",
    "description":"Play named sound only on the client for the passed in player"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"EmitSoundOnEntityForPlayer",
    "returns":"void",
    "description":"Emit a sound on an entity for only a specific player"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"EmitSoundOnLocationForAllies",
    "returns":"void",
    "description":"Emit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"EmitSoundOnLocationForPlayer",
    "returns":"void",
    "description":"Emit a sound on a location for only a specific player"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"EmitSoundOnLocationWithCaster",
    "returns":"void",
    "description":"Emit a sound on a location from a unit. (vLocation, soundName, hCaster)."
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"EntIndexToHScript",
    "returns":"handle",
    "description":"Turn an entity index integer to an HScript representing that entity's script instance."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"ExecuteOrderFromTable",
    "returns":"void",
    "description":"Issue an order from a script table"
  },{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"ExponentialDecay",
    "returns":"float",
    "description":"Smooth curve decreasing slower as it approaches zero"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"FindClearRandomPositionAroundUnit",
    "returns":"bool",
    "description":"Finds a clear random position around a given target unit, using the target unit's padded collision radius."
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"FindClearSpaceForUnit",
    "returns":"bool",
    "description":"Place a unit somewhere not already occupied."
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"FindSpawnEntityForTeam",
    "returns":"handle",
    "description":"Find a spawn point for the given team."
  },{
    "args":[{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"handle"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"FindUnitsInLine",
    "returns":"table",
    "description":"Find units that intersect the given line with the given flags."
  },{
    "args":[{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"handle"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"FindUnitsInRadius",
    "returns":"table",
    "description":"Finds the units in a given radius with the given flags."
  },{
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"FireEntityIOInputNameOnly",
    "returns":"void",
    "description":"Fire Entity's Action Input w/no data"
  },{
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"FireEntityIOInputString",
    "returns":"void",
    "description":"Fire Entity's Action Input with passed String - you own the memory"
  },{
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"FireEntityIOInputVec",
    "returns":"void",
    "description":"Fire Entity's Action Input with passed Vector - you own the memory"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"FireGameEvent",
    "returns":"void",
    "description":"Fire a game event."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"FireGameEventLocal",
    "returns":"void",
    "description":"Fire a game event without broadcasting to the client."
  },{
    "args":[],
    "kind":"function",
    "name":"FrameTime",
    "returns":"float",
    "description":"Get the time spent on the server in the last frame"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetAbilityKeyValuesByName",
    "returns":"table",
    "description":"Get ability data by ability name."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetAbilityTextureNameForAbility",
    "returns":"string",
    "description":"Gets the ability texture name for an ability"
  },{
    "args":[],
    "kind":"function",
    "name":"GetActiveSpawnGroupHandle",
    "returns":"int",
    "description":"Returns the currently active spawn group handle"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"GetClearSpaceForUnit",
    "returns":"Vector",
    "description":"Returns a location for the unit that is not already occupied."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetDedicatedServerKey",
    "returns":"string",
    "description":"( version )"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetDedicatedServerKeyV2",
    "returns":"string",
    "description":"( version )"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetDedicatedServerKeyV3",
    "returns":"string",
    "description":"( version )"
  },{
    "args":[{
        "type":"unsigned"
      }],
    "kind":"function",
    "name":"GetEntityIndexForTreeId",
    "returns":"int",
    "description":"Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE."
  },{
    "args":[],
    "kind":"function",
    "name":"GetFrameCount",
    "returns":"int",
    "description":"Returns the engines current frame count"
  },{
    "kind":"function",
    "args":[{
        "type":"Vector"
      },{
        "type":"handle"
      }],
    "returns":"float",
    "name":"GetGroundHeight"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"GetGroundPosition",
    "returns":"Vector",
    "description":"Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetItemCost",
    "returns":"int",
    "description":"Get the cost of an item by name."
  },{
    "kind":"function",
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "returns":"int",
    "name":"GetItemDefOwnedCount"
  },{
    "kind":"function",
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "returns":"int",
    "name":"GetItemDefQuantity"
  },{
    "args":[],
    "kind":"function",
    "name":"GetListenServerHost",
    "returns":"handle",
    "description":"Get the local player on a listen server."
  },{
    "args":[],
    "kind":"function",
    "name":"GetLobbyEventGameDetails",
    "returns":"table",
    "description":"( )"
  },{
    "args":[],
    "kind":"function",
    "name":"GetMapName",
    "returns":"string",
    "description":"Get the name of the map."
  },{
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetMaxOutputDelay",
    "returns":"float",
    "description":"Get the longest delay for all events attached to an output"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"GetPhysAngularVelocity",
    "returns":"Vector",
    "description":"Get Angular Velocity for VPHYS or normal object. Returns a vector of the axis of rotation, multiplied by the degrees of rotation per second."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"GetPhysVelocity",
    "returns":"Vector",
    "description":"Get Velocity for VPHYS or normal object"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"GetPotentialNeutralItemDrop",
    "returns":"string",
    "description":"Given the item tier and the team, roll for the name of a valid neutral item drop, considering previous drops and consumables."
  },{
    "args":[],
    "kind":"function",
    "name":"GetSystemDate",
    "returns":"string",
    "description":"Get the current real world date"
  },{
    "args":[],
    "kind":"function",
    "name":"GetSystemTime",
    "returns":"string",
    "description":"Get the current real world time"
  },{
    "args":[],
    "kind":"function",
    "name":"GetSystemTimeMS",
    "returns":"double",
    "description":"Get system time in milliseconds"
  },{
    "kind":"function",
    "args":[{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "returns":"Vector",
    "name":"GetTargetAOELocation"
  },{
    "kind":"function",
    "args":[{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "returns":"Vector",
    "name":"GetTargetLinearLocation"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"GetTeamHeroKills",
    "returns":"int",
    "description":"( int teamID )"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"GetTeamName",
    "returns":"string",
    "description":"( int teamID )"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"GetTreeIdForEntityIndex",
    "returns":"int",
    "description":"Given and entity index of a tree, get the tree id for use for use with with unit orders."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"GetUnitKeyValuesByName",
    "returns":"table",
    "description":"Get unit data by ability name."
  },{
    "args":[],
    "kind":"function",
    "name":"GetWorldMaxX",
    "returns":"float",
    "description":"Gets the world's maximum X position."
  },{
    "args":[],
    "kind":"function",
    "name":"GetWorldMaxY",
    "returns":"float",
    "description":"Gets the world's maximum Y position."
  },{
    "args":[],
    "kind":"function",
    "name":"GetWorldMinX",
    "returns":"float",
    "description":"Gets the world's minimum X position."
  },{
    "args":[],
    "kind":"function",
    "name":"GetWorldMinY",
    "returns":"float",
    "description":"Gets the world's minimum Y position."
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"GetXPNeededToReachNextLevel",
    "returns":"int",
    "description":"Get amount of XP required to reach the next level."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"HeroMaxLevel",
    "returns":"void",
    "description":"Max out a hero's level and give them all appropriate abilities and talents."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"InitLogFile",
    "returns":"void",
    "description":"InitLogFile is deprecated. Print to the console for logging instead."
  },{
    "args":[],
    "kind":"function",
    "name":"IsClient",
    "returns":"bool",
    "description":"Returns true if this is lua running from the client.dll."
  },{
    "args":[],
    "kind":"function",
    "name":"IsDedicatedServer",
    "returns":"bool",
    "description":"Returns true if this server is a dedicated server."
  },{
    "args":[],
    "kind":"function",
    "name":"IsInToolsMode",
    "returns":"bool",
    "description":"Returns true if this is lua running within tools mode."
  },{
    "args":[{
        "type":"int"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"IsLocationVisible",
    "returns":"bool",
    "description":"Ask fog of war if a location is visible to a certain team (nTeamNumber, vLocation)."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"IsMangoTree",
    "returns":"bool",
    "description":"Is this entity a mango tree? (hEntity)."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"IsMarkedForDeletion",
    "returns":"bool",
    "description":"Returns true if the entity is valid and marked for deletion."
  },{
    "args":[],
    "kind":"function",
    "name":"IsServer",
    "returns":"bool",
    "description":"Returns true if this is lua running from the server.dll."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"IsUnitInValidPosition",
    "returns":"bool",
    "description":"Returns true if the unit is in a valid position in the gridnav."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"IsValidEntity",
    "returns":"bool",
    "description":"Checks to see if the given hScript is a valid entity"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"LerpVectors",
    "returns":"Vector",
    "description":"(vector,vector,float) lerp between two vectors by a float factor returning new vector"
  },{
    "args":[{
        "type":"float"
      }],
    "kind":"function",
    "name":"LimitPathingSearchDepth",
    "returns":"void",
    "description":"Set the limit on the pathfinding search space."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"LinkLuaModifier",
    "returns":"void",
    "description":"Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType)."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"ListenToGameEvent",
    "returns":"int",
    "description":"Register as a listener for a game event from script."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"LoadKeyValues",
    "returns":"table",
    "description":"Creates a table from the specified keyvalues text file"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"LoadKeyValuesFromString",
    "returns":"table",
    "description":"Creates a table from the specified keyvalues string"
  },{
    "args":[],
    "kind":"function",
    "name":"LocalTime",
    "returns":"table",
    "description":"Get the current local time"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"MakeStringToken",
    "returns":"int",
    "description":"Checks to see if the given hScript is a valid entity"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"ManuallyTriggerSpawnGroupCompletion",
    "returns":"void",
    "description":"Triggers the creation of entities in a manually-completed spawn group"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"MinimapEvent",
    "returns":"void",
    "description":"Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration)."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"Msg",
    "returns":"void",
    "description":"Print a message"
  },{
    "args":[{
        "type":"bool"
      }],
    "kind":"function",
    "name":"PauseGame",
    "returns":"void",
    "description":"Pause or unpause the game."
  },{
    "args":[],
    "kind":"function",
    "name":"Plat_FloatTime",
    "returns":"float",
    "description":"Get the current float time from the engine"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"PlayerInstanceFromIndex",
    "returns":"handle",
    "description":"Get a script instance of a player by index."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheEntityFromTable",
    "returns":"void",
    "description":"Precache an entity from KeyValues in table"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheEntityListFromTable",
    "returns":"void",
    "description":"Precache a list of entity KeyValues tables"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheItemByNameAsync",
    "returns":"void",
    "description":"Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheItemByNameSync",
    "returns":"void",
    "description":"Precaches a DOTA item by its dota_npc_items.txt name"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheModel",
    "returns":"void",
    "description":"( modelName, context ) - Manually precache a single model"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheResource",
    "returns":"void",
    "description":"Manually precache a single resource"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"PrecacheUnitByNameAsync",
    "returns":"void",
    "description":"Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"PrecacheUnitByNameSync",
    "returns":"void",
    "description":"Precaches a DOTA unit by its dota_npc_units.txt name"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheUnitFromTableAsync",
    "returns":"void",
    "description":"Precaches a DOTA unit from a table of entity key values."
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"PrecacheUnitFromTableSync",
    "returns":"void",
    "description":"Precaches a DOTA unit from a table of entity key values."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"PrintLinkedConsoleMessage",
    "returns":"void",
    "description":"Print a console message with a linked console command"
  },{
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"QSlerp",
    "returns":"QAngle",
    "description":"(from angle, to angle, time) - Spherical lerp of angle from->to based on time"
  },{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"RandomFloat",
    "returns":"float",
    "description":"Get a random float within a range"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"RandomInt",
    "returns":"int",
    "description":"Get a random int within a range"
  },{
    "args":[{
        "type":"float"
      }],
    "kind":"function",
    "name":"RandomVector",
    "returns":"Vector",
    "description":"Get a random 2D vector of the given length."
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"RecordNeutralItemEarned",
    "returns":"void",
    "description":"Record in player resources that a new neutral item has been created, if it hasn't already been, and show a toast."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"RegisterCustomAnimationScriptForModel",
    "returns":"void",
    "description":"Register a custom animation script to run when a model loads"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"RegisterSpawnGroupFilterProxy",
    "returns":"void",
    "description":"Create a C proxy for a script-based spawn group filter"
  },{
    "args":[],
    "kind":"function",
    "name":"ReloadMOTD",
    "returns":"void",
    "description":"Reloads the MotD file"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"RemoveFOWViewer",
    "returns":"void",
    "description":"Remove temporary vision for a given team ( nTeamID, nViewerID )"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"RemoveSpawnGroupFilterProxy",
    "returns":"void",
    "description":"Remove the C proxy for a script-based spawn group filter"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"ResolveNPCPositions",
    "returns":"void",
    "description":"Check and fix units that have been assigned a position inside collision radius of other NPCs."
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"RollPercentage",
    "returns":"bool",
    "description":"(int nPct)"
  },{
    "args":[{
        "type":"unsigned"
      },{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"RollPseudoRandomPercentage",
    "returns":"bool",
    "description":"( chance, pseudo random id, unit."
  },{
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"RotateOrientation",
    "returns":"QAngle",
    "description":"Rotate a QAngle by another QAngle."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"QAngle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"RotatePosition",
    "returns":"Vector",
    "description":"Rotate a Vector around a point."
  },{
    "args":[{
        "type":"Quaternion"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"RotateQuaternionByAxisAngle",
    "returns":"Quaternion",
    "description":"(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis"
  },{
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"RotationDelta",
    "returns":"QAngle",
    "description":"Find the delta between two QAngles."
  },{
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "name":"RotationDeltaAsAngularVelocity",
    "returns":"Vector",
    "description":"converts delta QAngle to an angular velocity Vector"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"Say",
    "returns":"void",
    "description":"Have Entity say string, and teamOnly or not"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"ScreenShake",
    "returns":"void",
    "description":"Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake"
  },{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"Script_RemapValClamped",
    "returns":"float",
    "description":"RemapValClamped"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SendOverheadEventMessage",
    "returns":"void",
    "description":"( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_*"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"SendToConsole",
    "returns":"void",
    "description":"Send a string to the console as a client command"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"SendToServerConsole",
    "returns":"void",
    "description":"Send a string to the console as a server command"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"SetOpvarFloatAll",
    "returns":"void",
    "description":"Sets an opvar value for all players"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SetOpvarFloatPlayer",
    "returns":"void",
    "description":"Sets an opvar value for a single player"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"SetPhysAngularVelocity",
    "returns":"void",
    "description":"Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"SetQuestName",
    "returns":"void",
    "description":"Set the current quest name."
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"SetQuestPhase",
    "returns":"void",
    "description":"Set the current quest phase."
  },{
    "args":[{
        "type":"ehandle"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "name":"SetRenderingEnabled",
    "returns":"void",
    "description":"Set rendering on/off for an ehandle"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"SetTeamCustomHealthbarColor",
    "returns":"void",
    "description":"( teamNumber, r, g, b )"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"ShowCustomHeaderMessage",
    "returns":"void",
    "description":"( const char *pszMessage, PlayerID_t nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"ShowGenericPopup",
    "returns":"void",
    "description":"Show a generic popup dialog for all players."
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"ShowGenericPopupToPlayer",
    "returns":"void",
    "description":"Show a generic popup dialog to a specific player."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"ShowMessage",
    "returns":"void",
    "description":"Print a hud message on all clients"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"SpawnDOTAShopTriggerRadiusApproximate",
    "returns":"handle",
    "description":"(Vector vOrigin, float flRadius )"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"SpawnEffigyOfUnitOrModel",
    "returns":"handle",
    "description":"Spawn an effigy of the target unit."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityFromTableAsynchronous",
    "returns":"void",
    "description":"Asynchronously spawns a single entity from a table"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityFromTableSynchronous",
    "returns":"handle",
    "description":"Synchronously spawns a single entity from a table"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"bool"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityGroupFromTable",
    "returns":"bool",
    "description":"Hierarchically spawn an entity group from a set of spawn tables."
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityListFromTableAsynchronous",
    "returns":"int",
    "description":"Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"SpawnEntityListFromTableSynchronous",
    "returns":"handle",
    "description":"Synchronously spawn an entity group from a list of spawn tables."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"SpawnMangoTree",
    "returns":"handle",
    "description":"Spawn a mango tree ( vPos, nTeam, flDuration, flMangoInterval, nInitialMangoes )"
  },{
    "args":[{
        "type":"Quaternion"
      },{
        "type":"Quaternion"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"SplineQuaternions",
    "returns":"Quaternion",
    "description":"(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"SplineVectors",
    "returns":"Vector",
    "description":"(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StartSoundEvent",
    "returns":"void",
    "description":"Start a sound event"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"StartSoundEventFromPosition",
    "returns":"void",
    "description":"Start a sound event from position"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"StartSoundEventFromPositionReliable",
    "returns":"void",
    "description":"Start a sound event from position with reliable delivery"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"StartSoundEventFromPositionUnreliable",
    "returns":"void",
    "description":"Start a sound event from position with optional delivery"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StartSoundEventReliable",
    "returns":"void",
    "description":"Start a sound event with reliable delivery"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StartSoundEventUnreliable",
    "returns":"void",
    "description":"Start a sound event with optional delivery"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "name":"StopEffect",
    "returns":"void",
    "description":"Pass entity and effect name"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"StopGlobalSound",
    "returns":"void",
    "description":"Stop named sound for all players"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StopListeningToAllGameEvents",
    "returns":"void",
    "description":"Stop listening to all game events within a specific context."
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"StopListeningToGameEvent",
    "returns":"bool",
    "description":"Stop listening to a particular game event."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StopSoundEvent",
    "returns":"void",
    "description":"Stops a sound event with optional delivery"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"StopSoundOn",
    "returns":"void",
    "description":"Stop named sound on Entity"
  },{
    "args":[],
    "kind":"function",
    "name":"Time",
    "returns":"float",
    "description":"Get the current server time"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"TraceCollideable",
    "returns":"bool",
    "description":"Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"TraceHull",
    "returns":"bool",
    "description":"Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"TraceLine",
    "returns":"bool",
    "description":"Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"UTIL_MessageText",
    "returns":"void",
    "description":"Sends colored text to one client."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"UTIL_MessageTextAll",
    "returns":"void",
    "description":"Sends colored text to all clients."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UTIL_MessageTextAll_WithContext",
    "returns":"void",
    "description":"Sends colored text to all clients. (Valid context keys: player_id, value, team_id)"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UTIL_MessageText_WithContext",
    "returns":"void",
    "description":"Sends colored text to one client. (Valid context keys: player_id, value, team_id)"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UTIL_Remove",
    "returns":"void",
    "description":"Removes the specified entity"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UTIL_RemoveImmediate",
    "returns":"void",
    "description":"Immediately removes the specified entity"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"UTIL_ResetMessageText",
    "returns":"void",
    "description":"Clear all message text on one client."
  },{
    "args":[],
    "kind":"function",
    "name":"UTIL_ResetMessageTextAll",
    "returns":"void",
    "description":"Clear all message text from all clients."
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "name":"UnitFilter",
    "returns":"int",
    "description":"Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"UnloadSpawnGroup",
    "returns":"void",
    "description":"Unload a spawn group by name"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"UnloadSpawnGroupByHandle",
    "returns":"void",
    "description":"Unload a spawn group by handle"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "name":"UpdateEventPoints",
    "returns":"void",
    "description":"( hEventPointData )"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "name":"UserIDToControllerHScript",
    "returns":"handle",
    "description":"Turn a userid integer (typically, fields named 'userid' in game events) to an HScript representing the associated player controller's script instance."
  },{
    "kind":"function",
    "args":[{
        "type":"Vector"
      }],
    "returns":"QAngle",
    "name":"VectorAngles"
  },{
    "args":[{
        "type":"Vector"
      }],
    "kind":"function",
    "name":"VectorToAngles",
    "returns":"QAngle",
    "description":"Get Qangles (with no roll) for a Vector."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"Warning",
    "returns":"void",
    "description":"Print a warning"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "name":"cvar_getf",
    "returns":"float",
    "description":"Gets the value of the given cvar, as a float."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"float"
      }],
    "kind":"function",
    "name":"cvar_setf",
    "returns":"bool",
    "description":"Sets the value of the given cvar, as a float."
  },{
    "value":2,
    "kind":"constant",
    "name":"ABILITY_CANNOT_BE_UPGRADED_AT_MAX",
    "enum":"AbilityLearnResult_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE",
    "enum":"AbilityLearnResult_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL",
    "enum":"AbilityLearnResult_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"ABILITY_CAN_BE_UPGRADED",
    "enum":"AbilityLearnResult_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"ABILITY_NOT_LEARNABLE",
    "enum":"AbilityLearnResult_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"ABILITY_TYPE_ATTRIBUTES",
    "enum":"ABILITY_TYPES"
  },{
    "value":0,
    "kind":"constant",
    "name":"ABILITY_TYPE_BASIC",
    "enum":"ABILITY_TYPES"
  },{
    "value":3,
    "kind":"constant",
    "name":"ABILITY_TYPE_HIDDEN",
    "enum":"ABILITY_TYPES"
  },{
    "value":1,
    "kind":"constant",
    "name":"ABILITY_TYPE_ULTIMATE",
    "enum":"ABILITY_TYPES"
  },{
    "value":1765,
    "kind":"constant",
    "name":"ACD_DOTA_IDLE"
  },{
    "value":1,
    "kind":"constant",
    "name":"ACTIVATE_TYPE_DATAUPDATE_CREATION"
  },{
    "value":0,
    "kind":"constant",
    "name":"ACTIVATE_TYPE_INITIAL_CREATION"
  },{
    "value":2,
    "kind":"constant",
    "name":"ACTIVATE_TYPE_ONRESTORE"
  },{
    "value":137,
    "kind":"constant",
    "name":"ACT_180_LEFT"
  },{
    "value":138,
    "kind":"constant",
    "name":"ACT_180_RIGHT"
  },{
    "value":139,
    "kind":"constant",
    "name":"ACT_90_LEFT"
  },{
    "value":140,
    "kind":"constant",
    "name":"ACT_90_RIGHT"
  },{
    "value":48,
    "kind":"constant",
    "name":"ACT_ALIEN_BURROW_IDLE"
  },{
    "value":49,
    "kind":"constant",
    "name":"ACT_ALIEN_BURROW_OUT"
  },{
    "value":968,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_BACK"
  },{
    "value":967,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_FORWARD"
  },{
    "value":969,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_LEFT"
  },{
    "value":970,
    "kind":"constant",
    "name":"ACT_ANTLION_SCUTTLE_RIGHT"
  },{
    "value":71,
    "kind":"constant",
    "name":"ACT_ARM"
  },{
    "value":178,
    "kind":"constant",
    "name":"ACT_BARNACLE_CHEW"
  },{
    "value":177,
    "kind":"constant",
    "name":"ACT_BARNACLE_CHOMP"
  },{
    "value":175,
    "kind":"constant",
    "name":"ACT_BARNACLE_HIT"
  },{
    "value":176,
    "kind":"constant",
    "name":"ACT_BARNACLE_PULL"
  },{
    "value":64,
    "kind":"constant",
    "name":"ACT_BIG_FLINCH"
  },{
    "value":384,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_BACK"
  },{
    "value":385,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_BACK_ENTRY"
  },{
    "value":386,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_BACK_EXIT"
  },{
    "value":381,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_LEFT"
  },{
    "value":382,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_LEFT_ENTRY"
  },{
    "value":383,
    "kind":"constant",
    "name":"ACT_BUSY_LEAN_LEFT_EXIT"
  },{
    "value":394,
    "kind":"constant",
    "name":"ACT_BUSY_QUEUE"
  },{
    "value":390,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_CHAIR"
  },{
    "value":391,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_CHAIR_ENTRY"
  },{
    "value":392,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_CHAIR_EXIT"
  },{
    "value":387,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_GROUND"
  },{
    "value":388,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_GROUND_ENTRY"
  },{
    "value":389,
    "kind":"constant",
    "name":"ACT_BUSY_SIT_GROUND_EXIT"
  },{
    "value":393,
    "kind":"constant",
    "name":"ACT_BUSY_STAND"
  },{
    "value":35,
    "kind":"constant",
    "name":"ACT_CLIMB_DISMOUNT"
  },{
    "value":34,
    "kind":"constant",
    "name":"ACT_CLIMB_DOWN"
  },{
    "value":33,
    "kind":"constant",
    "name":"ACT_CLIMB_UP"
  },{
    "value":110,
    "kind":"constant",
    "name":"ACT_COMBAT_IDLE"
  },{
    "value":3,
    "kind":"constant",
    "name":"ACT_COVER"
  },{
    "value":5,
    "kind":"constant",
    "name":"ACT_COVER_LOW"
  },{
    "value":346,
    "kind":"constant",
    "name":"ACT_COVER_LOW_RPG"
  },{
    "value":4,
    "kind":"constant",
    "name":"ACT_COVER_MED"
  },{
    "value":296,
    "kind":"constant",
    "name":"ACT_COVER_PISTOL_LOW"
  },{
    "value":297,
    "kind":"constant",
    "name":"ACT_COVER_SMG1_LOW"
  },{
    "value":62,
    "kind":"constant",
    "name":"ACT_COWER"
  },{
    "value":474,
    "kind":"constant",
    "name":"ACT_CROSSBOW_DRAW_UNLOADED"
  },{
    "value":44,
    "kind":"constant",
    "name":"ACT_CROUCH"
  },{
    "value":45,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE"
  },{
    "value":105,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE_AGITATED"
  },{
    "value":104,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE_AIM_STIMULATED"
  },{
    "value":103,
    "kind":"constant",
    "name":"ACT_CROUCHIDLE_STIMULATED"
  },{
    "value":439,
    "kind":"constant",
    "name":"ACT_CROUCHING_GRENADEIDLE"
  },{
    "value":440,
    "kind":"constant",
    "name":"ACT_CROUCHING_GRENADEREADY"
  },{
    "value":441,
    "kind":"constant",
    "name":"ACT_CROUCHING_PRIMARYATTACK"
  },{
    "value":458,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_ATTACK"
  },{
    "value":456,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_DOWN"
  },{
    "value":459,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_KNOCKBACK"
  },{
    "value":455,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_UP"
  },{
    "value":457,
    "kind":"constant",
    "name":"ACT_CROUCHING_SHIELD_UP_IDLE"
  },{
    "value":881,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_AUTOGUN"
  },{
    "value":890,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_DUAL"
  },{
    "value":896,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_RIFLE"
  },{
    "value":894,
    "kind":"constant",
    "name":"ACT_CROUCH_IDLE_SHOTGUN"
  },{
    "value":1016,
    "kind":"constant",
    "name":"ACT_CSGO_ALIVE_LOOP"
  },{
    "value":1008,
    "kind":"constant",
    "name":"ACT_CSGO_CATCH"
  },{
    "value":1022,
    "kind":"constant",
    "name":"ACT_CSGO_CLIMB_LADDER"
  },{
    "value":993,
    "kind":"constant",
    "name":"ACT_CSGO_DEFUSE"
  },{
    "value":994,
    "kind":"constant",
    "name":"ACT_CSGO_DEFUSE_WITH_KIT"
  },{
    "value":1007,
    "kind":"constant",
    "name":"ACT_CSGO_DEPLOY"
  },{
    "value":1026,
    "kind":"constant",
    "name":"ACT_CSGO_EXIT_LADDER_BOTTOM"
  },{
    "value":1025,
    "kind":"constant",
    "name":"ACT_CSGO_EXIT_LADDER_TOP"
  },{
    "value":1021,
    "kind":"constant",
    "name":"ACT_CSGO_FALL"
  },{
    "value":996,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_PRIMARY"
  },{
    "value":997,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_PRIMARY_OPT_1"
  },{
    "value":998,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_PRIMARY_OPT_2"
  },{
    "value":999,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_SECONDARY"
  },{
    "value":1000,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_SECONDARY_OPT_1"
  },{
    "value":1001,
    "kind":"constant",
    "name":"ACT_CSGO_FIRE_SECONDARY_OPT_2"
  },{
    "value":995,
    "kind":"constant",
    "name":"ACT_CSGO_FLASHBANG_REACTION"
  },{
    "value":1017,
    "kind":"constant",
    "name":"ACT_CSGO_FLINCH"
  },{
    "value":1018,
    "kind":"constant",
    "name":"ACT_CSGO_FLINCH_HEAD"
  },{
    "value":1019,
    "kind":"constant",
    "name":"ACT_CSGO_FLINCH_MOLOTOV"
  },{
    "value":1015,
    "kind":"constant",
    "name":"ACT_CSGO_IDLE_ADJUST_STOPPEDMOVING"
  },{
    "value":1014,
    "kind":"constant",
    "name":"ACT_CSGO_IDLE_TURN_BALANCEADJUST"
  },{
    "value":1020,
    "kind":"constant",
    "name":"ACT_CSGO_JUMP"
  },{
    "value":1024,
    "kind":"constant",
    "name":"ACT_CSGO_LAND_HEAVY"
  },{
    "value":1023,
    "kind":"constant",
    "name":"ACT_CSGO_LAND_LIGHT"
  },{
    "value":992,
    "kind":"constant",
    "name":"ACT_CSGO_NULL"
  },{
    "value":1006,
    "kind":"constant",
    "name":"ACT_CSGO_OPERATE"
  },{
    "value":1027,
    "kind":"constant",
    "name":"ACT_CSGO_PARACHUTE"
  },{
    "value":1013,
    "kind":"constant",
    "name":"ACT_CSGO_PLANT_BOMB"
  },{
    "value":1002,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD"
  },{
    "value":1005,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD_END"
  },{
    "value":1004,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD_LOOP"
  },{
    "value":1003,
    "kind":"constant",
    "name":"ACT_CSGO_RELOAD_START"
  },{
    "value":1010,
    "kind":"constant",
    "name":"ACT_CSGO_SILENCER_ATTACH"
  },{
    "value":1009,
    "kind":"constant",
    "name":"ACT_CSGO_SILENCER_DETACH"
  },{
    "value":1028,
    "kind":"constant",
    "name":"ACT_CSGO_TAUNT"
  },{
    "value":1011,
    "kind":"constant",
    "name":"ACT_CSGO_TWITCH"
  },{
    "value":1012,
    "kind":"constant",
    "name":"ACT_CSGO_TWITCH_BUYZONE"
  },{
    "value":471,
    "kind":"constant",
    "name":"ACT_DEPLOY"
  },{
    "value":472,
    "kind":"constant",
    "name":"ACT_DEPLOY_IDLE"
  },{
    "value":21,
    "kind":"constant",
    "name":"ACT_DIEBACKWARD"
  },{
    "value":22,
    "kind":"constant",
    "name":"ACT_DIEFORWARD"
  },{
    "value":24,
    "kind":"constant",
    "name":"ACT_DIERAGDOLL"
  },{
    "value":20,
    "kind":"constant",
    "name":"ACT_DIESIMPLE"
  },{
    "value":23,
    "kind":"constant",
    "name":"ACT_DIEVIOLENT"
  },{
    "value":117,
    "kind":"constant",
    "name":"ACT_DIE_BACKSHOT"
  },{
    "value":404,
    "kind":"constant",
    "name":"ACT_DIE_BACKSIDE"
  },{
    "value":396,
    "kind":"constant",
    "name":"ACT_DIE_BARNACLE_SWALLOW"
  },{
    "value":115,
    "kind":"constant",
    "name":"ACT_DIE_CHESTSHOT"
  },{
    "value":990,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH"
  },{
    "value":408,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_BACKSIDE"
  },{
    "value":406,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_FRONTSIDE"
  },{
    "value":991,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_HEADSHOT"
  },{
    "value":409,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_LEFTSIDE"
  },{
    "value":407,
    "kind":"constant",
    "name":"ACT_DIE_CROUCH_RIGHTSIDE"
  },{
    "value":402,
    "kind":"constant",
    "name":"ACT_DIE_FRONTSIDE"
  },{
    "value":116,
    "kind":"constant",
    "name":"ACT_DIE_GUTSHOT"
  },{
    "value":114,
    "kind":"constant",
    "name":"ACT_DIE_HEADSHOT"
  },{
    "value":410,
    "kind":"constant",
    "name":"ACT_DIE_INCAP"
  },{
    "value":405,
    "kind":"constant",
    "name":"ACT_DIE_LEFTSIDE"
  },{
    "value":403,
    "kind":"constant",
    "name":"ACT_DIE_RIGHTSIDE"
  },{
    "value":988,
    "kind":"constant",
    "name":"ACT_DIE_STAND"
  },{
    "value":411,
    "kind":"constant",
    "name":"ACT_DIE_STANDING"
  },{
    "value":989,
    "kind":"constant",
    "name":"ACT_DIE_STAND_HEADSHOT"
  },{
    "value":72,
    "kind":"constant",
    "name":"ACT_DISARM"
  },{
    "value":416,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ANTLION"
  },{
    "value":415,
    "kind":"constant",
    "name":"ACT_DI_ALYX_HEADCRAB_MELEE"
  },{
    "value":413,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_MELEE"
  },{
    "value":418,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_SHOTGUN26"
  },{
    "value":417,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_SHOTGUN64"
  },{
    "value":414,
    "kind":"constant",
    "name":"ACT_DI_ALYX_ZOMBIE_TORSO_MELEE"
  },{
    "value":1580,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END",
    "enum":"GameActivity_t"
  },{
    "value":1572,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START",
    "enum":"GameActivity_t"
  },{
    "value":1573,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CONCOCTION",
    "enum":"GameActivity_t"
  },{
    "value":1579,
    "kind":"constant",
    "name":"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW",
    "enum":"GameActivity_t"
  },{
    "value":1627,
    "kind":"constant",
    "name":"ACT_DOTA_AMBUSH",
    "enum":"GameActivity_t"
  },{
    "value":1677,
    "kind":"constant",
    "name":"ACT_DOTA_ANCESTRAL_SPIRIT",
    "enum":"GameActivity_t"
  },{
    "value":1682,
    "kind":"constant",
    "name":"ACT_DOTA_ARCTIC_BURN_END",
    "enum":"GameActivity_t"
  },{
    "value":1661,
    "kind":"constant",
    "name":"ACT_DOTA_AREA_DENY",
    "enum":"GameActivity_t"
  },{
    "value":1503,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK",
    "enum":"GameActivity_t"
  },{
    "value":1504,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK2",
    "enum":"GameActivity_t"
  },{
    "value":1505,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK_EVENT",
    "enum":"GameActivity_t"
  },{
    "value":1705,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK_EVENT_BASH",
    "enum":"GameActivity_t"
  },{
    "value":1758,
    "kind":"constant",
    "name":"ACT_DOTA_ATTACK_SPECIAL",
    "enum":"GameActivity_t"
  },{
    "value":1707,
    "kind":"constant",
    "name":"ACT_DOTA_AW_MAGNETIC_FIELD",
    "enum":"GameActivity_t"
  },{
    "value":1614,
    "kind":"constant",
    "name":"ACT_DOTA_BELLYACHE_END",
    "enum":"GameActivity_t"
  },{
    "value":1613,
    "kind":"constant",
    "name":"ACT_DOTA_BELLYACHE_LOOP",
    "enum":"GameActivity_t"
  },{
    "value":1612,
    "kind":"constant",
    "name":"ACT_DOTA_BELLYACHE_START",
    "enum":"GameActivity_t"
  },{
    "value":1732,
    "kind":"constant",
    "name":"ACT_DOTA_BLINK_DAGGER",
    "enum":"GameActivity_t"
  },{
    "value":1733,
    "kind":"constant",
    "name":"ACT_DOTA_BLINK_DAGGER_END",
    "enum":"GameActivity_t"
  },{
    "value":1640,
    "kind":"constant",
    "name":"ACT_DOTA_BRIDGE_DESTROY",
    "enum":"GameActivity_t"
  },{
    "value":1650,
    "kind":"constant",
    "name":"ACT_DOTA_BRIDGE_THREAT",
    "enum":"GameActivity_t"
  },{
    "value":1644,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_RAGE",
    "enum":"GameActivity_t"
  },{
    "value":1645,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_RAGE_OUT",
    "enum":"GameActivity_t"
  },{
    "value":1646,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_SMASH",
    "enum":"GameActivity_t"
  },{
    "value":1647,
    "kind":"constant",
    "name":"ACT_DOTA_CAGED_CREEP_SMASH_OUT",
    "enum":"GameActivity_t"
  },{
    "value":1599,
    "kind":"constant",
    "name":"ACT_DOTA_CANCEL_SIREN_SONG",
    "enum":"GameActivity_t"
  },{
    "value":1533,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE",
    "enum":"GameActivity_t"
  },{
    "value":1717,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE_CARD",
    "enum":"GameActivity_t"
  },{
    "value":1698,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE_PET",
    "enum":"GameActivity_t"
  },{
    "value":1706,
    "kind":"constant",
    "name":"ACT_DOTA_CAPTURE_RARE",
    "enum":"GameActivity_t"
  },{
    "value":1510,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_1",
    "enum":"GameActivity_t"
  },{
    "value":1540,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_1_END",
    "enum":"GameActivity_t"
  },{
    "value":1511,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2",
    "enum":"GameActivity_t"
  },{
    "value":1748,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ALLY",
    "enum":"GameActivity_t"
  },{
    "value":1541,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_END",
    "enum":"GameActivity_t"
  },{
    "value":1653,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL",
    "enum":"GameActivity_t"
  },{
    "value":1654,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END",
    "enum":"GameActivity_t"
  },{
    "value":1652,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START",
    "enum":"GameActivity_t"
  },{
    "value":1512,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_3",
    "enum":"GameActivity_t"
  },{
    "value":1542,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_3_END",
    "enum":"GameActivity_t"
  },{
    "value":1513,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_4",
    "enum":"GameActivity_t"
  },{
    "value":1543,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_4_END",
    "enum":"GameActivity_t"
  },{
    "value":1514,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_5",
    "enum":"GameActivity_t"
  },{
    "value":1515,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_6",
    "enum":"GameActivity_t"
  },{
    "value":1598,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_7",
    "enum":"GameActivity_t"
  },{
    "value":1547,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ABILITY_ROT",
    "enum":"GameActivity_t"
  },{
    "value":1585,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ALACRITY",
    "enum":"GameActivity_t"
  },{
    "value":1741,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ALACRITY_ORB",
    "enum":"GameActivity_t"
  },{
    "value":1702,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_BURROW_END",
    "enum":"GameActivity_t"
  },{
    "value":1586,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_CHAOS_METEOR",
    "enum":"GameActivity_t"
  },{
    "value":1742,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_CHAOS_METEOR_ORB",
    "enum":"GameActivity_t"
  },{
    "value":1581,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_COLD_SNAP",
    "enum":"GameActivity_t"
  },{
    "value":1737,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_COLD_SNAP_ORB",
    "enum":"GameActivity_t"
  },{
    "value":1590,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_DEAFENING_BLAST",
    "enum":"GameActivity_t"
  },{
    "value":1746,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_DEAFENING_BLAST_ORB",
    "enum":"GameActivity_t"
  },{
    "value":1538,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_DRAGONBREATH",
    "enum":"GameActivity_t"
  },{
    "value":1584,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_EMP",
    "enum":"GameActivity_t"
  },{
    "value":1740,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_EMP_ORB",
    "enum":"GameActivity_t"
  },{
    "value":1771,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_FENCE"
  },{
    "value":1588,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_FORGE_SPIRIT",
    "enum":"GameActivity_t"
  },{
    "value":1744,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_FORGE_SPIRIT_ORB",
    "enum":"GameActivity_t"
  },{
    "value":1708,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_GHOST_SHIP",
    "enum":"GameActivity_t"
  },{
    "value":1582,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_GHOST_WALK",
    "enum":"GameActivity_t"
  },{
    "value":1738,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_GHOST_WALK_ORB",
    "enum":"GameActivity_t"
  },{
    "value":1589,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ICE_WALL",
    "enum":"GameActivity_t"
  },{
    "value":1745,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_ICE_WALL_ORB",
    "enum":"GameActivity_t"
  },{
    "value":1564,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_LIFE_BREAK_END",
    "enum":"GameActivity_t"
  },{
    "value":1563,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_LIFE_BREAK_START",
    "enum":"GameActivity_t"
  },{
    "value":1597,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_REFRACTION",
    "enum":"GameActivity_t"
  },{
    "value":1587,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_SUN_STRIKE",
    "enum":"GameActivity_t"
  },{
    "value":1743,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_SUN_STRIKE_ORB",
    "enum":"GameActivity_t"
  },{
    "value":1583,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_TORNADO",
    "enum":"GameActivity_t"
  },{
    "value":1739,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_TORNADO_ORB",
    "enum":"GameActivity_t"
  },{
    "value":1562,
    "kind":"constant",
    "name":"ACT_DOTA_CAST_WILD_AXES_END",
    "enum":"GameActivity_t"
  },{
    "value":1611,
    "kind":"constant",
    "name":"ACT_DOTA_CENTAUR_STAMPEDE",
    "enum":"GameActivity_t"
  },{
    "value":1520,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_1",
    "enum":"GameActivity_t"
  },{
    "value":1521,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_2",
    "enum":"GameActivity_t"
  },{
    "value":1522,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_3",
    "enum":"GameActivity_t"
  },{
    "value":1523,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_4",
    "enum":"GameActivity_t"
  },{
    "value":1524,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_5",
    "enum":"GameActivity_t"
  },{
    "value":1525,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_6",
    "enum":"GameActivity_t"
  },{
    "value":1600,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_ABILITY_7",
    "enum":"GameActivity_t"
  },{
    "value":1526,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_1",
    "enum":"GameActivity_t"
  },{
    "value":1527,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_2",
    "enum":"GameActivity_t"
  },{
    "value":1528,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_3",
    "enum":"GameActivity_t"
  },{
    "value":1529,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_4",
    "enum":"GameActivity_t"
  },{
    "value":1530,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_5",
    "enum":"GameActivity_t"
  },{
    "value":1531,
    "kind":"constant",
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_6",
    "enum":"GameActivity_t"
  },{
    "value":1673,
    "kind":"constant",
    "name":"ACT_DOTA_CHILLING_TOUCH",
    "enum":"GameActivity_t"
  },{
    "value":1671,
    "kind":"constant",
    "name":"ACT_DOTA_COLD_FEET",
    "enum":"GameActivity_t"
  },{
    "value":1532,
    "kind":"constant",
    "name":"ACT_DOTA_CONSTANT_LAYER",
    "enum":"GameActivity_t"
  },{
    "value":1734,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_ATTACK",
    "enum":"GameActivity_t"
  },{
    "value":1736,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_DIE",
    "enum":"GameActivity_t"
  },{
    "value":1757,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_HIGH_FIVE",
    "enum":"GameActivity_t"
  },{
    "value":1735,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_IDLE",
    "enum":"GameActivity_t"
  },{
    "value":1755,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_IDLE_RARE",
    "enum":"GameActivity_t"
  },{
    "value":1756,
    "kind":"constant",
    "name":"ACT_DOTA_CUSTOM_TOWER_TAUNT",
    "enum":"GameActivity_t"
  },{
    "value":1773,
    "kind":"constant",
    "name":"ACT_DOTA_CYCLONE"
  },{
    "value":1651,
    "kind":"constant",
    "name":"ACT_DOTA_DAGON",
    "enum":"GameActivity_t"
  },{
    "value":1642,
    "kind":"constant",
    "name":"ACT_DOTA_DEATH_BY_SNIPER",
    "enum":"GameActivity_t"
  },{
    "value":1592,
    "kind":"constant",
    "name":"ACT_DOTA_DEFEAT",
    "enum":"GameActivity_t"
  },{
    "value":1711,
    "kind":"constant",
    "name":"ACT_DOTA_DEFEAT_START",
    "enum":"GameActivity_t"
  },{
    "value":1506,
    "kind":"constant",
    "name":"ACT_DOTA_DIE",
    "enum":"GameActivity_t"
  },{
    "value":1548,
    "kind":"constant",
    "name":"ACT_DOTA_DIE_SPECIAL",
    "enum":"GameActivity_t"
  },{
    "value":1509,
    "kind":"constant",
    "name":"ACT_DOTA_DISABLED",
    "enum":"GameActivity_t"
  },{
    "value":1766,
    "kind":"constant",
    "name":"ACT_DOTA_DISABLED_END"
  },{
    "value":1712,
    "kind":"constant",
    "name":"ACT_DOTA_DP_SPIRIT_SIPHON",
    "enum":"GameActivity_t"
  },{
    "value":1570,
    "kind":"constant",
    "name":"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK",
    "enum":"GameActivity_t"
  },{
    "value":1539,
    "kind":"constant",
    "name":"ACT_DOTA_ECHO_SLAM",
    "enum":"GameActivity_t"
  },{
    "value":1674,
    "kind":"constant",
    "name":"ACT_DOTA_ENFEEBLE",
    "enum":"GameActivity_t"
  },{
    "value":1714,
    "kind":"constant",
    "name":"ACT_DOTA_ES_STONE_CALLER",
    "enum":"GameActivity_t"
  },{
    "value":1675,
    "kind":"constant",
    "name":"ACT_DOTA_FATAL_BONDS",
    "enum":"GameActivity_t"
  },{
    "value":1508,
    "kind":"constant",
    "name":"ACT_DOTA_FLAIL",
    "enum":"GameActivity_t"
  },{
    "value":1685,
    "kind":"constant",
    "name":"ACT_DOTA_FLEE",
    "enum":"GameActivity_t"
  },{
    "value":1507,
    "kind":"constant",
    "name":"ACT_DOTA_FLINCH",
    "enum":"GameActivity_t"
  },{
    "value":1602,
    "kind":"constant",
    "name":"ACT_DOTA_FORCESTAFF_END",
    "enum":"GameActivity_t"
  },{
    "value":1630,
    "kind":"constant",
    "name":"ACT_DOTA_FRUSTRATION",
    "enum":"GameActivity_t"
  },{
    "value":1709,
    "kind":"constant",
    "name":"ACT_DOTA_FXANIM",
    "enum":"GameActivity_t"
  },{
    "value":1728,
    "kind":"constant",
    "name":"ACT_DOTA_GENERIC_CHANNEL_1",
    "enum":"GameActivity_t"
  },{
    "value":1754,
    "kind":"constant",
    "name":"ACT_DOTA_GENERIC_CHANNEL_1_START",
    "enum":"GameActivity_t"
  },{
    "value":1625,
    "kind":"constant",
    "name":"ACT_DOTA_GESTURE_ACCENT",
    "enum":"GameActivity_t"
  },{
    "value":1624,
    "kind":"constant",
    "name":"ACT_DOTA_GESTURE_POINT",
    "enum":"GameActivity_t"
  },{
    "value":1690,
    "kind":"constant",
    "name":"ACT_DOTA_GREET",
    "enum":"GameActivity_t"
  },{
    "value":1621,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_BLINK_BONE",
    "enum":"GameActivity_t"
  },{
    "value":1617,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_CAST",
    "enum":"GameActivity_t"
  },{
    "value":1620,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_HOOK_END",
    "enum":"GameActivity_t"
  },{
    "value":1619,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_HOOK_START",
    "enum":"GameActivity_t"
  },{
    "value":1618,
    "kind":"constant",
    "name":"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY",
    "enum":"GameActivity_t"
  },{
    "value":1730,
    "kind":"constant",
    "name":"ACT_DOTA_GS_INK_CREATURE",
    "enum":"GameActivity_t"
  },{
    "value":1729,
    "kind":"constant",
    "name":"ACT_DOTA_GS_SOUL_CHAIN",
    "enum":"GameActivity_t"
  },{
    "value":1672,
    "kind":"constant",
    "name":"ACT_DOTA_ICE_VORTEX",
    "enum":"GameActivity_t"
  },{
    "value":1500,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE",
    "enum":"GameActivity_t"
  },{
    "value":1636,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_IMPATIENT",
    "enum":"GameActivity_t"
  },{
    "value":1648,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP",
    "enum":"GameActivity_t"
  },{
    "value":1501,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_RARE",
    "enum":"GameActivity_t"
  },{
    "value":1622,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_SLEEPING",
    "enum":"GameActivity_t"
  },{
    "value":1639,
    "kind":"constant",
    "name":"ACT_DOTA_IDLE_SLEEPING_END",
    "enum":"GameActivity_t"
  },{
    "value":1774,
    "kind":"constant",
    "name":"ACT_DOTA_IMPALE"
  },{
    "value":1623,
    "kind":"constant",
    "name":"ACT_DOTA_INTRO",
    "enum":"GameActivity_t"
  },{
    "value":1649,
    "kind":"constant",
    "name":"ACT_DOTA_INTRO_LOOP",
    "enum":"GameActivity_t"
  },{
    "value":1697,
    "kind":"constant",
    "name":"ACT_DOTA_ITEM_DROP",
    "enum":"GameActivity_t"
  },{
    "value":1628,
    "kind":"constant",
    "name":"ACT_DOTA_ITEM_LOOK",
    "enum":"GameActivity_t"
  },{
    "value":1696,
    "kind":"constant",
    "name":"ACT_DOTA_ITEM_PICKUP",
    "enum":"GameActivity_t"
  },{
    "value":1575,
    "kind":"constant",
    "name":"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP",
    "enum":"GameActivity_t"
  },{
    "value":1574,
    "kind":"constant",
    "name":"ACT_DOTA_JAKIRO_LIQUIDFIRE_START",
    "enum":"GameActivity_t"
  },{
    "value":1535,
    "kind":"constant",
    "name":"ACT_DOTA_KILLTAUNT",
    "enum":"GameActivity_t"
  },{
    "value":1679,
    "kind":"constant",
    "name":"ACT_DOTA_KINETIC_FIELD",
    "enum":"GameActivity_t"
  },{
    "value":1578,
    "kind":"constant",
    "name":"ACT_DOTA_LASSO_LOOP",
    "enum":"GameActivity_t"
  },{
    "value":1658,
    "kind":"constant",
    "name":"ACT_DOTA_LEAP_STUN",
    "enum":"GameActivity_t"
  },{
    "value":1659,
    "kind":"constant",
    "name":"ACT_DOTA_LEAP_SWIPE",
    "enum":"GameActivity_t"
  },{
    "value":1703,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_ASSIMILATE",
    "enum":"GameActivity_t"
  },{
    "value":1704,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_EJECT",
    "enum":"GameActivity_t"
  },{
    "value":1576,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_INFEST",
    "enum":"GameActivity_t"
  },{
    "value":1577,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_INFEST_END",
    "enum":"GameActivity_t"
  },{
    "value":1567,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS",
    "enum":"GameActivity_t"
  },{
    "value":1566,
    "kind":"constant",
    "name":"ACT_DOTA_LIFESTEALER_RAGE",
    "enum":"GameActivity_t"
  },{
    "value":1601,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT",
    "enum":"GameActivity_t"
  },{
    "value":1683,
    "kind":"constant",
    "name":"ACT_DOTA_LOADOUT_RARE",
    "enum":"GameActivity_t"
  },{
    "value":1643,
    "kind":"constant",
    "name":"ACT_DOTA_LOOK_AROUND",
    "enum":"GameActivity_t"
  },{
    "value":1606,
    "kind":"constant",
    "name":"ACT_DOTA_MAGNUS_SKEWER_END",
    "enum":"GameActivity_t"
  },{
    "value":1605,
    "kind":"constant",
    "name":"ACT_DOTA_MAGNUS_SKEWER_START",
    "enum":"GameActivity_t"
  },{
    "value":1607,
    "kind":"constant",
    "name":"ACT_DOTA_MEDUSA_STONE_GAZE",
    "enum":"GameActivity_t"
  },{
    "value":1676,
    "kind":"constant",
    "name":"ACT_DOTA_MIDNIGHT_PULSE",
    "enum":"GameActivity_t"
  },{
    "value":1681,
    "kind":"constant",
    "name":"ACT_DOTA_MINI_TAUNT",
    "enum":"GameActivity_t"
  },{
    "value":1722,
    "kind":"constant",
    "name":"ACT_DOTA_MK_FUR_ARMY",
    "enum":"GameActivity_t"
  },{
    "value":1723,
    "kind":"constant",
    "name":"ACT_DOTA_MK_SPRING_CAST",
    "enum":"GameActivity_t"
  },{
    "value":1719,
    "kind":"constant",
    "name":"ACT_DOTA_MK_SPRING_END",
    "enum":"GameActivity_t"
  },{
    "value":1718,
    "kind":"constant",
    "name":"ACT_DOTA_MK_SPRING_SOAR",
    "enum":"GameActivity_t"
  },{
    "value":1715,
    "kind":"constant",
    "name":"ACT_DOTA_MK_STRIKE",
    "enum":"GameActivity_t"
  },{
    "value":1764,
    "kind":"constant",
    "name":"ACT_DOTA_MK_STRIKE_END",
    "enum":"GameActivity_t"
  },{
    "value":1721,
    "kind":"constant",
    "name":"ACT_DOTA_MK_TREE_END",
    "enum":"GameActivity_t"
  },{
    "value":1720,
    "kind":"constant",
    "name":"ACT_DOTA_MK_TREE_SOAR",
    "enum":"GameActivity_t"
  },{
    "value":1724,
    "kind":"constant",
    "name":"ACT_DOTA_NECRO_GHOST_SHROUD",
    "enum":"GameActivity_t"
  },{
    "value":1660,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_INTRO_LEAP",
    "enum":"GameActivity_t"
  },{
    "value":1657,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_END",
    "enum":"GameActivity_t"
  },{
    "value":1656,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_LOOP",
    "enum":"GameActivity_t"
  },{
    "value":1655,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_START",
    "enum":"GameActivity_t"
  },{
    "value":1662,
    "kind":"constant",
    "name":"ACT_DOTA_NIAN_PIN_TO_STUN",
    "enum":"GameActivity_t"
  },{
    "value":1565,
    "kind":"constant",
    "name":"ACT_DOTA_NIGHTSTALKER_TRANSITION",
    "enum":"GameActivity_t"
  },{
    "value":1747,
    "kind":"constant",
    "name":"ACT_DOTA_NOTICE",
    "enum":"GameActivity_t"
  },{
    "value":1516,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_1",
    "enum":"GameActivity_t"
  },{
    "value":1517,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_2",
    "enum":"GameActivity_t"
  },{
    "value":1518,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_3",
    "enum":"GameActivity_t"
  },{
    "value":1519,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ABILITY_4",
    "enum":"GameActivity_t"
  },{
    "value":1725,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_ARCANA",
    "enum":"GameActivity_t"
  },{
    "value":1751,
    "kind":"constant",
    "name":"ACT_DOTA_OVERRIDE_LOADOUT",
    "enum":"GameActivity_t"
  },{
    "value":1701,
    "kind":"constant",
    "name":"ACT_DOTA_PET_LEVEL",
    "enum":"GameActivity_t"
  },{
    "value":1699,
    "kind":"constant",
    "name":"ACT_DOTA_PET_WARD_OBSERVER",
    "enum":"GameActivity_t"
  },{
    "value":1700,
    "kind":"constant",
    "name":"ACT_DOTA_PET_WARD_SENTRY",
    "enum":"GameActivity_t"
  },{
    "value":1760,
    "kind":"constant",
    "name":"ACT_DOTA_PIERCE_THE_VEIL",
    "enum":"GameActivity_t"
  },{
    "value":1603,
    "kind":"constant",
    "name":"ACT_DOTA_POOF_END",
    "enum":"GameActivity_t"
  },{
    "value":1635,
    "kind":"constant",
    "name":"ACT_DOTA_PRESENT_ITEM",
    "enum":"GameActivity_t"
  },{
    "value":1768,
    "kind":"constant",
    "name":"ACT_DOTA_RADIANT_CREEP_HAMMER"
  },{
    "value":1549,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_BATTERYASSAULT",
    "enum":"GameActivity_t"
  },{
    "value":1553,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_END",
    "enum":"GameActivity_t"
  },{
    "value":1552,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP",
    "enum":"GameActivity_t"
  },{
    "value":1551,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_START",
    "enum":"GameActivity_t"
  },{
    "value":1550,
    "kind":"constant",
    "name":"ACT_DOTA_RATTLETRAP_POWERCOGS",
    "enum":"GameActivity_t"
  },{
    "value":1663,
    "kind":"constant",
    "name":"ACT_DOTA_RAZE_1",
    "enum":"GameActivity_t"
  },{
    "value":1664,
    "kind":"constant",
    "name":"ACT_DOTA_RAZE_2",
    "enum":"GameActivity_t"
  },{
    "value":1665,
    "kind":"constant",
    "name":"ACT_DOTA_RAZE_3",
    "enum":"GameActivity_t"
  },{
    "value":1610,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_END",
    "enum":"GameActivity_t"
  },{
    "value":1769,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_IN"
  },{
    "value":1609,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_LOOP",
    "enum":"GameActivity_t"
  },{
    "value":1634,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_LOOP_END",
    "enum":"GameActivity_t"
  },{
    "value":1770,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_OUT"
  },{
    "value":1608,
    "kind":"constant",
    "name":"ACT_DOTA_RELAX_START",
    "enum":"GameActivity_t"
  },{
    "value":1615,
    "kind":"constant",
    "name":"ACT_DOTA_ROQUELAIRE_LAND",
    "enum":"GameActivity_t"
  },{
    "value":1616,
    "kind":"constant",
    "name":"ACT_DOTA_ROQUELAIRE_LAND_IDLE",
    "enum":"GameActivity_t"
  },{
    "value":1502,
    "kind":"constant",
    "name":"ACT_DOTA_RUN",
    "enum":"GameActivity_t"
  },{
    "value":1777,
    "kind":"constant",
    "name":"ACT_DOTA_RUN_ALT"
  },{
    "value":1761,
    "kind":"constant",
    "name":"ACT_DOTA_RUN_RARE",
    "enum":"GameActivity_t"
  },{
    "value":1568,
    "kind":"constant",
    "name":"ACT_DOTA_SAND_KING_BURROW_IN",
    "enum":"GameActivity_t"
  },{
    "value":1569,
    "kind":"constant",
    "name":"ACT_DOTA_SAND_KING_BURROW_OUT",
    "enum":"GameActivity_t"
  },{
    "value":1687,
    "kind":"constant",
    "name":"ACT_DOTA_SHAKE",
    "enum":"GameActivity_t"
  },{
    "value":1670,
    "kind":"constant",
    "name":"ACT_DOTA_SHALLOW_GRAVE",
    "enum":"GameActivity_t"
  },{
    "value":1637,
    "kind":"constant",
    "name":"ACT_DOTA_SHARPEN_WEAPON",
    "enum":"GameActivity_t"
  },{
    "value":1638,
    "kind":"constant",
    "name":"ACT_DOTA_SHARPEN_WEAPON_OUT",
    "enum":"GameActivity_t"
  },{
    "value":1695,
    "kind":"constant",
    "name":"ACT_DOTA_SHOPKEEPER_PET_INTERACT",
    "enum":"GameActivity_t"
  },{
    "value":1633,
    "kind":"constant",
    "name":"ACT_DOTA_SHRUG",
    "enum":"GameActivity_t"
  },{
    "value":1749,
    "kind":"constant",
    "name":"ACT_DOTA_SHUFFLE_L",
    "enum":"GameActivity_t"
  },{
    "value":1750,
    "kind":"constant",
    "name":"ACT_DOTA_SHUFFLE_R",
    "enum":"GameActivity_t"
  },{
    "value":1604,
    "kind":"constant",
    "name":"ACT_DOTA_SLARK_POUNCE",
    "enum":"GameActivity_t"
  },{
    "value":1626,
    "kind":"constant",
    "name":"ACT_DOTA_SLEEPING_END",
    "enum":"GameActivity_t"
  },{
    "value":1726,
    "kind":"constant",
    "name":"ACT_DOTA_SLIDE",
    "enum":"GameActivity_t"
  },{
    "value":1727,
    "kind":"constant",
    "name":"ACT_DOTA_SLIDE_LOOP",
    "enum":"GameActivity_t"
  },{
    "value":1534,
    "kind":"constant",
    "name":"ACT_DOTA_SPAWN",
    "enum":"GameActivity_t"
  },{
    "value":1594,
    "kind":"constant",
    "name":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END",
    "enum":"GameActivity_t"
  },{
    "value":1593,
    "kind":"constant",
    "name":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE",
    "enum":"GameActivity_t"
  },{
    "value":1772,
    "kind":"constant",
    "name":"ACT_DOTA_SPWN"
  },{
    "value":1629,
    "kind":"constant",
    "name":"ACT_DOTA_STARTLE",
    "enum":"GameActivity_t"
  },{
    "value":1680,
    "kind":"constant",
    "name":"ACT_DOTA_STATIC_STORM",
    "enum":"GameActivity_t"
  },{
    "value":1684,
    "kind":"constant",
    "name":"ACT_DOTA_SWIM",
    "enum":"GameActivity_t"
  },{
    "value":1688,
    "kind":"constant",
    "name":"ACT_DOTA_SWIM_IDLE",
    "enum":"GameActivity_t"
  },{
    "value":1536,
    "kind":"constant",
    "name":"ACT_DOTA_TAUNT",
    "enum":"GameActivity_t"
  },{
    "value":1641,
    "kind":"constant",
    "name":"ACT_DOTA_TAUNT_SNIPER",
    "enum":"GameActivity_t"
  },{
    "value":1752,
    "kind":"constant",
    "name":"ACT_DOTA_TAUNT_SPECIAL",
    "enum":"GameActivity_t"
  },{
    "value":1595,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT",
    "enum":"GameActivity_t"
  },{
    "value":1693,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_END",
    "enum":"GameActivity_t"
  },{
    "value":1694,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_EXIT",
    "enum":"GameActivity_t"
  },{
    "value":1691,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_START",
    "enum":"GameActivity_t"
  },{
    "value":1692,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_COOP_WAIT",
    "enum":"GameActivity_t"
  },{
    "value":1596,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_END",
    "enum":"GameActivity_t"
  },{
    "value":1632,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_END_REACT",
    "enum":"GameActivity_t"
  },{
    "value":1631,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_REACT",
    "enum":"GameActivity_t"
  },{
    "value":1753,
    "kind":"constant",
    "name":"ACT_DOTA_TELEPORT_START",
    "enum":"GameActivity_t"
  },{
    "value":1537,
    "kind":"constant",
    "name":"ACT_DOTA_THIRST",
    "enum":"GameActivity_t"
  },{
    "value":1678,
    "kind":"constant",
    "name":"ACT_DOTA_THUNDER_STRIKE",
    "enum":"GameActivity_t"
  },{
    "value":1555,
    "kind":"constant",
    "name":"ACT_DOTA_TINKER_REARM1",
    "enum":"GameActivity_t"
  },{
    "value":1556,
    "kind":"constant",
    "name":"ACT_DOTA_TINKER_REARM2",
    "enum":"GameActivity_t"
  },{
    "value":1557,
    "kind":"constant",
    "name":"ACT_DOTA_TINKER_REARM3",
    "enum":"GameActivity_t"
  },{
    "value":1775,
    "kind":"constant",
    "name":"ACT_DOTA_TORRENT"
  },{
    "value":1731,
    "kind":"constant",
    "name":"ACT_DOTA_TRANSITION",
    "enum":"GameActivity_t"
  },{
    "value":1759,
    "kind":"constant",
    "name":"ACT_DOTA_TRANSITION_IDLE",
    "enum":"GameActivity_t"
  },{
    "value":1713,
    "kind":"constant",
    "name":"ACT_DOTA_TRICKS_END",
    "enum":"GameActivity_t"
  },{
    "value":1686,
    "kind":"constant",
    "name":"ACT_DOTA_TROT",
    "enum":"GameActivity_t"
  },{
    "value":1666,
    "kind":"constant",
    "name":"ACT_DOTA_UNDYING_DECAY",
    "enum":"GameActivity_t"
  },{
    "value":1667,
    "kind":"constant",
    "name":"ACT_DOTA_UNDYING_SOUL_RIP",
    "enum":"GameActivity_t"
  },{
    "value":1668,
    "kind":"constant",
    "name":"ACT_DOTA_UNDYING_TOMBSTONE",
    "enum":"GameActivity_t"
  },{
    "value":1716,
    "kind":"constant",
    "name":"ACT_DOTA_VERSUS",
    "enum":"GameActivity_t"
  },{
    "value":1591,
    "kind":"constant",
    "name":"ACT_DOTA_VICTORY",
    "enum":"GameActivity_t"
  },{
    "value":1710,
    "kind":"constant",
    "name":"ACT_DOTA_VICTORY_START",
    "enum":"GameActivity_t"
  },{
    "value":1762,
    "kind":"constant",
    "name":"ACT_DOTA_VIPER_DIVE",
    "enum":"GameActivity_t"
  },{
    "value":1763,
    "kind":"constant",
    "name":"ACT_DOTA_VIPER_DIVE_END",
    "enum":"GameActivity_t"
  },{
    "value":1776,
    "kind":"constant",
    "name":"ACT_DOTA_VOODOO_REST"
  },{
    "value":1689,
    "kind":"constant",
    "name":"ACT_DOTA_WAIT_IDLE",
    "enum":"GameActivity_t"
  },{
    "value":1561,
    "kind":"constant",
    "name":"ACT_DOTA_WEAVERBUG_ATTACH",
    "enum":"GameActivity_t"
  },{
    "value":1571,
    "kind":"constant",
    "name":"ACT_DOTA_WHEEL_LAYER",
    "enum":"GameActivity_t"
  },{
    "value":1669,
    "kind":"constant",
    "name":"ACT_DOTA_WHIRLING_AXES_RANGED",
    "enum":"GameActivity_t"
  },{
    "value":179,
    "kind":"constant",
    "name":"ACT_DO_NOT_DISTURB"
  },{
    "value":73,
    "kind":"constant",
    "name":"ACT_DROP_WEAPON"
  },{
    "value":74,
    "kind":"constant",
    "name":"ACT_DROP_WEAPON_SHOTGUN"
  },{
    "value":395,
    "kind":"constant",
    "name":"ACT_DUCK_DODGE"
  },{
    "value":430,
    "kind":"constant",
    "name":"ACT_DYINGLOOP"
  },{
    "value":431,
    "kind":"constant",
    "name":"ACT_DYINGTODEAD"
  },{
    "value":910,
    "kind":"constant",
    "name":"ACT_EXPLODE"
  },{
    "value":906,
    "kind":"constant",
    "name":"ACT_FIRE"
  },{
    "value":438,
    "kind":"constant",
    "name":"ACT_FIRE_END"
  },{
    "value":437,
    "kind":"constant",
    "name":"ACT_FIRE_LOOP"
  },{
    "value":907,
    "kind":"constant",
    "name":"ACT_FIRE_RECOVER"
  },{
    "value":436,
    "kind":"constant",
    "name":"ACT_FIRE_START"
  },{
    "value":900,
    "kind":"constant",
    "name":"ACT_FLICK_LEFT"
  },{
    "value":901,
    "kind":"constant",
    "name":"ACT_FLICK_LEFT_MIDDLE"
  },{
    "value":903,
    "kind":"constant",
    "name":"ACT_FLICK_RIGHT"
  },{
    "value":902,
    "kind":"constant",
    "name":"ACT_FLICK_RIGHT_MIDDLE"
  },{
    "value":119,
    "kind":"constant",
    "name":"ACT_FLINCH_CHEST"
  },{
    "value":127,
    "kind":"constant",
    "name":"ACT_FLINCH_CHEST_BACK"
  },{
    "value":130,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_BACK"
  },{
    "value":129,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_FRONT"
  },{
    "value":131,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_LEFT"
  },{
    "value":132,
    "kind":"constant",
    "name":"ACT_FLINCH_CROUCH_RIGHT"
  },{
    "value":118,
    "kind":"constant",
    "name":"ACT_FLINCH_HEAD"
  },{
    "value":126,
    "kind":"constant",
    "name":"ACT_FLINCH_HEAD_BACK"
  },{
    "value":121,
    "kind":"constant",
    "name":"ACT_FLINCH_LEFTARM"
  },{
    "value":123,
    "kind":"constant",
    "name":"ACT_FLINCH_LEFTLEG"
  },{
    "value":125,
    "kind":"constant",
    "name":"ACT_FLINCH_PHYSICS"
  },{
    "value":122,
    "kind":"constant",
    "name":"ACT_FLINCH_RIGHTARM"
  },{
    "value":124,
    "kind":"constant",
    "name":"ACT_FLINCH_RIGHTLEG"
  },{
    "value":120,
    "kind":"constant",
    "name":"ACT_FLINCH_STOMACH"
  },{
    "value":128,
    "kind":"constant",
    "name":"ACT_FLINCH_STOMACH_BACK"
  },{
    "value":25,
    "kind":"constant",
    "name":"ACT_FLY"
  },{
    "value":476,
    "kind":"constant",
    "name":"ACT_GAUSS_SPINCYCLE"
  },{
    "value":475,
    "kind":"constant",
    "name":"ACT_GAUSS_SPINUP"
  },{
    "value":397,
    "kind":"constant",
    "name":"ACT_GESTURE_BARNACLE_STRANGLE"
  },{
    "value":153,
    "kind":"constant",
    "name":"ACT_GESTURE_BIG_FLINCH"
  },{
    "value":154,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST"
  },{
    "value":156,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST_DAMAGED"
  },{
    "value":157,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN"
  },{
    "value":155,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_BLAST_SHOTGUN"
  },{
    "value":159,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_CHEST"
  },{
    "value":158,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_HEAD"
  },{
    "value":161,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_LEFTARM"
  },{
    "value":163,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_LEFTLEG"
  },{
    "value":162,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_RIGHTARM"
  },{
    "value":164,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_RIGHTLEG"
  },{
    "value":160,
    "kind":"constant",
    "name":"ACT_GESTURE_FLINCH_STOMACH"
  },{
    "value":147,
    "kind":"constant",
    "name":"ACT_GESTURE_MELEE_ATTACK1"
  },{
    "value":148,
    "kind":"constant",
    "name":"ACT_GESTURE_MELEE_ATTACK2"
  },{
    "value":313,
    "kind":"constant",
    "name":"ACT_GESTURE_MELEE_ATTACK_SWING"
  },{
    "value":145,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK1"
  },{
    "value":149,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK1_LOW"
  },{
    "value":146,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK2"
  },{
    "value":150,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK2_LOW"
  },{
    "value":298,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_AR1"
  },{
    "value":299,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_AR2"
  },{
    "value":300,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE"
  },{
    "value":301,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_HMG1"
  },{
    "value":302,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_ML"
  },{
    "value":307,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_PISTOL"
  },{
    "value":308,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW"
  },{
    "value":306,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SHOTGUN"
  },{
    "value":309,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SLAM"
  },{
    "value":303,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG1"
  },{
    "value":304,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG1_LOW"
  },{
    "value":305,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG2"
  },{
    "value":312,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE"
  },{
    "value":311,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_THROW"
  },{
    "value":310,
    "kind":"constant",
    "name":"ACT_GESTURE_RANGE_ATTACK_TRIPWIRE"
  },{
    "value":377,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD"
  },{
    "value":378,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD_PISTOL"
  },{
    "value":380,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD_SHOTGUN"
  },{
    "value":379,
    "kind":"constant",
    "name":"ACT_GESTURE_RELOAD_SMG1"
  },{
    "value":152,
    "kind":"constant",
    "name":"ACT_GESTURE_SMALL_FLINCH"
  },{
    "value":165,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT"
  },{
    "value":167,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT45"
  },{
    "value":171,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT45_FLAT"
  },{
    "value":169,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT90"
  },{
    "value":173,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_LEFT90_FLAT"
  },{
    "value":166,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT"
  },{
    "value":168,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT45"
  },{
    "value":172,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT45_FLAT"
  },{
    "value":170,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT90"
  },{
    "value":174,
    "kind":"constant",
    "name":"ACT_GESTURE_TURN_RIGHT90_FLAT"
  },{
    "value":27,
    "kind":"constant",
    "name":"ACT_GLIDE"
  },{
    "value":958,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_ACTIVE"
  },{
    "value":959,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_ACTIVE_IDLE"
  },{
    "value":960,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_DEACTIVATE"
  },{
    "value":955,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_GRAB"
  },{
    "value":957,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_GRAB_IDLE"
  },{
    "value":961,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_PULL"
  },{
    "value":956,
    "kind":"constant",
    "name":"ACT_GRABBITYGLOVES_RELEASE"
  },{
    "value":962,
    "kind":"constant",
    "name":"ACT_HEADCRAB_SMOKE_BOMB"
  },{
    "value":963,
    "kind":"constant",
    "name":"ACT_HEADCRAB_SPIT"
  },{
    "value":500,
    "kind":"constant",
    "name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE"
  },{
    "value":501,
    "kind":"constant",
    "name":"ACT_HL2MP_GESTURE_RELOAD_MELEE"
  },{
    "value":498,
    "kind":"constant",
    "name":"ACT_HL2MP_IDLE_CROUCH_MELEE"
  },{
    "value":496,
    "kind":"constant",
    "name":"ACT_HL2MP_IDLE_MELEE"
  },{
    "value":502,
    "kind":"constant",
    "name":"ACT_HL2MP_JUMP_MELEE"
  },{
    "value":497,
    "kind":"constant",
    "name":"ACT_HL2MP_RUN_MELEE"
  },{
    "value":499,
    "kind":"constant",
    "name":"ACT_HL2MP_WALK_CROUCH_MELEE"
  },{
    "value":30,
    "kind":"constant",
    "name":"ACT_HOP"
  },{
    "value":26,
    "kind":"constant",
    "name":"ACT_HOVER"
  },{
    "value":1,
    "kind":"constant",
    "name":"ACT_IDLE"
  },{
    "value":493,
    "kind":"constant",
    "name":"ACT_IDLETORUN"
  },{
    "value":80,
    "kind":"constant",
    "name":"ACT_IDLE_AGITATED"
  },{
    "value":93,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_AGITATED"
  },{
    "value":879,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_AUTOGUN"
  },{
    "value":888,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_DUAL"
  },{
    "value":884,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_PISTOL"
  },{
    "value":91,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_RELAXED"
  },{
    "value":895,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_RIFLE"
  },{
    "value":331,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_RIFLE_STIMULATED"
  },{
    "value":893,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_SHOTGUN"
  },{
    "value":94,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_STEALTH"
  },{
    "value":92,
    "kind":"constant",
    "name":"ACT_IDLE_AIM_STIMULATED"
  },{
    "value":77,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY"
  },{
    "value":342,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_MELEE"
  },{
    "value":318,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_PISTOL"
  },{
    "value":345,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_RPG"
  },{
    "value":319,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_SHOTGUN"
  },{
    "value":316,
    "kind":"constant",
    "name":"ACT_IDLE_ANGRY_SMG1"
  },{
    "value":878,
    "kind":"constant",
    "name":"ACT_IDLE_AUTOGUN"
  },{
    "value":427,
    "kind":"constant",
    "name":"ACT_IDLE_CARRY"
  },{
    "value":887,
    "kind":"constant",
    "name":"ACT_IDLE_DUAL"
  },{
    "value":82,
    "kind":"constant",
    "name":"ACT_IDLE_HURT"
  },{
    "value":340,
    "kind":"constant",
    "name":"ACT_IDLE_MANNEDGUN"
  },{
    "value":341,
    "kind":"constant",
    "name":"ACT_IDLE_MELEE"
  },{
    "value":133,
    "kind":"constant",
    "name":"ACT_IDLE_ON_FIRE"
  },{
    "value":321,
    "kind":"constant",
    "name":"ACT_IDLE_PACKAGE"
  },{
    "value":317,
    "kind":"constant",
    "name":"ACT_IDLE_PISTOL"
  },{
    "value":78,
    "kind":"constant",
    "name":"ACT_IDLE_RELAXED"
  },{
    "value":314,
    "kind":"constant",
    "name":"ACT_IDLE_RIFLE"
  },{
    "value":344,
    "kind":"constant",
    "name":"ACT_IDLE_RPG"
  },{
    "value":343,
    "kind":"constant",
    "name":"ACT_IDLE_RPG_RELAXED"
  },{
    "value":336,
    "kind":"constant",
    "name":"ACT_IDLE_SHOTGUN_AGITATED"
  },{
    "value":334,
    "kind":"constant",
    "name":"ACT_IDLE_SHOTGUN_RELAXED"
  },{
    "value":335,
    "kind":"constant",
    "name":"ACT_IDLE_SHOTGUN_STIMULATED"
  },{
    "value":315,
    "kind":"constant",
    "name":"ACT_IDLE_SMG1"
  },{
    "value":325,
    "kind":"constant",
    "name":"ACT_IDLE_SMG1_RELAXED"
  },{
    "value":326,
    "kind":"constant",
    "name":"ACT_IDLE_SMG1_STIMULATED"
  },{
    "value":81,
    "kind":"constant",
    "name":"ACT_IDLE_STEALTH"
  },{
    "value":320,
    "kind":"constant",
    "name":"ACT_IDLE_STEALTH_PISTOL"
  },{
    "value":79,
    "kind":"constant",
    "name":"ACT_IDLE_STIMULATED"
  },{
    "value":323,
    "kind":"constant",
    "name":"ACT_IDLE_SUITCASE"
  },{
    "value":852,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_DRAW"
  },{
    "value":859,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_DRYFIRE"
  },{
    "value":853,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_HOLSTER"
  },{
    "value":854,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_IDLE"
  },{
    "value":861,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_IDLE_LOWERED"
  },{
    "value":860,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_IDLE_TO_LOWERED"
  },{
    "value":862,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_LOWERED_TO_IDLE"
  },{
    "value":856,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_PRIMARYATTACK"
  },{
    "value":855,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_PULLBACK"
  },{
    "value":858,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_RELOAD"
  },{
    "value":857,
    "kind":"constant",
    "name":"ACT_ITEM1_VM_SECONDARYATTACK"
  },{
    "value":863,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_DRAW"
  },{
    "value":870,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_DRYFIRE"
  },{
    "value":864,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_HOLSTER"
  },{
    "value":865,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_IDLE"
  },{
    "value":872,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_IDLE_LOWERED"
  },{
    "value":871,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_IDLE_TO_LOWERED"
  },{
    "value":873,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_LOWERED_TO_IDLE"
  },{
    "value":867,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_PRIMARYATTACK"
  },{
    "value":866,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_PULLBACK"
  },{
    "value":869,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_RELOAD"
  },{
    "value":868,
    "kind":"constant",
    "name":"ACT_ITEM2_VM_SECONDARYATTACK"
  },{
    "value":29,
    "kind":"constant",
    "name":"ACT_JUMP"
  },{
    "value":883,
    "kind":"constant",
    "name":"ACT_JUMP_AUTOGUN"
  },{
    "value":892,
    "kind":"constant",
    "name":"ACT_JUMP_DUAL"
  },{
    "value":32,
    "kind":"constant",
    "name":"ACT_LAND"
  },{
    "value":31,
    "kind":"constant",
    "name":"ACT_LEAP"
  },{
    "value":61,
    "kind":"constant",
    "name":"ACT_LOOKBACK_LEFT"
  },{
    "value":60,
    "kind":"constant",
    "name":"ACT_LOOKBACK_RIGHT"
  },{
    "value":65,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK1"
  },{
    "value":66,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK2"
  },{
    "value":291,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK_SWING"
  },{
    "value":151,
    "kind":"constant",
    "name":"ACT_MELEE_ATTACK_SWING_GESTURE"
  },{
    "value":830,
    "kind":"constant",
    "name":"ACT_MELEE_VM_DRAW"
  },{
    "value":837,
    "kind":"constant",
    "name":"ACT_MELEE_VM_DRYFIRE"
  },{
    "value":831,
    "kind":"constant",
    "name":"ACT_MELEE_VM_HOLSTER"
  },{
    "value":832,
    "kind":"constant",
    "name":"ACT_MELEE_VM_IDLE"
  },{
    "value":839,
    "kind":"constant",
    "name":"ACT_MELEE_VM_IDLE_LOWERED"
  },{
    "value":838,
    "kind":"constant",
    "name":"ACT_MELEE_VM_IDLE_TO_LOWERED"
  },{
    "value":840,
    "kind":"constant",
    "name":"ACT_MELEE_VM_LOWERED_TO_IDLE"
  },{
    "value":834,
    "kind":"constant",
    "name":"ACT_MELEE_VM_PRIMARYATTACK"
  },{
    "value":833,
    "kind":"constant",
    "name":"ACT_MELEE_VM_PULLBACK"
  },{
    "value":836,
    "kind":"constant",
    "name":"ACT_MELEE_VM_RELOAD"
  },{
    "value":835,
    "kind":"constant",
    "name":"ACT_MELEE_VM_SECONDARYATTACK"
  },{
    "value":1544,
    "kind":"constant",
    "name":"ACT_MIRANA_LEAP_END",
    "enum":"GameActivity_t"
  },{
    "value":510,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK"
  },{
    "value":729,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_BUILDING"
  },{
    "value":646,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_ITEM1"
  },{
    "value":663,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_ITEM2"
  },{
    "value":625,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_MELEE"
  },{
    "value":748,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_PDA"
  },{
    "value":559,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_PRIMARY"
  },{
    "value":594,
    "kind":"constant",
    "name":"ACT_MP_AIRWALK_SECONDARY"
  },{
    "value":739,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_BUILDING"
  },{
    "value":535,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE"
  },{
    "value":743,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING"
  },{
    "value":641,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE"
  },{
    "value":589,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY"
  },{
    "value":620,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY"
  },{
    "value":658,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_ITEM1"
  },{
    "value":675,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_ITEM2"
  },{
    "value":637,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_MELEE"
  },{
    "value":573,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_PRIMARY"
  },{
    "value":533,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE"
  },{
    "value":604,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_SECONDARY"
  },{
    "value":534,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE"
  },{
    "value":737,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_BUILDING"
  },{
    "value":529,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE"
  },{
    "value":741,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING"
  },{
    "value":639,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_MELEE"
  },{
    "value":587,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY"
  },{
    "value":618,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY"
  },{
    "value":655,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM1"
  },{
    "value":656,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY"
  },{
    "value":672,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM2"
  },{
    "value":673,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY"
  },{
    "value":634,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_MELEE"
  },{
    "value":635,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY"
  },{
    "value":552,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_POSTFIRE"
  },{
    "value":551,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PREFIRE"
  },{
    "value":570,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARY"
  },{
    "value":526,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARYFIRE"
  },{
    "value":527,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED"
  },{
    "value":571,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED"
  },{
    "value":602,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_SECONDARY"
  },{
    "value":528,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_CROUCH_SECONDARYFIRE"
  },{
    "value":736,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_BUILDING"
  },{
    "value":525,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE"
  },{
    "value":740,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_BUILDING"
  },{
    "value":638,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_MELEE"
  },{
    "value":586,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_PRIMARY"
  },{
    "value":617,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_GRENADE_SECONDARY"
  },{
    "value":653,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM1"
  },{
    "value":654,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM1_SECONDARY"
  },{
    "value":670,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM2"
  },{
    "value":671,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_ITEM2_SECONDARY"
  },{
    "value":632,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_MELEE"
  },{
    "value":633,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_MELEE_SECONDARY"
  },{
    "value":755,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PDA"
  },{
    "value":549,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_POSTFIRE"
  },{
    "value":548,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PREFIRE"
  },{
    "value":568,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARY"
  },{
    "value":522,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARYFIRE"
  },{
    "value":523,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED"
  },{
    "value":569,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED"
  },{
    "value":601,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_SECONDARY"
  },{
    "value":524,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_SECONDARYFIRE"
  },{
    "value":550,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_STAND_STARTFIRE"
  },{
    "value":738,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_BUILDING"
  },{
    "value":532,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE"
  },{
    "value":742,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_BUILDING"
  },{
    "value":640,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_MELEE"
  },{
    "value":588,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY"
  },{
    "value":619,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY"
  },{
    "value":657,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_ITEM1"
  },{
    "value":674,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_ITEM2"
  },{
    "value":636,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_MELEE"
  },{
    "value":756,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PDA"
  },{
    "value":554,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_POSTFIRE"
  },{
    "value":553,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PREFIRE"
  },{
    "value":572,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PRIMARY"
  },{
    "value":530,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_PRIMARYFIRE"
  },{
    "value":603,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_SECONDARY"
  },{
    "value":531,
    "kind":"constant",
    "name":"ACT_MP_ATTACK_SWIM_SECONDARYFIRE"
  },{
    "value":511,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK"
  },{
    "value":730,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_BUILDING"
  },{
    "value":647,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_ITEM1"
  },{
    "value":664,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_ITEM2"
  },{
    "value":626,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_MELEE"
  },{
    "value":749,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_PDA"
  },{
    "value":560,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_PRIMARY"
  },{
    "value":595,
    "kind":"constant",
    "name":"ACT_MP_CROUCHWALK_SECONDARY"
  },{
    "value":726,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_BUILDING"
  },{
    "value":506,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_DEPLOYED"
  },{
    "value":505,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_DEPLOYED_IDLE"
  },{
    "value":504,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_IDLE"
  },{
    "value":643,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_ITEM1"
  },{
    "value":660,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_ITEM2"
  },{
    "value":622,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_MELEE"
  },{
    "value":745,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_PDA"
  },{
    "value":556,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_PRIMARY"
  },{
    "value":591,
    "kind":"constant",
    "name":"ACT_MP_CROUCH_SECONDARY"
  },{
    "value":519,
    "kind":"constant",
    "name":"ACT_MP_DEPLOYED"
  },{
    "value":507,
    "kind":"constant",
    "name":"ACT_MP_DEPLOYED_IDLE"
  },{
    "value":566,
    "kind":"constant",
    "name":"ACT_MP_DEPLOYED_PRIMARY"
  },{
    "value":517,
    "kind":"constant",
    "name":"ACT_MP_DOUBLEJUMP"
  },{
    "value":676,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH"
  },{
    "value":683,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_CHEST"
  },{
    "value":682,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_HEAD"
  },{
    "value":680,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_ITEM1"
  },{
    "value":681,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_ITEM2"
  },{
    "value":685,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_LEFTARM"
  },{
    "value":687,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_LEFTLEG"
  },{
    "value":679,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_MELEE"
  },{
    "value":677,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_PRIMARY"
  },{
    "value":686,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_RIGHTARM"
  },{
    "value":688,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_RIGHTLEG"
  },{
    "value":678,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_SECONDARY"
  },{
    "value":684,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_FLINCH_STOMACH"
  },{
    "value":758,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT"
  },{
    "value":794,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING"
  },{
    "value":782,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1"
  },{
    "value":788,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2"
  },{
    "value":776,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_MELEE"
  },{
    "value":800,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_PDA"
  },{
    "value":764,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY"
  },{
    "value":770,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY"
  },{
    "value":759,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP"
  },{
    "value":795,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_BUILDING"
  },{
    "value":783,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_ITEM1"
  },{
    "value":789,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_ITEM2"
  },{
    "value":777,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_MELEE"
  },{
    "value":801,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_PDA"
  },{
    "value":765,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY"
  },{
    "value":771,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY"
  },{
    "value":757,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH"
  },{
    "value":793,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING"
  },{
    "value":781,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1"
  },{
    "value":787,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2"
  },{
    "value":775,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_MELEE"
  },{
    "value":799,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_PDA"
  },{
    "value":763,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY"
  },{
    "value":769,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY"
  },{
    "value":762,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO"
  },{
    "value":798,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_BUILDING"
  },{
    "value":786,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_ITEM1"
  },{
    "value":792,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_ITEM2"
  },{
    "value":780,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_MELEE"
  },{
    "value":804,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_PDA"
  },{
    "value":768,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_PRIMARY"
  },{
    "value":774,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODNO_SECONDARY"
  },{
    "value":761,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES"
  },{
    "value":797,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_BUILDING"
  },{
    "value":785,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_ITEM1"
  },{
    "value":791,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_ITEM2"
  },{
    "value":779,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_MELEE"
  },{
    "value":803,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_PDA"
  },{
    "value":767,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_PRIMARY"
  },{
    "value":773,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_NODYES_SECONDARY"
  },{
    "value":760,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP"
  },{
    "value":796,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_BUILDING"
  },{
    "value":784,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_ITEM1"
  },{
    "value":790,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_ITEM2"
  },{
    "value":778,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_MELEE"
  },{
    "value":802,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_PDA"
  },{
    "value":766,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY"
  },{
    "value":772,
    "kind":"constant",
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY"
  },{
    "value":691,
    "kind":"constant",
    "name":"ACT_MP_GRENADE1_ATTACK"
  },{
    "value":689,
    "kind":"constant",
    "name":"ACT_MP_GRENADE1_DRAW"
  },{
    "value":690,
    "kind":"constant",
    "name":"ACT_MP_GRENADE1_IDLE"
  },{
    "value":694,
    "kind":"constant",
    "name":"ACT_MP_GRENADE2_ATTACK"
  },{
    "value":692,
    "kind":"constant",
    "name":"ACT_MP_GRENADE2_DRAW"
  },{
    "value":693,
    "kind":"constant",
    "name":"ACT_MP_GRENADE2_IDLE"
  },{
    "value":715,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE1_ATTACK"
  },{
    "value":713,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE1_DRAW"
  },{
    "value":714,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE1_IDLE"
  },{
    "value":718,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE2_ATTACK"
  },{
    "value":716,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE2_DRAW"
  },{
    "value":717,
    "kind":"constant",
    "name":"ACT_MP_ITEM1_GRENADE2_IDLE"
  },{
    "value":721,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE1_ATTACK"
  },{
    "value":719,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE1_DRAW"
  },{
    "value":720,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE1_IDLE"
  },{
    "value":724,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE2_ATTACK"
  },{
    "value":722,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE2_DRAW"
  },{
    "value":723,
    "kind":"constant",
    "name":"ACT_MP_ITEM2_GRENADE2_IDLE"
  },{
    "value":513,
    "kind":"constant",
    "name":"ACT_MP_JUMP"
  },{
    "value":731,
    "kind":"constant",
    "name":"ACT_MP_JUMP_BUILDING"
  },{
    "value":515,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT"
  },{
    "value":733,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_BUILDING"
  },{
    "value":650,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_ITEM1"
  },{
    "value":667,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_ITEM2"
  },{
    "value":629,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_MELEE"
  },{
    "value":752,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_PDA"
  },{
    "value":563,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_PRIMARY"
  },{
    "value":598,
    "kind":"constant",
    "name":"ACT_MP_JUMP_FLOAT_SECONDARY"
  },{
    "value":648,
    "kind":"constant",
    "name":"ACT_MP_JUMP_ITEM1"
  },{
    "value":665,
    "kind":"constant",
    "name":"ACT_MP_JUMP_ITEM2"
  },{
    "value":516,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND"
  },{
    "value":734,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_BUILDING"
  },{
    "value":651,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_ITEM1"
  },{
    "value":668,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_ITEM2"
  },{
    "value":630,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_MELEE"
  },{
    "value":753,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_PDA"
  },{
    "value":564,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_PRIMARY"
  },{
    "value":599,
    "kind":"constant",
    "name":"ACT_MP_JUMP_LAND_SECONDARY"
  },{
    "value":627,
    "kind":"constant",
    "name":"ACT_MP_JUMP_MELEE"
  },{
    "value":750,
    "kind":"constant",
    "name":"ACT_MP_JUMP_PDA"
  },{
    "value":561,
    "kind":"constant",
    "name":"ACT_MP_JUMP_PRIMARY"
  },{
    "value":596,
    "kind":"constant",
    "name":"ACT_MP_JUMP_SECONDARY"
  },{
    "value":514,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START"
  },{
    "value":732,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_BUILDING"
  },{
    "value":649,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_ITEM1"
  },{
    "value":666,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_ITEM2"
  },{
    "value":628,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_MELEE"
  },{
    "value":751,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_PDA"
  },{
    "value":562,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_PRIMARY"
  },{
    "value":597,
    "kind":"constant",
    "name":"ACT_MP_JUMP_START_SECONDARY"
  },{
    "value":709,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE1_ATTACK"
  },{
    "value":707,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE1_DRAW"
  },{
    "value":708,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE1_IDLE"
  },{
    "value":712,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE2_ATTACK"
  },{
    "value":710,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE2_DRAW"
  },{
    "value":711,
    "kind":"constant",
    "name":"ACT_MP_MELEE_GRENADE2_IDLE"
  },{
    "value":697,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE1_ATTACK"
  },{
    "value":695,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE1_DRAW"
  },{
    "value":696,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE1_IDLE"
  },{
    "value":700,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE2_ATTACK"
  },{
    "value":698,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE2_DRAW"
  },{
    "value":699,
    "kind":"constant",
    "name":"ACT_MP_PRIMARY_GRENADE2_IDLE"
  },{
    "value":545,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK"
  },{
    "value":547,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_END"
  },{
    "value":546,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_LOOP"
  },{
    "value":583,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY"
  },{
    "value":585,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY_END"
  },{
    "value":584,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP"
  },{
    "value":614,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY"
  },{
    "value":616,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY_END"
  },{
    "value":615,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP"
  },{
    "value":539,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH"
  },{
    "value":541,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_END"
  },{
    "value":540,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_LOOP"
  },{
    "value":577,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY"
  },{
    "value":579,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY_END"
  },{
    "value":578,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP"
  },{
    "value":608,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY"
  },{
    "value":610,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY_END"
  },{
    "value":609,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP"
  },{
    "value":536,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND"
  },{
    "value":538,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_END"
  },{
    "value":537,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_LOOP"
  },{
    "value":574,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_PRIMARY"
  },{
    "value":576,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_PRIMARY_END"
  },{
    "value":575,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_PRIMARY_LOOP"
  },{
    "value":605,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_SECONDARY"
  },{
    "value":607,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_SECONDARY_END"
  },{
    "value":606,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_STAND_SECONDARY_LOOP"
  },{
    "value":542,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM"
  },{
    "value":544,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_END"
  },{
    "value":543,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_LOOP"
  },{
    "value":580,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY"
  },{
    "value":582,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY_END"
  },{
    "value":581,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY_LOOP"
  },{
    "value":611,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY"
  },{
    "value":613,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY_END"
  },{
    "value":612,
    "kind":"constant",
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY_LOOP"
  },{
    "value":508,
    "kind":"constant",
    "name":"ACT_MP_RUN"
  },{
    "value":727,
    "kind":"constant",
    "name":"ACT_MP_RUN_BUILDING"
  },{
    "value":644,
    "kind":"constant",
    "name":"ACT_MP_RUN_ITEM1"
  },{
    "value":661,
    "kind":"constant",
    "name":"ACT_MP_RUN_ITEM2"
  },{
    "value":623,
    "kind":"constant",
    "name":"ACT_MP_RUN_MELEE"
  },{
    "value":746,
    "kind":"constant",
    "name":"ACT_MP_RUN_PDA"
  },{
    "value":557,
    "kind":"constant",
    "name":"ACT_MP_RUN_PRIMARY"
  },{
    "value":592,
    "kind":"constant",
    "name":"ACT_MP_RUN_SECONDARY"
  },{
    "value":703,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE1_ATTACK"
  },{
    "value":701,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE1_DRAW"
  },{
    "value":702,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE1_IDLE"
  },{
    "value":706,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE2_ATTACK"
  },{
    "value":704,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE2_DRAW"
  },{
    "value":705,
    "kind":"constant",
    "name":"ACT_MP_SECONDARY_GRENADE2_IDLE"
  },{
    "value":512,
    "kind":"constant",
    "name":"ACT_MP_SPRINT"
  },{
    "value":725,
    "kind":"constant",
    "name":"ACT_MP_STAND_BUILDING"
  },{
    "value":503,
    "kind":"constant",
    "name":"ACT_MP_STAND_IDLE"
  },{
    "value":642,
    "kind":"constant",
    "name":"ACT_MP_STAND_ITEM1"
  },{
    "value":659,
    "kind":"constant",
    "name":"ACT_MP_STAND_ITEM2"
  },{
    "value":621,
    "kind":"constant",
    "name":"ACT_MP_STAND_MELEE"
  },{
    "value":744,
    "kind":"constant",
    "name":"ACT_MP_STAND_PDA"
  },{
    "value":555,
    "kind":"constant",
    "name":"ACT_MP_STAND_PRIMARY"
  },{
    "value":590,
    "kind":"constant",
    "name":"ACT_MP_STAND_SECONDARY"
  },{
    "value":518,
    "kind":"constant",
    "name":"ACT_MP_SWIM"
  },{
    "value":735,
    "kind":"constant",
    "name":"ACT_MP_SWIM_BUILDING"
  },{
    "value":520,
    "kind":"constant",
    "name":"ACT_MP_SWIM_DEPLOYED"
  },{
    "value":567,
    "kind":"constant",
    "name":"ACT_MP_SWIM_DEPLOYED_PRIMARY"
  },{
    "value":652,
    "kind":"constant",
    "name":"ACT_MP_SWIM_ITEM1"
  },{
    "value":669,
    "kind":"constant",
    "name":"ACT_MP_SWIM_ITEM2"
  },{
    "value":631,
    "kind":"constant",
    "name":"ACT_MP_SWIM_MELEE"
  },{
    "value":754,
    "kind":"constant",
    "name":"ACT_MP_SWIM_PDA"
  },{
    "value":565,
    "kind":"constant",
    "name":"ACT_MP_SWIM_PRIMARY"
  },{
    "value":600,
    "kind":"constant",
    "name":"ACT_MP_SWIM_SECONDARY"
  },{
    "value":521,
    "kind":"constant",
    "name":"ACT_MP_VCD"
  },{
    "value":509,
    "kind":"constant",
    "name":"ACT_MP_WALK"
  },{
    "value":728,
    "kind":"constant",
    "name":"ACT_MP_WALK_BUILDING"
  },{
    "value":645,
    "kind":"constant",
    "name":"ACT_MP_WALK_ITEM1"
  },{
    "value":662,
    "kind":"constant",
    "name":"ACT_MP_WALK_ITEM2"
  },{
    "value":624,
    "kind":"constant",
    "name":"ACT_MP_WALK_MELEE"
  },{
    "value":747,
    "kind":"constant",
    "name":"ACT_MP_WALK_PDA"
  },{
    "value":558,
    "kind":"constant",
    "name":"ACT_MP_WALK_PRIMARY"
  },{
    "value":593,
    "kind":"constant",
    "name":"ACT_MP_WALK_SECONDARY"
  },{
    "value":966,
    "kind":"constant",
    "name":"ACT_NEUTRAL_REF_POSE"
  },{
    "value":463,
    "kind":"constant",
    "name":"ACT_OBJ_ASSEMBLING"
  },{
    "value":469,
    "kind":"constant",
    "name":"ACT_OBJ_DETERIORATING"
  },{
    "value":464,
    "kind":"constant",
    "name":"ACT_OBJ_DISMANTLING"
  },{
    "value":467,
    "kind":"constant",
    "name":"ACT_OBJ_IDLE"
  },{
    "value":468,
    "kind":"constant",
    "name":"ACT_OBJ_PLACING"
  },{
    "value":466,
    "kind":"constant",
    "name":"ACT_OBJ_RUNNING"
  },{
    "value":465,
    "kind":"constant",
    "name":"ACT_OBJ_STARTUP"
  },{
    "value":470,
    "kind":"constant",
    "name":"ACT_OBJ_UPGRADING"
  },{
    "value":412,
    "kind":"constant",
    "name":"ACT_OPEN_DOOR"
  },{
    "value":442,
    "kind":"constant",
    "name":"ACT_OVERLAY_GRENADEIDLE"
  },{
    "value":443,
    "kind":"constant",
    "name":"ACT_OVERLAY_GRENADEREADY"
  },{
    "value":444,
    "kind":"constant",
    "name":"ACT_OVERLAY_PRIMARYATTACK"
  },{
    "value":448,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_ATTACK"
  },{
    "value":446,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_DOWN"
  },{
    "value":449,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_KNOCKBACK"
  },{
    "value":445,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_UP"
  },{
    "value":447,
    "kind":"constant",
    "name":"ACT_OVERLAY_SHIELD_UP_IDLE"
  },{
    "value":841,
    "kind":"constant",
    "name":"ACT_PDA_VM_DRAW"
  },{
    "value":848,
    "kind":"constant",
    "name":"ACT_PDA_VM_DRYFIRE"
  },{
    "value":842,
    "kind":"constant",
    "name":"ACT_PDA_VM_HOLSTER"
  },{
    "value":843,
    "kind":"constant",
    "name":"ACT_PDA_VM_IDLE"
  },{
    "value":850,
    "kind":"constant",
    "name":"ACT_PDA_VM_IDLE_LOWERED"
  },{
    "value":849,
    "kind":"constant",
    "name":"ACT_PDA_VM_IDLE_TO_LOWERED"
  },{
    "value":851,
    "kind":"constant",
    "name":"ACT_PDA_VM_LOWERED_TO_IDLE"
  },{
    "value":845,
    "kind":"constant",
    "name":"ACT_PDA_VM_PRIMARYATTACK"
  },{
    "value":844,
    "kind":"constant",
    "name":"ACT_PDA_VM_PULLBACK"
  },{
    "value":847,
    "kind":"constant",
    "name":"ACT_PDA_VM_RELOAD"
  },{
    "value":846,
    "kind":"constant",
    "name":"ACT_PDA_VM_SECONDARYATTACK"
  },{
    "value":272,
    "kind":"constant",
    "name":"ACT_PHYSCANNON_UPGRADE"
  },{
    "value":75,
    "kind":"constant",
    "name":"ACT_PICKUP_GROUND"
  },{
    "value":76,
    "kind":"constant",
    "name":"ACT_PICKUP_RACK"
  },{
    "value":489,
    "kind":"constant",
    "name":"ACT_PLAYER_CROUCH_FIRE"
  },{
    "value":490,
    "kind":"constant",
    "name":"ACT_PLAYER_CROUCH_WALK_FIRE"
  },{
    "value":488,
    "kind":"constant",
    "name":"ACT_PLAYER_IDLE_FIRE"
  },{
    "value":492,
    "kind":"constant",
    "name":"ACT_PLAYER_RUN_FIRE"
  },{
    "value":491,
    "kind":"constant",
    "name":"ACT_PLAYER_WALK_FIRE"
  },{
    "value":338,
    "kind":"constant",
    "name":"ACT_POLICE_HARASS1"
  },{
    "value":339,
    "kind":"constant",
    "name":"ACT_POLICE_HARASS2"
  },{
    "value":909,
    "kind":"constant",
    "name":"ACT_PREP_EXPLODE"
  },{
    "value":905,
    "kind":"constant",
    "name":"ACT_PREP_TO_FIRE"
  },{
    "value":808,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_DRAW"
  },{
    "value":815,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_DRYFIRE"
  },{
    "value":809,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_HOLSTER"
  },{
    "value":810,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_IDLE"
  },{
    "value":817,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_IDLE_LOWERED"
  },{
    "value":816,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_IDLE_TO_LOWERED"
  },{
    "value":818,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_LOWERED_TO_IDLE"
  },{
    "value":812,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_PRIMARYATTACK"
  },{
    "value":811,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_PULLBACK"
  },{
    "value":814,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_RELOAD"
  },{
    "value":813,
    "kind":"constant",
    "name":"ACT_PRIMARY_VM_SECONDARYATTACK"
  },{
    "value":952,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_BACK"
  },{
    "value":951,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_FRONT"
  },{
    "value":953,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_LEFT"
  },{
    "value":954,
    "kind":"constant",
    "name":"ACT_RAGDOLL_RECOVERY_RIGHT"
  },{
    "value":295,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_AR2_LOW"
  },{
    "value":292,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_LOW"
  },{
    "value":294,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_PISTOL_LOW"
  },{
    "value":293,
    "kind":"constant",
    "name":"ACT_RANGE_AIM_SMG1_LOW"
  },{
    "value":16,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK1"
  },{
    "value":18,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK1_LOW"
  },{
    "value":17,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK2"
  },{
    "value":19,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK2_LOW"
  },{
    "value":273,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR1"
  },{
    "value":274,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR2"
  },{
    "value":276,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR2_GRENADE"
  },{
    "value":275,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AR2_LOW"
  },{
    "value":882,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_AUTOGUN"
  },{
    "value":891,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_DUAL"
  },{
    "value":277,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_HMG1"
  },{
    "value":278,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_ML"
  },{
    "value":284,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_PISTOL"
  },{
    "value":285,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_PISTOL_LOW"
  },{
    "value":897,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_RIFLE"
  },{
    "value":290,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_RPG"
  },{
    "value":282,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SHOTGUN"
  },{
    "value":283,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SHOTGUN_LOW"
  },{
    "value":286,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SLAM"
  },{
    "value":279,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SMG1"
  },{
    "value":280,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SMG1_LOW"
  },{
    "value":281,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SMG2"
  },{
    "value":289,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_SNIPER_RIFLE"
  },{
    "value":288,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_THROW"
  },{
    "value":287,
    "kind":"constant",
    "name":"ACT_RANGE_ATTACK_TRIPWIRE"
  },{
    "value":421,
    "kind":"constant",
    "name":"ACT_READINESS_AGITATED_TO_STIMULATED"
  },{
    "value":425,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED"
  },{
    "value":423,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED"
  },{
    "value":424,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK"
  },{
    "value":426,
    "kind":"constant",
    "name":"ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED"
  },{
    "value":419,
    "kind":"constant",
    "name":"ACT_READINESS_RELAXED_TO_STIMULATED"
  },{
    "value":420,
    "kind":"constant",
    "name":"ACT_READINESS_RELAXED_TO_STIMULATED_WALK"
  },{
    "value":422,
    "kind":"constant",
    "name":"ACT_READINESS_STIMULATED_TO_RELAXED"
  },{
    "value":67,
    "kind":"constant",
    "name":"ACT_RELOAD"
  },{
    "value":880,
    "kind":"constant",
    "name":"ACT_RELOAD_AUTOGUN"
  },{
    "value":889,
    "kind":"constant",
    "name":"ACT_RELOAD_DUAL"
  },{
    "value":875,
    "kind":"constant",
    "name":"ACT_RELOAD_FAIL"
  },{
    "value":69,
    "kind":"constant",
    "name":"ACT_RELOAD_FINISH"
  },{
    "value":70,
    "kind":"constant",
    "name":"ACT_RELOAD_LOW"
  },{
    "value":371,
    "kind":"constant",
    "name":"ACT_RELOAD_PISTOL"
  },{
    "value":372,
    "kind":"constant",
    "name":"ACT_RELOAD_PISTOL_LOW"
  },{
    "value":375,
    "kind":"constant",
    "name":"ACT_RELOAD_SHOTGUN"
  },{
    "value":376,
    "kind":"constant",
    "name":"ACT_RELOAD_SHOTGUN_LOW"
  },{
    "value":373,
    "kind":"constant",
    "name":"ACT_RELOAD_SMG1"
  },{
    "value":374,
    "kind":"constant",
    "name":"ACT_RELOAD_SMG1_LOW"
  },{
    "value":68,
    "kind":"constant",
    "name":"ACT_RELOAD_START"
  },{
    "value":874,
    "kind":"constant",
    "name":"ACT_RELOAD_SUCCEED"
  },{
    "value":0,
    "kind":"constant",
    "name":"ACT_RESET"
  },{
    "value":432,
    "kind":"constant",
    "name":"ACT_RIDE_MANNED_GUN"
  },{
    "value":40,
    "kind":"constant",
    "name":"ACT_ROLL_LEFT"
  },{
    "value":41,
    "kind":"constant",
    "name":"ACT_ROLL_RIGHT"
  },{
    "value":10,
    "kind":"constant",
    "name":"ACT_RUN"
  },{
    "value":494,
    "kind":"constant",
    "name":"ACT_RUNTOIDLE"
  },{
    "value":89,
    "kind":"constant",
    "name":"ACT_RUN_AGITATED"
  },{
    "value":11,
    "kind":"constant",
    "name":"ACT_RUN_AIM"
  },{
    "value":101,
    "kind":"constant",
    "name":"ACT_RUN_AIM_AGITATED"
  },{
    "value":877,
    "kind":"constant",
    "name":"ACT_RUN_AIM_AUTOGUN"
  },{
    "value":886,
    "kind":"constant",
    "name":"ACT_RUN_AIM_DUAL"
  },{
    "value":367,
    "kind":"constant",
    "name":"ACT_RUN_AIM_PISTOL"
  },{
    "value":99,
    "kind":"constant",
    "name":"ACT_RUN_AIM_RELAXED"
  },{
    "value":358,
    "kind":"constant",
    "name":"ACT_RUN_AIM_RIFLE"
  },{
    "value":333,
    "kind":"constant",
    "name":"ACT_RUN_AIM_RIFLE_STIMULATED"
  },{
    "value":363,
    "kind":"constant",
    "name":"ACT_RUN_AIM_SHOTGUN"
  },{
    "value":102,
    "kind":"constant",
    "name":"ACT_RUN_AIM_STEALTH"
  },{
    "value":370,
    "kind":"constant",
    "name":"ACT_RUN_AIM_STEALTH_PISTOL"
  },{
    "value":100,
    "kind":"constant",
    "name":"ACT_RUN_AIM_STIMULATED"
  },{
    "value":12,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH"
  },{
    "value":13,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_AIM"
  },{
    "value":360,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_AIM_RIFLE"
  },{
    "value":359,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_RIFLE"
  },{
    "value":350,
    "kind":"constant",
    "name":"ACT_RUN_CROUCH_RPG"
  },{
    "value":107,
    "kind":"constant",
    "name":"ACT_RUN_HURT"
  },{
    "value":135,
    "kind":"constant",
    "name":"ACT_RUN_ON_FIRE"
  },{
    "value":365,
    "kind":"constant",
    "name":"ACT_RUN_PISTOL"
  },{
    "value":14,
    "kind":"constant",
    "name":"ACT_RUN_PROTECTED"
  },{
    "value":87,
    "kind":"constant",
    "name":"ACT_RUN_RELAXED"
  },{
    "value":357,
    "kind":"constant",
    "name":"ACT_RUN_RIFLE"
  },{
    "value":328,
    "kind":"constant",
    "name":"ACT_RUN_RIFLE_RELAXED"
  },{
    "value":330,
    "kind":"constant",
    "name":"ACT_RUN_RIFLE_STIMULATED"
  },{
    "value":348,
    "kind":"constant",
    "name":"ACT_RUN_RPG"
  },{
    "value":352,
    "kind":"constant",
    "name":"ACT_RUN_RPG_RELAXED"
  },{
    "value":112,
    "kind":"constant",
    "name":"ACT_RUN_SCARED"
  },{
    "value":90,
    "kind":"constant",
    "name":"ACT_RUN_STEALTH"
  },{
    "value":361,
    "kind":"constant",
    "name":"ACT_RUN_STEALTH_PISTOL"
  },{
    "value":88,
    "kind":"constant",
    "name":"ACT_RUN_STIMULATED"
  },{
    "value":911,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_0"
  },{
    "value":912,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_1"
  },{
    "value":921,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_10"
  },{
    "value":922,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_11"
  },{
    "value":923,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_12"
  },{
    "value":924,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_13"
  },{
    "value":925,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_14"
  },{
    "value":926,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_15"
  },{
    "value":927,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_16"
  },{
    "value":928,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_17"
  },{
    "value":929,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_18"
  },{
    "value":930,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_19"
  },{
    "value":913,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_2"
  },{
    "value":931,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_20"
  },{
    "value":932,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_21"
  },{
    "value":933,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_22"
  },{
    "value":934,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_23"
  },{
    "value":935,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_24"
  },{
    "value":936,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_25"
  },{
    "value":937,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_26"
  },{
    "value":938,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_27"
  },{
    "value":939,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_28"
  },{
    "value":940,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_29"
  },{
    "value":914,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_3"
  },{
    "value":941,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_30"
  },{
    "value":942,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_31"
  },{
    "value":915,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_4"
  },{
    "value":916,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_5"
  },{
    "value":917,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_6"
  },{
    "value":918,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_7"
  },{
    "value":919,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_8"
  },{
    "value":920,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_9"
  },{
    "value":15,
    "kind":"constant",
    "name":"ACT_SCRIPT_CUSTOM_MOVE"
  },{
    "value":819,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_DRAW"
  },{
    "value":826,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_DRYFIRE"
  },{
    "value":820,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_HOLSTER"
  },{
    "value":821,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_IDLE"
  },{
    "value":828,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_IDLE_LOWERED"
  },{
    "value":827,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_IDLE_TO_LOWERED"
  },{
    "value":829,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_LOWERED_TO_IDLE"
  },{
    "value":823,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_PRIMARYATTACK"
  },{
    "value":822,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_PULLBACK"
  },{
    "value":825,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_RELOAD"
  },{
    "value":824,
    "kind":"constant",
    "name":"ACT_SECONDARY_VM_SECONDARYATTACK"
  },{
    "value":453,
    "kind":"constant",
    "name":"ACT_SHIELD_ATTACK"
  },{
    "value":451,
    "kind":"constant",
    "name":"ACT_SHIELD_DOWN"
  },{
    "value":454,
    "kind":"constant",
    "name":"ACT_SHIELD_KNOCKBACK"
  },{
    "value":450,
    "kind":"constant",
    "name":"ACT_SHIELD_UP"
  },{
    "value":452,
    "kind":"constant",
    "name":"ACT_SHIELD_UP_IDLE"
  },{
    "value":37,
    "kind":"constant",
    "name":"ACT_SHIPLADDER_DOWN"
  },{
    "value":36,
    "kind":"constant",
    "name":"ACT_SHIPLADDER_UP"
  },{
    "value":264,
    "kind":"constant",
    "name":"ACT_SHOTGUN_PUMP"
  },{
    "value":263,
    "kind":"constant",
    "name":"ACT_SHOTGUN_RELOAD_FINISH"
  },{
    "value":262,
    "kind":"constant",
    "name":"ACT_SHOTGUN_RELOAD_START"
  },{
    "value":50,
    "kind":"constant",
    "name":"ACT_SIGNAL1"
  },{
    "value":51,
    "kind":"constant",
    "name":"ACT_SIGNAL2"
  },{
    "value":52,
    "kind":"constant",
    "name":"ACT_SIGNAL3"
  },{
    "value":53,
    "kind":"constant",
    "name":"ACT_SIGNAL_ADVANCE"
  },{
    "value":54,
    "kind":"constant",
    "name":"ACT_SIGNAL_FORWARD"
  },{
    "value":55,
    "kind":"constant",
    "name":"ACT_SIGNAL_GROUP"
  },{
    "value":56,
    "kind":"constant",
    "name":"ACT_SIGNAL_HALT"
  },{
    "value":57,
    "kind":"constant",
    "name":"ACT_SIGNAL_LEFT"
  },{
    "value":58,
    "kind":"constant",
    "name":"ACT_SIGNAL_RIGHT"
  },{
    "value":59,
    "kind":"constant",
    "name":"ACT_SIGNAL_TAKECOVER"
  },{
    "value":258,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_DETONATE"
  },{
    "value":257,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_DRAW"
  },{
    "value":259,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_HOLSTER"
  },{
    "value":256,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_IDLE"
  },{
    "value":260,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_STICKWALL_DRAW"
  },{
    "value":261,
    "kind":"constant",
    "name":"ACT_SLAM_DETONATOR_THROW_DRAW"
  },{
    "value":226,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ATTACH"
  },{
    "value":227,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ATTACH2"
  },{
    "value":230,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_DETONATE"
  },{
    "value":231,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_DETONATOR_HOLSTER"
  },{
    "value":232,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_DRAW"
  },{
    "value":224,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_IDLE"
  },{
    "value":228,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_ATTACH"
  },{
    "value":229,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_ATTACH2"
  },{
    "value":233,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_DRAW"
  },{
    "value":225,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_ND_IDLE"
  },{
    "value":234,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_TO_THROW"
  },{
    "value":235,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_TO_THROW_ND"
  },{
    "value":236,
    "kind":"constant",
    "name":"ACT_SLAM_STICKWALL_TO_TRIPMINE_ND"
  },{
    "value":247,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_DETONATE"
  },{
    "value":248,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_DETONATOR_HOLSTER"
  },{
    "value":243,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_DRAW"
  },{
    "value":237,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_IDLE"
  },{
    "value":244,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_ND_DRAW"
  },{
    "value":238,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_ND_IDLE"
  },{
    "value":239,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW"
  },{
    "value":240,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW2"
  },{
    "value":241,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW_ND"
  },{
    "value":242,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_THROW_ND2"
  },{
    "value":245,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_TO_STICKWALL"
  },{
    "value":246,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_TO_STICKWALL_ND"
  },{
    "value":249,
    "kind":"constant",
    "name":"ACT_SLAM_THROW_TO_TRIPMINE_ND"
  },{
    "value":252,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_ATTACH"
  },{
    "value":253,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_ATTACH2"
  },{
    "value":251,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_DRAW"
  },{
    "value":250,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_IDLE"
  },{
    "value":254,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_TO_STICKWALL_ND"
  },{
    "value":255,
    "kind":"constant",
    "name":"ACT_SLAM_TRIPMINE_TO_THROW_ND"
  },{
    "value":898,
    "kind":"constant",
    "name":"ACT_SLEEP"
  },{
    "value":63,
    "kind":"constant",
    "name":"ACT_SMALL_FLINCH"
  },{
    "value":267,
    "kind":"constant",
    "name":"ACT_SMG2_DRAW2"
  },{
    "value":269,
    "kind":"constant",
    "name":"ACT_SMG2_DRYFIRE2"
  },{
    "value":266,
    "kind":"constant",
    "name":"ACT_SMG2_FIRE2"
  },{
    "value":265,
    "kind":"constant",
    "name":"ACT_SMG2_IDLE2"
  },{
    "value":268,
    "kind":"constant",
    "name":"ACT_SMG2_RELOAD2"
  },{
    "value":270,
    "kind":"constant",
    "name":"ACT_SMG2_TOAUTO"
  },{
    "value":271,
    "kind":"constant",
    "name":"ACT_SMG2_TOBURST"
  },{
    "value":108,
    "kind":"constant",
    "name":"ACT_SPECIAL_ATTACK1"
  },{
    "value":109,
    "kind":"constant",
    "name":"ACT_SPECIAL_ATTACK2"
  },{
    "value":180,
    "kind":"constant",
    "name":"ACT_SPECIFIC_SEQUENCE"
  },{
    "value":904,
    "kind":"constant",
    "name":"ACT_SPINAROUND"
  },{
    "value":908,
    "kind":"constant",
    "name":"ACT_SPRAY"
  },{
    "value":46,
    "kind":"constant",
    "name":"ACT_STAND"
  },{
    "value":429,
    "kind":"constant",
    "name":"ACT_STARTDYING"
  },{
    "value":143,
    "kind":"constant",
    "name":"ACT_STEP_BACK"
  },{
    "value":144,
    "kind":"constant",
    "name":"ACT_STEP_FORE"
  },{
    "value":141,
    "kind":"constant",
    "name":"ACT_STEP_LEFT"
  },{
    "value":142,
    "kind":"constant",
    "name":"ACT_STEP_RIGHT"
  },{
    "value":1554,
    "kind":"constant",
    "name":"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE",
    "enum":"GameActivity_t"
  },{
    "value":38,
    "kind":"constant",
    "name":"ACT_STRAFE_LEFT"
  },{
    "value":39,
    "kind":"constant",
    "name":"ACT_STRAFE_RIGHT"
  },{
    "value":28,
    "kind":"constant",
    "name":"ACT_SWIM"
  },{
    "value":1558,
    "kind":"constant",
    "name":"ACT_TINY_AVALANCHE",
    "enum":"GameActivity_t"
  },{
    "value":1560,
    "kind":"constant",
    "name":"ACT_TINY_GROWL",
    "enum":"GameActivity_t"
  },{
    "value":1559,
    "kind":"constant",
    "name":"ACT_TINY_TOSS",
    "enum":"GameActivity_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"ACT_TRANSITION"
  },{
    "value":462,
    "kind":"constant",
    "name":"ACT_TURN"
  },{
    "value":461,
    "kind":"constant",
    "name":"ACT_TURNLEFT45"
  },{
    "value":460,
    "kind":"constant",
    "name":"ACT_TURNRIGHT45"
  },{
    "value":42,
    "kind":"constant",
    "name":"ACT_TURN_LEFT"
  },{
    "value":43,
    "kind":"constant",
    "name":"ACT_TURN_RIGHT"
  },{
    "value":473,
    "kind":"constant",
    "name":"ACT_UNDEPLOY"
  },{
    "value":47,
    "kind":"constant",
    "name":"ACT_USE"
  },{
    "value":113,
    "kind":"constant",
    "name":"ACT_VICTORY_DANCE"
  },{
    "value":222,
    "kind":"constant",
    "name":"ACT_VM_ATTACH_SILENCER"
  },{
    "value":181,
    "kind":"constant",
    "name":"ACT_VM_DEPLOY"
  },{
    "value":223,
    "kind":"constant",
    "name":"ACT_VM_DETACH_SILENCER"
  },{
    "value":183,
    "kind":"constant",
    "name":"ACT_VM_DRAW"
  },{
    "value":495,
    "kind":"constant",
    "name":"ACT_VM_DRAW_DEPLOYED"
  },{
    "value":481,
    "kind":"constant",
    "name":"ACT_VM_DRAW_SILENCED"
  },{
    "value":191,
    "kind":"constant",
    "name":"ACT_VM_DROP"
  },{
    "value":196,
    "kind":"constant",
    "name":"ACT_VM_DRYFIRE"
  },{
    "value":483,
    "kind":"constant",
    "name":"ACT_VM_DRYFIRE_LEFT"
  },{
    "value":479,
    "kind":"constant",
    "name":"ACT_VM_DRYFIRE_SILENCED"
  },{
    "value":186,
    "kind":"constant",
    "name":"ACT_VM_FIDGET"
  },{
    "value":209,
    "kind":"constant",
    "name":"ACT_VM_HAULBACK"
  },{
    "value":201,
    "kind":"constant",
    "name":"ACT_VM_HITCENTER"
  },{
    "value":202,
    "kind":"constant",
    "name":"ACT_VM_HITCENTER2"
  },{
    "value":197,
    "kind":"constant",
    "name":"ACT_VM_HITLEFT"
  },{
    "value":198,
    "kind":"constant",
    "name":"ACT_VM_HITLEFT2"
  },{
    "value":199,
    "kind":"constant",
    "name":"ACT_VM_HITRIGHT"
  },{
    "value":200,
    "kind":"constant",
    "name":"ACT_VM_HITRIGHT2"
  },{
    "value":184,
    "kind":"constant",
    "name":"ACT_VM_HOLSTER"
  },{
    "value":185,
    "kind":"constant",
    "name":"ACT_VM_IDLE"
  },{
    "value":482,
    "kind":"constant",
    "name":"ACT_VM_IDLE_EMPTY_LEFT"
  },{
    "value":214,
    "kind":"constant",
    "name":"ACT_VM_IDLE_LOWERED"
  },{
    "value":480,
    "kind":"constant",
    "name":"ACT_VM_IDLE_SILENCED"
  },{
    "value":213,
    "kind":"constant",
    "name":"ACT_VM_IDLE_TO_LOWERED"
  },{
    "value":484,
    "kind":"constant",
    "name":"ACT_VM_IS_DRAW"
  },{
    "value":485,
    "kind":"constant",
    "name":"ACT_VM_IS_HOLSTER"
  },{
    "value":486,
    "kind":"constant",
    "name":"ACT_VM_IS_IDLE"
  },{
    "value":487,
    "kind":"constant",
    "name":"ACT_VM_IS_PRIMARYATTACK"
  },{
    "value":215,
    "kind":"constant",
    "name":"ACT_VM_LOWERED_TO_IDLE"
  },{
    "value":221,
    "kind":"constant",
    "name":"ACT_VM_MAUL_LOOP"
  },{
    "value":207,
    "kind":"constant",
    "name":"ACT_VM_MISSCENTER"
  },{
    "value":208,
    "kind":"constant",
    "name":"ACT_VM_MISSCENTER2"
  },{
    "value":203,
    "kind":"constant",
    "name":"ACT_VM_MISSLEFT"
  },{
    "value":204,
    "kind":"constant",
    "name":"ACT_VM_MISSLEFT2"
  },{
    "value":205,
    "kind":"constant",
    "name":"ACT_VM_MISSRIGHT"
  },{
    "value":206,
    "kind":"constant",
    "name":"ACT_VM_MISSRIGHT2"
  },{
    "value":219,
    "kind":"constant",
    "name":"ACT_VM_PICKUP"
  },{
    "value":193,
    "kind":"constant",
    "name":"ACT_VM_PRIMARYATTACK"
  },{
    "value":477,
    "kind":"constant",
    "name":"ACT_VM_PRIMARYATTACK_SILENCED"
  },{
    "value":187,
    "kind":"constant",
    "name":"ACT_VM_PULLBACK"
  },{
    "value":188,
    "kind":"constant",
    "name":"ACT_VM_PULLBACK_HIGH"
  },{
    "value":189,
    "kind":"constant",
    "name":"ACT_VM_PULLBACK_LOW"
  },{
    "value":192,
    "kind":"constant",
    "name":"ACT_VM_PULLPIN"
  },{
    "value":216,
    "kind":"constant",
    "name":"ACT_VM_RECOIL1"
  },{
    "value":217,
    "kind":"constant",
    "name":"ACT_VM_RECOIL2"
  },{
    "value":218,
    "kind":"constant",
    "name":"ACT_VM_RECOIL3"
  },{
    "value":220,
    "kind":"constant",
    "name":"ACT_VM_RELEASE"
  },{
    "value":195,
    "kind":"constant",
    "name":"ACT_VM_RELOAD"
  },{
    "value":182,
    "kind":"constant",
    "name":"ACT_VM_RELOAD_EMPTY"
  },{
    "value":478,
    "kind":"constant",
    "name":"ACT_VM_RELOAD_SILENCED"
  },{
    "value":194,
    "kind":"constant",
    "name":"ACT_VM_SECONDARYATTACK"
  },{
    "value":433,
    "kind":"constant",
    "name":"ACT_VM_SPRINT_ENTER"
  },{
    "value":434,
    "kind":"constant",
    "name":"ACT_VM_SPRINT_IDLE"
  },{
    "value":435,
    "kind":"constant",
    "name":"ACT_VM_SPRINT_LEAVE"
  },{
    "value":210,
    "kind":"constant",
    "name":"ACT_VM_SWINGHARD"
  },{
    "value":212,
    "kind":"constant",
    "name":"ACT_VM_SWINGHIT"
  },{
    "value":211,
    "kind":"constant",
    "name":"ACT_VM_SWINGMISS"
  },{
    "value":190,
    "kind":"constant",
    "name":"ACT_VM_THROW"
  },{
    "value":805,
    "kind":"constant",
    "name":"ACT_VM_UNUSABLE"
  },{
    "value":806,
    "kind":"constant",
    "name":"ACT_VM_UNUSABLE_TO_USABLE"
  },{
    "value":807,
    "kind":"constant",
    "name":"ACT_VM_USABLE_TO_UNUSABLE"
  },{
    "value":986,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_BURST_ATTACK"
  },{
    "value":984,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_BURST_TOGGLE"
  },{
    "value":947,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_IN_CHAMBERED"
  },{
    "value":948,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_IN_SLIDE_BACK"
  },{
    "value":945,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_OUT_CHAMBERED"
  },{
    "value":946,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_CLIP_OUT_SLIDE_BACK"
  },{
    "value":971,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_EMPTY_CLIP_IN_SLIDE_BACK"
  },{
    "value":949,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_IDLE_SLIDE_BACK"
  },{
    "value":950,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_IDLE_SLIDE_BACK_CLIP_READY"
  },{
    "value":943,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LAST_SHOT"
  },{
    "value":982,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LONG_CLIP_IN_CHAMBERED"
  },{
    "value":983,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LONG_CLIP_IN_SLIDE_BACK"
  },{
    "value":985,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_LOW_KICK"
  },{
    "value":944,
    "kind":"constant",
    "name":"ACT_VR_PISTOL_SLIDE_RELEASE"
  },{
    "value":977,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_CLOSE_CHAMBER"
  },{
    "value":987,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_GRENADE_TWIST"
  },{
    "value":972,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_IDLE"
  },{
    "value":973,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_OPEN_CHAMBER"
  },{
    "value":974,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_RELOAD_1"
  },{
    "value":975,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_RELOAD_2"
  },{
    "value":976,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_RELOAD_3"
  },{
    "value":979,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_SHOOT"
  },{
    "value":980,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_SLIDE_BACK"
  },{
    "value":981,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_SLIDE_FORWARD"
  },{
    "value":978,
    "kind":"constant",
    "name":"ACT_VR_SHOTGUN_TRIGGER_SQUEEZE"
  },{
    "value":899,
    "kind":"constant",
    "name":"ACT_WAKE"
  },{
    "value":6,
    "kind":"constant",
    "name":"ACT_WALK"
  },{
    "value":85,
    "kind":"constant",
    "name":"ACT_WALK_AGITATED"
  },{
    "value":7,
    "kind":"constant",
    "name":"ACT_WALK_AIM"
  },{
    "value":97,
    "kind":"constant",
    "name":"ACT_WALK_AIM_AGITATED"
  },{
    "value":876,
    "kind":"constant",
    "name":"ACT_WALK_AIM_AUTOGUN"
  },{
    "value":885,
    "kind":"constant",
    "name":"ACT_WALK_AIM_DUAL"
  },{
    "value":366,
    "kind":"constant",
    "name":"ACT_WALK_AIM_PISTOL"
  },{
    "value":95,
    "kind":"constant",
    "name":"ACT_WALK_AIM_RELAXED"
  },{
    "value":354,
    "kind":"constant",
    "name":"ACT_WALK_AIM_RIFLE"
  },{
    "value":332,
    "kind":"constant",
    "name":"ACT_WALK_AIM_RIFLE_STIMULATED"
  },{
    "value":362,
    "kind":"constant",
    "name":"ACT_WALK_AIM_SHOTGUN"
  },{
    "value":98,
    "kind":"constant",
    "name":"ACT_WALK_AIM_STEALTH"
  },{
    "value":369,
    "kind":"constant",
    "name":"ACT_WALK_AIM_STEALTH_PISTOL"
  },{
    "value":96,
    "kind":"constant",
    "name":"ACT_WALK_AIM_STIMULATED"
  },{
    "value":337,
    "kind":"constant",
    "name":"ACT_WALK_ANGRY"
  },{
    "value":428,
    "kind":"constant",
    "name":"ACT_WALK_CARRY"
  },{
    "value":8,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH"
  },{
    "value":9,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_AIM"
  },{
    "value":356,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_AIM_RIFLE"
  },{
    "value":355,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_RIFLE"
  },{
    "value":349,
    "kind":"constant",
    "name":"ACT_WALK_CROUCH_RPG"
  },{
    "value":106,
    "kind":"constant",
    "name":"ACT_WALK_HURT"
  },{
    "value":134,
    "kind":"constant",
    "name":"ACT_WALK_ON_FIRE"
  },{
    "value":322,
    "kind":"constant",
    "name":"ACT_WALK_PACKAGE"
  },{
    "value":364,
    "kind":"constant",
    "name":"ACT_WALK_PISTOL"
  },{
    "value":83,
    "kind":"constant",
    "name":"ACT_WALK_RELAXED"
  },{
    "value":353,
    "kind":"constant",
    "name":"ACT_WALK_RIFLE"
  },{
    "value":327,
    "kind":"constant",
    "name":"ACT_WALK_RIFLE_RELAXED"
  },{
    "value":329,
    "kind":"constant",
    "name":"ACT_WALK_RIFLE_STIMULATED"
  },{
    "value":347,
    "kind":"constant",
    "name":"ACT_WALK_RPG"
  },{
    "value":351,
    "kind":"constant",
    "name":"ACT_WALK_RPG_RELAXED"
  },{
    "value":111,
    "kind":"constant",
    "name":"ACT_WALK_SCARED"
  },{
    "value":86,
    "kind":"constant",
    "name":"ACT_WALK_STEALTH"
  },{
    "value":368,
    "kind":"constant",
    "name":"ACT_WALK_STEALTH_PISTOL"
  },{
    "value":84,
    "kind":"constant",
    "name":"ACT_WALK_STIMULATED"
  },{
    "value":324,
    "kind":"constant",
    "name":"ACT_WALK_SUITCASE"
  },{
    "value":1546,
    "kind":"constant",
    "name":"ACT_WAVEFORM_END",
    "enum":"GameActivity_t"
  },{
    "value":1545,
    "kind":"constant",
    "name":"ACT_WAVEFORM_START",
    "enum":"GameActivity_t"
  },{
    "value":965,
    "kind":"constant",
    "name":"ACT_ZOMBIE_LUNGE"
  },{
    "value":964,
    "kind":"constant",
    "name":"ACT_ZOMBIE_TRIP"
  },{
    "value":31,
    "kind":"constant",
    "name":"AE_CL_ADD_PARTICLE_EFFECT_CP"
  },{
    "value":17,
    "kind":"constant",
    "name":"AE_CL_BODYGROUP_SET_VALUE"
  },{
    "value":19,
    "kind":"constant",
    "name":"AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN"
  },{
    "value":23,
    "kind":"constant",
    "name":"AE_CL_CLOTH_ATTR"
  },{
    "value":26,
    "kind":"constant",
    "name":"AE_CL_CLOTH_EFFECT"
  },{
    "value":24,
    "kind":"constant",
    "name":"AE_CL_CLOTH_GROUND_OFFSET"
  },{
    "value":25,
    "kind":"constant",
    "name":"AE_CL_CLOTH_STIFFEN"
  },{
    "value":27,
    "kind":"constant",
    "name":"AE_CL_CREATE_ANIM_SCOPE_PROP"
  },{
    "value":7,
    "kind":"constant",
    "name":"AE_CL_CREATE_PARTICLE_EFFECT"
  },{
    "value":9,
    "kind":"constant",
    "name":"AE_CL_CREATE_PARTICLE_EFFECT_CFG"
  },{
    "value":16,
    "kind":"constant",
    "name":"AE_CL_DISABLE_BODYGROUP"
  },{
    "value":35,
    "kind":"constant",
    "name":"AE_CL_DOTA_NPC_CREATE_PARTICLE_EFFECT"
  },{
    "value":33,
    "kind":"constant",
    "name":"AE_CL_DOTA_PLAY_STATUS_EFFECT"
  },{
    "value":36,
    "kind":"constant",
    "name":"AE_CL_DOTA_RUBICK_ARCANA_CREATE_PARTICLE_EFFECT"
  },{
    "value":34,
    "kind":"constant",
    "name":"AE_CL_DOTA_STOP_STATUS_EFFECT"
  },{
    "value":15,
    "kind":"constant",
    "name":"AE_CL_ENABLE_BODYGROUP"
  },{
    "value":29,
    "kind":"constant",
    "name":"AE_CL_HIDE_PARTICLE_EFFECT"
  },{
    "value":1,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND"
  },{
    "value":2,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND_ATTACHMENT"
  },{
    "value":6,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND_LOOPING"
  },{
    "value":3,
    "kind":"constant",
    "name":"AE_CL_PLAYSOUND_POSITION"
  },{
    "value":30,
    "kind":"constant",
    "name":"AE_CL_SHOW_PARTICLE_EFFECT"
  },{
    "value":32,
    "kind":"constant",
    "name":"AE_CL_SPEECH"
  },{
    "value":5,
    "kind":"constant",
    "name":"AE_CL_STOPSOUND"
  },{
    "value":8,
    "kind":"constant",
    "name":"AE_CL_STOP_PARTICLE_EFFECT"
  },{
    "value":14,
    "kind":"constant",
    "name":"AE_CL_STOP_RAGDOLL_CONTROL"
  },{
    "value":28,
    "kind":"constant",
    "name":"AE_CL_SUPPRESS_EVENTS_WITH_TAG"
  },{
    "value":41,
    "kind":"constant",
    "name":"AE_DOTA_CREATE_CLINKZ_ATTACK"
  },{
    "value":43,
    "kind":"constant",
    "name":"AE_DOTA_DIE_PHANTOM_DEATH_PARTICLES"
  },{
    "value":38,
    "kind":"constant",
    "name":"AE_DOTA_PET_ITEM_DROP"
  },{
    "value":37,
    "kind":"constant",
    "name":"AE_DOTA_PET_ITEM_PICKUP"
  },{
    "value":45,
    "kind":"constant",
    "name":"AE_DOTA_PLAY_SOUND_ATTACK"
  },{
    "value":42,
    "kind":"constant",
    "name":"AE_DOTA_PLAY_SOUND_ATTACK_BACKSTAB"
  },{
    "value":40,
    "kind":"constant",
    "name":"AE_DOTA_PLAY_SOUND_ATTACK_SPECIAL"
  },{
    "value":39,
    "kind":"constant",
    "name":"AE_DOTA_SUPPRESS_CONSTANT_LAYER"
  },{
    "value":44,
    "kind":"constant",
    "name":"AE_DOTA_SWITCH_ATTACK_COMBO"
  },{
    "value":0,
    "kind":"constant",
    "name":"AE_EMPTY"
  },{
    "value":22,
    "kind":"constant",
    "name":"AE_FIRE_INPUT"
  },{
    "value":12,
    "kind":"constant",
    "name":"AE_FOOTSTEP"
  },{
    "value":13,
    "kind":"constant",
    "name":"AE_RAGDOLL"
  },{
    "value":18,
    "kind":"constant",
    "name":"AE_SV_BODYGROUP_SET_VALUE"
  },{
    "value":10,
    "kind":"constant",
    "name":"AE_SV_CREATE_PARTICLE_EFFECT_CFG"
  },{
    "value":4,
    "kind":"constant",
    "name":"AE_SV_PLAYSOUND"
  },{
    "value":11,
    "kind":"constant",
    "name":"AE_SV_STOP_PARTICLE_EFFECT"
  },{
    "value":20,
    "kind":"constant",
    "name":"AE_WPN_PRIMARYATTACK"
  },{
    "value":21,
    "kind":"constant",
    "name":"AE_WPN_SECONDARYATTACK"
  },{
    "value":22,
    "kind":"constant",
    "name":"DAMAGE_TYPE_ABILITY_DEFINED",
    "enum":"DAMAGE_TYPES"
  },{
    "value":7,
    "kind":"constant",
    "name":"DAMAGE_TYPE_ALL",
    "enum":"DAMAGE_TYPES"
  },{
    "value":8,
    "kind":"constant",
    "name":"DAMAGE_TYPE_HP_REMOVAL",
    "enum":"DAMAGE_TYPES"
  },{
    "value":2,
    "kind":"constant",
    "name":"DAMAGE_TYPE_MAGICAL",
    "enum":"DAMAGE_TYPES"
  },{
    "value":0,
    "kind":"constant",
    "name":"DAMAGE_TYPE_NONE",
    "enum":"DAMAGE_TYPES"
  },{
    "value":1,
    "kind":"constant",
    "name":"DAMAGE_TYPE_PHYSICAL",
    "enum":"DAMAGE_TYPES"
  },{
    "value":4,
    "kind":"constant",
    "name":"DAMAGE_TYPE_PURE",
    "enum":"DAMAGE_TYPES"
  },{
    "value":1048576,
    "kind":"constant",
    "name":"DMG_ACID"
  },{
    "value":8192,
    "kind":"constant",
    "name":"DMG_ALWAYSGIB"
  },{
    "value":64,
    "kind":"constant",
    "name":"DMG_BLAST"
  },{
    "value":2,
    "kind":"constant",
    "name":"DMG_BULLET"
  },{
    "value":8,
    "kind":"constant",
    "name":"DMG_BURN"
  },{
    "value":128,
    "kind":"constant",
    "name":"DMG_CLUB"
  },{
    "value":1,
    "kind":"constant",
    "name":"DMG_CRUSH"
  },{
    "value":16384,
    "kind":"constant",
    "name":"DMG_DROWN"
  },{
    "value":524288,
    "kind":"constant",
    "name":"DMG_DROWNRECOVER"
  },{
    "value":1024,
    "kind":"constant",
    "name":"DMG_ENERGYBEAM"
  },{
    "value":32,
    "kind":"constant",
    "name":"DMG_FALL"
  },{
    "value":0,
    "kind":"constant",
    "name":"DMG_GENERIC"
  },{
    "value":65536,
    "kind":"constant",
    "name":"DMG_NERVEGAS"
  },{
    "value":4096,
    "kind":"constant",
    "name":"DMG_NEVERGIB"
  },{
    "value":32768,
    "kind":"constant",
    "name":"DMG_PARALYZE"
  },{
    "value":8388608,
    "kind":"constant",
    "name":"DMG_PHYSGUN"
  },{
    "value":16777216,
    "kind":"constant",
    "name":"DMG_PLASMA"
  },{
    "value":131072,
    "kind":"constant",
    "name":"DMG_POISON"
  },{
    "value":2048,
    "kind":"constant",
    "name":"DMG_PREVENT_PHYSICS_FORCE"
  },{
    "value":262144,
    "kind":"constant",
    "name":"DMG_RADIATION"
  },{
    "value":4194304,
    "kind":"constant",
    "name":"DMG_REMOVENORAGDOLL"
  },{
    "value":256,
    "kind":"constant",
    "name":"DMG_SHOCK"
  },{
    "value":4,
    "kind":"constant",
    "name":"DMG_SLASH"
  },{
    "value":2097152,
    "kind":"constant",
    "name":"DMG_SLOWBURN"
  },{
    "value":512,
    "kind":"constant",
    "name":"DMG_SONIC"
  },{
    "value":16,
    "kind":"constant",
    "name":"DMG_VEHICLE"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_AOE",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":131072,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_ATTACK",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":65536,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_AURA",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":4096,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_AUTOCAST",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":128,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_CHANNELLED",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":1024,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":16777216,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":536870912,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":8388608,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":33554432,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":262144,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_HIDDEN",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":134217728,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":4194304,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_MUTED",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":2097152,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":2048,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_IMMEDIATE",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":256,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_ITEM",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":-2147483648,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NONE",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":67108864,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":64,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_NO_TARGET",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":32768,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":16384,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":8192,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_OVERSHOOT",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_PASSIVE",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_POINT",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":524288,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":268435456,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":512,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_TOGGLE",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":1048576,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":1073741824,
    "kind":"constant",
    "name":"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING",
    "enum":"DOTA_ABILITY_BEHAVIOR"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_ABILITY_SPEAK_CAST",
    "enum":"DOTAAbilitySpeakTrigger_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ABILITY_SPEAK_START_ACTION_PHASE",
    "enum":"DOTAAbilitySpeakTrigger_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_CANNOT_FAIL",
    "enum":"attackfail"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION",
    "enum":"attackfail"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_NO",
    "enum":"attackfail"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS",
    "enum":"attackfail"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED",
    "enum":"attackfail"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE",
    "enum":"attackfail"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE",
    "enum":"attackfail"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS",
    "enum":"attackfail"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY",
    "enum":"Attributes"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY_ARMOR",
    "enum":"AttributeDerivedStats"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED",
    "enum":"AttributeDerivedStats"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_AGILITY_DAMAGE",
    "enum":"AttributeDerivedStats"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLECT",
    "enum":"Attributes"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE",
    "enum":"AttributeDerivedStats"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA",
    "enum":"AttributeDerivedStats"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN",
    "enum":"AttributeDerivedStats"
  },{
    "value":-1,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_INVALID",
    "enum":"Attributes"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_MAX",
    "enum":"Attributes"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH",
    "enum":"Attributes"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH_DAMAGE",
    "enum":"AttributeDerivedStats"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH_HP",
    "enum":"AttributeDerivedStats"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_ATTRIBUTE_STRENGTH_HP_REGEN",
    "enum":"AttributeDerivedStats"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_BUFF_REMOVE_ALL",
    "enum":"modifierremove"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_BUFF_REMOVE_ALLY",
    "enum":"modifierremove"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_BUFF_REMOVE_ENEMY",
    "enum":"modifierremove"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_ATTACK",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_CAST",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_DRAG",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_DROP_ITEM",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_DROP_SHOP_ITEM",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_LAST",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_LEARN_ABILITY",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_MOVE",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_NONE",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_PATROL",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_RADAR",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_UNUSED",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_CLICK_BEHAVIOR_VECTOR_CAST",
    "enum":"CLICK_BEHAVIORS"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_ABANDONED"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_CONNECTED"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_DISCONNECTED"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_FAILED"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_LOADING"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_NOT_YET_CONNECTED"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_CONNECTION_STATE_UNKNOWN"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_DAMAGE_CATEGORY_ATTACK",
    "enum":"DamageCategory_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_DAMAGE_CATEGORY_SPELL",
    "enum":"DamageCategory_t"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_BYPASSES_BLOCK",
    "enum":"DOTADamageFlag_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY",
    "enum":"DOTADamageFlag_t"
  },{
    "value":2048,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN",
    "enum":"DOTADamageFlag_t"
  },{
    "value":65536,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_FORCE_SPELL_AMPLIFICATION",
    "enum":"DOTADamageFlag_t"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_HPLOSS",
    "enum":"DOTADamageFlag_t"
  },{
    "value":16384,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_IGNORES_BASE_PHYSICAL_ARMOR",
    "enum":"DOTADamageFlag_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR",
    "enum":"DOTADamageFlag_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR",
    "enum":"DOTADamageFlag_t"
  },{
    "value":131072,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_MAGIC_AUTO_ATTACK",
    "enum":"DOTADamageFlag_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NONE",
    "enum":"DOTADamageFlag_t"
  },{
    "value":128,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NON_LETHAL",
    "enum":"DOTADamageFlag_t"
  },{
    "value":512,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS",
    "enum":"DOTADamageFlag_t"
  },{
    "value":64,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT",
    "enum":"DOTADamageFlag_t"
  },{
    "value":1024,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION",
    "enum":"DOTADamageFlag_t"
  },{
    "value":4096,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL",
    "enum":"DOTADamageFlag_t"
  },{
    "value":8192,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_PROPERTY_FIRE",
    "enum":"DOTADamageFlag_t"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_REFLECTION",
    "enum":"DOTADamageFlag_t"
  },{
    "value":32768,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_SECONDARY_PROJECTILE_ATTACK",
    "enum":"DOTADamageFlag_t"
  },{
    "value":256,
    "kind":"constant",
    "name":"DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY",
    "enum":"DOTADamageFlag_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_DEFAULT_MAX_TEAM",
    "enum":"DOTALimits_t",
    "description":"Default number of players per team."
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_DEFAULT_MAX_TEAM_PLAYERS",
    "enum":"DOTALimits_t",
    "description":"Default number of non-spectator players supported."
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_ACTION_MINIMAP",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_ACTION_PANEL",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":31,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_AGHANIMS_STATUS",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":30,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_CUSTOMUI_BEHIND_HUD_ELEMENTS",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_ELEMENT_COUNT",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":23,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_ENDGAME",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":24,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_ENDGAME_CHAT",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":28,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_FIGHT_RECAP",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":17,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_HERO_SELECTION_HEADER",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":-1,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVALID",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_COURIER",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_GOLD",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_ITEMS",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_PANEL",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_PROTECT",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_QUICKBUY",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_INVENTORY_SHOP",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":27,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_KILLCAM",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":26,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_PREGAME_STRATEGYUI",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":25,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_QUICK_STATS",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_SHOP_COMMONITEMS",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":29,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_BAR",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":19,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":21,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":20,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":22,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_BAR_SCORE",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_HEROES",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_MENU_BUTTONS",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_DEFAULT_UI_TOP_TIMEOFDAY",
    "enum":"DotaDefaultUIElement_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP",
    "enum":"DOTA_GameState"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_DISCONNECT",
    "enum":"DOTA_GameState"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
    "enum":"DOTA_GameState"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_HERO_SELECTION",
    "enum":"DOTA_GameState"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_INIT",
    "enum":"DOTA_GameState"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_POST_GAME",
    "enum":"DOTA_GameState"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_PRE_GAME",
    "enum":"DOTA_GameState"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_SCENARIO_SETUP",
    "enum":"DOTA_GameState"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_STRATEGY_TIME",
    "enum":"DOTA_GameState"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
    "enum":"DOTA_GameState"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD",
    "enum":"DOTA_GameState"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
    "enum":"DOTA_GameState"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_BAD_GUYS"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_BROADCASTER"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_CUSTOM_1"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_CUSTOM_2"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_CUSTOM_3"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_CUSTOM_4"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_CUSTOM_5"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_CUSTOM_6"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_CUSTOM_7"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_CUSTOM_8"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_GOOD_GUYS"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_NEUTRALS"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_NOTEAM"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_PLAYER_POOL"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_GC_TEAM_SPECTATOR"
  },{
    "value":57,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT",
    "enum":"DOTA_HeroPickState"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_AP_SELECT",
    "enum":"DOTA_HeroPickState"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_AR_SELECT",
    "enum":"DOTA_HeroPickState"
  },{
    "value":54,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_BD_SELECT",
    "enum":"DOTA_HeroPickState"
  },{
    "value":37,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN1",
    "enum":"DOTA_HeroPickState"
  },{
    "value":38,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN2",
    "enum":"DOTA_HeroPickState"
  },{
    "value":39,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN3",
    "enum":"DOTA_HeroPickState"
  },{
    "value":40,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN4",
    "enum":"DOTA_HeroPickState"
  },{
    "value":41,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN5",
    "enum":"DOTA_HeroPickState"
  },{
    "value":42,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_BAN6",
    "enum":"DOTA_HeroPickState"
  },{
    "value":36,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_CAPTAINPICK",
    "enum":"DOTA_HeroPickState"
  },{
    "value":35,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_INTRO",
    "enum":"DOTA_HeroPickState"
  },{
    "value":53,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_PICK",
    "enum":"DOTA_HeroPickState"
  },{
    "value":43,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT1",
    "enum":"DOTA_HeroPickState"
  },{
    "value":52,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT10",
    "enum":"DOTA_HeroPickState"
  },{
    "value":44,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT2",
    "enum":"DOTA_HeroPickState"
  },{
    "value":45,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT3",
    "enum":"DOTA_HeroPickState"
  },{
    "value":46,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT4",
    "enum":"DOTA_HeroPickState"
  },{
    "value":47,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT5",
    "enum":"DOTA_HeroPickState"
  },{
    "value":48,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT6",
    "enum":"DOTA_HeroPickState"
  },{
    "value":49,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT7",
    "enum":"DOTA_HeroPickState"
  },{
    "value":50,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT8",
    "enum":"DOTA_HeroPickState"
  },{
    "value":51,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT9",
    "enum":"DOTA_HeroPickState"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN1",
    "enum":"DOTA_HeroPickState"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN10",
    "enum":"DOTA_HeroPickState"
  },{
    "value":17,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN11",
    "enum":"DOTA_HeroPickState"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN12",
    "enum":"DOTA_HeroPickState"
  },{
    "value":19,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN13",
    "enum":"DOTA_HeroPickState"
  },{
    "value":20,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN14",
    "enum":"DOTA_HeroPickState"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN2",
    "enum":"DOTA_HeroPickState"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN3",
    "enum":"DOTA_HeroPickState"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN4",
    "enum":"DOTA_HeroPickState"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN5",
    "enum":"DOTA_HeroPickState"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN6",
    "enum":"DOTA_HeroPickState"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN7",
    "enum":"DOTA_HeroPickState"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN8",
    "enum":"DOTA_HeroPickState"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_BAN9",
    "enum":"DOTA_HeroPickState"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_CAPTAINPICK",
    "enum":"DOTA_HeroPickState"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_INTRO",
    "enum":"DOTA_HeroPickState"
  },{
    "value":31,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_PICK",
    "enum":"DOTA_HeroPickState"
  },{
    "value":21,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT1",
    "enum":"DOTA_HeroPickState"
  },{
    "value":30,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT10",
    "enum":"DOTA_HeroPickState"
  },{
    "value":22,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT2",
    "enum":"DOTA_HeroPickState"
  },{
    "value":23,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT3",
    "enum":"DOTA_HeroPickState"
  },{
    "value":24,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT4",
    "enum":"DOTA_HeroPickState"
  },{
    "value":25,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT5",
    "enum":"DOTA_HeroPickState"
  },{
    "value":26,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT6",
    "enum":"DOTA_HeroPickState"
  },{
    "value":27,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT7",
    "enum":"DOTA_HeroPickState"
  },{
    "value":28,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT8",
    "enum":"DOTA_HeroPickState"
  },{
    "value":29,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT9",
    "enum":"DOTA_HeroPickState"
  },{
    "value":62,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_COUNT",
    "enum":"DOTA_HeroPickState"
  },{
    "value":60,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES",
    "enum":"DOTA_HeroPickState"
  },{
    "value":34,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_FH_SELECT",
    "enum":"DOTA_HeroPickState"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED",
    "enum":"DOTA_HeroPickState"
  },{
    "value":33,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_MO_SELECT",
    "enum":"DOTA_HeroPickState"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_NONE",
    "enum":"DOTA_HeroPickState"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_RD_SELECT_UNUSED",
    "enum":"DOTA_HeroPickState"
  },{
    "value":61,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_SCENARIO_PICK",
    "enum":"DOTA_HeroPickState"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_SD_SELECT",
    "enum":"DOTA_HeroPickState"
  },{
    "value":59,
    "kind":"constant",
    "name":"DOTA_HEROPICK_STATE_SELECT_PENALTY",
    "enum":"DOTA_HeroPickState"
  },{
    "value":55,
    "kind":"constant",
    "name":"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT",
    "enum":"DOTA_HeroPickState"
  },{
    "value":56,
    "kind":"constant",
    "name":"DOTA_HERO_PICK_STATE_ARDM_SELECT",
    "enum":"DOTA_HeroPickState"
  },{
    "value":58,
    "kind":"constant",
    "name":"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT",
    "enum":"DOTA_HeroPickState"
  },{
    "value":30,
    "kind":"constant",
    "name":"DOTA_HUD_CUSTOMUI_BEHIND_HUD_ELEMENTS",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_ACTION_MINIMAP",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_ACTION_PANEL",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":31,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_AGHANIMS_STATUS",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_COUNT",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":23,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_ENDGAME",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":24,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_ENDGAME_CHAT",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":28,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_FIGHT_RECAP",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":17,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_HERO_SELECTION_HEADER",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":-1,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVALID",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_COURIER",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_GOLD",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_ITEMS",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_PANEL",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_PROTECT",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_INVENTORY_SHOP",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":27,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_KILLCAM",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":26,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":25,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_QUICK_STATS",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_SHOP_COMMONITEMS",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":29,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_BAR",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":19,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":21,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":20,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":22,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_BAR_SCORE",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_HEROES",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_SCOREBOARD",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY",
    "enum":"DOTAHUDVisibility_t"
  },{
    "value":44,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_CANT_AUTO_CAST",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":25,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_CANT_BE_TOGGLED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_CANT_BE_UPGRADED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":83,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_CANT_BE_UPGRADED_AT_MAX",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":73,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_DISABLED_BY_ROOT",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":110,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_DISABLED_BY_TETHER",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":84,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_INACTIVE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_IN_COOLDOWN",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":60,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_IS_HIDDEN",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_AN_ITEM",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_LEARNED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_OWNED_BY_UNIT",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":101,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_POSITIONED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":102,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_TARGETTED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":111,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_UNLOCKED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":116,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_PING_DEAD_ALLY",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_REQUIRED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":103,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ABILITY_REQUIRES_TARGET",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_BAD_ABILITY_ENTITY",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":115,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_BEYOND_PHYSICAL_ITEM_LIMIT",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":100,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_ABILITY_PING_BAD_TEAM",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":54,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_ACCEPT_ATTACK_TARGET",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":99,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_DISABLED_BY_GAME_MODE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":91,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_IN_COOLDOWN",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":90,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_NOT_ENOUGH_GOLD",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":98,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_REAPERS_SCYTHE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":88,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_UNIT_NOT_A_HERO",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":89,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_UNIT_NOT_DEAD",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":109,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_DRAG_REQUIRED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":55,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_NO_CHARGES",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":50,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_ANCIENT",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_ATTACK_IMMUNE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":49,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_BUILDING",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":95,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_CONSIDERED_HERO",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":59,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_COURIER",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":56,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_CREEP",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":79,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_DOMINATED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":30,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_ENEMY",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":47,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_HERO",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":53,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_MECHANICAL",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":48,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_OTHER",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":76,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_SUMMONED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":29,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_TEAMMATE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":17,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_PASSIVE_ABILITY",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":107,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_RIVER_PAINT",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":65,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_DENY_HEALTH_TOO_HIGH",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":92,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_DISASSEMBLE_STASH_OUT_OF_RANGE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":87,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_DRAG_CHANNELING_ITEM",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":93,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_EJECT_ITEM_NOT_IN_STASH",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":112,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_FOUNTAIN_DROP_UNIT_NOT_DEAD",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":58,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_GIVE_ITEM_TO_ENEMY",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":86,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_GLYPH",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":117,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_LOCKCOMBINE_NEUTRAL_ITEMS",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":68,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_PICK_UP_ITEM",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":78,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_PURCHASE_DISALLOWED_ITEM",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":104,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_RADAR",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":70,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_SELL_ITEM",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":71,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_SELL_ITEM_WHILE_DEAD",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":69,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_SELL_NO_SHOP_IN_RANGE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":96,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CANT_SHOP_AUTO_BUY_ENABLED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":80,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CAST_CUSTOM",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":118,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_COUNT",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":106,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_CUSTOM_SHOP_NOT_IN_RANGE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":19,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_DEAD_TARGET",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":94,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_GAME_IS_PAUSED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":28,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_HERO_CANT_BE_DENIED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":67,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_HOME_SHOP_NOT_IN_RANGE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":114,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_ALREADY_PURCHASED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":42,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_CANT_BE_DROPPED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":52,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_CANT_BE_MOVED_TO_SLOT",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":51,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_CANT_BE_MOVED_TO_STASH",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":61,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_IN_COOLDOWN",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":81,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_DISASSEMBLABLE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":37,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_IN_ACTIVE_INVENTORY",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":34,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_IN_INVENTORY",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":85,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_IN_MAIN_INVENTORY",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":113,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_IN_NEUTRAL_ITEM_STASH",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":35,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_IN_UNIT_INVENTORY",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":82,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ITEM_OUT_OF_STOCK",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_NOT_CONTROLLABLE_BY_PLAYER",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":63,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_NOT_ENOUGH_GOLD",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_NOT_ENOUGH_MANA",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":105,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_NO_COURIER",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_NO_POINTS_FOR_ABILITY_UPGRADE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_NPC_TARGET_REQUIRED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":97,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_ONLY_DELIBERATE_CHANNELING_CANCEL",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_PHANTOM_TARGET",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_PHYSICAL_ITEM_TARGET_REQUIRED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":64,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_PURCHASE_AUTOCOMBINE_RECIPE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":33,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_PURCHASE_INVALID_ITEM",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_RUNE_TARGET_REQUIRED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":62,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_SECRET_SHOP_NOT_IN_RANGE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":66,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_SIDE_SHOP_NOT_IN_RANGE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":23,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_ATTACK_IMMUNE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":72,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_CANT_BE_DENIED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":26,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_CANT_BE_SEEN",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":57,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_CANT_TAKE_ITEMS",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_ENTITY_INDEX_OUT_OF_RANGE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":27,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_INVISIBLE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":22,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_INVULNERABLE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":77,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_MAGIC_IMMUNE_ALLY",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":21,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_MAGIC_IMMUNE_ENEMY",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":45,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_POSITION_OFF_MAP",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_TREE_INDEX_NOT_A_TREE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":43,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_TREE_NOT_ACTIVE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":36,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_TARGET_UNSELECTABLE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":41,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_CANT_ATTACK",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":39,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_CANT_MANIPULATE_ITEMS",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":31,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_CANT_MOVE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":46,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_CANT_MOVE_TARGET_OUT_OF_RANGE",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":38,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_CANT_PICK_UP_RUNES",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":74,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_COMMAND_RESTRICTED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":20,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_IS_DEAD",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":40,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_IS_ILLUSION",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_IS_NOT_NPC",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":75,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_MUTED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":108,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_OBSTRUCTED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":24,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNIT_SILENCED",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_INVALID_ORDER_UNRECOGNIZED_ORDER",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN",
    "enum":"DOTAInventoryFlags_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALLOW_DROP_ON_GROUND",
    "enum":"DOTAInventoryFlags_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALLOW_MAIN",
    "enum":"DOTAInventoryFlags_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALLOW_NONE",
    "enum":"DOTAInventoryFlags_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALLOW_STASH",
    "enum":"DOTAInventoryFlags_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_INVENTORY_ALL_ACCESS",
    "enum":"DOTAInventoryFlags_t"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_INVENTORY_LIMIT_DROP_ON_GROUND",
    "enum":"DOTAInventoryFlags_t"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_ITEM_INVENTORY_SIZE"
  },{
    "value":19,
    "kind":"constant",
    "name":"DOTA_ITEM_MAX"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_ITEM_NEUTRAL_SLOT"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_1",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_2",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_3",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_4",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_5",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_6",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_7",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_8",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_ITEM_SLOT_9",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_ITEM_STASH_MAX"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_ITEM_STASH_MIN"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_ITEM_STASH_SIZE"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_ITEM_TP_SCROLL"
  },{
    "value":20,
    "kind":"constant",
    "name":"DOTA_ITEM_TRANSIENT_CAST_ITEM"
  },{
    "value":17,
    "kind":"constant",
    "name":"DOTA_ITEM_TRANSIENT_ITEM"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_ITEM_TRANSIENT_RECIPE"
  },{
    "value":65,
    "kind":"constant",
    "name":"DOTA_LOADOUT_PERSONA_1_END",
    "enum":"DOTASlotType_t"
  },{
    "value":38,
    "kind":"constant",
    "name":"DOTA_LOADOUT_PERSONA_1_START",
    "enum":"DOTASlotType_t"
  },{
    "value":23,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY1",
    "enum":"DOTASlotType_t"
  },{
    "value":60,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY1_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":24,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY2",
    "enum":"DOTASlotType_t"
  },{
    "value":61,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY2_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":25,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY3",
    "enum":"DOTASlotType_t"
  },{
    "value":62,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY3_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":26,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY4",
    "enum":"DOTASlotType_t"
  },{
    "value":63,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY4_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":22,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_ATTACK",
    "enum":"DOTASlotType_t"
  },{
    "value":59,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_ATTACK_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":28,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_1",
    "enum":"DOTASlotType_t"
  },{
    "value":29,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_2",
    "enum":"DOTASlotType_t"
  },{
    "value":30,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_3",
    "enum":"DOTASlotType_t"
  },{
    "value":31,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_4",
    "enum":"DOTASlotType_t"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_5",
    "enum":"DOTASlotType_t"
  },{
    "value":33,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_6",
    "enum":"DOTASlotType_t"
  },{
    "value":34,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_7",
    "enum":"DOTASlotType_t"
  },{
    "value":35,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_8",
    "enum":"DOTASlotType_t"
  },{
    "value":36,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_EFFECTS_9",
    "enum":"DOTASlotType_t"
  },{
    "value":27,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE",
    "enum":"DOTASlotType_t"
  },{
    "value":64,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":21,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS",
    "enum":"DOTASlotType_t"
  },{
    "value":58,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":68,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ANNOUNCER",
    "enum":"DOTASlotType_t"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ARMOR",
    "enum":"DOTASlotType_t"
  },{
    "value":45,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ARMOR_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ARMS",
    "enum":"DOTASlotType_t"
  },{
    "value":44,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ARMS_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BACK",
    "enum":"DOTASlotType_t"
  },{
    "value":48,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BACK_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BELT",
    "enum":"DOTASlotType_t"
  },{
    "value":46,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BELT_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":79,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BLINK_EFFECT",
    "enum":"DOTASlotType_t"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BODY_HEAD",
    "enum":"DOTASlotType_t"
  },{
    "value":53,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_BODY_HEAD_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_COSTUME",
    "enum":"DOTASlotType_t"
  },{
    "value":97,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_COUNT",
    "enum":"DOTASlotType_t"
  },{
    "value":67,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_COURIER",
    "enum":"DOTASlotType_t"
  },{
    "value":92,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_COURIER_EFFECT",
    "enum":"DOTASlotType_t"
  },{
    "value":77,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_CURSOR_PACK",
    "enum":"DOTASlotType_t"
  },{
    "value":89,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_DEATH_EFFECT",
    "enum":"DOTASlotType_t"
  },{
    "value":83,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_DIRE_CREEPS",
    "enum":"DOTASlotType_t"
  },{
    "value":94,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_DIRE_SIEGE_CREEPS",
    "enum":"DOTASlotType_t"
  },{
    "value":85,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_DIRE_TOWER",
    "enum":"DOTASlotType_t"
  },{
    "value":80,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_EMBLEM",
    "enum":"DOTASlotType_t"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_GLOVES",
    "enum":"DOTASlotType_t"
  },{
    "value":50,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_GLOVES_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_HEAD",
    "enum":"DOTASlotType_t"
  },{
    "value":90,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_HEAD_EFFECT",
    "enum":"DOTASlotType_t"
  },{
    "value":42,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_HEAD_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":75,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_HEROIC_STATUE",
    "enum":"DOTASlotType_t"
  },{
    "value":72,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_HUD_SKIN",
    "enum":"DOTASlotType_t"
  },{
    "value":-1,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_INVALID",
    "enum":"DOTASlotType_t"
  },{
    "value":88,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_KILL_EFFECT",
    "enum":"DOTASlotType_t"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_LEGS",
    "enum":"DOTASlotType_t"
  },{
    "value":49,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_LEGS_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":73,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_LOADING_SCREEN",
    "enum":"DOTASlotType_t"
  },{
    "value":91,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MAP_EFFECT",
    "enum":"DOTASlotType_t"
  },{
    "value":69,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MEGA_KILLS",
    "enum":"DOTASlotType_t"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MISC",
    "enum":"DOTASlotType_t"
  },{
    "value":52,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MISC_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":17,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MOUNT",
    "enum":"DOTASlotType_t"
  },{
    "value":54,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MOUNT_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":76,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MULTIKILL_BANNER",
    "enum":"DOTASlotType_t"
  },{
    "value":70,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_MUSIC",
    "enum":"DOTASlotType_t"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_NECK",
    "enum":"DOTASlotType_t"
  },{
    "value":47,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_NECK_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":96,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_NONE",
    "enum":"DOTASlotType_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON",
    "enum":"DOTASlotType_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2",
    "enum":"DOTASlotType_t"
  },{
    "value":41,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":39,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":66,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_PERSONA_SELECTOR",
    "enum":"DOTASlotType_t"
  },{
    "value":82,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_RADIANT_CREEPS",
    "enum":"DOTASlotType_t"
  },{
    "value":93,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_RADIANT_SIEGE_CREEPS",
    "enum":"DOTASlotType_t"
  },{
    "value":84,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_RADIANT_TOWER",
    "enum":"DOTASlotType_t"
  },{
    "value":95,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_ROSHAN",
    "enum":"DOTASlotType_t"
  },{
    "value":19,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SHAPESHIFT",
    "enum":"DOTASlotType_t"
  },{
    "value":56,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SHAPESHIFT_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SHOULDER",
    "enum":"DOTASlotType_t"
  },{
    "value":43,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SHOULDER_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":87,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_STREAK_EFFECT",
    "enum":"DOTASlotType_t"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SUMMON",
    "enum":"DOTASlotType_t"
  },{
    "value":55,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_SUMMON_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TAIL",
    "enum":"DOTASlotType_t"
  },{
    "value":51,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TAIL_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":20,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TAUNT",
    "enum":"DOTASlotType_t"
  },{
    "value":57,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TAUNT_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":78,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TELEPORT_EFFECT",
    "enum":"DOTASlotType_t"
  },{
    "value":81,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_TERRAIN",
    "enum":"DOTASlotType_t"
  },{
    "value":86,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_VERSUS_SCREEN",
    "enum":"DOTASlotType_t"
  },{
    "value":37,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_VOICE",
    "enum":"DOTASlotType_t"
  },{
    "value":65,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_VOICE_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":71,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WARD",
    "enum":"DOTASlotType_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WEAPON",
    "enum":"DOTASlotType_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WEAPON2",
    "enum":"DOTASlotType_t"
  },{
    "value":40,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WEAPON2_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":38,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WEAPON_PERSONA_1",
    "enum":"DOTASlotType_t"
  },{
    "value":74,
    "kind":"constant",
    "name":"DOTA_LOADOUT_TYPE_WEATHER",
    "enum":"DOTASlotType_t"
  },{
    "value":35,
    "kind":"constant",
    "name":"DOTA_MAX_ABILITIES"
  },{
    "value":64,
    "kind":"constant",
    "name":"DOTA_MAX_PLAYERS",
    "enum":"DOTALimits_t",
    "description":"Max number of players connected to the server including spectators."
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_MAX_PLAYER_TEAMS",
    "enum":"DOTALimits_t",
    "description":"Max number of player teams supported."
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_MAX_SPECTATOR_LOBBY_SIZE",
    "enum":"DOTALimits_t",
    "description":"Max number of viewers in a spectator lobby."
  },{
    "value":40,
    "kind":"constant",
    "name":"DOTA_MAX_SPECTATOR_TEAM_SIZE",
    "enum":"DOTALimits_t",
    "description":"How many spectators can watch."
  },{
    "value":24,
    "kind":"constant",
    "name":"DOTA_MAX_TEAM",
    "enum":"DOTALimits_t",
    "description":"Max number of players per team."
  },{
    "value":24,
    "kind":"constant",
    "name":"DOTA_MAX_TEAM_PLAYERS",
    "enum":"DOTALimits_t",
    "description":"Max number of non-spectator players supported."
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_BASE_GLYPHED",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":2048,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":1024,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":512,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_HINT_LOCATION",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":16384,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_MOVE_TO_TARGET",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":4096,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_RADAR",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":8192,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_RADAR_TARGET",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":64,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_TEAMMATE_DIED",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":128,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":256,
    "kind":"constant",
    "name":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED",
    "enum":"DOTAMinimapEvent_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH",
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST",
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOW",
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST",
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM",
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_BATTLE",
    "enum":"DOTAMusicStatus_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_DEAD",
    "enum":"DOTAMusicStatus_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_EXPLORATION",
    "enum":"DOTAMusicStatus_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_LAST",
    "enum":"DOTAMusicStatus_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_NONE",
    "enum":"DOTAMusicStatus_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION",
    "enum":"DOTAMusicStatus_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_ModifyGold_AbandonedRedistribute",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_ModifyGold_AbilityCost",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":19,
    "kind":"constant",
    "name":"DOTA_ModifyGold_AbilityGold",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":17,
    "kind":"constant",
    "name":"DOTA_ModifyGold_BountyRune",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_ModifyGold_Building",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_ModifyGold_Buyback",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_ModifyGold_CheatCommand",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_ModifyGold_CourierKill",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":21,
    "kind":"constant",
    "name":"DOTA_ModifyGold_CourierKilledByThisPlayer",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_ModifyGold_CreepKill",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_ModifyGold_Death",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_ModifyGold_GameTick",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_ModifyGold_HeroKill",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_ModifyGold_NeutralKill",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_ModifyGold_PurchaseConsumable",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_ModifyGold_PurchaseItem",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_ModifyGold_RoshanKill",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_ModifyGold_SelectionPenalty",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_ModifyGold_SellItem",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_ModifyGold_SharedGold",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ModifyGold_Unspecified",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":20,
    "kind":"constant",
    "name":"DOTA_ModifyGold_WardKill",
    "enum":"EDOTA_ModifyGold_Reason"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_ModifyXP_CreepKill",
    "enum":"EDOTA_ModifyXP_Reason"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_ModifyXP_HeroKill",
    "enum":"EDOTA_ModifyXP_Reason"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_ModifyXP_MAX",
    "enum":"EDOTA_ModifyXP_Reason"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_ModifyXP_Outpost",
    "enum":"EDOTA_ModifyXP_Reason"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_ModifyXP_RoshanKill",
    "enum":"EDOTA_ModifyXP_Reason"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_ModifyXP_TomeOfKnowledge",
    "enum":"EDOTA_ModifyXP_Reason"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_ModifyXP_Unspecified",
    "enum":"EDOTA_ModifyXP_Reason"
  },{
    "value":-1,
    "kind":"constant",
    "name":"DOTA_ORDER_SUCCESS",
    "enum":"DOTA_INVALID_ORDERS"
  },{
    "value":95,
    "kind":"constant",
    "name":"DOTA_PLAYER_LOADOUT_END",
    "enum":"DOTASlotType_t"
  },{
    "value":67,
    "kind":"constant",
    "name":"DOTA_PLAYER_LOADOUT_START",
    "enum":"DOTASlotType_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_POST_GAME_COLUMN_ASSISTS",
    "enum":"DOTAPostGameColumn_t"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_POST_GAME_COLUMN_DAMAGE",
    "enum":"DOTAPostGameColumn_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_POST_GAME_COLUMN_DEATHS",
    "enum":"DOTAPostGameColumn_t"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_POST_GAME_COLUMN_DENIES",
    "enum":"DOTAPostGameColumn_t"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_POST_GAME_COLUMN_HEALING",
    "enum":"DOTAPostGameColumn_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_POST_GAME_COLUMN_ITEMS",
    "enum":"DOTAPostGameColumn_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_POST_GAME_COLUMN_KILLS",
    "enum":"DOTAPostGameColumn_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_POST_GAME_COLUMN_LAST_HITS",
    "enum":"DOTAPostGameColumn_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_POST_GAME_COLUMN_LEVEL",
    "enum":"DOTAPostGameColumn_t"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_POST_GAME_COLUMN_MAX",
    "enum":"DOTAPostGameColumn_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_POST_GAME_COLUMN_NET_WORTH",
    "enum":"DOTAPostGameColumn_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_POST_GAME_LAYOUT_DOUBLE_COLUMN",
    "enum":"DOTAPostGameLayout_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_POST_GAME_LAYOUT_MAX",
    "enum":"DOTAPostGameLayout_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_POST_GAME_LAYOUT_SINGLE_COLUMN",
    "enum":"DOTAPostGameLayout_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_1",
    "enum":"DOTAProjectileAttachment_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_2",
    "enum":"DOTAProjectileAttachment_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_3",
    "enum":"DOTAProjectileAttachment_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_4",
    "enum":"DOTAProjectileAttachment_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_HITLOCATION",
    "enum":"DOTAProjectileAttachment_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_LAST",
    "enum":"DOTAProjectileAttachment_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_PROJECTILE_ATTACHMENT_NONE",
    "enum":"DOTAProjectileAttachment_t"
  },{
    "value":67,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ANTIMAGE_SILENT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":65,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ARMADILLO_HEARTPIERCER",
    "enum":"DotaPseudoRandomType"
  },{
    "value":25,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ATOS",
    "enum":"DotaPseudoRandomType"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_AXE_HELIX",
    "enum":"DotaPseudoRandomType"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_AXE_HELIX_ATTACK",
    "enum":"DotaPseudoRandomType"
  },{
    "value":75,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_BATRIDER_NAPALM",
    "enum":"DotaPseudoRandomType"
  },{
    "value":23,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_BREWMASTER_CINDER_BREW",
    "enum":"DotaPseudoRandomType"
  },{
    "value":22,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_BREWMASTER_CRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":28,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CHAOS_CRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":60,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CHAOS_DOUBLE_CRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":61,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CHAOS_TRIPLE_CRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":31,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CM_FREEZING_FIELD",
    "enum":"DotaPseudoRandomType"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_COLD_REBUKE",
    "enum":"DotaPseudoRandomType"
  },{
    "value":77,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_1",
    "enum":"DotaPseudoRandomType"
  },{
    "value":78,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_2",
    "enum":"DotaPseudoRandomType"
  },{
    "value":79,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_3",
    "enum":"DotaPseudoRandomType"
  },{
    "value":80,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_4",
    "enum":"DotaPseudoRandomType"
  },{
    "value":81,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_5",
    "enum":"DotaPseudoRandomType"
  },{
    "value":82,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_6",
    "enum":"DotaPseudoRandomType"
  },{
    "value":83,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_7",
    "enum":"DotaPseudoRandomType"
  },{
    "value":84,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_8",
    "enum":"DotaPseudoRandomType"
  },{
    "value":85,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_9",
    "enum":"DotaPseudoRandomType"
  },{
    "value":76,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GENERIC",
    "enum":"DotaPseudoRandomType"
  },{
    "value":27,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_DAZZLE_SCEPTER",
    "enum":"DotaPseudoRandomType"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_DROW_MARKSMANSHIP",
    "enum":"DotaPseudoRandomType"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_FACELESS_BASH",
    "enum":"DotaPseudoRandomType"
  },{
    "value":20,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_FACELESS_EVADE_ATTACK",
    "enum":"DotaPseudoRandomType"
  },{
    "value":19,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_FACELESS_EVADE_SPELL",
    "enum":"DotaPseudoRandomType"
  },{
    "value":21,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_FACELESS_VOID_BACKTRACK",
    "enum":"DotaPseudoRandomType"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_GENERIC_BASHER",
    "enum":"DotaPseudoRandomType"
  },{
    "value":62,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_GENERIC_EVASION",
    "enum":"DotaPseudoRandomType"
  },{
    "value":63,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_GENERIC_HEIGHT_MISS",
    "enum":"DotaPseudoRandomType"
  },{
    "value":64,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_GENERIC_MISS",
    "enum":"DotaPseudoRandomType"
  },{
    "value":41,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_ABYSSAL",
    "enum":"DotaPseudoRandomType"
  },{
    "value":42,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_ABYSSAL_BLOCK",
    "enum":"DotaPseudoRandomType"
  },{
    "value":37,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_BASHER",
    "enum":"DotaPseudoRandomType"
  },{
    "value":51,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_BUTTERFLY",
    "enum":"DotaPseudoRandomType"
  },{
    "value":45,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_CRIMSON_GUARD",
    "enum":"DotaPseudoRandomType"
  },{
    "value":35,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_GREATERCRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":47,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_HALBRED_MAIM",
    "enum":"DotaPseudoRandomType"
  },{
    "value":39,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_JAVELIN_ACCURACY",
    "enum":"DotaPseudoRandomType"
  },{
    "value":36,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_LESSERCRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":52,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_MAELSTROM",
    "enum":"DotaPseudoRandomType"
  },{
    "value":53,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR",
    "enum":"DotaPseudoRandomType"
  },{
    "value":54,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR_STATIC",
    "enum":"DotaPseudoRandomType"
  },{
    "value":55,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_MKB",
    "enum":"DotaPseudoRandomType"
  },{
    "value":57,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_NAGINATA",
    "enum":"DotaPseudoRandomType"
  },{
    "value":46,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_PMS",
    "enum":"DotaPseudoRandomType"
  },{
    "value":49,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_SANGEKAYA_MAIM",
    "enum":"DotaPseudoRandomType"
  },{
    "value":48,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_SANGEYASHA_MAIM",
    "enum":"DotaPseudoRandomType"
  },{
    "value":50,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_SANGE_MAIM",
    "enum":"DotaPseudoRandomType"
  },{
    "value":56,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_SILVER_EDGE",
    "enum":"DotaPseudoRandomType"
  },{
    "value":38,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_SOLAR_CREST",
    "enum":"DotaPseudoRandomType"
  },{
    "value":43,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_STOUT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":40,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_TRIDENT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":44,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_VANGUARD",
    "enum":"DotaPseudoRandomType"
  },{
    "value":26,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_JUGG_CRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_LEGION_MOMENT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":17,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_LONE_DRUID_ENTANGLE",
    "enum":"DotaPseudoRandomType"
  },{
    "value":29,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_LYCAN_CRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_MAGNUS_SHARD",
    "enum":"DotaPseudoRandomType"
  },{
    "value":73,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_MARS_BULWARK",
    "enum":"DotaPseudoRandomType"
  },{
    "value":66,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_MARS_SHIELD",
    "enum":"DotaPseudoRandomType"
  },{
    "value":74,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_MUERTA_GUNSLINGER",
    "enum":"DotaPseudoRandomType"
  },{
    "value":68,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER1",
    "enum":"DotaPseudoRandomType"
  },{
    "value":69,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER2",
    "enum":"DotaPseudoRandomType"
  },{
    "value":70,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER3",
    "enum":"DotaPseudoRandomType"
  },{
    "value":71,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER4",
    "enum":"DotaPseudoRandomType"
  },{
    "value":72,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER5",
    "enum":"DotaPseudoRandomType"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_NONE",
    "enum":"DotaPseudoRandomType"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_OD_ESSENCE",
    "enum":"DotaPseudoRandomType"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_OGRE_ITEM_MULTICAST",
    "enum":"DotaPseudoRandomType"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_OGRE_MAGI_FIREBLAST",
    "enum":"DotaPseudoRandomType"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_PHANTOMASSASSIN_CRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_PHANTOMASSASSIN_DAGGER",
    "enum":"DotaPseudoRandomType"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_PHANTOMLANCER_JUXTAPOSE",
    "enum":"DotaPseudoRandomType"
  },{
    "value":59,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_RIKI_SMOKE_SCREEN",
    "enum":"DotaPseudoRandomType"
  },{
    "value":33,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_SKELETONKING_CRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":34,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_SKELETONKING_CRIT_MORTAL",
    "enum":"DotaPseudoRandomType"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_SLARDAR_BASH",
    "enum":"DotaPseudoRandomType"
  },{
    "value":24,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_SNIPER_HEADSHOT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_SPIRITBREAKER_GREATERBASH",
    "enum":"DotaPseudoRandomType"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_TINY_CRAGGY",
    "enum":"DotaPseudoRandomType"
  },{
    "value":58,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_TROLL_BASH",
    "enum":"DotaPseudoRandomType"
  },{
    "value":30,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_TUSK_CRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_PSEUDO_RANDOM_WOLF_CRIT",
    "enum":"DotaPseudoRandomType"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_RUNE_ARCANE",
    "enum":"DOTA_RUNES"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_RUNE_BOUNTY",
    "enum":"DOTA_RUNES"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_RUNE_COUNT",
    "enum":"DOTA_RUNES"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_RUNE_DOUBLEDAMAGE",
    "enum":"DOTA_RUNES"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_RUNE_HASTE",
    "enum":"DOTA_RUNES"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_RUNE_ILLUSION",
    "enum":"DOTA_RUNES"
  },{
    "value":-1,
    "kind":"constant",
    "name":"DOTA_RUNE_INVALID",
    "enum":"DOTA_RUNES"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_RUNE_INVISIBILITY",
    "enum":"DOTA_RUNES"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_RUNE_REGENERATION",
    "enum":"DOTA_RUNES"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_RUNE_WATER",
    "enum":"DOTA_RUNES"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_SHOP_CUSTOM",
    "enum":"DOTA_SHOP_TYPE"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_SHOP_GROUND",
    "enum":"DOTA_SHOP_TYPE"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_SHOP_HOME",
    "enum":"DOTA_SHOP_TYPE"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_SHOP_NEUTRALS",
    "enum":"DOTA_SHOP_TYPE"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_SHOP_NONE",
    "enum":"DOTA_SHOP_TYPE"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_SHOP_SECRET",
    "enum":"DOTA_SHOP_TYPE"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_SHOP_SECRET2",
    "enum":"DOTA_SHOP_TYPE"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_SHOP_SIDE",
    "enum":"DOTA_SHOP_TYPE"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_SHOP_SIDE2",
    "enum":"DOTA_SHOP_TYPE"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_SHOWGENERICPOPUP_SHOW_NO_OTHER_DIALOGS"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_SHOWGENERICPOPUP_TINT_SCREEN"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_SPEECH_BAD_TEAM",
    "enum":"DOTASpeechType_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_SPEECH_GOOD_TEAM",
    "enum":"DOTASpeechType_t"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_SPEECH_RECIPIENT_TYPE_MAX",
    "enum":"DOTASpeechType_t"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_SPEECH_SPECTATOR",
    "enum":"DOTASpeechType_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_ALL",
    "enum":"DOTASpeechType_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_INVALID",
    "enum":"DOTASpeechType_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_NEARBY",
    "enum":"DOTASpeechType_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_SINGLE",
    "enum":"DOTASpeechType_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_TEAM",
    "enum":"DOTASpeechType_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_TEAM_NEARBY",
    "enum":"DOTASpeechType_t"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_SPEECH_USER_TEAM_NOSPECTATOR",
    "enum":"DOTASpeechType_t"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_1",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_2",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_3",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_4",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_5",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_STASH_SLOT_6",
    "enum":"DOTAScriptInventorySlot_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_TEAM_BADGUYS",
    "enum":"DOTATeam_t"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_TEAM_COUNT",
    "enum":"DOTATeam_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_1",
    "enum":"DOTATeam_t"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_2",
    "enum":"DOTATeam_t"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_3",
    "enum":"DOTATeam_t"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_4",
    "enum":"DOTATeam_t"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_5",
    "enum":"DOTATeam_t"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_6",
    "enum":"DOTATeam_t"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_7",
    "enum":"DOTATeam_t"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_8",
    "enum":"DOTATeam_t"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_COUNT",
    "enum":"DOTATeam_t"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_MAX",
    "enum":"DOTATeam_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_TEAM_CUSTOM_MIN",
    "enum":"DOTATeam_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_TEAM_FIRST",
    "enum":"DOTATeam_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_TEAM_GOODGUYS",
    "enum":"DOTATeam_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_TEAM_NEUTRALS",
    "enum":"DOTATeam_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_TEAM_NOTEAM",
    "enum":"DOTATeam_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT",
    "enum":"DOTAUnitAttackCapability_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_MELEE_ATTACK",
    "enum":"DOTAUnitAttackCapability_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_MOVE_FLY",
    "enum":"DOTAUnitMoveCapability_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_MOVE_GROUND",
    "enum":"DOTAUnitMoveCapability_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_MOVE_NONE",
    "enum":"DOTAUnitMoveCapability_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_NO_ATTACK",
    "enum":"DOTAUnitAttackCapability_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_RANGED_ATTACK",
    "enum":"DOTAUnitAttackCapability_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL",
    "enum":"DOTAUnitAttackCapability_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_ATTACK_MOVE"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_ATTACK_TARGET"
  },{
    "value":23,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_BUYBACK"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_NO_TARGET"
  },{
    "value":5,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_POSITION"
  },{
    "value":35,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_RIVER_PAINT"
  },{
    "value":26,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_RUNE"
  },{
    "value":6,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_TARGET"
  },{
    "value":7,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_TARGET_TREE"
  },{
    "value":9,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_TOGGLE"
  },{
    "value":20,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO"
  },{
    "value":33,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_CONTINUE"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_DISASSEMBLE_ITEM"
  },{
    "value":12,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_DROP_ITEM"
  },{
    "value":37,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN"
  },{
    "value":25,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH"
  },{
    "value":13,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_GIVE_ITEM"
  },{
    "value":24,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_GLYPH"
  },{
    "value":10,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_HOLD_POSITION"
  },{
    "value":19,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_MOVE_ITEM"
  },{
    "value":39,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_MOVE_RELATIVE"
  },{
    "value":28,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_MOVE_TO_DIRECTION"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_MOVE_TO_POSITION"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_MOVE_TO_TARGET"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_NONE"
  },{
    "value":29,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PATROL"
  },{
    "value":14,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PICKUP_ITEM"
  },{
    "value":15,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PICKUP_RUNE"
  },{
    "value":27,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PING_ABILITY"
  },{
    "value":36,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_PURCHASE_ITEM"
  },{
    "value":31,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_RADAR"
  },{
    "value":17,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_SELL_ITEM"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK"
  },{
    "value":21,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_STOP"
  },{
    "value":38,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH"
  },{
    "value":22,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_TAUNT"
  },{
    "value":11,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_TRAIN_ABILITY"
  },{
    "value":34,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED"
  },{
    "value":30,
    "kind":"constant",
    "name":"DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION"
  },{
    "value":55,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_ALL",
    "enum":"DOTA_UNIT_TARGET_TYPE"
  },{
    "value":18,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_BASIC",
    "enum":"DOTA_UNIT_TARGET_TYPE"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_BUILDING",
    "enum":"DOTA_UNIT_TARGET_TYPE"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_COURIER",
    "enum":"DOTA_UNIT_TARGET_TYPE"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_CREEP",
    "enum":"DOTA_UNIT_TARGET_TYPE"
  },{
    "value":128,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_CUSTOM",
    "enum":"DOTA_UNIT_TARGET_TYPE"
  },{
    "value":65536,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":8,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_DEAD",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":128,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":64,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_INVULNERABLE",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":16,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":32768,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_MANA_ONLY",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NONE",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":512,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":16384,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":131072,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":2048,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":8192,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":524288,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":4096,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":256,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_NO_INVIS",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":262144,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":1024,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":1048576,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":2097152,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS",
    "enum":"DOTA_UNIT_TARGET_FLAGS"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_HERO",
    "enum":"DOTA_UNIT_TARGET_TYPE"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_NONE",
    "enum":"DOTA_UNIT_TARGET_TYPE"
  },{
    "value":32,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_OTHER",
    "enum":"DOTA_UNIT_TARGET_TYPE"
  },{
    "value":256,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_SELF",
    "enum":"DOTA_UNIT_TARGET_TYPE"
  },{
    "value":3,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_BOTH",
    "enum":"DOTA_UNIT_TARGET_TEAM"
  },{
    "value":4,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_CUSTOM",
    "enum":"DOTA_UNIT_TARGET_TEAM"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_ENEMY",
    "enum":"DOTA_UNIT_TARGET_TEAM"
  },{
    "value":1,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_FRIENDLY",
    "enum":"DOTA_UNIT_TARGET_TEAM"
  },{
    "value":0,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TEAM_NONE",
    "enum":"DOTA_UNIT_TARGET_TEAM"
  },{
    "value":64,
    "kind":"constant",
    "name":"DOTA_UNIT_TARGET_TREE",
    "enum":"DOTA_UNIT_TARGET_TYPE"
  },{
    "value":2,
    "kind":"constant",
    "name":"DOUBLE_SHOT"
  },{
    "value":32,
    "kind":"constant",
    "name":"EF_NODRAW"
  },{
    "value":0,
    "kind":"constant",
    "name":"EMPTY"
  },{
    "value":128,
    "kind":"constant",
    "name":"FCVAR_ARCHIVE"
  },{
    "value":16384,
    "kind":"constant",
    "name":"FCVAR_CHEAT"
  },{
    "value":65536,
    "kind":"constant",
    "name":"FCVAR_DEMO"
  },{
    "value":2,
    "kind":"constant",
    "name":"FCVAR_DEVELOPMENTONLY"
  },{
    "value":131072,
    "kind":"constant",
    "name":"FCVAR_DONTRECORD"
  },{
    "value":16,
    "kind":"constant",
    "name":"FCVAR_HIDDEN"
  },{
    "value":0,
    "kind":"constant",
    "name":"FCVAR_NONE"
  },{
    "value":256,
    "kind":"constant",
    "name":"FCVAR_NOTIFY"
  },{
    "value":4194304,
    "kind":"constant",
    "name":"FCVAR_NOT_CONNECTED"
  },{
    "value":32768,
    "kind":"constant",
    "name":"FCVAR_PER_USER"
  },{
    "value":32,
    "kind":"constant",
    "name":"FCVAR_PROTECTED"
  },{
    "value":8192,
    "kind":"constant",
    "name":"FCVAR_REPLICATED"
  },{
    "value":64,
    "kind":"constant",
    "name":"FCVAR_SPONLY"
  },{
    "value":2048,
    "kind":"constant",
    "name":"FCVAR_UNLOGGED"
  },{
    "value":512,
    "kind":"constant",
    "name":"FCVAR_USERINFO"
  },{
    "value":134217728,
    "kind":"constant",
    "name":"FCVAR_VCONSOLE_SET_FOCUS"
  },{
    "value":0,
    "kind":"constant",
    "name":"FIND_ANY_ORDER"
  },{
    "value":1,
    "kind":"constant",
    "name":"FIND_CLOSEST"
  },{
    "value":2,
    "kind":"constant",
    "name":"FIND_FARTHEST"
  },{
    "value":-1,
    "kind":"constant",
    "name":"FIND_UNITS_EVERYWHERE"
  },{
    "value":0,
    "kind":"constant",
    "name":"ITEM_FULLY_SHAREABLE",
    "enum":"EShareAbility"
  },{
    "value":2,
    "kind":"constant",
    "name":"ITEM_NOT_SHAREABLE",
    "enum":"EShareAbility"
  },{
    "value":1,
    "kind":"constant",
    "name":"ITEM_PARTIALLY_SHAREABLE",
    "enum":"EShareAbility"
  },{
    "value":4,
    "kind":"constant",
    "name":"LUA_MODIFIER_INVALID",
    "enum":"LuaModifierType"
  },{
    "value":3,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_BOTH",
    "enum":"LuaModifierType"
  },{
    "value":1,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_HORIZONTAL",
    "enum":"LuaModifierType"
  },{
    "value":0,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_NONE",
    "enum":"LuaModifierType"
  },{
    "value":2,
    "kind":"constant",
    "name":"LUA_MODIFIER_MOTION_VERTICAL",
    "enum":"LuaModifierType"
  },{
    "value":16,
    "kind":"constant",
    "name":"MAX_PATTACH_TYPES",
    "enum":"ParticleAttachment_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"MELEE_HIT"
  },{
    "value":7,
    "kind":"constant",
    "name":"MELEE_HIT_PLAYER"
  },{
    "value":6,
    "kind":"constant",
    "name":"MELEE_HIT_WORLD"
  },{
    "value":4,
    "kind":"constant",
    "name":"MELEE_MISS"
  },{
    "value":8,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_AURA_PRIORITY",
    "enum":"DOTAModifierAttribute_t"
  },{
    "value":16,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_IGNORE_DODGE",
    "enum":"DOTAModifierAttribute_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE",
    "enum":"DOTAModifierAttribute_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_MULTIPLE",
    "enum":"DOTAModifierAttribute_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_NONE",
    "enum":"DOTAModifierAttribute_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_ATTRIBUTE_PERMANENT",
    "enum":"DOTAModifierAttribute_t"
  },{
    "value":187,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL",
    "enum":"modifierfunction",
    "description":"OnAbilityEndChannel"
  },{
    "value":184,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_EXECUTED",
    "enum":"modifierfunction",
    "description":"OnAbilityExecuted"
  },{
    "value":185,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST",
    "enum":"modifierfunction",
    "description":"OnAbilityFullyCast"
  },{
    "value":183,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ABILITY_START",
    "enum":"modifierfunction",
    "description":"OnAbilityStart"
  },{
    "value":233,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ASSIST",
    "enum":"modifierfunction",
    "description":"OnAssist"
  },{
    "value":176,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK",
    "enum":"modifierfunction",
    "description":"OnAttack"
  },{
    "value":197,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACKED",
    "enum":"modifierfunction",
    "description":"OnAttacked"
  },{
    "value":179,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_ALLIED",
    "enum":"modifierfunction",
    "description":"OnAttackAllied"
  },{
    "value":247,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_CANCELLED",
    "enum":"modifierfunction",
    "description":"OnAttackCancelled"
  },{
    "value":178,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_FAIL",
    "enum":"modifierfunction",
    "description":"OnAttackFail"
  },{
    "value":236,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_FINISHED",
    "enum":"modifierfunction",
    "description":"OnAttackFinished"
  },{
    "value":177,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_LANDED",
    "enum":"modifierfunction",
    "description":"OnAttackLanded"
  },{
    "value":174,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_RECORD",
    "enum":"modifierfunction",
    "description":"OnAttackRecord"
  },{
    "value":244,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY",
    "enum":"modifierfunction",
    "description":"OnAttackRecordDestroy"
  },{
    "value":175,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTACK_START",
    "enum":"modifierfunction",
    "description":"OnAttackStart"
  },{
    "value":254,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ATTEMPT_PROJECTILE_DODGE",
    "enum":"modifierfunction",
    "description":"OnAttemptProjectileDodge"
  },{
    "value":186,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_BREAK_INVISIBILITY",
    "enum":"modifierfunction",
    "description":"OnBreakInvisibility"
  },{
    "value":209,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_BUILDING_KILLED",
    "enum":"modifierfunction",
    "description":"OnBuildingKilled"
  },{
    "value":195,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DAMAGE_CALCULATED",
    "enum":"modifierfunction",
    "description":"OnDamageCalculated"
  },{
    "value":198,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DEATH",
    "enum":"modifierfunction",
    "description":"OnDeath"
  },{
    "value":191,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DEATH_PREVENTED",
    "enum":"modifierfunction",
    "description":"OnDamagePrevented"
  },{
    "value":231,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_DOMINATED",
    "enum":"modifierfunction",
    "description":"OnDominated"
  },{
    "value":204,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_HEALTH_GAINED",
    "enum":"modifierfunction",
    "description":"OnHealthGained"
  },{
    "value":208,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_HEAL_RECEIVED",
    "enum":"modifierfunction",
    "description":"OnHealReceived"
  },{
    "value":207,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_HERO_KILLED",
    "enum":"modifierfunction",
    "description":"OnHeroKilled"
  },{
    "value":232,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_KILL",
    "enum":"modifierfunction",
    "description":"OnKill"
  },{
    "value":196,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_MAGIC_DAMAGE_CALCULATED",
    "enum":"modifierfunction",
    "description":"OnMagicDamageCalculated"
  },{
    "value":205,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_MANA_GAINED",
    "enum":"modifierfunction",
    "description":"OnManaGained"
  },{
    "value":210,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_MODEL_CHANGED",
    "enum":"modifierfunction",
    "description":"OnModelChanged"
  },{
    "value":211,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_MODIFIER_ADDED",
    "enum":"modifierfunction",
    "description":"OnModifierAdded"
  },{
    "value":193,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ORB_EFFECT",
    "enum":"modifierfunction",
    "description":"Unused"
  },{
    "value":181,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_ORDER",
    "enum":"modifierfunction",
    "description":"OnOrder"
  },{
    "value":255,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PREDEBUFF_APPLIED",
    "enum":"modifierfunction",
    "description":"OnPreDebuffApplied"
  },{
    "value":194,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROCESS_CLEAVE",
    "enum":"modifierfunction",
    "description":"OnProcessCleave"
  },{
    "value":188,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROCESS_UPGRADE",
    "enum":"modifierfunction",
    "description":"Unused"
  },{
    "value":180,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROJECTILE_DODGE",
    "enum":"modifierfunction",
    "description":"OnProjectileDodge"
  },{
    "value":245,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT",
    "enum":"modifierfunction",
    "description":"OnProjectileObstructionHit"
  },{
    "value":189,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_REFRESH",
    "enum":"modifierfunction",
    "description":"Unused"
  },{
    "value":199,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_RESPAWN",
    "enum":"modifierfunction",
    "description":"OnRespawn"
  },{
    "value":203,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_SET_LOCATION",
    "enum":"modifierfunction",
    "description":"OnSetLocation"
  },{
    "value":173,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_SPELL_TARGET_READY",
    "enum":"modifierfunction",
    "description":"OnSpellTargetReady"
  },{
    "value":200,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_SPENT_MANA",
    "enum":"modifierfunction",
    "description":"OnSpentMana"
  },{
    "value":192,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_STATE_CHANGED",
    "enum":"modifierfunction",
    "description":"OnStateChanged"
  },{
    "value":190,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TAKEDAMAGE",
    "enum":"modifierfunction",
    "description":"OnTakeDamage"
  },{
    "value":206,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT",
    "enum":"modifierfunction",
    "description":"OnTakeDamageKillCredit"
  },{
    "value":202,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TELEPORTED",
    "enum":"modifierfunction",
    "description":"OnTeleported"
  },{
    "value":201,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_TELEPORTING",
    "enum":"modifierfunction",
    "description":"OnTeleporting"
  },{
    "value":182,
    "kind":"constant",
    "name":"MODIFIER_EVENT_ON_UNIT_MOVED",
    "enum":"modifierfunction",
    "description":"OnUnitMoved"
  },{
    "value":65535,
    "kind":"constant",
    "name":"MODIFIER_FUNCTION_INVALID",
    "enum":"modifierfunction"
  },{
    "value":262,
    "kind":"constant",
    "name":"MODIFIER_FUNCTION_LAST",
    "enum":"modifierfunction"
  },{
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_HIGH",
    "enum":"modifierpriority"
  },{
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_LOW",
    "enum":"modifierpriority"
  },{
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_NORMAL",
    "enum":"modifierpriority"
  },{
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_SUPER_ULTRA",
    "enum":"modifierpriority"
  },{
    "value":3,
    "kind":"constant",
    "name":"MODIFIER_PRIORITY_ULTRA",
    "enum":"modifierpriority"
  },{
    "value":230,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABILITY_LAYOUT",
    "enum":"modifierfunction",
    "description":"GetModifierAbilityLayout"
  },{
    "value":149,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL",
    "enum":"modifierfunction",
    "description":"GetAbsoluteNoDamageMagical"
  },{
    "value":148,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL",
    "enum":"modifierfunction",
    "description":"GetAbsoluteNoDamagePhysical"
  },{
    "value":150,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE",
    "enum":"modifierfunction",
    "description":"GetAbsoluteNoDamagePure"
  },{
    "value":138,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ABSORB_SPELL",
    "enum":"modifierfunction",
    "description":"GetAbsorbSpell"
  },{
    "value":160,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK",
    "enum":"modifierfunction",
    "description":"GetAlwaysAllowAttack"
  },{
    "value":172,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ALWAYS_AUTOATTACK_WHILE_HOLD_POSITION",
    "enum":"modifierfunction",
    "description":"GetAlwaysAutoAttackWhileHoldPosition"
  },{
    "value":161,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK",
    "enum":"modifierfunction",
    "description":"GetAllowEtherealAttack"
  },{
    "value":29,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE",
    "enum":"modifierfunction",
    "description":"GetModifierAttackSpeedBaseOverride"
  },{
    "value":31,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierAttackSpeedBonus_Constant"
  },{
    "value":253,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierAttackSpeedPercentage"
  },{
    "value":250,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierAttackSpeedReductionPercentage"
  },{
    "value":122,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_ANIM_TIME_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierPercentageAttackAnimTime"
  },{
    "value":38,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierAttackPointConstant"
  },{
    "value":107,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE",
    "enum":"modifierfunction",
    "description":"GetModifierAttackRangeOverride"
  },{
    "value":108,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierAttackRangeBonus"
  },{
    "value":110,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierAttackRangeBonusPercentage"
  },{
    "value":109,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE",
    "enum":"modifierfunction",
    "description":"GetModifierAttackRangeBonusUnique"
  },{
    "value":252,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET",
    "enum":"modifierfunction"
  },{
    "value":67,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_AVOID_DAMAGE",
    "enum":"modifierfunction",
    "description":"GetModifierAvoidDamage"
  },{
    "value":68,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_AVOID_SPELL",
    "enum":"modifierfunction",
    "description":"GetModifierAvoidSpell"
  },{
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE",
    "enum":"modifierfunction",
    "description":"GetModifierBaseAttack_BonusDamage"
  },{
    "value":56,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierBaseDamageOutgoing_Percentage"
  },{
    "value":57,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE",
    "enum":"modifierfunction",
    "description":"GetModifierBaseDamageOutgoing_PercentageUnique"
  },{
    "value":35,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierBaseAttackTimeConstant"
  },{
    "value":36,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST",
    "enum":"modifierfunction",
    "description":"GetModifierBaseAttackTimeConstant_Adjust"
  },{
    "value":37,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierBaseAttackTimePercentage"
  },{
    "value":82,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BASE_MANA_REGEN",
    "enum":"modifierfunction",
    "description":"GetModifierBaseRegen"
  },{
    "value":39,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierBonusDamageOutgoing_Percentage"
  },{
    "value":141,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_DAY_VISION",
    "enum":"modifierfunction",
    "description":"GetBonusDayVision"
  },{
    "value":142,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION",
    "enum":"modifierfunction",
    "description":"GetBonusNightVision"
  },{
    "value":143,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE",
    "enum":"modifierfunction",
    "description":"GetBonusNightVisionUnique"
  },{
    "value":144,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetBonusVisionPercentage"
  },{
    "value":249,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS",
    "enum":"modifierfunction",
    "description":"BotAttackScoreBonus"
  },{
    "value":164,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER",
    "enum":"modifierfunction",
    "description":"Unused"
  },{
    "value":165,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER",
    "enum":"modifierfunction",
    "description":"Unused"
  },{
    "value":238,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAN_ATTACK_TREES",
    "enum":"modifierfunction",
    "description":"GetModifierCanAttackTrees"
  },{
    "value":121,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierPercentageCasttime"
  },{
    "value":103,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierCastRangeBonus"
  },{
    "value":104,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierCastRangeBonusPercentage"
  },{
    "value":106,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING",
    "enum":"modifierfunction",
    "description":"GetModifierCastRangeBonusStacking"
  },{
    "value":105,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET",
    "enum":"modifierfunction",
    "description":"GetModifierCastRangeBonusTarget"
  },{
    "value":227,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE",
    "enum":"modifierfunction",
    "description":"GetModifierChangeAbilityValue"
  },{
    "value":119,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierPercentageCooldown"
  },{
    "value":120,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING",
    "enum":"modifierfunction",
    "description":"GetModifierPercentageCooldownOngoing"
  },{
    "value":256,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING",
    "enum":"modifierfunction",
    "description":"GetModifierPercentageCooldownStacking"
  },{
    "value":33,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierCooldownReduction_Constant"
  },{
    "value":40,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierDamageOutgoing_Percentage"
  },{
    "value":41,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION",
    "enum":"modifierfunction",
    "description":"GetModifierDamageOutgoing_Percentage_Illusion"
  },{
    "value":42,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY",
    "enum":"modifierfunction",
    "description":"GetModifierDamageOutgoing_Percentage_Illusion_Amplify"
  },{
    "value":125,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DEATHGOLDCOST",
    "enum":"modifierfunction",
    "description":"GetModifierConstantDeathGoldCost"
  },{
    "value":140,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DISABLE_AUTOATTACK",
    "enum":"modifierfunction",
    "description":"GetDisableAutoAttack"
  },{
    "value":159,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DISABLE_HEALING",
    "enum":"modifierfunction",
    "description":"GetDisableHealing"
  },{
    "value":225,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DISABLE_TURNING",
    "enum":"modifierfunction",
    "description":"GetModifierDisableTurning"
  },{
    "value":167,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DODGE_PROJECTILE",
    "enum":"modifierfunction",
    "description":"GetModifierDodgeProjectile"
  },{
    "value":242,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER",
    "enum":"modifierfunction",
    "description":"GetModifierNoVisionOfAttacker"
  },{
    "value":62,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EVASION_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierEvasion_Constant"
  },{
    "value":126,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXP_RATE_BOOST",
    "enum":"modifierfunction",
    "description":"GetModifierPercentageExpRateBoost"
  },{
    "value":92,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierExtraHealthBonus"
  },{
    "value":95,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierExtraHealthPercentage"
  },{
    "value":93,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierExtraManaBonus"
  },{
    "value":94,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierExtraManaBonusPercentage"
  },{
    "value":96,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierExtraManaPercentage"
  },{
    "value":91,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierExtraStrengthBonus"
  },{
    "value":30,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FIXED_ATTACK_RATE",
    "enum":"modifierfunction",
    "description":"GetModifierFixedAttackRate"
  },{
    "value":145,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FIXED_DAY_VISION",
    "enum":"modifierfunction",
    "description":"GetFixedDayVision"
  },{
    "value":146,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FIXED_NIGHT_VISION",
    "enum":"modifierfunction",
    "description":"GetFixedNightVision"
  },{
    "value":224,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP",
    "enum":"modifierfunction",
    "description":"GetForceDrawOnMinimap"
  },{
    "value":127,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_GOLD_RATE_BOOST",
    "enum":"modifierfunction",
    "description":"GetModifierPercentageGoldRateBoost"
  },{
    "value":89,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierHealthBonus"
  },{
    "value":86,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierConstantHealthRegen"
  },{
    "value":87,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierHealthRegenPercentage"
  },{
    "value":88,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE",
    "enum":"modifierfunction",
    "description":"GetModifierHealthRegenPercentageUnique"
  },{
    "value":47,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE",
    "enum":"modifierfunction",
    "description":"GetModifierHealAmplify_PercentageSource"
  },{
    "value":48,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET",
    "enum":"modifierfunction",
    "description":"GetModifierHealAmplify_PercentageTarget"
  },{
    "value":50,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierHPRegenAmplify_Percentage"
  },{
    "value":49,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_HP_REGEN_CAN_BE_NEGATIVE",
    "enum":"modifierfunction",
    "description":"GetModifierHPRegen_CanBeNegative"
  },{
    "value":32,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_ATTACKSPEED_LIMIT",
    "enum":"modifierfunction",
    "description":"GetModifierAttackSpeed_Limit"
  },{
    "value":226,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE",
    "enum":"modifierfunction",
    "description":"GetModifierIgnoreCastAngle"
  },{
    "value":237,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_COOLDOWN",
    "enum":"modifierfunction",
    "description":"GetModifierIgnoreCooldown"
  },{
    "value":27,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT",
    "enum":"modifierfunction",
    "description":"GetModifierIgnoreMovespeedLimit"
  },{
    "value":76,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR",
    "enum":"modifierfunction",
    "description":"GetModifierIgnorePhysicalArmor"
  },{
    "value":152,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_ILLUSION_LABEL",
    "enum":"modifierfunction",
    "description":"GetModifierIllusionLabel"
  },{
    "value":241,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION",
    "enum":"modifierfunction"
  },{
    "value":58,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierIncomingDamage_Percentage"
  },{
    "value":60,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierIncomingPhysicalDamageConstant"
  },{
    "value":59,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierIncomingPhysicalDamage_Percentage"
  },{
    "value":61,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierIncomingSpellDamageConstant"
  },{
    "value":14,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION",
    "enum":"modifierfunction",
    "description":"GetModifierInvisibilityAttackBehaviorException"
  },{
    "value":13,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_INVISIBILITY_LEVEL",
    "enum":"modifierfunction",
    "description":"GetModifierInvisibilityLevel"
  },{
    "value":151,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IS_ILLUSION",
    "enum":"modifierfunction",
    "description":"GetIsIllusion"
  },{
    "value":216,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IS_SCEPTER",
    "enum":"modifierfunction",
    "description":"GetModifierScepter"
  },{
    "value":217,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_IS_SHARD",
    "enum":"modifierfunction",
    "description":"GetModifierShard"
  },{
    "value":261,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_KNOCKBACK_AMPLIFICATION_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierKnockbackAmplification_Percentage"
  },{
    "value":51,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierLifestealRegenAmplify_Percentage"
  },{
    "value":221,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_LIFETIME_FRACTION",
    "enum":"modifierfunction",
    "description":"GetUnitLifetimeFraction"
  },{
    "value":130,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK",
    "enum":"modifierfunction",
    "description":"GetModifierMagical_ConstantBlock"
  },{
    "value":77,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION",
    "enum":"modifierfunction",
    "description":"GetModifierMagicalResistanceBaseReduction"
  },{
    "value":79,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierMagicalResistanceBonus"
  },{
    "value":80,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS",
    "enum":"modifierfunction",
    "description":"GetModifierMagicalResistanceBonusIllusions"
  },{
    "value":81,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE",
    "enum":"modifierfunction",
    "description":"GetModifierMagicalResistanceDecrepifyUnique"
  },{
    "value":78,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION",
    "enum":"modifierfunction",
    "description":"GetModifierMagicalResistanceDirectModification"
  },{
    "value":123,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierPercentageManacost"
  },{
    "value":124,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING",
    "enum":"modifierfunction",
    "description":"GetModifierPercentageManacostStacking"
  },{
    "value":34,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierManacostReduction_Constant"
  },{
    "value":90,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierManaBonus"
  },{
    "value":54,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierManaDrainAmplify_Percentage"
  },{
    "value":83,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierConstantManaRegen"
  },{
    "value":84,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE",
    "enum":"modifierfunction",
    "description":"GetModifierConstantManaRegenUnique"
  },{
    "value":85,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierTotalPercentageManaRegen"
  },{
    "value":111,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAX_ATTACK_RANGE",
    "enum":"modifierfunction",
    "description":"GetModifierMaxAttackRange"
  },{
    "value":169,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MAX_DEBUFF_DURATION",
    "enum":"modifierfunction",
    "description":"GetModifierMaxDebuffDuration"
  },{
    "value":147,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MIN_HEALTH",
    "enum":"modifierfunction",
    "description":"GetMinHealth"
  },{
    "value":69,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MISS_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierMiss_Percentage"
  },{
    "value":213,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MODEL_CHANGE",
    "enum":"modifierfunction",
    "description":"GetModifierModelChange"
  },{
    "value":214,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MODEL_SCALE",
    "enum":"modifierfunction",
    "description":"GetModifierModelScale"
  },{
    "value":215,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MODEL_SCALE_ANIMATE_TIME",
    "enum":"modifierfunction",
    "description":"GetModifierModelScaleAnimateTime"
  },{
    "value":24,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeed_Absolute"
  },{
    "value":26,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeed_AbsoluteMax"
  },{
    "value":25,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeed_AbsoluteMin"
  },{
    "value":17,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeedOverride"
  },{
    "value":16,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeedBonus_Constant"
  },{
    "value":22,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeedBonus_Constant_Unique"
  },{
    "value":23,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeedBonus_Constant_Unique_2"
  },{
    "value":18,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeedBonus_Percentage"
  },{
    "value":19,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeedBonus_Percentage_Unique"
  },{
    "value":20,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeedBonus_Special_Boots"
  },{
    "value":21,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeedBonus_Special_Boots_2"
  },{
    "value":28,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_LIMIT",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeed_Limit"
  },{
    "value":251,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierMoveSpeedReductionPercentage"
  },{
    "value":53,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierMPRegenAmplify_Percentage"
  },{
    "value":55,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierMPRestoreAmplify_Percentage"
  },{
    "value":63,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierNegativeEvasion_Constant"
  },{
    "value":228,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL",
    "enum":"modifierfunction",
    "description":"GetModifierOverrideAbilitySpecial"
  },{
    "value":229,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE",
    "enum":"modifierfunction",
    "description":"GetModifierOverrideAbilitySpecialValue"
  },{
    "value":135,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION",
    "enum":"modifierfunction",
    "description":"GetOverrideAnimation"
  },{
    "value":137,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE",
    "enum":"modifierfunction",
    "description":"GetOverrideAnimationRate"
  },{
    "value":136,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT",
    "enum":"modifierfunction",
    "description":"GetOverrideAnimationWeight"
  },{
    "value":11,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE",
    "enum":"modifierfunction",
    "description":"GetModifierOverrideAttackDamage"
  },{
    "value":162,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL",
    "enum":"modifierfunction",
    "description":"GetOverrideAttackMagical"
  },{
    "value":15,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY",
    "enum":"modifierfunction",
    "description":"GetModifierPersistentInvisibility"
  },{
    "value":260,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICALDAMAGEOUTGOING_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierPhysicalDamageOutgoing_Percentage"
  },{
    "value":70,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierPhysicalArmorBase_Percentage"
  },{
    "value":72,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierPhysicalArmorBonus"
  },{
    "value":75,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_POST",
    "enum":"modifierfunction",
    "description":"GetModifierPhysicalArmorBonusPost"
  },{
    "value":73,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE",
    "enum":"modifierfunction",
    "description":"GetModifierPhysicalArmorBonusUnique"
  },{
    "value":74,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE",
    "enum":"modifierfunction",
    "description":"GetModifierPhysicalArmorBonusUniqueActive"
  },{
    "value":71,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierPhysicalArmorTotal_Percentage"
  },{
    "value":131,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK",
    "enum":"modifierfunction",
    "description":"GetModifierPhysical_ConstantBlock"
  },{
    "value":132,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL",
    "enum":"modifierfunction",
    "description":"GetModifierPhysical_ConstantBlockSpecial"
  },{
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE",
    "enum":"modifierfunction",
    "description":"GetModifierPreAttack_BonusDamage"
  },{
    "value":3,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT",
    "enum":"modifierfunction",
    "description":"GetModifierPreAttack_BonusDamagePostCrit"
  },{
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC",
    "enum":"modifierfunction",
    "description":"GetModifierPreAttack_BonusDamage_Proc"
  },{
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET",
    "enum":"modifierfunction",
    "description":"GetModifierPreAttack_BonusDamage_Target"
  },{
    "value":128,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE",
    "enum":"modifierfunction",
    "description":"GetModifierPreAttack_CriticalStrike"
  },{
    "value":171,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_DEADLY_BLOW",
    "enum":"modifierfunction",
    "description":"GetModifierPreAttack_DeadlyBlow"
  },{
    "value":129,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE",
    "enum":"modifierfunction",
    "description":"GetModifierPreAttack_Target_CriticalStrike"
  },{
    "value":235,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE",
    "enum":"modifierfunction",
    "description":"PreserveParticlesOnModelChanged"
  },{
    "value":12,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PRE_ATTACK",
    "enum":"modifierfunction",
    "description":"GetModifierPreAttack"
  },{
    "value":170,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PRIMARY_STAT_DAMAGE_MULTIPLIER",
    "enum":"modifierfunction",
    "description":"GetPrimaryStatDamageMultiplier"
  },{
    "value":7,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL",
    "enum":"modifierfunction",
    "description":"GetModifierProcAttack_BonusDamage_Magical"
  },{
    "value":9,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL_TARGET",
    "enum":"modifierfunction",
    "description":"GetModifierProcAttack_BonusDamage_Magical_Target"
  },{
    "value":5,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL",
    "enum":"modifierfunction",
    "description":"GetModifierProcAttack_BonusDamage_Physical"
  },{
    "value":8,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE",
    "enum":"modifierfunction",
    "description":"GetModifierProcAttack_BonusDamage_Pure"
  },{
    "value":6,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_CONVERT_PHYSICAL_TO_MAGICAL",
    "enum":"modifierfunction",
    "description":"GetModifierProcAttack_ConvertPhysicalToMagical"
  },{
    "value":10,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK",
    "enum":"modifierfunction",
    "description":"GetModifierProcAttack_Feedback"
  },{
    "value":114,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROJECTILE_NAME",
    "enum":"modifierfunction",
    "description":"GetModifierProjectileName"
  },{
    "value":112,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierProjectileSpeedBonus"
  },{
    "value":113,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierProjectileSpeedBonusPercentage"
  },{
    "value":222,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION",
    "enum":"modifierfunction",
    "description":"GetModifierProvidesFOWVision"
  },{
    "value":218,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION",
    "enum":"modifierfunction",
    "description":"GetModifierRadarCooldownReduction"
  },{
    "value":259,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RAT_PACK",
    "enum":"modifierfunction",
    "description":"GetModifierIsRatPack"
  },{
    "value":139,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_REFLECT_SPELL",
    "enum":"modifierfunction",
    "description":"GetReflectSpell"
  },{
    "value":115,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_REINCARNATION",
    "enum":"modifierfunction",
    "description":"ReincarnateTime"
  },{
    "value":116,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME",
    "enum":"modifierfunction",
    "description":"GetModifierConstantRespawnTime"
  },{
    "value":117,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierPercentageRespawnTime"
  },{
    "value":118,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME_STACKING",
    "enum":"modifierfunction",
    "description":"GetModifierStackingRespawnTime"
  },{
    "value":223,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP",
    "enum":"modifierfunction",
    "description":"GetModifierSpellsRequireHP"
  },{
    "value":45,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierSpellAmplify_Percentage"
  },{
    "value":44,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_CREEP",
    "enum":"modifierfunction",
    "description":"GetModifierSpellAmplify_PercentageCreep"
  },{
    "value":46,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE",
    "enum":"modifierfunction",
    "description":"GetModifierSpellAmplify_PercentageUnique"
  },{
    "value":52,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierSpellLifestealRegenAmplify_Percentage"
  },{
    "value":257,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SPELL_REDIRECT_TARGET",
    "enum":"modifierfunction",
    "description":"GetModifierSpellRedirectTarget"
  },{
    "value":98,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierBonusStats_Agility"
  },{
    "value":101,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierBonusStats_Agility_Percentage"
  },{
    "value":99,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierBonusStats_Intellect"
  },{
    "value":102,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierBonusStats_Intellect_Percentage"
  },{
    "value":97,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS",
    "enum":"modifierfunction",
    "description":"GetModifierBonusStats_Strength"
  },{
    "value":100,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierBonusStats_Strength_Percentage"
  },{
    "value":64,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE",
    "enum":"modifierfunction",
    "description":"GetModifierStatusResistance"
  },{
    "value":66,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER",
    "enum":"modifierfunction",
    "description":"GetModifierStatusResistanceCaster"
  },{
    "value":65,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING",
    "enum":"modifierfunction",
    "description":"GetModifierStatusResistanceStacking"
  },{
    "value":153,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_STRONG_ILLUSION",
    "enum":"modifierfunction",
    "description":"GetModifierStrongIllusion"
  },{
    "value":154,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPER_ILLUSION",
    "enum":"modifierfunction",
    "description":"GetModifierSuperIllusion"
  },{
    "value":155,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE",
    "enum":"modifierfunction",
    "description":"GetModifierSuperIllusionWithUltimate"
  },{
    "value":248,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPPRESS_CLEAVE",
    "enum":"modifierfunction",
    "description":"GetSuppressCleave"
  },{
    "value":246,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_SUPPRESS_TELEPORT",
    "enum":"modifierfunction",
    "description":"GetSuppressTeleport"
  },{
    "value":234,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TEMPEST_DOUBLE",
    "enum":"modifierfunction",
    "description":"GetModifierTempestDouble"
  },{
    "value":212,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOOLTIP",
    "enum":"modifierfunction",
    "description":"OnTooltip"
  },{
    "value":243,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOOLTIP2",
    "enum":"modifierfunction",
    "description":"OnTooltip2"
  },{
    "value":43,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierTotalDamageOutgoing_Percentage"
  },{
    "value":134,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK",
    "enum":"modifierfunction",
    "description":"GetModifierTotal_ConstantBlock"
  },{
    "value":133,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR",
    "enum":"modifierfunction",
    "description":"GetModifierPhysical_ConstantBlockUnavoidablePreArmor"
  },{
    "value":219,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS",
    "enum":"modifierfunction",
    "description":"GetActivityTranslationModifiers"
  },{
    "value":220,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND",
    "enum":"modifierfunction",
    "description":"GetAttackSound"
  },{
    "value":168,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK",
    "enum":"modifierfunction",
    "description":"GetTriggerCosmeticAndEndAttack"
  },{
    "value":258,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TURN_RATE_CONSTANT",
    "enum":"modifierfunction",
    "description":"GetModifierTurnRateConstant"
  },{
    "value":158,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TURN_RATE_OVERRIDE",
    "enum":"modifierfunction",
    "description":"GetModifierTurnRate_Override"
  },{
    "value":157,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE",
    "enum":"modifierfunction",
    "description":"GetModifierTurnRate_Percentage"
  },{
    "value":166,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING",
    "enum":"modifierfunction",
    "description":"GetModifierUnitDisllowUpgrading"
  },{
    "value":163,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH",
    "enum":"modifierfunction",
    "description":"GetModifierUnitStatsNeedsRefresh"
  },{
    "value":239,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_VISUAL_Z_DELTA",
    "enum":"modifierfunction",
    "description":"GetVisualZDelta"
  },{
    "value":240,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_VISUAL_Z_SPEED_BASE_OVERRIDE",
    "enum":"modifierfunction",
    "description":"GetVisualZSpeedBaseOverride"
  },{
    "value":156,
    "kind":"constant",
    "name":"MODIFIER_PROPERTY_XP_DURING_DEATH",
    "enum":"modifierfunction",
    "description":"GetModifierXPDuringDeath"
  },{
    "value":48,
    "kind":"constant",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS",
    "enum":"modifierstate"
  },{
    "value":49,
    "kind":"constant",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE",
    "enum":"modifierstate"
  },{
    "value":51,
    "kind":"constant",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_OBSTRUCTIONS",
    "enum":"modifierstate"
  },{
    "value":38,
    "kind":"constant",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES",
    "enum":"modifierstate"
  },{
    "value":47,
    "kind":"constant",
    "name":"MODIFIER_STATE_ATTACK_ALLIES",
    "enum":"modifierstate"
  },{
    "value":2,
    "kind":"constant",
    "name":"MODIFIER_STATE_ATTACK_IMMUNE",
    "enum":"modifierstate"
  },{
    "value":31,
    "kind":"constant",
    "name":"MODIFIER_STATE_BLIND",
    "enum":"modifierstate"
  },{
    "value":12,
    "kind":"constant",
    "name":"MODIFIER_STATE_BLOCK_DISABLED",
    "enum":"modifierstate"
  },{
    "value":45,
    "kind":"constant",
    "name":"MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED",
    "enum":"modifierstate"
  },{
    "value":17,
    "kind":"constant",
    "name":"MODIFIER_STATE_CANNOT_MISS",
    "enum":"modifierstate"
  },{
    "value":16,
    "kind":"constant",
    "name":"MODIFIER_STATE_CANNOT_TARGET_BUILDINGS",
    "enum":"modifierstate"
  },{
    "value":15,
    "kind":"constant",
    "name":"MODIFIER_STATE_CANNOT_TARGET_ENEMIES",
    "enum":"modifierstate"
  },{
    "value":20,
    "kind":"constant",
    "name":"MODIFIER_STATE_COMMAND_RESTRICTED",
    "enum":"modifierstate"
  },{
    "value":1,
    "kind":"constant",
    "name":"MODIFIER_STATE_DISARMED",
    "enum":"modifierstate"
  },{
    "value":30,
    "kind":"constant",
    "name":"MODIFIER_STATE_DOMINATED",
    "enum":"modifierstate"
  },{
    "value":13,
    "kind":"constant",
    "name":"MODIFIER_STATE_EVADE_DISABLED",
    "enum":"modifierstate"
  },{
    "value":33,
    "kind":"constant",
    "name":"MODIFIER_STATE_FAKE_ALLY",
    "enum":"modifierstate"
  },{
    "value":43,
    "kind":"constant",
    "name":"MODIFIER_STATE_FEARED",
    "enum":"modifierstate"
  },{
    "value":25,
    "kind":"constant",
    "name":"MODIFIER_STATE_FLYING",
    "enum":"modifierstate"
  },{
    "value":34,
    "kind":"constant",
    "name":"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY",
    "enum":"modifierstate"
  },{
    "value":46,
    "kind":"constant",
    "name":"MODIFIER_STATE_FORCED_FLYING_VISION",
    "enum":"modifierstate"
  },{
    "value":19,
    "kind":"constant",
    "name":"MODIFIER_STATE_FROZEN",
    "enum":"modifierstate"
  },{
    "value":6,
    "kind":"constant",
    "name":"MODIFIER_STATE_HEXED",
    "enum":"modifierstate"
  },{
    "value":37,
    "kind":"constant",
    "name":"MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS",
    "enum":"modifierstate"
  },{
    "value":42,
    "kind":"constant",
    "name":"MODIFIER_STATE_IGNORING_STOP_ORDERS",
    "enum":"modifierstate"
  },{
    "value":7,
    "kind":"constant",
    "name":"MODIFIER_STATE_INVISIBLE",
    "enum":"modifierstate"
  },{
    "value":8,
    "kind":"constant",
    "name":"MODIFIER_STATE_INVULNERABLE",
    "enum":"modifierstate"
  },{
    "value":52,
    "kind":"constant",
    "name":"MODIFIER_STATE_LAST",
    "enum":"modifierstate"
  },{
    "value":22,
    "kind":"constant",
    "name":"MODIFIER_STATE_LOW_ATTACK_PRIORITY",
    "enum":"modifierstate"
  },{
    "value":9,
    "kind":"constant",
    "name":"MODIFIER_STATE_MAGIC_IMMUNE",
    "enum":"modifierstate"
  },{
    "value":4,
    "kind":"constant",
    "name":"MODIFIER_STATE_MUTED",
    "enum":"modifierstate"
  },{
    "value":11,
    "kind":"constant",
    "name":"MODIFIER_STATE_NIGHTMARED",
    "enum":"modifierstate"
  },{
    "value":21,
    "kind":"constant",
    "name":"MODIFIER_STATE_NOT_ON_MINIMAP",
    "enum":"modifierstate"
  },{
    "value":39,
    "kind":"constant",
    "name":"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES",
    "enum":"modifierstate"
  },{
    "value":23,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_HEALTH_BAR",
    "enum":"modifierstate"
  },{
    "value":24,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_HEALTH_BAR_FOR_ENEMIES",
    "enum":"modifierstate"
  },{
    "value":27,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_TEAM_MOVE_TO",
    "enum":"modifierstate"
  },{
    "value":28,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_TEAM_SELECT",
    "enum":"modifierstate"
  },{
    "value":26,
    "kind":"constant",
    "name":"MODIFIER_STATE_NO_UNIT_COLLISION",
    "enum":"modifierstate"
  },{
    "value":32,
    "kind":"constant",
    "name":"MODIFIER_STATE_OUT_OF_GAME",
    "enum":"modifierstate"
  },{
    "value":29,
    "kind":"constant",
    "name":"MODIFIER_STATE_PASSIVES_DISABLED",
    "enum":"modifierstate"
  },{
    "value":10,
    "kind":"constant",
    "name":"MODIFIER_STATE_PROVIDES_VISION",
    "enum":"modifierstate"
  },{
    "value":0,
    "kind":"constant",
    "name":"MODIFIER_STATE_ROOTED",
    "enum":"modifierstate"
  },{
    "value":3,
    "kind":"constant",
    "name":"MODIFIER_STATE_SILENCED",
    "enum":"modifierstate"
  },{
    "value":18,
    "kind":"constant",
    "name":"MODIFIER_STATE_SPECIALLY_DENIABLE",
    "enum":"modifierstate"
  },{
    "value":50,
    "kind":"constant",
    "name":"MODIFIER_STATE_SPECIALLY_UNDENIABLE",
    "enum":"modifierstate"
  },{
    "value":5,
    "kind":"constant",
    "name":"MODIFIER_STATE_STUNNED",
    "enum":"modifierstate"
  },{
    "value":44,
    "kind":"constant",
    "name":"MODIFIER_STATE_TAUNTED",
    "enum":"modifierstate"
  },{
    "value":41,
    "kind":"constant",
    "name":"MODIFIER_STATE_TETHERED",
    "enum":"modifierstate"
  },{
    "value":35,
    "kind":"constant",
    "name":"MODIFIER_STATE_TRUESIGHT_IMMUNE",
    "enum":"modifierstate"
  },{
    "value":14,
    "kind":"constant",
    "name":"MODIFIER_STATE_UNSELECTABLE",
    "enum":"modifierstate"
  },{
    "value":40,
    "kind":"constant",
    "name":"MODIFIER_STATE_UNSLOWABLE",
    "enum":"modifierstate"
  },{
    "value":36,
    "kind":"constant",
    "name":"MODIFIER_STATE_UNTARGETABLE",
    "enum":"modifierstate"
  },{
    "value":0.01023,
    "kind":"constant",
    "name":"NDEBUG_PERSIST_TILL_NEXT_SERVER"
  },{
    "value":11,
    "kind":"constant",
    "name":"NEARLYEMPTY"
  },{
    "value":8,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_BLOCK"
  },{
    "value":21,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_BLOCKED"
  },{
    "value":9,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_BONUS_POISON_DAMAGE"
  },{
    "value":4,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_BONUS_SPELL_DAMAGE"
  },{
    "value":2,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_CRITICAL"
  },{
    "value":6,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_DAMAGE"
  },{
    "value":24,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_DEADLY_BLOW"
  },{
    "value":20,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_DEATH"
  },{
    "value":1,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_DENY"
  },{
    "value":19,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_DISABLE_RESIST"
  },{
    "value":7,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_EVADE"
  },{
    "value":0,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_GOLD"
  },{
    "value":10,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_HEAL"
  },{
    "value":17,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_INCOMING_DAMAGE"
  },{
    "value":22,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_ITEM_RECEIVED"
  },{
    "value":14,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_LAST_HIT_CLOSE"
  },{
    "value":13,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_LAST_HIT_EARLY"
  },{
    "value":15,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_LAST_HIT_MISS"
  },{
    "value":16,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_MAGICAL_BLOCK"
  },{
    "value":11,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_MANA_ADD"
  },{
    "value":12,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_MANA_LOSS"
  },{
    "value":5,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_MISS"
  },{
    "value":18,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_OUTGOING_DAMAGE"
  },{
    "value":23,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_SHARD"
  },{
    "value":3,
    "kind":"constant",
    "name":"OVERHEAD_ALERT_XP"
  },{
    "value":0,
    "kind":"constant",
    "name":"PATTACH_ABSORIGIN",
    "enum":"ParticleAttachment_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"PATTACH_ABSORIGIN_FOLLOW",
    "enum":"ParticleAttachment_t"
  },{
    "value":13,
    "kind":"constant",
    "name":"PATTACH_CENTER_FOLLOW",
    "enum":"ParticleAttachment_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"PATTACH_CUSTOMORIGIN",
    "enum":"ParticleAttachment_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"PATTACH_CUSTOMORIGIN_FOLLOW",
    "enum":"ParticleAttachment_t"
  },{
    "value":14,
    "kind":"constant",
    "name":"PATTACH_CUSTOM_GAME_STATE_1",
    "enum":"ParticleAttachment_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"PATTACH_EYES_FOLLOW",
    "enum":"ParticleAttachment_t"
  },{
    "value":15,
    "kind":"constant",
    "name":"PATTACH_HEALTHBAR",
    "enum":"ParticleAttachment_t"
  },{
    "value":-1,
    "kind":"constant",
    "name":"PATTACH_INVALID",
    "enum":"ParticleAttachment_t"
  },{
    "value":11,
    "kind":"constant",
    "name":"PATTACH_MAIN_VIEW",
    "enum":"ParticleAttachment_t"
  },{
    "value":7,
    "kind":"constant",
    "name":"PATTACH_OVERHEAD_FOLLOW",
    "enum":"ParticleAttachment_t"
  },{
    "value":4,
    "kind":"constant",
    "name":"PATTACH_POINT",
    "enum":"ParticleAttachment_t"
  },{
    "value":5,
    "kind":"constant",
    "name":"PATTACH_POINT_FOLLOW",
    "enum":"ParticleAttachment_t"
  },{
    "value":10,
    "kind":"constant",
    "name":"PATTACH_RENDERORIGIN_FOLLOW",
    "enum":"ParticleAttachment_t"
  },{
    "value":9,
    "kind":"constant",
    "name":"PATTACH_ROOTBONE_FOLLOW",
    "enum":"ParticleAttachment_t"
  },{
    "value":12,
    "kind":"constant",
    "name":"PATTACH_WATERWAKE",
    "enum":"ParticleAttachment_t"
  },{
    "value":8,
    "kind":"constant",
    "name":"PATTACH_WORLDORIGIN",
    "enum":"ParticleAttachment_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"POSTSENSING"
  },{
    "value":1,
    "kind":"constant",
    "name":"PRESENSING"
  },{
    "value":0,
    "kind":"constant",
    "name":"PRESIM"
  },{
    "value":4,
    "kind":"constant",
    "name":"QUEST_NUM_TEXT_REPLACE_VALUES",
    "enum":"quest_text_replace_values_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
    "enum":"quest_text_replace_values_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"QUEST_TEXT_REPLACE_VALUE_REWARD",
    "enum":"quest_text_replace_values_t"
  },{
    "value":2,
    "kind":"constant",
    "name":"QUEST_TEXT_REPLACE_VALUE_ROUND",
    "enum":"quest_text_replace_values_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
    "enum":"quest_text_replace_values_t"
  },{
    "value":3,
    "kind":"constant",
    "name":"RELOAD"
  },{
    "value":1,
    "kind":"constant",
    "name":"SERVER_DLL"
  },{
    "value":1,
    "kind":"constant",
    "name":"SINGLE_SHOT"
  },{
    "value":0,
    "kind":"constant",
    "name":"SPAWN_GROUP_HANDLE_INVALID"
  },{
    "value":8,
    "kind":"constant",
    "name":"SPECIAL1"
  },{
    "value":9,
    "kind":"constant",
    "name":"SPECIAL2"
  },{
    "value":10,
    "kind":"constant",
    "name":"SPECIAL3"
  },{
    "value":2,
    "kind":"constant",
    "name":"SUBQUEST_NUM_TEXT_REPLACE_VALUES",
    "enum":"subquest_text_replace_values_t"
  },{
    "value":0,
    "kind":"constant",
    "name":"SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
    "enum":"subquest_text_replace_values_t"
  },{
    "value":1,
    "kind":"constant",
    "name":"SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
    "enum":"subquest_text_replace_values_t"
  },{
    "value":6,
    "kind":"constant",
    "name":"ScriptDebugFirstLine"
  },{
    "value":0,
    "kind":"constant",
    "name":"ScriptDebugTextIndent"
  },{
    "value":20,
    "kind":"constant",
    "name":"ScriptDebugTextLines"
  },{
    "value":10,
    "kind":"constant",
    "name":"ScriptDebugTextTime"
  },{
    "value":26,
    "kind":"constant",
    "name":"ScriptDebugWatchFistLine"
  },{
    "value":9,
    "kind":"constant",
    "name":"UF_FAIL_ANCIENT",
    "enum":"UnitFilterResult"
  },{
    "value":22,
    "kind":"constant",
    "name":"UF_FAIL_ATTACK_IMMUNE",
    "enum":"UnitFilterResult"
  },{
    "value":6,
    "kind":"constant",
    "name":"UF_FAIL_BUILDING",
    "enum":"UnitFilterResult"
  },{
    "value":4,
    "kind":"constant",
    "name":"UF_FAIL_CONSIDERED_HERO",
    "enum":"UnitFilterResult"
  },{
    "value":7,
    "kind":"constant",
    "name":"UF_FAIL_COURIER",
    "enum":"UnitFilterResult"
  },{
    "value":5,
    "kind":"constant",
    "name":"UF_FAIL_CREEP",
    "enum":"UnitFilterResult"
  },{
    "value":23,
    "kind":"constant",
    "name":"UF_FAIL_CUSTOM",
    "enum":"UnitFilterResult"
  },{
    "value":15,
    "kind":"constant",
    "name":"UF_FAIL_DEAD",
    "enum":"UnitFilterResult"
  },{
    "value":25,
    "kind":"constant",
    "name":"UF_FAIL_DISABLE_HELP",
    "enum":"UnitFilterResult"
  },{
    "value":12,
    "kind":"constant",
    "name":"UF_FAIL_DOMINATED",
    "enum":"UnitFilterResult"
  },{
    "value":2,
    "kind":"constant",
    "name":"UF_FAIL_ENEMY",
    "enum":"UnitFilterResult"
  },{
    "value":1,
    "kind":"constant",
    "name":"UF_FAIL_FRIENDLY",
    "enum":"UnitFilterResult"
  },{
    "value":3,
    "kind":"constant",
    "name":"UF_FAIL_HERO",
    "enum":"UnitFilterResult"
  },{
    "value":10,
    "kind":"constant",
    "name":"UF_FAIL_ILLUSION",
    "enum":"UnitFilterResult"
  },{
    "value":24,
    "kind":"constant",
    "name":"UF_FAIL_INVALID_LOCATION",
    "enum":"UnitFilterResult"
  },{
    "value":20,
    "kind":"constant",
    "name":"UF_FAIL_INVISIBLE",
    "enum":"UnitFilterResult"
  },{
    "value":18,
    "kind":"constant",
    "name":"UF_FAIL_INVULNERABLE",
    "enum":"UnitFilterResult"
  },{
    "value":19,
    "kind":"constant",
    "name":"UF_FAIL_IN_FOW",
    "enum":"UnitFilterResult"
  },{
    "value":16,
    "kind":"constant",
    "name":"UF_FAIL_MAGIC_IMMUNE_ALLY",
    "enum":"UnitFilterResult"
  },{
    "value":17,
    "kind":"constant",
    "name":"UF_FAIL_MAGIC_IMMUNE_ENEMY",
    "enum":"UnitFilterResult"
  },{
    "value":13,
    "kind":"constant",
    "name":"UF_FAIL_MELEE",
    "enum":"UnitFilterResult"
  },{
    "value":27,
    "kind":"constant",
    "name":"UF_FAIL_NIGHTMARED",
    "enum":"UnitFilterResult"
  },{
    "value":21,
    "kind":"constant",
    "name":"UF_FAIL_NOT_PLAYER_CONTROLLED",
    "enum":"UnitFilterResult"
  },{
    "value":28,
    "kind":"constant",
    "name":"UF_FAIL_OBSTRUCTED",
    "enum":"UnitFilterResult"
  },{
    "value":8,
    "kind":"constant",
    "name":"UF_FAIL_OTHER",
    "enum":"UnitFilterResult"
  },{
    "value":26,
    "kind":"constant",
    "name":"UF_FAIL_OUT_OF_WORLD",
    "enum":"UnitFilterResult"
  },{
    "value":14,
    "kind":"constant",
    "name":"UF_FAIL_RANGED",
    "enum":"UnitFilterResult"
  },{
    "value":11,
    "kind":"constant",
    "name":"UF_FAIL_SUMMONED",
    "enum":"UnitFilterResult"
  },{
    "value":0,
    "kind":"constant",
    "name":"UF_SUCCESS",
    "enum":"UnitFilterResult"
  },{
    "value":13,
    "kind":"constant",
    "name":"__UNKNOWN__"
  },{
    "value":1778,
    "kind":"constant",
    "name":"muerta_debut_satyr_a"
  },{
    "value":1779,
    "kind":"constant",
    "name":"muerta_debut_satyr_b"
  },{
    "value":1780,
    "kind":"constant",
    "name":"muerta_debut_satyr_c"
  },{
    "value":1767,
    "kind":"constant",
    "name":"radiant_melee_mars_shieldbash"
  },{
    "kind":"class",
    "name":"CBaseAnimGraph",
    "members":[{
        "args":[{
            "type":"string",
            "name":"pszParam"
          }],
        "name":"GetGraphParameter",
        "returns":"table",
        "description":"Get the value of the given animGraph parameter"
      },{
        "args":[{
            "type":"Vector",
            "name":"vValue"
          }],
        "name":"SetGraphLookTarget",
        "returns":"void",
        "description":"Pass the desired look target in world space to the graph"
      },{
        "args":[{
            "type":"string",
            "name":"pszParam"
          },{
            "type":"table",
            "name":"svArg"
          }],
        "name":"SetGraphParameter",
        "returns":"void",
        "description":"Set the specific param value, type is inferred from the type in script"
      },{
        "args":[{
            "type":"string",
            "name":"szName"
          },{
            "type":"bool",
            "name":"bValue"
          }],
        "name":"SetGraphParameterBool",
        "returns":"void",
        "description":"Set the specific param on or off"
      },{
        "args":[{
            "type":"string",
            "name":"szName"
          },{
            "type":"int",
            "name":"nValue"
          }],
        "name":"SetGraphParameterEnum",
        "returns":"void",
        "description":"Pass the enum (int) value to the specified param"
      },{
        "args":[{
            "type":"string",
            "name":"szName"
          },{
            "type":"float",
            "name":"flValue"
          }],
        "name":"SetGraphParameterFloat",
        "returns":"void",
        "description":"Pass the float value to the specified param"
      },{
        "args":[{
            "type":"string",
            "name":"szName"
          },{
            "type":"int",
            "name":"nValue"
          }],
        "name":"SetGraphParameterInt",
        "returns":"void",
        "description":"Pass the int value to the specified param"
      },{
        "args":[{
            "type":"string",
            "name":"szName"
          },{
            "type":"Vector",
            "name":"vValue"
          }],
        "name":"SetGraphParameterVector",
        "returns":"void",
        "description":"Pass the vector value to the specified param in the graph"
      }],
    "extend":"CBaseModelEntity"
  },{
    "kind":"class",
    "name":"CBaseAnimatingActivity",
    "members":[{
        "args":[],
        "name":"ActiveSequenceDuration",
        "returns":"float",
        "description":"Returns the duration in seconds of the active sequence."
      },{
        "args":[],
        "name":"GetCycle",
        "returns":"float",
        "description":"Get the cycle of the animation."
      },{
        "args":[],
        "name":"GetSequence",
        "returns":"string",
        "description":"Returns the name of the active sequence."
      },{
        "args":[],
        "name":"IsSequenceFinished",
        "returns":"bool",
        "description":"Ask whether the main sequence is done playing."
      },{
        "args":[{
            "type":"string",
            "name":"pSequenceName"
          }],
        "name":"ResetSequence",
        "returns":"void",
        "description":"Sets the active sequence by name, resetting the current cycle."
      },{
        "args":[{
            "type":"string",
            "name":"pSequenceName"
          }],
        "name":"SequenceDuration",
        "returns":"float",
        "description":"Returns the duration in seconds of the given sequence name."
      },{
        "args":[{
            "type":"float",
            "name":"flCycle"
          }],
        "name":"SetCycle",
        "returns":"void",
        "description":"Set the cycle of the animation."
      },{
        "args":[{
            "type":"string",
            "name":"szName"
          },{
            "type":"float",
            "name":"fValue"
          }],
        "name":"SetPoseParameter",
        "returns":"float",
        "description":"Set the specified pose parameter to the specified value."
      },{
        "args":[{
            "type":"string",
            "name":"pSequenceName"
          }],
        "name":"SetSequence",
        "returns":"void",
        "description":"Sets the active sequence by name, keeping the current cycle."
      },{
        "args":[],
        "name":"StopAnimation",
        "returns":"void",
        "description":"Stop the current animation by setting playback rate to 0.0."
      }],
    "extend":"CBaseModelEntity"
  },{
    "kind":"class",
    "name":"CBaseCombatCharacter",
    "members":[],
    "extend":"CBaseFlex"
  },{
    "kind":"class",
    "name":"CBaseEntity",
    "members":[{
        "args":[{
            "type":"int",
            "name":"nFlags"
          }],
        "name":"AddEffects",
        "returns":"void",
        "description":"AddEffects( int ): Adds the render effect flag."
      },{
        "args":[{
            "type":"Vector",
            "name":"vecImpulse"
          }],
        "name":"ApplyAbsVelocityImpulse",
        "returns":"void",
        "description":"Apply a Velocity Impulse"
      },{
        "args":[{
            "type":"Vector",
            "name":"angImpulse"
          }],
        "name":"ApplyLocalAngularVelocityImpulse",
        "returns":"void",
        "description":"Apply an Ang Velocity Impulse"
      },{
        "args":[{
            "type":"string",
            "name":"pName"
          },{
            "type":"float",
            "name":"flDefault"
          }],
        "name":"Attribute_GetFloatValue",
        "returns":"float",
        "description":"Get float value for an entity attribute."
      },{
        "args":[{
            "type":"string",
            "name":"pName"
          },{
            "type":"int",
            "name":"nDefault"
          }],
        "name":"Attribute_GetIntValue",
        "returns":"int",
        "description":"Get int value for an entity attribute."
      },{
        "args":[{
            "type":"string",
            "name":"pName"
          },{
            "type":"float",
            "name":"flValue"
          }],
        "name":"Attribute_SetFloatValue",
        "returns":"void",
        "description":"Set float value for an entity attribute."
      },{
        "args":[{
            "type":"string",
            "name":"pName"
          },{
            "type":"int",
            "name":"nValue"
          }],
        "name":"Attribute_SetIntValue",
        "returns":"void",
        "description":"Set int value for an entity attribute."
      },{
        "args":[{
            "type":"string",
            "name":"pName"
          }],
        "name":"DeleteAttribute",
        "returns":"void",
        "description":"Delete an entity attribute."
      },{
        "args":[{
            "type":"string",
            "name":"soundname"
          }],
        "name":"EmitSound",
        "returns":"void",
        "description":"Plays a sound from this entity."
      },{
        "args":[{
            "type":"string",
            "name":"soundname"
          },{
            "type":"int",
            "name":"nPitch"
          },{
            "type":"float",
            "name":"flVolume"
          },{
            "type":"float",
            "name":"flDelay"
          }],
        "name":"EmitSoundParams",
        "returns":"void",
        "description":"Plays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0."
      },{
        "args":[],
        "name":"EyeAngles",
        "returns":"QAngle",
        "description":"Get the qangles that this entity is looking at."
      },{
        "args":[],
        "name":"EyePosition",
        "returns":"Vector",
        "description":"Get vector to eye position - absolute coords."
      },{
        "args":[],
        "name":"FirstMoveChild",
        "returns":"handle"
      },{
        "args":[{
            "type":"handle",
            "name":"hEnt"
          },{
            "type":"bool",
            "name":"bBoneMerge"
          }],
        "name":"FollowEntity",
        "returns":"void",
        "description":"hEntity to follow, bool bBoneMerge"
      },{
        "args":[{
            "type":"handle",
            "name":"hEnt"
          },{
            "type":"string",
            "name":"pszBoneOrAttachName"
          }],
        "name":"FollowEntityMerge",
        "returns":"void",
        "description":"hEntity to follow, string BoneOrAttachName"
      },{
        "args":[{
            "type":"handle",
            "name":"hResult"
          }],
        "name":"GatherCriteria",
        "returns":"void",
        "description":"Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks."
      },{
        "args":[],
        "name":"GetAbsOrigin",
        "returns":"Vector"
      },{
        "args":[],
        "name":"GetAbsScale",
        "returns":"float"
      },{
        "args":[],
        "name":"GetAngles",
        "returns":"QAngle"
      },{
        "args":[],
        "name":"GetAnglesAsVector",
        "returns":"Vector",
        "description":"Get entity pitch, yaw, roll as a vector."
      },{
        "args":[],
        "name":"GetAngularVelocity",
        "returns":"Vector",
        "description":"Get the local angular velocity - returns a vector of pitch,yaw,roll"
      },{
        "args":[],
        "name":"GetBaseVelocity",
        "returns":"Vector",
        "description":"Get Base? velocity."
      },{
        "args":[],
        "name":"GetBoundingMaxs",
        "returns":"Vector",
        "description":"Get a vector containing max bounds, centered on object."
      },{
        "args":[],
        "name":"GetBoundingMins",
        "returns":"Vector",
        "description":"Get a vector containing min bounds, centered on object."
      },{
        "args":[],
        "name":"GetBounds",
        "returns":"table",
        "description":"Get a table containing the 'Mins' & 'Maxs' vector bounds, centered on object."
      },{
        "args":[],
        "name":"GetCenter",
        "returns":"Vector",
        "description":"Get vector to center of object - absolute coords"
      },{
        "args":[],
        "name":"GetChildren",
        "returns":"handle",
        "description":"Get the entities parented to this entity."
      },{
        "args":[{
            "type":"string",
            "name":"name"
          }],
        "name":"GetContext",
        "returns":"table",
        "description":"GetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found)."
      },{
        "args":[],
        "name":"GetForwardVector",
        "returns":"Vector",
        "description":"Get the forward vector of the entity."
      },{
        "args":[],
        "name":"GetHealth",
        "returns":"int",
        "description":"Get the health of this entity."
      },{
        "args":[],
        "name":"GetLeftVector",
        "returns":"Vector",
        "description":"Get the left vector of the entity."
      },{
        "args":[],
        "name":"GetLocalAngles",
        "returns":"QAngle",
        "description":"Get entity local pitch, yaw, roll as a QAngle"
      },{
        "args":[],
        "name":"GetLocalAngularVelocity",
        "returns":"QAngle",
        "description":"Maybe local angvel"
      },{
        "args":[],
        "name":"GetLocalOrigin",
        "returns":"Vector",
        "description":"Get entity local origin as a Vector"
      },{
        "args":[],
        "name":"GetLocalScale",
        "returns":"float"
      },{
        "args":[],
        "name":"GetLocalVelocity",
        "returns":"Vector",
        "description":"Get Entity relative velocity."
      },{
        "args":[],
        "name":"GetMass",
        "returns":"float",
        "description":"Get the mass of an entity. (returns 0 if it doesn't have a physics object)"
      },{
        "args":[],
        "name":"GetMaxHealth",
        "returns":"int",
        "description":"Get the maximum health of this entity."
      },{
        "args":[],
        "name":"GetModelName",
        "returns":"string",
        "description":"Returns the name of the model."
      },{
        "args":[],
        "name":"GetMoveParent",
        "returns":"handle",
        "description":"If in hierarchy, retrieves the entity's parent."
      },{
        "args":[],
        "name":"GetOrigin",
        "returns":"Vector"
      },{
        "args":[],
        "name":"GetOwner",
        "returns":"handle",
        "description":"Gets this entity's owner"
      },{
        "args":[],
        "name":"GetOwnerEntity",
        "returns":"handle",
        "description":"Get the owner entity, if there is one"
      },{
        "args":[],
        "name":"GetRightVector",
        "returns":"Vector",
        "description":"Get the right vector of the entity. WARNING: This produces a left-handed coordinate system. Use GetLeftVector instead (which is aligned with the y axis of the entity)."
      },{
        "args":[],
        "name":"GetRootMoveParent",
        "returns":"handle",
        "description":"If in hierarchy, walks up the hierarchy to find the root parent."
      },{
        "args":[{
            "type":"string",
            "name":"soundname"
          },{
            "type":"string",
            "name":"actormodel"
          }],
        "name":"GetSoundDuration",
        "returns":"float",
        "description":"Returns float duration of the sound. Takes soundname and optional actormodelname."
      },{
        "args":[],
        "name":"GetSpawnGroupHandle",
        "returns":"int",
        "description":"Returns the spawn group handle of this entity"
      },{
        "args":[],
        "name":"GetTeam",
        "returns":"int",
        "description":"Get the team number of this entity."
      },{
        "args":[],
        "name":"GetTeamNumber",
        "returns":"int",
        "description":"Get the team number of this entity."
      },{
        "args":[],
        "name":"GetUpVector",
        "returns":"Vector",
        "description":"Get the up vector of the entity."
      },{
        "args":[],
        "name":"GetVelocity",
        "returns":"Vector"
      },{
        "args":[{
            "type":"string",
            "name":"pName"
          }],
        "name":"HasAttribute",
        "returns":"bool",
        "description":"See if an entity has a particular attribute."
      },{
        "args":[],
        "name":"IsAlive",
        "returns":"bool",
        "description":"Is this entity alive?"
      },{
        "args":[],
        "name":"IsDOTANPC",
        "returns":"bool",
        "description":"Is this entity a Dota NPC?"
      },{
        "args":[],
        "name":"IsNPC",
        "returns":"bool",
        "description":"Is this entity an CAI_BaseNPC?"
      },{
        "args":[],
        "name":"IsPlayer",
        "returns":"bool",
        "description":"Back compat: Is this entity a player pawn *or* controller?"
      },{
        "args":[],
        "name":"IsPlayerController",
        "returns":"bool",
        "description":"Is this entity a player controller?"
      },{
        "args":[],
        "name":"IsPlayerPawn",
        "returns":"bool",
        "description":"Is this entity a player pawn?"
      },{
        "args":[],
        "name":"Kill",
        "returns":"void"
      },{
        "args":[],
        "name":"NextMovePeer",
        "returns":"handle"
      },{
        "args":[{
            "type":"float",
            "name":"duration"
          },{
            "type":"float",
            "name":"friction"
          }],
        "name":"OverrideFriction",
        "returns":"void",
        "description":"Takes duration, value for a temporary override."
      },{
        "args":[{
            "type":"string",
            "name":"soundname"
          }],
        "name":"PrecacheScriptSound",
        "returns":"void",
        "description":"Precache a sound for later playing."
      },{
        "args":[{
            "type":"int",
            "name":"nFlags"
          }],
        "name":"RemoveEffects",
        "returns":"void",
        "description":"RemoveEffects( int ): Removes the render effect flag."
      },{
        "args":[{
            "type":"float",
            "name":"fPitch"
          },{
            "type":"float",
            "name":"fYaw"
          },{
            "type":"float",
            "name":"fRoll"
          }],
        "name":"SetAbsAngles",
        "returns":"void",
        "description":"Set entity pitch, yaw, roll by component."
      },{
        "args":[{
            "type":"Vector",
            "name":"origin"
          }],
        "name":"SetAbsOrigin",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flScale"
          }],
        "name":"SetAbsScale",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"fPitch"
          },{
            "type":"float",
            "name":"fYaw"
          },{
            "type":"float",
            "name":"fRoll"
          }],
        "name":"SetAngles",
        "returns":"void",
        "description":"Set entity pitch, yaw, roll by component."
      },{
        "args":[{
            "type":"float",
            "name":"pitchVel"
          },{
            "type":"float",
            "name":"yawVel"
          },{
            "type":"float",
            "name":"rollVel"
          }],
        "name":"SetAngularVelocity",
        "returns":"void",
        "description":"Set the local angular velocity - takes float pitch,yaw,roll velocities"
      },{
        "args":[{
            "type":"Vector",
            "name":"vPos"
          }],
        "name":"SetConstraint",
        "returns":"void",
        "description":"Set the position of the constraint."
      },{
        "args":[{
            "type":"string",
            "name":"pName"
          },{
            "type":"string",
            "name":"pValue"
          },{
            "type":"float",
            "name":"duration"
          }],
        "name":"SetContext",
        "returns":"void",
        "description":"SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever')."
      },{
        "args":[{
            "type":"string",
            "name":"pName"
          },{
            "type":"float",
            "name":"fValue"
          },{
            "type":"float",
            "name":"duration"
          }],
        "name":"SetContextNum",
        "returns":"void",
        "description":"SetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever')."
      },{
        "args":[{
            "type":"string",
            "name":"pszContextName"
          },{
            "type":"handle",
            "name":"hThinkFunc"
          },{
            "type":"float",
            "name":"flInterval"
          }],
        "name":"SetContextThink",
        "returns":"void",
        "description":"Set a think function on this entity."
      },{
        "args":[{
            "type":"string",
            "name":"pName"
          }],
        "name":"SetEntityName",
        "returns":"void",
        "description":"Set the name of an entity."
      },{
        "args":[{
            "type":"Vector",
            "name":"v"
          }],
        "name":"SetForwardVector",
        "returns":"void",
        "description":"Set the orientation of the entity to have this forward vector."
      },{
        "args":[{
            "type":"float",
            "name":"flFriction"
          }],
        "name":"SetFriction",
        "returns":"void",
        "description":"Set PLAYER friction, ignored for objects."
      },{
        "args":[{
            "type":"float",
            "name":"flGravity"
          }],
        "name":"SetGravity",
        "returns":"void",
        "description":"Set PLAYER gravity, ignored for objects."
      },{
        "args":[{
            "type":"int",
            "name":"nHealth"
          }],
        "name":"SetHealth",
        "returns":"void",
        "description":"Set the health of this entity."
      },{
        "args":[{
            "type":"float",
            "name":"fPitch"
          },{
            "type":"float",
            "name":"fYaw"
          },{
            "type":"float",
            "name":"fRoll"
          }],
        "name":"SetLocalAngles",
        "returns":"void",
        "description":"Set entity local pitch, yaw, roll by component"
      },{
        "args":[{
            "type":"Vector",
            "name":"origin"
          }],
        "name":"SetLocalOrigin",
        "returns":"void",
        "description":"Set entity local origin from a Vector"
      },{
        "args":[{
            "type":"float",
            "name":"flScale"
          }],
        "name":"SetLocalScale",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flMass"
          }],
        "name":"SetMass",
        "returns":"void",
        "description":"Set the mass of an entity. (does nothing if it doesn't have a physics object)"
      },{
        "args":[{
            "type":"int",
            "name":"amt"
          }],
        "name":"SetMaxHealth",
        "returns":"void",
        "description":"Set the maximum health of this entity."
      },{
        "args":[{
            "type":"Vector",
            "name":"v"
          }],
        "name":"SetOrigin",
        "returns":"void"
      },{
        "args":[{
            "type":"handle",
            "name":"pOwner"
          }],
        "name":"SetOwner",
        "returns":"void",
        "description":"Sets this entity's owner"
      },{
        "args":[{
            "type":"handle",
            "name":"hParent"
          },{
            "type":"string",
            "name":"pAttachmentname"
          }],
        "name":"SetParent",
        "returns":"void",
        "description":"Set the parent for this entity."
      },{
        "args":[{
            "type":"int",
            "name":"iTeamNum"
          }],
        "name":"SetTeam",
        "returns":"void"
      },{
        "args":[{
            "type":"Vector",
            "name":"vecVelocity"
          }],
        "name":"SetVelocity",
        "returns":"void"
      },{
        "args":[{
            "type":"string",
            "name":"soundname"
          }],
        "name":"StopSound",
        "returns":"void",
        "description":"Stops a named sound playing from this entity."
      },{
        "args":[{
            "type":"handle",
            "name":"hInfo"
          }],
        "name":"TakeDamage",
        "returns":"int",
        "description":"Apply damage to this entity. Use CreateDamageInfo() to create a damageinfo object."
      },{
        "args":[{
            "type":"Vector",
            "name":"vPoint"
          }],
        "name":"TransformPointEntityToWorld",
        "returns":"Vector",
        "description":"Returns the input Vector transformed from entity to world space"
      },{
        "args":[{
            "type":"Vector",
            "name":"vPoint"
          }],
        "name":"TransformPointWorldToEntity",
        "returns":"Vector",
        "description":"Returns the input Vector transformed from world to entity space"
      },{
        "args":[],
        "name":"Trigger",
        "returns":"void",
        "description":"Fires off this entity's OnTrigger responses."
      },{
        "args":[],
        "name":"ValidatePrivateScriptScope",
        "returns":"void",
        "description":"Validates the private script scope and creates it if one doesn't exist."
      }],
    "extend":"CEntityInstance"
  },{
    "kind":"class",
    "name":"CBaseFlex",
    "members":[{
        "args":[],
        "name":"GetCurrentScene",
        "returns":"handle",
        "description":"Returns the instance of the oldest active scene entity (if any)."
      },{
        "args":[{
            "type":"int",
            "name":"index"
          }],
        "name":"GetSceneByIndex",
        "returns":"handle",
        "description":"Returns the instance of the scene entity at the specified index."
      },{
        "args":[{
            "type":"string",
            "name":"pszScene"
          },{
            "type":"float",
            "name":"flDelay"
          }],
        "name":"ScriptPlayScene",
        "returns":"float",
        "description":"( vcd file, delay ) - play specified vcd file"
      }],
    "extend":"CBaseAnimatingActivity"
  },{
    "kind":"class",
    "name":"CBaseModelEntity",
    "members":[{
        "args":[{
            "type":"int",
            "name":"iAttachment"
          }],
        "name":"GetAttachmentAngles",
        "returns":"Vector",
        "description":"Get the attachment id's angles as a p,y,r vector."
      },{
        "args":[{
            "type":"int",
            "name":"iAttachment"
          }],
        "name":"GetAttachmentForward",
        "returns":"Vector",
        "description":"Get the attachment id's forward vector."
      },{
        "args":[{
            "type":"int",
            "name":"iAttachment"
          }],
        "name":"GetAttachmentOrigin",
        "returns":"Vector",
        "description":"Get the attachment id's origin vector."
      },{
        "args":[],
        "name":"GetMaterialGroupHash",
        "returns":"unsigned",
        "description":"GetMaterialGroupHash(): Get the material group hash of this entity."
      },{
        "args":[],
        "name":"GetMaterialGroupMask",
        "returns":"uint64",
        "description":"GetMaterialGroupMask(): Get the mesh group mask of this entity."
      },{
        "args":[],
        "name":"GetModelScale",
        "returns":"float",
        "description":"Get scale of entity's model."
      },{
        "args":[],
        "name":"GetRenderAlpha",
        "returns":"int",
        "description":"GetRenderAlpha(): Get the alpha modulation of this entity."
      },{
        "args":[],
        "name":"GetRenderColor",
        "returns":"Vector",
        "description":"GetRenderColor(): Get the render color of the entity."
      },{
        "args":[{
            "type":"string",
            "name":"pAttachmentName"
          }],
        "name":"ScriptLookupAttachment",
        "returns":"int",
        "description":"Get the named attachment id."
      },{
        "args":[{
            "type":"int",
            "name":"iGroup"
          },{
            "type":"int",
            "name":"iValue"
          }],
        "name":"SetBodygroup",
        "returns":"void",
        "description":"Sets a bodygroup."
      },{
        "args":[{
            "type":"string",
            "name":"pName"
          },{
            "type":"int",
            "name":"iValue"
          }],
        "name":"SetBodygroupByName",
        "returns":"void",
        "description":"Sets a bodygroup by name."
      },{
        "args":[{
            "type":"string",
            "name":"pLightGroup"
          }],
        "name":"SetLightGroup",
        "returns":"void",
        "description":"SetLightGroup( string ): Sets the light group of the entity."
      },{
        "args":[{
            "type":"string",
            "name":"pMaterialGroup"
          }],
        "name":"SetMaterialGroup",
        "returns":"void",
        "description":"SetMaterialGroup( string ): Set the material group of this entity."
      },{
        "args":[{
            "type":"unsigned",
            "name":"nHash"
          }],
        "name":"SetMaterialGroupHash",
        "returns":"void",
        "description":"SetMaterialGroupHash( uint32 ): Set the material group hash of this entity."
      },{
        "args":[{
            "type":"uint64",
            "name":"nMeshGroupMask"
          }],
        "name":"SetMaterialGroupMask",
        "returns":"void",
        "description":"SetMaterialGroupMask( uint64 ): Set the mesh group mask of this entity."
      },{
        "args":[{
            "type":"string",
            "name":"pModelName"
          }],
        "name":"SetModel",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flScale"
          }],
        "name":"SetModelScale",
        "returns":"void",
        "description":"Set scale of entity's model."
      },{
        "args":[{
            "type":"int",
            "name":"nAlpha"
          }],
        "name":"SetRenderAlpha",
        "returns":"void",
        "description":"SetRenderAlpha( int ): Set the alpha modulation of this entity."
      },{
        "args":[{
            "type":"int",
            "name":"r"
          },{
            "type":"int",
            "name":"g"
          },{
            "type":"int",
            "name":"b"
          }],
        "name":"SetRenderColor",
        "returns":"void",
        "description":"SetRenderColor( r, g, b ): Sets the render color of the entity."
      },{
        "args":[{
            "type":"int",
            "name":"nMode"
          }],
        "name":"SetRenderMode",
        "returns":"void",
        "description":"SetRenderMode( int ): Sets the render mode of the entity."
      },{
        "args":[{
            "type":"string",
            "name":"pMeshGroupName"
          }],
        "name":"SetSingleMeshGroup",
        "returns":"void",
        "description":"SetSingleMeshGroup( string ): Set a single mesh group for this entity."
      },{
        "args":[{
            "type":"Vector",
            "name":"mins"
          },{
            "type":"Vector",
            "name":"maxs"
          }],
        "name":"SetSize",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iSkin"
          }],
        "name":"SetSkin",
        "returns":"void",
        "description":"Set skin (int)."
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CBasePlayerController",
    "members":[{
        "args":[],
        "name":"GetPawn",
        "returns":"handle",
        "description":"GetPawn() : Returns the pawn for this controller"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CBasePlayerPawn",
    "members":[{
        "args":[],
        "name":"GetController",
        "returns":"handle",
        "description":"GetController() : Returns the controller for this pawn"
      },{
        "args":[],
        "name":"GetEquippedWeapons",
        "returns":"table",
        "description":"GetEquippedWeapons() : Returns an array of all the equipped weapons"
      },{
        "args":[],
        "name":"GetWeaponCount",
        "returns":"int",
        "description":"GetWeaponCount() : Gets the number of weapons currently equipped"
      },{
        "args":[],
        "name":"IsNoclipping",
        "returns":"bool",
        "description":"Returns true if the player is in noclip mode."
      }],
    "extend":"CBaseCombatCharacter"
  },{
    "kind":"class",
    "name":"CBaseTrigger",
    "members":[{
        "args":[],
        "name":"Disable",
        "returns":"void",
        "description":"Disable's the trigger"
      },{
        "args":[],
        "name":"Enable",
        "returns":"void",
        "description":"Enable the trigger"
      },{
        "args":[{
            "type":"handle",
            "name":"hEnt"
          }],
        "name":"IsTouching",
        "returns":"bool",
        "description":"Checks whether the passed entity is touching the trigger."
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CBodyComponent",
    "members":[{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"AddImpulseAtPosition",
        "returns":"void",
        "description":"Apply an impulse at a worldspace position to the physics"
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"AddVelocity",
        "returns":"void",
        "description":"Add linear and angular velocity to the physics object"
      },{
        "args":[],
        "name":"DetachFromParent",
        "returns":"void",
        "description":"Detach from its parent"
      },{
        "args":[],
        "name":"GetSequence",
        "returns":"int",
        "description":"Returns the active sequence\n"
      },{
        "args":[],
        "name":"IsAttachedToParent",
        "returns":"bool",
        "description":"Is attached to parent"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"LookupSequence",
        "returns":"int",
        "description":"Returns a sequence id given a name\n"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"SequenceDuration",
        "returns":"float",
        "description":"Returns the duration in seconds of the specified sequence"
      },{
        "args":[{
            "type":"Vector"
          }],
        "name":"SetAngularVelocity",
        "returns":"void"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"SetAnimation",
        "returns":"void",
        "description":"Pass string for the animation to play on this model"
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "name":"SetMaterialGroup",
        "returns":"void"
      },{
        "args":[{
            "type":"Vector"
          }],
        "name":"SetVelocity",
        "returns":"void"
      }]
  },{
    "kind":"class",
    "name":"CCustomGameEventManager",
    "instance":"CustomGameEventManager",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"RegisterListener",
        "returns":"int",
        "description":"( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"Send_ServerToAllClients",
        "returns":"void",
        "description":"( string EventName, table EventData )"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"Send_ServerToPlayer",
        "returns":"void",
        "description":"( Entity Player, string EventName, table EventData )"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"Send_ServerToTeam",
        "returns":"void",
        "description":"( int TeamNumber, string EventName, table EventData )"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"UnregisterListener",
        "returns":"void",
        "description":"( int ListnerID ) - Unregister a specific listener"
      }]
  },{
    "kind":"class",
    "name":"CCustomNetTableManager",
    "instance":"CustomNetTables",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"GetTableValue",
        "returns":"table",
        "description":"( string TableName, string KeyName )"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"SetTableValue",
        "returns":"bool",
        "description":"( string TableName, string KeyName, script_table Value )"
      }]
  },{
    "kind":"class",
    "name":"CDOTABaseAbility",
    "members":[{
        "args":[],
        "name":"CanAbilityBeUpgraded",
        "returns":"<unknown>"
      },{
        "args":[],
        "name":"CastAbility",
        "returns":"bool"
      },{
        "args":[],
        "name":"ContinueCasting",
        "returns":"bool"
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"float",
            "name":"fRadius"
          },{
            "type":"float",
            "name":"fDuration"
          }],
        "name":"CreateVisibilityNode",
        "returns":"void"
      },{
        "args":[],
        "name":"DecrementModifierRefCount",
        "returns":"void"
      },{
        "args":[{
            "type":"handle",
            "name":"hAbility"
          },{
            "type":"string",
            "name":"pszTalentName"
          }],
        "name":"EnableAbilityChargesOnTalentUpgrade",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bInterrupted"
          }],
        "name":"EndChannel",
        "returns":"void"
      },{
        "args":[],
        "name":"EndCooldown",
        "returns":"void",
        "description":"Clear the cooldown remaining on this ability."
      },{
        "args":[],
        "name":"GetAOERadius",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetAbilityChargeRestoreTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetAbilityDamage",
        "returns":"int"
      },{
        "args":[],
        "name":"GetAbilityDamageType",
        "returns":"int"
      },{
        "args":[],
        "name":"GetAbilityIndex",
        "returns":"int"
      },{
        "args":[],
        "name":"GetAbilityKeyValues",
        "returns":"table",
        "description":"Gets the key values definition for this ability."
      },{
        "args":[],
        "name":"GetAbilityName",
        "returns":"string",
        "description":"Returns the name of this ability."
      },{
        "args":[],
        "name":"GetAbilityTargetFlags",
        "returns":"int"
      },{
        "args":[],
        "name":"GetAbilityTargetTeam",
        "returns":"int"
      },{
        "args":[],
        "name":"GetAbilityTargetType",
        "returns":"int"
      },{
        "args":[],
        "name":"GetAbilityType",
        "returns":"int"
      },{
        "args":[],
        "name":"GetAnimationIgnoresModelScale",
        "returns":"bool"
      },{
        "args":[],
        "name":"GetAssociatedPrimaryAbilities",
        "returns":"string"
      },{
        "args":[],
        "name":"GetAssociatedSecondaryAbilities",
        "returns":"string"
      },{
        "args":[],
        "name":"GetAutoCastState",
        "returns":"bool"
      },{
        "args":[],
        "name":"GetBackswingTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetBehavior",
        "returns":"double"
      },{
        "args":[],
        "name":"GetBehaviorInt",
        "returns":"int",
        "description":"Get ability behavior flags as an int for compatability."
      },{
        "args":[],
        "name":"GetCastPoint",
        "returns":"float"
      },{
        "args":[],
        "name":"GetCastPointModifier",
        "returns":"float"
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"GetCastRange",
        "returns":"int",
        "description":"Gets the cast range of the ability."
      },{
        "args":[],
        "name":"GetCaster",
        "returns":"handle"
      },{
        "args":[],
        "name":"GetChannelStartTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetChannelTime",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetChannelledManaCostPerSecond",
        "returns":"int"
      },{
        "args":[],
        "name":"GetCloneSource",
        "returns":"handle"
      },{
        "args":[],
        "name":"GetConceptRecipientType",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetCooldown",
        "returns":"float",
        "description":"Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left."
      },{
        "args":[],
        "name":"GetCooldownTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetCooldownTimeRemaining",
        "returns":"float"
      },{
        "args":[],
        "name":"GetCurrentAbilityCharges",
        "returns":"int"
      },{
        "args":[],
        "name":"GetCursorPosition",
        "returns":"Vector"
      },{
        "args":[],
        "name":"GetCursorTarget",
        "returns":"handle"
      },{
        "args":[],
        "name":"GetCursorTargetingNothing",
        "returns":"bool"
      },{
        "args":[],
        "name":"GetDuration",
        "returns":"float"
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"GetEffectiveCastRange",
        "returns":"int",
        "description":"Gets the cast range of the ability, taking modifiers into account."
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetEffectiveCooldown",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetEffectiveManaCost",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetGoldCost",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetGoldCostForUpgrade",
        "returns":"int"
      },{
        "args":[],
        "name":"GetHeroLevelRequiredToUpgrade",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetInitialAbilityCharges",
        "returns":"int"
      },{
        "args":[],
        "name":"GetIntrinsicModifierName",
        "returns":"string"
      },{
        "args":[],
        "name":"GetLevel",
        "returns":"int",
        "description":"Get the current level of the ability."
      },{
        "args":[{
            "type":"string",
            "name":"szName"
          },{
            "type":"int",
            "name":"nLevel"
          }],
        "name":"GetLevelSpecialValueFor",
        "returns":"table"
      },{
        "args":[{
            "type":"string",
            "name":"szName"
          },{
            "type":"int",
            "name":"nLevel"
          }],
        "name":"GetLevelSpecialValueNoOverride",
        "returns":"table"
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetManaCost",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetMaxAbilityCharges",
        "returns":"int"
      },{
        "args":[],
        "name":"GetMaxLevel",
        "returns":"int"
      },{
        "args":[],
        "name":"GetModifierValue",
        "returns":"float"
      },{
        "args":[],
        "name":"GetModifierValueBonus",
        "returns":"float"
      },{
        "args":[],
        "name":"GetPlaybackRateOverride",
        "returns":"float"
      },{
        "args":[],
        "name":"GetSharedCooldownName",
        "returns":"string"
      },{
        "args":[{
            "type":"string",
            "name":"szName"
          }],
        "name":"GetSpecialValueFor",
        "returns":"table",
        "description":"Gets a value from this ability's special value block for its current level."
      },{
        "args":[],
        "name":"GetStolenActivityModifier",
        "returns":"string"
      },{
        "args":[],
        "name":"GetToggleState",
        "returns":"bool"
      },{
        "args":[],
        "name":"GetUpgradeRecommended",
        "returns":"bool"
      },{
        "args":[{
            "type":"float",
            "name":"flXP"
          }],
        "name":"HeroXPChange",
        "returns":"bool"
      },{
        "args":[],
        "name":"IncrementModifierRefCount",
        "returns":"void"
      },{
        "args":[],
        "name":"IsActivated",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsAttributeBonus",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsChanneling",
        "returns":"bool",
        "description":"Returns whether the ability is currently channeling."
      },{
        "args":[],
        "name":"IsCooldownReady",
        "returns":"bool"
      },{
        "args":[{
            "type":"handle",
            "name":"hEntity"
          }],
        "name":"IsCosmetic",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsFullyCastable",
        "returns":"bool",
        "description":"Returns whether the ability can be cast."
      },{
        "args":[],
        "name":"IsHidden",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsHiddenAsSecondaryAbility",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsHiddenWhenStolen",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsInAbilityPhase",
        "returns":"bool",
        "description":"Returns whether the ability is currently casting."
      },{
        "args":[],
        "name":"IsItem",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"nIssuerPlayerID"
          }],
        "name":"IsOwnersGoldEnough",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsOwnersGoldEnoughForUpgrade",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsOwnersManaEnough",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsPassive",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsRefreshable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsSharedWithTeammates",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsStealable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsStolen",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsToggle",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsTrained",
        "returns":"bool"
      },{
        "args":[],
        "name":"MarkAbilityButtonDirty",
        "returns":"void",
        "description":"Mark the ability button for this ability as needing a refresh."
      },{
        "args":[],
        "name":"NumModifiersUsingAbility",
        "returns":"int"
      },{
        "args":[],
        "name":"OnAbilityPhaseInterrupted",
        "returns":"void"
      },{
        "args":[],
        "name":"OnAbilityPhaseStart",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"bool",
            "name":"bCtrlHeld"
          }],
        "name":"OnAbilityPinged",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bInterrupted"
          }],
        "name":"OnChannelFinish",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flInterval"
          }],
        "name":"OnChannelThink",
        "returns":"void"
      },{
        "args":[],
        "name":"OnHeroCalculateStatBonus",
        "returns":"void"
      },{
        "args":[],
        "name":"OnHeroLevelUp",
        "returns":"void"
      },{
        "args":[],
        "name":"OnOwnerDied",
        "returns":"void"
      },{
        "args":[],
        "name":"OnOwnerSpawned",
        "returns":"void"
      },{
        "args":[],
        "name":"OnSpellStart",
        "returns":"void"
      },{
        "args":[],
        "name":"OnToggle",
        "returns":"void"
      },{
        "args":[],
        "name":"OnUpgrade",
        "returns":"void"
      },{
        "args":[],
        "name":"PayGoldCost",
        "returns":"void"
      },{
        "args":[],
        "name":"PayGoldCostForUpgrade",
        "returns":"void"
      },{
        "args":[],
        "name":"PayManaCost",
        "returns":"void"
      },{
        "args":[],
        "name":"PlaysDefaultAnimWhenStolen",
        "returns":"bool"
      },{
        "args":[],
        "name":"ProcsMagicStick",
        "returns":"bool"
      },{
        "args":[],
        "name":"RefCountsModifiers",
        "returns":"bool"
      },{
        "args":[],
        "name":"RefreshCharges",
        "returns":"void"
      },{
        "args":[],
        "name":"RefreshIntrinsicModifier",
        "returns":"void"
      },{
        "args":[],
        "name":"RefundManaCost",
        "returns":"void"
      },{
        "args":[],
        "name":"RequiresFacing",
        "returns":"bool"
      },{
        "args":[],
        "name":"ResetToggleOnRespawn",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iIndex"
          }],
        "name":"SetAbilityIndex",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bActivated"
          }],
        "name":"SetActivated",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bChanneling"
          }],
        "name":"SetChanneling",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"nCharges"
          }],
        "name":"SetCurrentAbilityCharges",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bFrozenCooldown"
          }],
        "name":"SetFrozenCooldown",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bHidden"
          }],
        "name":"SetHidden",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bInAbilityPhase"
          }],
        "name":"SetInAbilityPhase",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"SetLevel",
        "returns":"void",
        "description":"Sets the level of this ability."
      },{
        "args":[{
            "type":"float",
            "name":"flCastPoint"
          }],
        "name":"SetOverrideCastPoint",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bRefCounts"
          }],
        "name":"SetRefCountsModifiers",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bStealable"
          }],
        "name":"SetStealable",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bStolen"
          }],
        "name":"SetStolen",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bUpgradeRecommended"
          }],
        "name":"SetUpgradeRecommended",
        "returns":"void"
      },{
        "args":[],
        "name":"ShouldUseResources",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iConcept"
          }],
        "name":"SpeakAbilityConcept",
        "returns":"void"
      },{
        "args":[],
        "name":"SpeakTrigger",
        "returns":"<unknown>"
      },{
        "args":[{
            "type":"float",
            "name":"flCooldown"
          }],
        "name":"StartCooldown",
        "returns":"void"
      },{
        "args":[],
        "name":"ToggleAbility",
        "returns":"void"
      },{
        "args":[],
        "name":"ToggleAutoCast",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bSupressSpeech"
          }],
        "name":"UpgradeAbility",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bMana"
          },{
            "type":"bool",
            "name":"bGold"
          },{
            "type":"bool",
            "name":"bCooldown"
          }],
        "name":"UseResources",
        "returns":"void"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CDOTABaseGameMode",
    "members":[{
        "args":[{
            "type":"string",
            "name":"pszAbilityName"
          }],
        "name":"AddAbilityUpgradeToWhitelist",
        "returns":"void",
        "description":"const char* pszAbilityName"
      },{
        "args":[{
            "type":"string",
            "name":"pszItemName"
          },{
            "type":"string",
            "name":"pszShopName"
          },{
            "type":"string",
            "name":"pszCategory"
          }],
        "name":"AddItemToCustomShop",
        "returns":"void",
        "description":"( pszItem, pszShop, pszCategory ) Add an item to purchase at a custom shop."
      },{
        "args":[{
            "type":"handle",
            "name":"hQueryTable"
          },{
            "type":"handle",
            "name":"hPlayer"
          },{
            "type":"string",
            "name":"pszQueryName"
          }],
        "name":"AddRealTimeCombatAnalyzerQuery",
        "returns":"int",
        "description":"Begin tracking a sequence of events using the real time combat analyzer."
      },{
        "args":[{
            "type":"float",
            "name":"flMinX"
          },{
            "type":"float",
            "name":"flMinY"
          },{
            "type":"float",
            "name":"flMaxX"
          },{
            "type":"float",
            "name":"flMaxY"
          },{
            "type":"float",
            "name":"flGridSize"
          }],
        "name":"AllocateFowBlockerRegion",
        "returns":"handle",
        "description":"Allocates an entity which can be used by custom games to control FoW occlusion volumes"
      },{
        "args":[],
        "name":"AreWeatherEffectsDisabled",
        "returns":"bool",
        "description":"Get if weather effects are disabled on the client."
      },{
        "args":[],
        "name":"ClearBountyRunePickupFilter",
        "returns":"void",
        "description":"Clear the script filter that controls bounty rune pickup behavior."
      },{
        "args":[],
        "name":"ClearDamageFilter",
        "returns":"void",
        "description":"Clear the script filter that controls how a unit takes damage."
      },{
        "args":[],
        "name":"ClearExecuteOrderFilter",
        "returns":"void",
        "description":"Clear the script filter that controls when a unit picks up an item."
      },{
        "args":[],
        "name":"ClearHealingFilter",
        "returns":"void",
        "description":"Clear the script filter that controls how a unit heals."
      },{
        "args":[],
        "name":"ClearItemAddedToInventoryFilter",
        "returns":"void",
        "description":"Clear the script filter that controls the item added to inventory filter."
      },{
        "args":[],
        "name":"ClearModifierGainedFilter",
        "returns":"void",
        "description":"Clear the script filter that controls the modifier filter."
      },{
        "args":[],
        "name":"ClearModifyExperienceFilter",
        "returns":"void",
        "description":"Clear the script filter that controls how hero experience is modified."
      },{
        "args":[],
        "name":"ClearModifyGoldFilter",
        "returns":"void",
        "description":"Clear the script filter that controls how hero gold is modified."
      },{
        "args":[],
        "name":"ClearRuneSpawnFilter",
        "returns":"void",
        "description":"Clear the script filter that controls what rune spawns."
      },{
        "args":[],
        "name":"ClearTrackingProjectileFilter",
        "returns":"void",
        "description":"Clear the script filter that controls when tracking projectiles are launched."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"DisableClumpingBehaviorByDefault",
        "returns":"void",
        "description":"Disable npc_dota_creature clumping behavior by default."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisable"
          }],
        "name":"DisableHudFlip",
        "returns":"void",
        "description":"Use to disable hud flip for this mod"
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"EnableAbilityUpgradeWhitelist",
        "returns":"void",
        "description":"bool bEnabled"
      },{
        "args":[],
        "name":"GetAlwaysShowPlayerInventory",
        "returns":"bool",
        "description":"Show the player hero's inventory in the HUD, regardless of what unit is selected."
      },{
        "args":[],
        "name":"GetAlwaysShowPlayerNames",
        "returns":"bool",
        "description":"Get whether player names are always shown, regardless of client setting."
      },{
        "args":[],
        "name":"GetAnnouncerDisabled",
        "returns":"bool",
        "description":"Are in-game announcers disabled?"
      },{
        "args":[],
        "name":"GetAnnouncerGameModeAnnounceDisabled",
        "returns":"bool",
        "description":"Is the announcer announcing the mode / saying Choose Your Hero on start of custom games disabled?"
      },{
        "args":[],
        "name":"GetCameraDistanceOverride",
        "returns":"float",
        "description":"Set a different camera distance; dota default is 1134."
      },{
        "args":[{
            "type":"int",
            "name":"nDerivedStatType"
          }],
        "name":"GetCustomAttributeDerivedStatValue",
        "returns":"float",
        "description":"Get current derived stat value constant."
      },{
        "args":[],
        "name":"GetCustomBackpackCooldownPercent",
        "returns":"float",
        "description":"Get the current rate cooldown ticks down for items in the backpack."
      },{
        "args":[],
        "name":"GetCustomBackpackSwapCooldown",
        "returns":"float",
        "description":"Get the current custom backpack swap cooldown."
      },{
        "args":[],
        "name":"GetCustomBuybackCooldownEnabled",
        "returns":"bool",
        "description":"Turns on capability to define custom buyback cooldowns."
      },{
        "args":[],
        "name":"GetCustomBuybackCostEnabled",
        "returns":"bool",
        "description":"Turns on capability to define custom buyback costs."
      },{
        "args":[],
        "name":"GetCustomDireScore",
        "returns":"int",
        "description":"Get the topbar score display value for dire."
      },{
        "args":[],
        "name":"GetCustomGlyphCooldown",
        "returns":"float",
        "description":"Get the current custom glyph cooldown."
      },{
        "args":[],
        "name":"GetCustomHeroMaxLevel",
        "returns":"int",
        "description":"Allows definition of the max level heroes can achieve (default is 25)."
      },{
        "args":[],
        "name":"GetCustomRadiantScore",
        "returns":"int",
        "description":"Get the topbar score display value for radiant."
      },{
        "args":[],
        "name":"GetCustomScanCooldown",
        "returns":"float",
        "description":"Get the current custom scan cooldown."
      },{
        "args":[],
        "name":"GetDaynightCycleAdvanceRate",
        "returns":"float",
        "description":"Get the rate at which the day/night cycle advances (1.0 = default)."
      },{
        "args":[],
        "name":"GetEventGameSeed",
        "returns":"int",
        "description":"Get the Game Seed passed from the GC."
      },{
        "args":[],
        "name":"GetEventWindowStartTime",
        "returns":"unsigned",
        "description":"Get the Event Window Start Time passed from the GC."
      },{
        "args":[],
        "name":"GetFixedRespawnTime",
        "returns":"float",
        "description":"Gets the fixed respawn time."
      },{
        "args":[],
        "name":"GetFogOfWarDisabled",
        "returns":"bool",
        "description":"Turn the fog of war on or off."
      },{
        "args":[],
        "name":"GetGoldSoundDisabled",
        "returns":"bool",
        "description":"Turn the sound when gold is acquired off/on."
      },{
        "args":[{
            "type":"int",
            "name":"iElement"
          }],
        "name":"GetHUDVisible",
        "returns":"bool",
        "description":"Returns the HUD element visibility."
      },{
        "args":[],
        "name":"GetMaximumAttackSpeed",
        "returns":"int",
        "description":"Get the maximum attack speed for units."
      },{
        "args":[],
        "name":"GetMinimumAttackSpeed",
        "returns":"int",
        "description":"Get the minimum attack speed for units."
      },{
        "args":[],
        "name":"GetRecommendedItemsDisabled",
        "returns":"bool",
        "description":"Turn the panel for showing recommended items at the shop off/on."
      },{
        "args":[],
        "name":"GetRespawnTimeScale",
        "returns":"float",
        "description":"Returns the scale applied to non-fixed respawn times."
      },{
        "args":[],
        "name":"GetStashPurchasingDisabled",
        "returns":"bool",
        "description":"Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items."
      },{
        "args":[],
        "name":"GetStickyItemDisabled",
        "returns":"bool",
        "description":"Hide the sticky item in the quickbuy."
      },{
        "args":[],
        "name":"GetTopBarTeamValuesOverride",
        "returns":"bool",
        "description":"Override the values of the team values on the top game bar."
      },{
        "args":[],
        "name":"GetTopBarTeamValuesVisible",
        "returns":"bool",
        "description":"Turning on/off the team values on the top game bar."
      },{
        "args":[],
        "name":"GetTowerBackdoorProtectionEnabled",
        "returns":"bool",
        "description":"Gets whether tower backdoor protection is enabled or not."
      },{
        "args":[],
        "name":"GetUseCustomHeroLevels",
        "returns":"bool",
        "description":"Are custom-defined XP values for hero level ups in use?"
      },{
        "args":[],
        "name":"GetWaterRuneLastSpawnTime",
        "returns":"float",
        "description":"Gets the time from game start during which water runes spawn"
      },{
        "args":[{
            "type":"string",
            "name":"pszAbilityName"
          }],
        "name":"IsAbilityUpgradeWhitelisted",
        "returns":"bool",
        "description":"const char* pszAbilityName"
      },{
        "args":[],
        "name":"IsBuybackEnabled",
        "returns":"bool",
        "description":"Enables or disables buyback completely."
      },{
        "args":[],
        "name":"IsDaynightCycleDisabled",
        "returns":"bool",
        "description":"Is the day/night cycle disabled?"
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"ListenForQueryFailed",
        "returns":"void",
        "description":"Set function and context for real time combat analyzer query failed."
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"ListenForQueryProgressChanged",
        "returns":"void",
        "description":"Set function and context for real time combat analyzer query progress changed."
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"ListenForQuerySucceeded",
        "returns":"void",
        "description":"Set function and context for real time combat analyzer query succeeded."
      },{
        "args":[{
            "type":"string",
            "name":"pszAbilityName"
          }],
        "name":"RemoveAbilityUpgradeFromWhitelist",
        "returns":"void",
        "description":"const char* pszAbilityName"
      },{
        "args":[{
            "type":"string",
            "name":"pszItemName"
          },{
            "type":"string",
            "name":"pszShopName"
          }],
        "name":"RemoveItemFromCustomShop",
        "returns":"void",
        "description":"( pszItem, pszShop ) Remove an item to purchase at a custom shop."
      },{
        "args":[{
            "type":"int",
            "name":"nQueryID"
          }],
        "name":"RemoveRealTimeCombatAnalyzerQuery",
        "returns":"void",
        "description":"Stop tracking a combat analyzer query."
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"SetAbilityTuningValueFilter",
        "returns":"void",
        "description":"Set a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values)"
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetAllowNeutralItemDrops",
        "returns":"void",
        "description":"If set to true, neutral items will be dropped on killing neutral monsters.  Otherwise nothing will be dropped."
      },{
        "args":[{
            "type":"bool",
            "name":"bAlwaysShow"
          }],
        "name":"SetAlwaysShowPlayerInventory",
        "returns":"void",
        "description":"Show the player hero's inventory in the HUD, regardless of what unit is selected."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetAlwaysShowPlayerNames",
        "returns":"void",
        "description":"Set whether player names are always shown, regardless of client setting."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetAnnouncerDisabled",
        "returns":"void",
        "description":"Mutes the in-game announcer."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetAnnouncerGameModeAnnounceDisabled",
        "returns":"void",
        "description":"Disables the announcer announcing the mode / saying Choose Your Hero on start of custom games."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetBotThinkingEnabled",
        "returns":"void",
        "description":"Enables/Disables bots in custom games. Note: this will only work with default heroes in the dota map."
      },{
        "args":[{
            "type":"bool",
            "name":"bAlwaysPush"
          }],
        "name":"SetBotsAlwaysPushWithHuman",
        "returns":"void",
        "description":"Set if the bots should try their best to push with a human player."
      },{
        "args":[{
            "type":"bool",
            "name":"bLateGame"
          }],
        "name":"SetBotsInLateGame",
        "returns":"void",
        "description":"Set if bots should enable their late game behavior."
      },{
        "args":[{
            "type":"int",
            "name":"nMaxTier"
          }],
        "name":"SetBotsMaxPushTier",
        "returns":"void",
        "description":"Set the max tier of tower that bots want to push. (-1 to disable)"
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"SetBountyRunePickupFilter",
        "returns":"void",
        "description":"Set a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "type":"float",
            "name":"flInterval"
          }],
        "name":"SetBountyRuneSpawnInterval",
        "returns":"void",
        "description":"Set bounty rune spawn rate"
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetBuybackEnabled",
        "returns":"void",
        "description":"Enables or disables buyback completely."
      },{
        "args":[{
            "type":"float",
            "name":"flCameraDistanceOverride"
          }],
        "name":"SetCameraDistanceOverride",
        "returns":"void",
        "description":"Set a different camera distance; dota default is 1134."
      },{
        "args":[{
            "type":"int",
            "name":"nSmoothCount"
          }],
        "name":"SetCameraSmoothCountOverride",
        "returns":"void",
        "description":"Set a different camera smooth count; dota default is 8."
      },{
        "args":[{
            "type":"float",
            "name":"flMinZ"
          },{
            "type":"float",
            "name":"flMaxZ"
          }],
        "name":"SetCameraZRange",
        "returns":"void",
        "description":"Sets the camera Z range"
      },{
        "args":[{
            "type":"bool",
            "name":"bAllow"
          }],
        "name":"SetCanSellAnywhere",
        "returns":"void",
        "description":"bool bAllow"
      },{
        "args":[{
            "type":"int",
            "name":"nStatType"
          },{
            "type":"float",
            "name":"flNewValue"
          }],
        "name":"SetCustomAttributeDerivedStatValue",
        "returns":"void",
        "description":"Modify derived stat value constants. ( AttributeDerivedStat eStatType, float flNewValue."
      },{
        "args":[{
            "type":"float",
            "name":"flPercent"
          }],
        "name":"SetCustomBackpackCooldownPercent",
        "returns":"void",
        "description":"Set the rate cooldown ticks down for items in the backpack."
      },{
        "args":[{
            "type":"float",
            "name":"flCooldown"
          }],
        "name":"SetCustomBackpackSwapCooldown",
        "returns":"void",
        "description":"Set a custom cooldown for swapping items into the backpack."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetCustomBuybackCooldownEnabled",
        "returns":"void",
        "description":"Turns on capability to define custom buyback cooldowns."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetCustomBuybackCostEnabled",
        "returns":"void",
        "description":"Turns on capability to define custom buyback costs."
      },{
        "args":[{
            "type":"int",
            "name":"nScore"
          }],
        "name":"SetCustomDireScore",
        "returns":"void",
        "description":"Sets the topbar score display value for dire."
      },{
        "args":[{
            "type":"string",
            "name":"pHeroName"
          }],
        "name":"SetCustomGameForceHero",
        "returns":"void",
        "description":"Force all players to use the specified hero and disable the normal hero selection process. Must be used before hero selection."
      },{
        "args":[{
            "type":"float",
            "name":"flCooldown"
          }],
        "name":"SetCustomGlyphCooldown",
        "returns":"void",
        "description":"Set a custom cooldown for team Glyph ability."
      },{
        "args":[{
            "type":"int"
          }],
        "name":"SetCustomHeroMaxLevel",
        "returns":"void",
        "description":"Allows definition of the max level heroes can achieve (default is 25)."
      },{
        "args":[{
            "type":"int",
            "name":"nScore"
          }],
        "name":"SetCustomRadiantScore",
        "returns":"void",
        "description":"Sets the topbar score display value for radiant."
      },{
        "args":[{
            "type":"float",
            "name":"flCooldown"
          }],
        "name":"SetCustomScanCooldown",
        "returns":"void",
        "description":"Set a custom cooldown for team Scan ability."
      },{
        "args":[{
            "type":"string",
            "name":"pszEffectName"
          }],
        "name":"SetCustomTerrainWeatherEffect",
        "returns":"void",
        "description":"Set the effect used as a custom weather effect, when units are on non-default terrain, in this mode."
      },{
        "args":[{
            "type":"handle",
            "name":"hTable"
          }],
        "name":"SetCustomXPRequiredToReachNextLevel",
        "returns":"void",
        "description":"Allows definition of a table of hero XP values."
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"SetDamageFilter",
        "returns":"void",
        "description":"Set a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "type":"float",
            "name":"flRate"
          }],
        "name":"SetDaynightCycleAdvanceRate",
        "returns":"void",
        "description":"Sets the rate at which the day/night cycle advances (1.0 = default)."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisable"
          }],
        "name":"SetDaynightCycleDisabled",
        "returns":"void",
        "description":"Enable or disable the day/night cycle."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetDeathOverlayDisabled",
        "returns":"void",
        "description":"Specify whether the full screen death overlay effect plays when the selected hero dies."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetDeathTipsDisabled",
        "returns":"void",
        "description":"Disables chat tips on death."
      },{
        "args":[{
            "type":"string",
            "name":"pItem"
          }],
        "name":"SetDefaultStickyItem",
        "returns":"void",
        "description":"Sets the default sticky item in the quickbuy"
      },{
        "args":[{
            "type":"float",
            "name":"flValue"
          }],
        "name":"SetDraftingBanningTimeOverride",
        "returns":"void",
        "description":"Set drafting hero banning time"
      },{
        "args":[{
            "type":"float",
            "name":"flValue"
          }],
        "name":"SetDraftingHeroPickSelectTimeOverride",
        "returns":"void",
        "description":"Set drafting hero pick time"
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"SetExecuteOrderFilter",
        "returns":"void",
        "description":"Set a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "type":"float",
            "name":"flFixedRespawnTime"
          }],
        "name":"SetFixedRespawnTime",
        "returns":"void",
        "description":"Set a fixed delay for all players to respawn after."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetFogOfWarDisabled",
        "returns":"void",
        "description":"Turn the fog of war on or off."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetForceRightClickAttackDisabled",
        "returns":"void",
        "description":"Prevent users from using the right click deny setting."
      },{
        "args":[{
            "type":"string",
            "name":"pValue"
          }],
        "name":"SetForcedHUDSkin",
        "returns":"void",
        "description":"Specify a HUD skin that is forced on for this game mode."
      },{
        "args":[{
            "type":"float",
            "name":"flConstantManaRegen"
          }],
        "name":"SetFountainConstantManaRegen",
        "returns":"void",
        "description":"Set the constant rate that the fountain will regen mana. (-1 for default)"
      },{
        "args":[{
            "type":"float",
            "name":"flPercentageHealthRegen"
          }],
        "name":"SetFountainPercentageHealthRegen",
        "returns":"void",
        "description":"Set the percentage rate that the fountain will regen health. (-1 for default)"
      },{
        "args":[{
            "type":"float",
            "name":"flPercentageManaRegen"
          }],
        "name":"SetFountainPercentageManaRegen",
        "returns":"void",
        "description":"Set the percentage rate that the fountain will regen mana. (-1 for default)"
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetFreeCourierModeEnabled",
        "returns":"void",
        "description":"If set to true, enable 7.23 free courier mode."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetFriendlyBuildingMoveToEnabled",
        "returns":"void",
        "description":"Allows clicks on friendly buildings to be handled normally."
      },{
        "args":[{
            "type":"bool",
            "name":"bGive"
          }],
        "name":"SetGiveFreeTPOnDeath",
        "returns":"void",
        "description":"bool bGive"
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetGoldSoundDisabled",
        "returns":"void",
        "description":"Turn the sound when gold is acquired off/on."
      },{
        "args":[{
            "type":"int",
            "name":"iHUDElement"
          },{
            "type":"bool",
            "name":"bVisible"
          }],
        "name":"SetHUDVisible",
        "returns":"void",
        "description":"Set the HUD element visibility."
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"SetHealingFilter",
        "returns":"void",
        "description":"Set a filter function to control the behavior when a unit heals. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetHudCombatEventsDisabled",
        "returns":"void",
        "description":"Specify whether the default combat events will show in the HUD."
      },{
        "args":[{
            "type":"int",
            "name":"nAmount"
          }],
        "name":"SetInnateMeleeDamageBlockAmount",
        "returns":"void",
        "description":"Set the amount blocked innately by melee heroes."
      },{
        "args":[{
            "type":"int",
            "name":"nPerLevelAmount"
          }],
        "name":"SetInnateMeleeDamageBlockPerLevelAmount",
        "returns":"void",
        "description":"Set the amount innately blocked by melee heroes gained per level."
      },{
        "args":[{
            "type":"int",
            "name":"nPercent"
          }],
        "name":"SetInnateMeleeDamageBlockPercent",
        "returns":"void",
        "description":"Set the percent chance a melee hero will innately block damage."
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"SetItemAddedToInventoryFilter",
        "returns":"void",
        "description":"Set a filter function to control what happens to items that are added to an inventory, return false to cancel the event"
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetKillableTombstones",
        "returns":"void",
        "description":"Set whether tombstones can be channeled to be removed by enemy heroes."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetKillingSpreeAnnouncerDisabled",
        "returns":"void",
        "description":"Mutes the in-game killing spree announcer."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetLoseGoldOnDeath",
        "returns":"void",
        "description":"Use to disable gold loss on death."
      },{
        "args":[{
            "type":"int",
            "name":"nMaxSpeed"
          }],
        "name":"SetMaximumAttackSpeed",
        "returns":"void",
        "description":"Set the maximum attack speed for units."
      },{
        "args":[{
            "type":"int",
            "name":"nMinSpeed"
          }],
        "name":"SetMinimumAttackSpeed",
        "returns":"void",
        "description":"Set the minimum attack speed for units."
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"SetModifierGainedFilter",
        "returns":"void",
        "description":"Set a filter function to control modifiers that are gained, return false to destroy modifier."
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"SetModifyExperienceFilter",
        "returns":"void",
        "description":"Set a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"SetModifyGoldFilter",
        "returns":"void",
        "description":"Set a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "type":"bool",
            "name":"bEnable"
          }],
        "name":"SetNeutralItemHideUndiscoveredEnabled",
        "returns":"void",
        "description":"When enabled, undiscovered items in the neutral item stash are hidden."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnable"
          }],
        "name":"SetNeutralStashEnabled",
        "returns":"void",
        "description":"Allow items to be sent to the neutral stash."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnable"
          }],
        "name":"SetNeutralStashTeamViewOnlyEnabled",
        "returns":"void",
        "description":"When enabled, the all neutral items tab cannot be viewed."
      },{
        "args":[{
            "type":"handle",
            "name":"hOverrideEntity"
          }],
        "name":"SetOverrideSelectionEntity",
        "returns":"void",
        "description":"Set an override for the default selection entity, instead of each player's hero."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetPauseEnabled",
        "returns":"void",
        "description":"Set pausing enabled/disabled"
      },{
        "args":[{
            "type":"bool",
            "name":"bFilter"
          }],
        "name":"SetPlayerHeroAvailabilityFiltered",
        "returns":"void",
        "description":"bool bFilter"
      },{
        "args":[{
            "type":"float",
            "name":"flInterval"
          }],
        "name":"SetPowerRuneSpawnInterval",
        "returns":"void",
        "description":"Set power rune spawn rate"
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetRandomHeroBonusItemGrantDisabled",
        "returns":"void",
        "description":"Disables bonus items for randoming a hero."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetRecommendedItemsDisabled",
        "returns":"void",
        "description":"Turn the panel for showing recommended items at the shop off/on."
      },{
        "args":[{
            "type":"bool",
            "name":"bRemove"
          }],
        "name":"SetRemoveIllusionsOnDeath",
        "returns":"void",
        "description":"Make it so illusions are immediately removed upon death, rather than sticking around for a few seconds."
      },{
        "args":[{
            "type":"float",
            "name":"flValue"
          }],
        "name":"SetRespawnTimeScale",
        "returns":"void",
        "description":"Sets the scale applied to non-fixed respawn times. 1 = default DOTA respawn calculations."
      },{
        "args":[{
            "type":"int",
            "name":"nRune"
          },{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetRuneEnabled",
        "returns":"void",
        "description":"Set if a given type of rune is enabled."
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"SetRuneSpawnFilter",
        "returns":"void",
        "description":"Set a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetSelectionGoldPenaltyEnabled",
        "returns":"void",
        "description":"Enable/disable gold penalty for late picking."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnable"
          }],
        "name":"SetSendToStashEnabled",
        "returns":"void",
        "description":"Allow items to be sent to the stash."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetStashPurchasingDisabled",
        "returns":"void",
        "description":"Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items."
      },{
        "args":[{
            "type":"bool",
            "name":"bDisabled"
          }],
        "name":"SetStickyItemDisabled",
        "returns":"void",
        "description":"Hide the sticky item in the quickbuy."
      },{
        "args":[{
            "type":"string",
            "name":"pItemName"
          }],
        "name":"SetTPScrollSlotItemOverride",
        "returns":"void",
        "description":"Sets the item which goes in the TP scroll slot"
      },{
        "args":[{
            "type":"int",
            "name":"iTeam"
          },{
            "type":"int",
            "name":"nValue"
          }],
        "name":"SetTopBarTeamValue",
        "returns":"void",
        "description":"Set the team values on the top game bar."
      },{
        "args":[{
            "type":"bool",
            "name":"bOverride"
          }],
        "name":"SetTopBarTeamValuesOverride",
        "returns":"void",
        "description":"Override the values of the team values on the top game bar."
      },{
        "args":[{
            "type":"bool",
            "name":"bVisible"
          }],
        "name":"SetTopBarTeamValuesVisible",
        "returns":"void",
        "description":"Turning on/off the team values on the top game bar."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetTowerBackdoorProtectionEnabled",
        "returns":"void",
        "description":"Enables/Disables tower backdoor protection."
      },{
        "args":[{
            "type":"handle",
            "name":"hFunction"
          },{
            "type":"handle",
            "name":"hContext"
          }],
        "name":"SetTrackingProjectileFilter",
        "returns":"void",
        "description":"Set a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event)"
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetUnseenFogOfWarEnabled",
        "returns":"void",
        "description":"Enable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetUseCustomHeroLevels",
        "returns":"void",
        "description":"Turn on custom-defined XP values for hero level ups.  The table should be defined before switching this on."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetUseDefaultDOTARuneSpawnLogic",
        "returns":"void",
        "description":"If set to true, use current rune spawn rules.  Either setting respects custom spawn intervals."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetUseTurboCouriers",
        "returns":"void",
        "description":"Enables or disables turbo couriers."
      },{
        "args":[{
            "type":"float",
            "name":"flValue"
          }],
        "name":"SetWaterRuneLastSpawnTime",
        "returns":"void",
        "description":"Sets the time from game start during which water runes spawn"
      },{
        "args":[{
            "type":"bool",
            "name":"bDisable"
          }],
        "name":"SetWeatherEffectsDisabled",
        "returns":"void",
        "description":"Set if weather effects are disabled."
      },{
        "args":[],
        "name":"ShouldGiveFreeTPOnDeath",
        "returns":"bool"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CDOTAGameManager",
    "instance":"DOTAGameManager",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "name":"GetHeroDataByName_Script",
        "returns":"table",
        "description":"Get the hero unit "
      },{
        "args":[{
            "type":"string"
          }],
        "name":"GetHeroIDByName",
        "returns":"int",
        "description":"Get the hero ID given the hero name."
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GetHeroNameByID",
        "returns":"string",
        "description":"Get the hero name given a hero ID."
      },{
        "args":[{
            "type":"string"
          }],
        "name":"GetHeroNameForUnitName",
        "returns":"string",
        "description":"Get the hero name given a unit name."
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GetHeroUnitNameByID",
        "returns":"string",
        "description":"Get the hero unit name given the hero ID."
      }]
  },{
    "kind":"class",
    "name":"CDOTAGameRules",
    "instance":"GameRules",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"bool"
          }],
        "name":"AddBotPlayerWithEntityScript",
        "returns":"handle",
        "description":"Spawn a bot player of the passed hero name, player name, and team."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          }],
        "name":"AddEventMetadataLeaderboardEntry",
        "returns":"bool",
        "description":"Event-only ( string szNameSuffix, int nStars, int nMaxStars, int nExtraData1, int nExtraData2 )"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          },{
            "type":"unsigned"
          }],
        "name":"AddEventMetadataLeaderboardEntryRawScore",
        "returns":"bool",
        "description":"Event-only ( string szNameSuffix, int nScore, int nExtraData1, int nExtraData2 )"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"AddHeroIDToBlacklist",
        "returns":"void",
        "description":"Add the hero ID to the hero blacklist if it is not already present"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"AddHeroIDToWhitelist",
        "returns":"void",
        "description":"Add the hero ID to the hero whitelist if it is not already present"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"AddHeroToBlacklist",
        "returns":"void",
        "description":"Add the hero to the hero blacklist if it is not already present"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          }],
        "name":"AddHeroToPlayerAvailability",
        "returns":"void",
        "description":"Adds hero of given ID to available heroes of player of given ID"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"AddHeroToWhitelist",
        "returns":"void",
        "description":"Add the hero to the hero whitelist if it is not already present"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"AddItemToWhiteList",
        "returns":"void",
        "description":"Add an item to the whitelist"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"AddMinimapDebugPoint",
        "returns":"void",
        "description":"Add a point on the minimap."
      },{
        "args":[{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          },{
            "type":"int"
          }],
        "name":"AddMinimapDebugPointForTeam",
        "returns":"void",
        "description":"Add a point on the minimap for a specific team."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"BeginNightstalkerNight",
        "returns":"void",
        "description":"Begin night stalker night."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"BeginTemporaryNight",
        "returns":"void",
        "description":"Begin temporary night."
      },{
        "args":[],
        "name":"BotPopulate",
        "returns":"void",
        "description":"Fills all the teams with bots if cheat mode is enabled."
      },{
        "args":[],
        "name":"ClearHeroBlacklist",
        "returns":"void",
        "description":"Clears the hero blacklist"
      },{
        "args":[],
        "name":"ClearHeroWhitelist",
        "returns":"void",
        "description":"Clears the hero whitelist"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"ClearPlayerHeroAvailability",
        "returns":"void",
        "description":"Clears available heroes of player of given ID"
      },{
        "args":[],
        "name":"ClearRiverPaint",
        "returns":"void",
        "description":"Clears the current river paint"
      },{
        "args":[],
        "name":"Defeated",
        "returns":"void",
        "description":"Kills the ancient, etc."
      },{
        "args":[],
        "name":"DidMatchSignoutTimeOut",
        "returns":"bool",
        "description":"true when we have waited some time after end of the game and not received signout"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"EnableCustomGameSetupAutoLaunch",
        "returns":"void",
        "description":"Enabled (true) or disable (false) auto launch for custom game setup."
      },{
        "args":[{
            "type":"int"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"handle"
          },{
            "type":"unsigned"
          }],
        "name":"ExecuteTeamPing",
        "returns":"void",
        "description":"Sends a minimap ping to all players on the team"
      },{
        "args":[],
        "name":"FinishCustomGameSetup",
        "returns":"void",
        "description":"Indicate that the custom game setup phase is complete, and advance to the game."
      },{
        "args":[],
        "name":"ForceCreepSpawn",
        "returns":"void",
        "description":"Spawn the next wave of creeps."
      },{
        "args":[],
        "name":"ForceGameStart",
        "returns":"void",
        "description":"Transition game state to DOTA_GAMERULES_STATE_GAME_IN_PROGRESS"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GetAnnouncer",
        "returns":"handle",
        "description":"Get the announcer for a team"
      },{
        "args":[],
        "name":"GetBannedHeroIDs",
        "returns":"table",
        "description":"Returns the hero unit IDs banned in this game, if any"
      },{
        "args":[],
        "name":"GetBannedHeroes",
        "returns":"table",
        "description":"Returns the hero unit names banned in this game, if any"
      },{
        "args":[],
        "name":"GetCustomGameDifficulty",
        "returns":"int",
        "description":"Returns the difficulty level of the custom game mode"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GetCustomGameTeamMaxPlayers",
        "returns":"int",
        "description":"Get whether a team is selectable during game setup"
      },{
        "args":[{
            "type":"bool"
          },{
            "type":"bool"
          }],
        "name":"GetDOTATime",
        "returns":"float",
        "description":"(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time."
      },{
        "args":[],
        "name":"GetDifficulty",
        "returns":"int",
        "description":"Returns difficulty level of the custom game mode"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GetDroppedItem",
        "returns":"handle",
        "description":"Gets the Xth dropped item"
      },{
        "args":[],
        "name":"GetGameFrameTime",
        "returns":"float",
        "description":"Returns the number of seconds elapsed since the last frame was renderered. This time doesn't count up when the game is paused"
      },{
        "args":[],
        "name":"GetGameModeEntity",
        "returns":"handle",
        "description":"Get the game mode entity"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"GetGameSessionConfigValue",
        "returns":"string",
        "description":"Get a string value from the game session config (map options)"
      },{
        "args":[],
        "name":"GetGameTime",
        "returns":"float",
        "description":"Returns the number of seconds elapsed since map start. This time doesn't count up when the game is paused"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"GetIetmStockDuration",
        "returns":"float",
        "description":"Get the time it takes to add a new item to stock"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"GetItemStockCount",
        "returns":"int",
        "description":"Get the stock count of the item"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"GetItemStockTime",
        "returns":"float",
        "description":"Get the time an item will be added to stock"
      },{
        "args":[],
        "name":"GetMatchSignoutComplete",
        "returns":"bool",
        "description":"Have we received the post match signout message that includes reward information"
      },{
        "args":[],
        "name":"GetNeutralInitialSpawnOffset",
        "returns":"float",
        "description":"Gets the extra offset to initial neutral creep spawn delay"
      },{
        "args":[],
        "name":"GetNextBountyRuneSpawnTime",
        "returns":"float",
        "description":"Gets next bounty rune spawn time"
      },{
        "args":[],
        "name":"GetNextRuneSpawnTime",
        "returns":"float",
        "description":"Gets next rune spawn time"
      },{
        "args":[],
        "name":"GetNianTotalDamageTaken",
        "returns":"int",
        "description":"For New Bloom, get total damage taken by the Nian / Year Beast"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GetPlayerCustomGameAccountRecord",
        "returns":"table",
        "description":"(Preview/Unreleased) Gets the player's custom game account record, as it looked at the start of this session"
      },{
        "args":[],
        "name":"GetStateTransitionTime",
        "returns":"float",
        "description":"Get time remaining between state changes."
      },{
        "args":[],
        "name":"GetTimeOfDay",
        "returns":"float",
        "description":"Get the time of day"
      },{
        "args":[],
        "name":"GetWeatherWindDirection",
        "returns":"Vector",
        "description":"Get Weather Wind Direction Vector"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          }],
        "name":"IncreaseItemStock",
        "returns":"void",
        "description":"Increase an item's stock count, clamped to item max (nTeamNumber, szItemName, nCount, nPlayerID ."
      },{
        "args":[],
        "name":"IsCheatMode",
        "returns":"bool",
        "description":"Are cheats enabled on the server"
      },{
        "args":[],
        "name":"IsDaytime",
        "returns":"bool",
        "description":"Is it day time?"
      },{
        "args":[],
        "name":"IsDev",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsGamePaused",
        "returns":"bool",
        "description":"Returns whether the game is paused."
      },{
        "args":[{
            "type":"string"
          }],
        "name":"IsHeroEnabledViaLists",
        "returns":"bool",
        "description":"Is the hero not blacklisted, and is it either whitelisted or the whitelist is empty?"
      },{
        "args":[],
        "name":"IsHeroRespawnEnabled",
        "returns":"bool",
        "description":"Returns whether hero respawn is enabled."
      },{
        "args":[],
        "name":"IsInBanPhase",
        "returns":"bool",
        "description":"Are we in the ban phase of hero pick?"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"IsItemInWhiteList",
        "returns":"bool",
        "description":"Query an item in the whitelist"
      },{
        "args":[],
        "name":"IsNightstalkerNight",
        "returns":"bool",
        "description":"Is it night stalker night-time?"
      },{
        "args":[],
        "name":"IsSuggestAbilitiesEnabled",
        "returns":"bool",
        "description":"Returns whether Dota Plus ability suggestions are enabled or disabled"
      },{
        "args":[],
        "name":"IsSuggestItemsEnabled",
        "returns":"bool",
        "description":"Returns whether Dota Plus item suggestions are enabled or disabled"
      },{
        "args":[],
        "name":"IsTemporaryNight",
        "returns":"bool",
        "description":"Is it temporarily night-time?"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"LockCustomGameSetupTeamAssignment",
        "returns":"void",
        "description":"Lock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams."
      },{
        "args":[{
            "type":"int"
          }],
        "name":"MakeTeamLose",
        "returns":"void",
        "description":"Makes the specified team lose"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"int"
          }],
        "name":"ModifyGoldFiltered",
        "returns":"int",
        "description":"Like ModifyGold, but will use the gold filter if SetFilterMoreGold has been set true"
      },{
        "args":[],
        "name":"NumDroppedItems",
        "returns":"int",
        "description":"Returns the number of items currently dropped on the ground"
      },{
        "args":[{
            "type":"handle"
          }],
        "name":"PlayerHasCustomGameHostPrivileges",
        "returns":"bool",
        "description":"Whether a player has custom game host privileges (shuffle teams, etc.)"
      },{
        "args":[],
        "name":"Playtesting_UpdateAddOnKeyValues",
        "returns":"void",
        "description":"Updates custom hero, unit and ability KeyValues in memory with the latest values from disk"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"PrepareSpawners",
        "returns":"void",
        "description":"Prepare Dota lane style spawners with a given interval"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"RemoveFakeClient",
        "returns":"void",
        "description":"Removes a fake client"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"RemoveHeroFromBlacklist",
        "returns":"void",
        "description":"Remove the hero from the hero blacklist if present"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"RemoveHeroFromWhitelist",
        "returns":"void",
        "description":"Remove the hero from the hero whitelist if present"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"RemoveHeroIDFromBlacklist",
        "returns":"void",
        "description":"Remove the hero ID from the hero blacklist if present"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"RemoveHeroIDFromWhitelist",
        "returns":"void",
        "description":"Remove the hero ID from the hero whitelist if present"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"RemoveItemFromWhiteList",
        "returns":"void",
        "description":"Remove an item from the whitelist"
      },{
        "args":[],
        "name":"ResetDefeated",
        "returns":"void",
        "description":"Restart after killing the ancient, etc."
      },{
        "args":[],
        "name":"ResetGameTime",
        "returns":"void",
        "description":"Restart gametime from 0"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"ResetPlayer",
        "returns":"void",
        "description":"Resets the player of a given ID."
      },{
        "args":[],
        "name":"ResetToCustomGameSetup",
        "returns":"void",
        "description":"Restart at custom game setup."
      },{
        "args":[],
        "name":"ResetToHeroSelection",
        "returns":"void",
        "description":"Restart the game at hero selection"
      },{
        "args":[],
        "name":"Script_GetMatchID",
        "returns":"uint64",
        "description":"Get the MatchID for this game."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          }],
        "name":"SendCustomMessage",
        "returns":"void",
        "description":"Sends a message on behalf of a player."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          }],
        "name":"SendCustomMessageToTeam",
        "returns":"void",
        "description":"Sends a message on behalf of a player to the specified team."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetAllowOutpostBonuses",
        "returns":"void",
        "description":"Allow Outposts granting XP"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetCreepMinimapIconScale",
        "returns":"void",
        "description":"(flMinimapCreepIconScale) - Scale the creep icons on the minimap."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetCreepSpawningEnabled",
        "returns":"void",
        "description":"Sets whether the regular Dota creeps spawn."
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"handle"
          }],
        "name":"SetCustomGameAccountRecordSaveFunction",
        "returns":"void",
        "description":"(Preview/Unreleased) Sets a callback to handle saving custom game account records (callback is passed a Player ID and should return a flat simple table)"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetCustomGameAllowBattleMusic",
        "returns":"void",
        "description":"Sets a flag to enable/disable the default music handling code for custom games"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetCustomGameAllowHeroPickMusic",
        "returns":"void",
        "description":"Sets a flag to enable/disable the default music handling code for custom games"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetCustomGameAllowMusicAtGameStart",
        "returns":"void",
        "description":"Sets a flag to enable/disable the default music handling code for custom games"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetCustomGameAllowSecondaryAbilitiesOnOtherUnits",
        "returns":"void",
        "description":"Sets a flag to enable/disable the casting secondary abilities from units other than the player's own hero."
      },{
        "args":[{
            "type":"int"
          }],
        "name":"SetCustomGameBansPerTeam",
        "returns":"void",
        "description":"Set number of hero bans each team gets"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"SetCustomGameDifficulty",
        "returns":"void",
        "description":"Set the difficulty level of the custom game mode"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetCustomGameEndDelay",
        "returns":"void",
        "description":"Sets the game end delay."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetCustomGameSetupAutoLaunchDelay",
        "returns":"void",
        "description":"Set the amount of time to wait for auto launch."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetCustomGameSetupRemainingTime",
        "returns":"void",
        "description":"Set the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetCustomGameSetupTimeout",
        "returns":"void",
        "description":"Setup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          }],
        "name":"SetCustomGameTeamMaxPlayers",
        "returns":"void",
        "description":"Set whether a team is selectable during game setup"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"SetCustomVictoryMessage",
        "returns":"void",
        "description":"Sets the victory message."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetCustomVictoryMessageDuration",
        "returns":"void",
        "description":"Sets the victory message duration."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetEnableAlternateHeroGrids",
        "returns":"void",
        "description":"Allow alternate hero grids to be used (DOTA+, etc).  True by default."
      },{
        "args":[{
            "type":"handle"
          }],
        "name":"SetEventMetadataCustomTable",
        "returns":"bool",
        "description":"Event-only ( table hMetadataTable )"
      },{
        "args":[{
            "type":"handle"
          }],
        "name":"SetEventSignoutCustomTable",
        "returns":"bool",
        "description":"Event-only ( table hMetadataTable )"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetFilterMoreGold",
        "returns":"void",
        "description":"Sets whether to filter more gold events than normal"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetFirstBloodActive",
        "returns":"void",
        "description":"Sets whether First Blood has been triggered."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetGameTimeFrozen",
        "returns":"void",
        "description":"Freeze the game time."
      },{
        "args":[{
            "type":"int"
          }],
        "name":"SetGameWinner",
        "returns":"void",
        "description":"Makes the specified team win"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"SetGlyphCooldown",
        "returns":"void",
        "description":"Set Glyph cooldown for team"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"SetGoldPerTick",
        "returns":"void",
        "description":"Set the auto gold increase per timed interval."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetGoldTickTime",
        "returns":"void",
        "description":"Set the time interval between auto gold increases."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetHeroMinimapIconScale",
        "returns":"void",
        "description":"(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetHeroRespawnEnabled",
        "returns":"void",
        "description":"Control if the normal DOTA hero respawn rules apply."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetHeroSelectPenaltyTime",
        "returns":"void",
        "description":"Sets amount of penalty time before randoming a hero"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetHeroSelectionTime",
        "returns":"void",
        "description":"Sets the amount of time players have to pick their hero."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetHideBlacklistedHeroes",
        "returns":"void",
        "description":"Should blacklisted heroes be hidden, or just dimmed, in hero picking?"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetHideKillMessageHeaders",
        "returns":"void",
        "description":"Sets whether the multikill, streak, and first-blood banners appear at the top of the screen."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetIgnoreLobbyTeamsInCustomGame",
        "returns":"void",
        "description":"Set whether custom and event games should ignore Lobby teams when assigning players to teams. Defaults to true."
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"SetItemStockCount",
        "returns":"void",
        "description":"Set the stock count of the item"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetNeutralInitialSpawnOffset",
        "returns":"void",
        "description":"Sets the extra offset to initial neutral creep spawn delay"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetNextBountyRuneSpawnTime",
        "returns":"void",
        "description":"Sets next bounty rune spawn time"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetNextRuneSpawnTime",
        "returns":"void",
        "description":"Sets next rune spawn time"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"int"
          }],
        "name":"SetOverlayHealthBarUnit",
        "returns":"void",
        "description":"Show this unit's health on the overlay health bar"
      },{
        "args":[{
            "type":"handle"
          }],
        "name":"SetPostGameColumns",
        "returns":"bool",
        "description":"Set columns to show in post game"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"SetPostGameLayout",
        "returns":"void",
        "description":"Configure post game to be single or double column layout"
      },{
        "args":[{
            "type":"handle"
          }],
        "name":"SetPostGameTeamScores",
        "returns":"bool",
        "description":"Set score value for each team. First element is for DOTA_TEAM_GOODGUYS."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetPostGameTime",
        "returns":"void",
        "description":"Sets the amount of time players have between the game ending and the server disconnecting them."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetPreGameTime",
        "returns":"void",
        "description":"Sets the amount of time players have between picking their hero and game start."
      },{
        "args":[{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"SetRiverPaint",
        "returns":"void",
        "description":"Paints the river for a duration"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetRuneMinimapIconScale",
        "returns":"void",
        "description":"(flMinimapRuneIconScale) - Scale the rune icons on the minimap."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetRuneSpawnTime",
        "returns":"void",
        "description":"Sets the amount of time between rune spawns."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetSafeToLeave",
        "returns":"void",
        "description":"(bSafeToLeave) - Mark this game as safe to leave."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetSameHeroSelectionEnabled",
        "returns":"void",
        "description":"When true, players can repeatedly pick the same hero."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetShowcaseTime",
        "returns":"void",
        "description":"Sets the amount of time players have between the strategy phase and entering the pre-game phase."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetSpeechUseSpawnInsteadOfRespawnConcept",
        "returns":"void",
        "description":"Set whether to speak a Spawn concept instead of a Respawn concept on respawn."
      },{
        "args":[{
            "type":"int"
          }],
        "name":"SetStartingGold",
        "returns":"void",
        "description":"Set the starting gold amount."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetStrategyTime",
        "returns":"void",
        "description":"Sets the amount of time players have between the hero selection and entering the showcase phase."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetSuggestAbilitiesEnabled",
        "returns":"void",
        "description":"Sets Dota Plus ability suggestions enabled or disabled"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetSuggestItemsEnabled",
        "returns":"void",
        "description":"Sets Dota Plus ability item enabled or disabled"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetTimeOfDay",
        "returns":"void",
        "description":"Set the time of day."
      },{
        "args":[{
            "type":"float"
          }],
        "name":"SetTreeRegrowTime",
        "returns":"void",
        "description":"Sets the tree regrow time in seconds."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetUseBaseGoldBountyOnHeroes",
        "returns":"void",
        "description":"Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetUseCustomHeroXPValues",
        "returns":"void",
        "description":"Allows heroes in the map to give a specific amount of XP (this value must be set)."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetUseUniversalShopMode",
        "returns":"void",
        "description":"When true, all items are available at as long as any shop is in range."
      },{
        "args":[{
            "type":"Vector"
          }],
        "name":"SetWeatherWindDirection",
        "returns":"void",
        "description":"Set Weather Wind Direction Vector"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetWhiteListEnabled",
        "returns":"void",
        "description":"Item whitelist functionality enable/disable"
      },{
        "args":[],
        "name":"ShouldHideBlacklistedHeroes",
        "returns":"bool",
        "description":"Are blacklisted heroes hidden, or just dimmed, in hero picking?"
      },{
        "args":[],
        "name":"SpawnAndReleaseCreeps",
        "returns":"void",
        "description":"Spawn and release the next creep wave from Dota lane style spawners."
      },{
        "args":[],
        "name":"SpawnNeutralCreeps",
        "returns":"void",
        "description":"Spawn and release the next set of neutral camps."
      },{
        "args":[],
        "name":"State_Get",
        "returns":"int",
        "description":"Get the current Gamerules state"
      }]
  },{
    "kind":"class",
    "name":"CDOTAPlayerController",
    "members":[{
        "args":[{
            "type":"handle",
            "name":"hHero"
          }],
        "name":"CheckForCourierSpawning",
        "returns":"handle",
        "description":"Attempt to spawn the appropriate couriers for this mode."
      },{
        "args":[],
        "name":"GetAssignedHero",
        "returns":"handle",
        "description":"Get the player's hero."
      },{
        "args":[],
        "name":"GetPlayerID",
        "returns":"int",
        "description":"Get the player's official PlayerID; notably is -1 when the player isn't yet on a team."
      },{
        "args":[],
        "name":"MakeRandomHeroSelection",
        "returns":"void",
        "description":"Randoms this player's hero."
      },{
        "args":[{
            "type":"handle",
            "name":"hHero"
          }],
        "name":"SetAssignedHeroEntity",
        "returns":"void",
        "description":"Sets this player's hero ."
      },{
        "args":[{
            "type":"handle",
            "name":"hEntity"
          }],
        "name":"SetKillCamUnit",
        "returns":"void",
        "description":"Set the kill cam unit for this hero."
      },{
        "args":[{
            "type":"int",
            "name":"nMusicStatus"
          },{
            "type":"float",
            "name":"flIntensity"
          }],
        "name":"SetMusicStatus",
        "returns":"void",
        "description":"(nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off."
      },{
        "args":[{
            "type":"string",
            "name":"pszHeroName"
          }],
        "name":"SetSelectedHero",
        "returns":"void",
        "description":"Sets this player's hero selection."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          }],
        "name":"SpawnCourierAtPosition",
        "returns":"handle",
        "description":"Spawn a courier for this player at the given position."
      }],
    "extend":"CBaseAnimatingActivity"
  },{
    "kind":"class",
    "name":"CDOTATutorial",
    "instance":"Tutorial",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"bool"
          }],
        "name":"AddBot",
        "returns":"bool",
        "description":"Add a computer controlled bot."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"AddQuest",
        "returns":"void",
        "description":"Add a quest to the quest log"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"AddShopWhitelistItem",
        "returns":"void",
        "description":"Add an item to the shop whitelist."
      },{
        "args":[{
            "type":"string"
          }],
        "name":"CompleteQuest",
        "returns":"void",
        "description":"Complete a quest,"
      },{
        "args":[{
            "type":"Vector"
          }],
        "name":"CreateLocationTask",
        "returns":"void",
        "description":"Add a task to move to a specific location"
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"EnableCreepAggroViz",
        "returns":"void",
        "description":"Alert the player when a creep becomes agro to their hero."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"EnablePlayerOffscreenTip",
        "returns":"void",
        "description":"Enable the tip to alert players how to find their hero."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"EnableTowerAggroViz",
        "returns":"void",
        "description":"Alert the player when a tower becomes agro to their hero."
      },{
        "args":[],
        "name":"FinishTutorial",
        "returns":"void",
        "description":"End the tutorial."
      },{
        "args":[],
        "name":"ForceGameStart",
        "returns":"void",
        "description":"Force the start of the game."
      },{
        "args":[],
        "name":"GetTimeFrozen",
        "returns":"bool",
        "description":"Is our time frozen?"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"IsItemInWhiteList",
        "returns":"bool",
        "description":"Is this item currently in the white list."
      },{
        "args":[{
            "type":"string"
          }],
        "name":"RemoveShopWhitelistItem",
        "returns":"void",
        "description":"Remove an item from the shop whitelist."
      },{
        "args":[{
            "type":"string"
          }],
        "name":"SelectHero",
        "returns":"void",
        "description":"Select a hero for the local player"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"SelectPlayerTeam",
        "returns":"void",
        "description":"Select the team for the local player"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"SetItemGuide",
        "returns":"void",
        "description":"Set the current item guide."
      },{
        "args":[{
            "type":"int"
          },{
            "type":"bool"
          }],
        "name":"SetOrModifyPlayerGold",
        "returns":"void",
        "description":"Set gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"SetQuickBuy",
        "returns":"void",
        "description":"Set players quick buy item."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetShopOpen",
        "returns":"void",
        "description":"Set the shop open or closed."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetTimeFrozen",
        "returns":"void",
        "description":"Set if we should freeze time or not."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"SetTutorialConvar",
        "returns":"void",
        "description":"Set a tutorial convar"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"SetTutorialUI",
        "returns":"void",
        "description":"Set the UI to use a reduced version to focus attention to specific elements."
      },{
        "args":[{
            "type":"bool"
          }],
        "name":"SetWhiteListEnabled",
        "returns":"void",
        "description":"Set if we should whitelist shop items."
      },{
        "args":[],
        "name":"StartTutorialMode",
        "returns":"void",
        "description":"Initialize Tutorial Mode"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"UpgradePlayerAbility",
        "returns":"void",
        "description":"Upgrade a specific ability for the local hero"
      }]
  },{
    "kind":"class",
    "name":"CDOTAVoteSystem",
    "instance":"VoteSystem",
    "members":[{
        "args":[{
            "type":"handle"
          }],
        "name":"StartVote",
        "returns":"void",
        "description":"Starts a vote, based upon a table of parameters"
      }]
  },{
    "kind":"class",
    "name":"CDOTA_Ability_Aghanim_Spear",
    "members":[{
        "args":[{
            "type":"Vector",
            "name":"vTarget"
          },{
            "type":"Vector",
            "name":"vStart"
          }],
        "name":"LaunchSpear",
        "returns":"void",
        "description":"Launch Spear to a target position from a source position"
      }],
    "extend":"CDOTABaseAbility"
  },{
    "kind":"class",
    "name":"CDOTA_Ability_Animation_Attack",
    "members":[{
        "args":[{
            "type":"float",
            "name":"flRate"
          }],
        "name":"SetPlaybackRate",
        "returns":"void",
        "description":"Override playbackrate"
      }],
    "extend":"CDOTABaseAbility"
  },{
    "kind":"class",
    "name":"CDOTA_Ability_Animation_TailSpin",
    "members":[{
        "args":[{
            "type":"float",
            "name":"flRate"
          }],
        "name":"SetPlaybackRate",
        "returns":"void",
        "description":"Override playbackrate"
      }],
    "extend":"CDOTABaseAbility"
  },{
    "kind":"class",
    "name":"CDOTA_Ability_DataDriven",
    "members":[{
        "args":[{
            "type":"handle",
            "name":"hCaster"
          },{
            "type":"handle",
            "name":"hTarget"
          },{
            "type":"string",
            "name":"pszModifierName"
          },{
            "type":"handle",
            "name":"hModifierTable"
          }],
        "name":"ApplyDataDrivenModifier",
        "returns":"handle",
        "description":"Applies a data driven modifier to the target"
      },{
        "args":[{
            "type":"handle",
            "name":"hCaster"
          },{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"string",
            "name":"pszModifierName"
          },{
            "type":"handle",
            "name":"hModifierTable"
          }],
        "name":"ApplyDataDrivenThinker",
        "returns":"handle",
        "description":"Applies a data driven thinker at the location"
      }],
    "extend":"CDOTABaseAbility"
  },{
    "kind":"class",
    "name":"CDOTA_Ability_Lua",
    "members":[{
        "args":[],
        "name":"CastFilterResult",
        "returns":"int",
        "description":"Determine whether an issued command with no target is valid."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          }],
        "name":"CastFilterResultLocation",
        "returns":"int",
        "description":"(Vector vLocation) Determine whether an issued command on a location is valid."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"CastFilterResultTarget",
        "returns":"int",
        "description":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
      },{
        "args":[],
        "name":"GetAOERadius",
        "returns":"float",
        "description":"Controls the size of the AOE casting cursor."
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetAbilityChargeRestoreTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetAssociatedPrimaryAbilities",
        "returns":"string",
        "description":"Returns abilities that are stolen simultaneously, or otherwise related in functionality."
      },{
        "args":[],
        "name":"GetAssociatedSecondaryAbilities",
        "returns":"string",
        "description":"Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities."
      },{
        "args":[],
        "name":"GetBehavior",
        "returns":"uint64",
        "description":"Return cast behavior type of this ability."
      },{
        "args":[],
        "name":"GetCastAnimation",
        "returns":"int",
        "description":"Return casting animation of this ability."
      },{
        "args":[],
        "name":"GetCastPoint",
        "returns":"float",
        "description":"Return cast point of this ability."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"GetCastRange",
        "returns":"int",
        "description":"Return cast range of this ability."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          },{
            "type":"int",
            "name":"iPseudoCastRange"
          }],
        "name":"GetCastRangeBonus",
        "returns":"int"
      },{
        "args":[],
        "name":"GetChannelAnimation",
        "returns":"int",
        "description":"Return channel animation of this ability."
      },{
        "args":[],
        "name":"GetChannelStartTime",
        "returns":"float",
        "description":"Return the channel start time of this ability."
      },{
        "args":[],
        "name":"GetChannelTime",
        "returns":"float",
        "description":"Return the channel time of this ability."
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetChannelledManaCostPerSecond",
        "returns":"int",
        "description":"Return mana cost at the given level per second while channeling (-1 is current)."
      },{
        "args":[],
        "name":"GetConceptRecipientType",
        "returns":"int",
        "description":"Return who hears speech when this spell is cast."
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetCooldown",
        "returns":"float",
        "description":"Return cooldown of this ability."
      },{
        "args":[],
        "name":"GetCustomCastError",
        "returns":"string",
        "description":"Return the error string of a failed command with no target."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          }],
        "name":"GetCustomCastErrorLocation",
        "returns":"string",
        "description":"(Vector vLocation) Return the error string of a failed command on a location."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"GetCustomCastErrorTarget",
        "returns":"string",
        "description":"(HSCRIPT hTarget) Return the error string of a failed command on a target."
      },{
        "args":[{
            "type":"int",
            "name":"nReason"
          }],
        "name":"GetCustomHudErrorMessage",
        "returns":"string",
        "description":"(DOTA_INVALID_ORDERS nReason) Return the error string of a failed order."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"GetEffectiveCastRange",
        "returns":"int",
        "description":"Return cast range of this ability, accounting for modifiers."
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetGoldCost",
        "returns":"int",
        "description":"Return gold cost at the given level (-1 is current)."
      },{
        "args":[],
        "name":"GetIntrinsicModifierName",
        "returns":"string",
        "description":"Returns the name of the modifier applied passively by this ability."
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetManaCost",
        "returns":"int",
        "description":"Return mana cost at the given level (-1 is current)."
      },{
        "args":[],
        "name":"GetPlaybackRateOverride",
        "returns":"float",
        "description":"Return the animation rate of the cast animation."
      },{
        "args":[],
        "name":"IsAttributeBonus",
        "returns":"bool",
        "description":"Is this ability an Attribute Bonus."
      },{
        "args":[{
            "type":"handle",
            "name":"hEntity"
          }],
        "name":"IsCosmetic",
        "returns":"bool",
        "description":"Is this a cosmetic only ability?"
      },{
        "args":[],
        "name":"IsHiddenAbilityCastable",
        "returns":"bool",
        "description":"Returns true if this ability can be used when not on the action panel."
      },{
        "args":[],
        "name":"IsHiddenWhenStolen",
        "returns":"bool",
        "description":"Returns true if this ability is hidden when stolen by Spell Steal."
      },{
        "args":[],
        "name":"IsRefreshable",
        "returns":"bool",
        "description":"Returns true if this ability is refreshed by Refresher Orb."
      },{
        "args":[],
        "name":"IsStealable",
        "returns":"bool",
        "description":"Returns true if this ability can be stolen by Spell Steal."
      },{
        "args":[],
        "name":"OnAbilityPhaseInterrupted",
        "returns":"void",
        "description":"Cast time did not complete successfully."
      },{
        "args":[],
        "name":"OnAbilityPhaseStart",
        "returns":"bool",
        "description":"Cast time begins (return true for successful cast)."
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"bool",
            "name":"bCtrlHeld"
          }],
        "name":"OnAbilityPinged",
        "returns":"void",
        "description":"The ability was pinged (nPlayerID, bCtrlHeld)."
      },{
        "args":[{
            "type":"handle",
            "name":"hUpgradeAbility"
          }],
        "name":"OnAbilityUpgrade",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bInterrupted"
          }],
        "name":"OnChannelFinish",
        "returns":"void",
        "description":"(bool bInterrupted) Channel finished."
      },{
        "args":[{
            "type":"float",
            "name":"flInterval"
          }],
        "name":"OnChannelThink",
        "returns":"void",
        "description":"(float flInterval) Channeling is taking place."
      },{
        "args":[],
        "name":"OnHeroCalculateStatBonus",
        "returns":"void",
        "description":"Caster (hero only) gained a level, skilled an ability, or received a new stat bonus."
      },{
        "args":[{
            "type":"handle",
            "name":"unit"
          },{
            "type":"handle",
            "name":"attacker"
          },{
            "type":"handle",
            "name":"table"
          }],
        "name":"OnHeroDiedNearby",
        "returns":"void",
        "description":"A hero has died in the vicinity (ie Urn), takes table of params."
      },{
        "args":[],
        "name":"OnHeroLevelUp",
        "returns":"void",
        "description":"Caster gained a level."
      },{
        "args":[],
        "name":"OnInventoryContentsChanged",
        "returns":"void",
        "description":"Caster inventory changed."
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"OnItemEquipped",
        "returns":"void",
        "description":"( HSCRIPT hItem ) Caster equipped item."
      },{
        "args":[],
        "name":"OnOwnerDied",
        "returns":"void",
        "description":"Caster died."
      },{
        "args":[],
        "name":"OnOwnerSpawned",
        "returns":"void",
        "description":"Caster respawned or spawned for the first time."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          },{
            "type":"Vector",
            "name":"vLocation"
          }],
        "name":"OnProjectileHit",
        "returns":"bool",
        "description":"(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          },{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"int",
            "name":"iProjectileHandle"
          }],
        "name":"OnProjectileHitHandle",
        "returns":"bool",
        "description":"(HSCRIPT hTarget, Vector vLocation, int nHandle) Projectile has collided with a given target or reached its destination (target is invalid)."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          },{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"handle",
            "name":"table"
          }],
        "name":"OnProjectileHit_ExtraData",
        "returns":"bool",
        "description":"(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid)."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          }],
        "name":"OnProjectileThink",
        "returns":"void",
        "description":"(Vector vLocation) Projectile is actively moving."
      },{
        "args":[{
            "type":"int",
            "name":"iProjectileHandle"
          }],
        "name":"OnProjectileThinkHandle",
        "returns":"void",
        "description":"(int nProjectileHandle) Projectile is actively moving."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"handle",
            "name":"table"
          }],
        "name":"OnProjectileThink_ExtraData",
        "returns":"void",
        "description":"(Vector vLocation, table kv ) Projectile is actively moving."
      },{
        "args":[],
        "name":"OnSpellStart",
        "returns":"void",
        "description":"Cast time finished, spell effects begin."
      },{
        "args":[{
            "type":"handle",
            "name":"hSourceAbility"
          }],
        "name":"OnStolen",
        "returns":"void",
        "description":"( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal."
      },{
        "args":[],
        "name":"OnToggle",
        "returns":"void",
        "description":"Ability is toggled on/off."
      },{
        "args":[],
        "name":"OnUnStolen",
        "returns":"void",
        "description":"Special behavior when lost by Spell Steal."
      },{
        "args":[],
        "name":"OnUpgrade",
        "returns":"void",
        "description":"Ability gained a level."
      },{
        "args":[],
        "name":"OtherAbilitiesAlwaysInterruptChanneling",
        "returns":"bool"
      },{
        "args":[],
        "name":"ProcsMagicStick",
        "returns":"bool",
        "description":"Returns true if this ability will generate magic stick charges for nearby enemies."
      },{
        "args":[],
        "name":"RequiresFacing",
        "returns":"bool",
        "description":"Does this ability need the caster to face the target before executing?"
      },{
        "args":[],
        "name":"ResetToggleOnRespawn",
        "returns":"bool",
        "description":"Returns true if this ability should return to the default toggle state when its parent respawns."
      },{
        "args":[],
        "name":"SpeakTrigger",
        "returns":"int",
        "description":"Return the type of speech used."
      }],
    "extend":"CDOTABaseAbility"
  },{
    "kind":"class",
    "name":"CDOTA_Ability_Nian_Dive",
    "members":[{
        "args":[{
            "type":"float",
            "name":"flRate"
          }],
        "name":"SetPlaybackRate",
        "returns":"void",
        "description":"Override playbackrate"
      }],
    "extend":"CDOTABaseAbility"
  },{
    "kind":"class",
    "name":"CDOTA_Ability_Nian_Leap",
    "members":[{
        "args":[{
            "type":"float",
            "name":"flRate"
          }],
        "name":"SetPlaybackRate",
        "returns":"void",
        "description":"Override playbackrate"
      }],
    "extend":"CDOTABaseAbility"
  },{
    "kind":"class",
    "name":"CDOTA_Ability_Nian_Roar",
    "members":[{
        "args":[],
        "name":"GetCastCount",
        "returns":"int",
        "description":"Number of times Nian has used the roar"
      }],
    "extend":"CDOTABaseAbility"
  },{
    "kind":"class",
    "name":"CDOTA_AghsFort_Ability_ArcWardenBoss_TempestDouble",
    "members":[{
        "args":[{
            "type":"int",
            "name":"nDoubles"
          }],
        "name":"SetNumDoubles",
        "returns":"void",
        "description":"Sets the number of doubles to spawn."
      }],
    "extend":"CDOTABaseAbility"
  },{
    "kind":"class",
    "name":"CDOTA_BaseNPC",
    "members":[{
        "args":[{
            "type":"string",
            "name":"pszAbilityName"
          }],
        "name":"AddAbility",
        "returns":"handle",
        "description":"Add an ability to this unit by name."
      },{
        "args":[{
            "type":"string",
            "name":"szName"
          }],
        "name":"AddActivityModifier",
        "returns":"void",
        "description":"Add an activity modifier that affects future StartGesture calls"
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"AddItem",
        "returns":"handle",
        "description":"Add an item to this unit's inventory."
      },{
        "args":[{
            "type":"string",
            "name":"pszItemName"
          }],
        "name":"AddItemByName",
        "returns":"handle",
        "description":"Add an item to this unit's inventory."
      },{
        "args":[{
            "type":"handle",
            "name":"hCaster"
          },{
            "type":"handle",
            "name":"hAbility"
          },{
            "type":"string",
            "name":"pszScriptName"
          },{
            "type":"handle",
            "name":"hModifierTable"
          }],
        "name":"AddNewModifier",
        "returns":"handle",
        "description":"Add a modifier to this unit."
      },{
        "args":[],
        "name":"AddNoDraw",
        "returns":"void",
        "description":"Adds the no draw flag."
      },{
        "args":[{
            "type":"int",
            "name":"iBubble"
          },{
            "type":"string",
            "name":"pszSpeech"
          },{
            "type":"float",
            "name":"flDuration"
          },{
            "type":"unsigned",
            "name":"unOffsetX"
          },{
            "type":"unsigned",
            "name":"unOffsetY"
          }],
        "name":"AddSpeechBubble",
        "returns":"void",
        "description":"Add a speech bubble(1-4 live at a time) to this NPC."
      },{
        "args":[{
            "type":"handle",
            "name":"hAttacker"
          },{
            "type":"handle",
            "name":"hAbility"
          }],
        "name":"AlertNearbyUnits",
        "returns":"void"
      },{
        "args":[],
        "name":"AngerNearbyUnits",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flTime"
          },{
            "type":"float",
            "name":"flTimeDisparityTolerance"
          }],
        "name":"AttackNoEarlierThan",
        "returns":"void"
      },{
        "args":[],
        "name":"AttackReady",
        "returns":"bool"
      },{
        "args":[],
        "name":"BoundingRadius2D",
        "returns":"float"
      },{
        "args":[],
        "name":"CalculateGenericBonuses",
        "returns":"void"
      },{
        "args":[],
        "name":"CanBeSeenByAnyOpposingTeam",
        "returns":"bool"
      },{
        "args":[{
            "type":"handle",
            "name":"hEntity"
          }],
        "name":"CanEntityBeSeenByMyTeam",
        "returns":"bool",
        "description":"Check FoW to see if an entity is visible."
      },{
        "args":[],
        "name":"CanSellItems",
        "returns":"bool",
        "description":"Query if this unit can sell items."
      },{
        "args":[{
            "type":"handle",
            "name":"hAbility"
          },{
            "type":"int",
            "name":"iPlayerIndex"
          }],
        "name":"CastAbilityImmediately",
        "returns":"void",
        "description":"Cast an ability immediately."
      },{
        "args":[{
            "type":"handle",
            "name":"hAbility"
          },{
            "type":"int",
            "name":"iPlayerIndex"
          }],
        "name":"CastAbilityNoTarget",
        "returns":"void",
        "description":"Cast an ability with no target."
      },{
        "args":[{
            "type":"Vector",
            "name":"vPosition"
          },{
            "type":"handle",
            "name":"hAbility"
          },{
            "type":"int",
            "name":"iPlayerIndex"
          }],
        "name":"CastAbilityOnPosition",
        "returns":"void",
        "description":"Cast an ability on a position."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          },{
            "type":"handle",
            "name":"hAbility"
          },{
            "type":"int",
            "name":"iPlayerIndex"
          }],
        "name":"CastAbilityOnTarget",
        "returns":"void",
        "description":"Cast an ability on a target entity."
      },{
        "args":[{
            "type":"handle",
            "name":"hAbility"
          },{
            "type":"int",
            "name":"iPlayerIndex"
          }],
        "name":"CastAbilityToggle",
        "returns":"void",
        "description":"Toggle an ability."
      },{
        "args":[{
            "type":"int",
            "name":"iTeamNum"
          }],
        "name":"ChangeTeam",
        "returns":"void"
      },{
        "args":[],
        "name":"ClearActivityModifiers",
        "returns":"void",
        "description":"Clear Activity modifiers"
      },{
        "args":[],
        "name":"DestroyAllSpeechBubbles",
        "returns":"void"
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"DisassembleItem",
        "returns":"void",
        "description":"Disassemble the passed item in this unit's inventory."
      },{
        "args":[{
            "type":"Vector",
            "name":"vDest"
          },{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"DropItemAtPosition",
        "returns":"void",
        "description":"Drop an item at a given point."
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          },{
            "type":"Vector",
            "name":"vPosition"
          }],
        "name":"DropItemAtPositionImmediate",
        "returns":"void",
        "description":"Immediately drop a carried item at a given position."
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"EjectItemFromStash",
        "returns":"void",
        "description":"Drops the selected item out of this unit's stash."
      },{
        "args":[{
            "type":"Vector",
            "name":"vTarget"
          }],
        "name":"FaceTowards",
        "returns":"void",
        "description":"This unit will be set to face the target point."
      },{
        "args":[{
            "type":"int",
            "name":"nActivity"
          }],
        "name":"FadeGesture",
        "returns":"void",
        "description":"Fade and remove the given gesture activity."
      },{
        "args":[{
            "type":"string",
            "name":"pAbilityName"
          }],
        "name":"FindAbilityByName",
        "returns":"handle",
        "description":"Retrieve an ability by name from the unit."
      },{
        "args":[],
        "name":"FindAllModifiers",
        "returns":"table",
        "description":"Returns a table of all of the modifiers on the NPC."
      },{
        "args":[{
            "type":"string",
            "name":"pszScriptName"
          }],
        "name":"FindAllModifiersByName",
        "returns":"table",
        "description":"Returns a table of all of the modifiers on the NPC with the passed name (modifierName)"
      },{
        "args":[{
            "type":"string",
            "name":"pszItemName"
          }],
        "name":"FindItemInInventory",
        "returns":"handle",
        "description":"Get handle to first item in inventory, else nil."
      },{
        "args":[{
            "type":"string",
            "name":"pszScriptName"
          }],
        "name":"FindModifierByName",
        "returns":"handle",
        "description":"Return a handle to the modifier of the given name if found, else nil (string Name )"
      },{
        "args":[{
            "type":"string",
            "name":"pszScriptName"
          },{
            "type":"handle",
            "name":"hCaster"
          }],
        "name":"FindModifierByNameAndCaster",
        "returns":"handle",
        "description":"Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster )"
      },{
        "args":[{
            "type":"bool",
            "name":"bReincarnate"
          }],
        "name":"ForceKill",
        "returns":"void",
        "description":"Kill this unit immediately."
      },{
        "args":[{
            "type":"int",
            "name":"nActivity"
          }],
        "name":"ForcePlayActivityOnce",
        "returns":"void",
        "description":"Play an activity once, and then go back to idle."
      },{
        "args":[{
            "type":"int",
            "name":"iIndex"
          }],
        "name":"GetAbilityByIndex",
        "returns":"handle",
        "description":"Retrieve an ability by index from the unit."
      },{
        "args":[],
        "name":"GetAbilityCount",
        "returns":"int"
      },{
        "args":[],
        "name":"GetAcquisitionRange",
        "returns":"float",
        "description":"Gets the range at which this unit will auto-acquire."
      },{
        "args":[],
        "name":"GetAdditionalBattleMusicWeight",
        "returns":"float",
        "description":"Combat involving this creature will have this weight added to the music calcuations."
      },{
        "args":[],
        "name":"GetAggroTarget",
        "returns":"handle",
        "description":"Returns this unit's aggro target."
      },{
        "args":[],
        "name":"GetAttackAnimationPoint",
        "returns":"float"
      },{
        "args":[],
        "name":"GetAttackCapability",
        "returns":"int"
      },{
        "args":[],
        "name":"GetAttackDamage",
        "returns":"int",
        "description":"Returns a random integer between the minimum and maximum base damage of the unit."
      },{
        "args":[],
        "name":"GetAttackRangeBuffer",
        "returns":"float",
        "description":"Gets the attack range buffer."
      },{
        "args":[],
        "name":"GetAttackSpeed",
        "returns":"float"
      },{
        "args":[],
        "name":"GetAttackTarget",
        "returns":"handle"
      },{
        "args":[],
        "name":"GetAttacksPerSecond",
        "returns":"float"
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"GetAverageTrueAttackDamage",
        "returns":"int",
        "description":"Returns the average value of the minimum and maximum damage values."
      },{
        "args":[],
        "name":"GetBaseAttackRange",
        "returns":"int"
      },{
        "args":[],
        "name":"GetBaseAttackTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetBaseDamageMax",
        "returns":"int",
        "description":"Get the maximum attack damage of this unit."
      },{
        "args":[],
        "name":"GetBaseDamageMin",
        "returns":"int",
        "description":"Get the minimum attack damage of this unit."
      },{
        "args":[],
        "name":"GetBaseDayTimeVisionRange",
        "returns":"int",
        "description":"Returns the vision range before modifiers."
      },{
        "args":[],
        "name":"GetBaseHealthBarOffset",
        "returns":"int"
      },{
        "args":[],
        "name":"GetBaseHealthRegen",
        "returns":"float"
      },{
        "args":[],
        "name":"GetBaseMagicalResistanceValue",
        "returns":"float",
        "description":"Returns base magical armor value."
      },{
        "args":[],
        "name":"GetBaseMaxHealth",
        "returns":"float",
        "description":"Gets the base max health value."
      },{
        "args":[],
        "name":"GetBaseMoveSpeed",
        "returns":"float"
      },{
        "args":[],
        "name":"GetBaseNightTimeVisionRange",
        "returns":"int",
        "description":"Returns the vision range after modifiers."
      },{
        "args":[],
        "name":"GetBonusManaRegen",
        "returns":"float",
        "description":"This Mana regen is derived from constant bonuses like Basilius."
      },{
        "args":[{
            "type":"bool",
            "name":"bAttack"
          }],
        "name":"GetCastPoint",
        "returns":"float"
      },{
        "args":[],
        "name":"GetCastRangeBonus",
        "returns":"float"
      },{
        "args":[],
        "name":"GetCloneSource",
        "returns":"handle",
        "description":"Get clone source (Meepo Prime, if this is a Meepo)"
      },{
        "args":[],
        "name":"GetCollisionPadding",
        "returns":"float",
        "description":"Returns the size of the collision padding around the hull."
      },{
        "args":[],
        "name":"GetCooldownReduction",
        "returns":"float"
      },{
        "args":[],
        "name":"GetCreationTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetCurrentActiveAbility",
        "returns":"handle",
        "description":"Get the ability this unit is currently casting."
      },{
        "args":[],
        "name":"GetCurrentVisionRange",
        "returns":"int",
        "description":"Gets the current vision range."
      },{
        "args":[],
        "name":"GetCursorCastTarget",
        "returns":"handle"
      },{
        "args":[],
        "name":"GetCursorPosition",
        "returns":"Vector"
      },{
        "args":[],
        "name":"GetCursorTargetingNothing",
        "returns":"bool"
      },{
        "args":[],
        "name":"GetDamageMax",
        "returns":"int",
        "description":"Get the maximum attack damage of this unit."
      },{
        "args":[],
        "name":"GetDamageMin",
        "returns":"int",
        "description":"Get the minimum attack damage of this unit."
      },{
        "args":[],
        "name":"GetDayTimeVisionRange",
        "returns":"int",
        "description":"Returns the vision range after modifiers."
      },{
        "args":[],
        "name":"GetDeathXP",
        "returns":"int",
        "description":"Get the XP bounty on this unit."
      },{
        "args":[],
        "name":"GetDisplayAttackSpeed",
        "returns":"float",
        "description":"Attack speed expressed as constant value"
      },{
        "args":[],
        "name":"GetEvasion",
        "returns":"float"
      },{
        "args":[],
        "name":"GetForceAttackTarget",
        "returns":"handle"
      },{
        "args":[],
        "name":"GetGoldBounty",
        "returns":"int",
        "description":"Get the gold bounty on this unit."
      },{
        "args":[],
        "name":"GetHasteFactor",
        "returns":"float"
      },{
        "args":[],
        "name":"GetHealthDeficit",
        "returns":"int",
        "description":"Returns integer amount of health missing from max."
      },{
        "args":[],
        "name":"GetHealthPercent",
        "returns":"int",
        "description":"Get the current health percent of the unit."
      },{
        "args":[],
        "name":"GetHealthRegen",
        "returns":"float"
      },{
        "args":[],
        "name":"GetHullRadius",
        "returns":"float",
        "description":"Get the collision hull radius of this NPC."
      },{
        "args":[],
        "name":"GetIdealSpeed",
        "returns":"float",
        "description":"Returns speed after all modifiers."
      },{
        "args":[],
        "name":"GetIdealSpeedNoSlows",
        "returns":"float",
        "description":"Returns speed after all modifiers, but excluding those that reduce speed."
      },{
        "args":[],
        "name":"GetIncreasedAttackSpeed",
        "returns":"float"
      },{
        "args":[],
        "name":"GetInitialGoalEntity",
        "returns":"handle",
        "description":"Returns the initial waypoint goal for this NPC."
      },{
        "args":[],
        "name":"GetInitialGoalPosition",
        "returns":"Vector",
        "description":"Get waypoint position for this NPC."
      },{
        "args":[{
            "type":"int",
            "name":"i"
          }],
        "name":"GetItemInSlot",
        "returns":"handle",
        "description":"Returns nth item in inventory slot (index is zero based)."
      },{
        "args":[],
        "name":"GetLastAttackTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetLastDamageTime",
        "returns":"float",
        "description":"Get the last time this NPC took damage"
      },{
        "args":[],
        "name":"GetLastIdleChangeTime",
        "returns":"float",
        "description":"Get the last game time that this unit switched to/from idle state."
      },{
        "args":[],
        "name":"GetLevel",
        "returns":"int",
        "description":"Returns the level of this unit."
      },{
        "args":[],
        "name":"GetMagicalArmorValue",
        "returns":"float",
        "description":"Returns current magical armor value."
      },{
        "args":[],
        "name":"GetMainControllingPlayer",
        "returns":"int",
        "description":"Returns the player ID of the controlling player."
      },{
        "args":[],
        "name":"GetMana",
        "returns":"float",
        "description":"Get the mana on this unit."
      },{
        "args":[],
        "name":"GetManaPercent",
        "returns":"int",
        "description":"Get the percent of mana remaining."
      },{
        "args":[],
        "name":"GetManaRegen",
        "returns":"float"
      },{
        "args":[],
        "name":"GetMaxMana",
        "returns":"float",
        "description":"Get the maximum mana of this unit."
      },{
        "args":[],
        "name":"GetMaximumGoldBounty",
        "returns":"int",
        "description":"Get the maximum gold bounty for this unit."
      },{
        "args":[],
        "name":"GetMinimumGoldBounty",
        "returns":"int",
        "description":"Get the minimum gold bounty for this unit."
      },{
        "args":[],
        "name":"GetModelRadius",
        "returns":"float"
      },{
        "args":[],
        "name":"GetModifierCount",
        "returns":"int",
        "description":"How many modifiers does this unit have?"
      },{
        "args":[{
            "type":"int",
            "name":"nIndex"
          }],
        "name":"GetModifierNameByIndex",
        "returns":"string",
        "description":"Get a modifier name by index."
      },{
        "args":[{
            "type":"string",
            "name":"pszScriptName"
          },{
            "type":"handle",
            "name":"hCaster"
          }],
        "name":"GetModifierStackCount",
        "returns":"int",
        "description":"Gets the stack count of a given modifier."
      },{
        "args":[{
            "type":"float",
            "name":"flBaseSpeed"
          },{
            "type":"bool",
            "name":"bReturnUnslowed"
          }],
        "name":"GetMoveSpeedModifier",
        "returns":"float"
      },{
        "args":[],
        "name":"GetMustReachEachGoalEntity",
        "returns":"bool",
        "description":"Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path."
      },{
        "args":[],
        "name":"GetNeutralSpawnerName",
        "returns":"string",
        "description":"Get the name of this camp's neutral spawner."
      },{
        "args":[],
        "name":"GetNeverMoveToClearSpace",
        "returns":"bool",
        "description":"If set to true, we will never attempt to move this unit to clear space, even when it unphases."
      },{
        "args":[],
        "name":"GetNightTimeVisionRange",
        "returns":"int",
        "description":"Returns the vision range after modifiers."
      },{
        "args":[],
        "name":"GetOpposingTeamNumber",
        "returns":"int"
      },{
        "args":[],
        "name":"GetPaddedCollisionRadius",
        "returns":"float",
        "description":"Get the collision hull radius (including padding) of this NPC."
      },{
        "args":[],
        "name":"GetPhysicalArmorBaseValue",
        "returns":"float",
        "description":"Returns base physical armor value."
      },{
        "args":[{
            "type":"bool",
            "name":"bIgnoreBase"
          }],
        "name":"GetPhysicalArmorValue",
        "returns":"float",
        "description":"Returns current physical armor value."
      },{
        "args":[],
        "name":"GetPlayerOwner",
        "returns":"handle",
        "description":"Returns the player that owns this unit."
      },{
        "args":[],
        "name":"GetPlayerOwnerID",
        "returns":"int",
        "description":"Get the owner player ID for this unit."
      },{
        "args":[],
        "name":"GetProjectileSpeed",
        "returns":"int"
      },{
        "args":[{
            "type":"handle",
            "name":"hNPC"
          }],
        "name":"GetRangeToUnit",
        "returns":"float"
      },{
        "args":[],
        "name":"GetRangedProjectileName",
        "returns":"string"
      },{
        "args":[],
        "name":"GetRemainingPathLength",
        "returns":"float"
      },{
        "args":[],
        "name":"GetSecondsPerAttack",
        "returns":"float"
      },{
        "args":[{
            "type":"bool",
            "name":"bBaseOnly"
          }],
        "name":"GetSpellAmplification",
        "returns":"float"
      },{
        "args":[],
        "name":"GetStatusResistance",
        "returns":"float"
      },{
        "args":[],
        "name":"GetTotalPurchasedUpgradeGoldCost",
        "returns":"int",
        "description":"Get how much gold has been spent on ability upgrades."
      },{
        "args":[],
        "name":"GetUnitLabel",
        "returns":"string"
      },{
        "args":[],
        "name":"GetUnitName",
        "returns":"string",
        "description":"Get the name of this unit."
      },{
        "args":[{
            "type":"float",
            "name":"flMana"
          }],
        "name":"GiveMana",
        "returns":"void",
        "description":"Give mana to this unit, this can be used for mana gained by abilities or item usage."
      },{
        "args":[{
            "type":"string",
            "name":"pszAbilityName"
          }],
        "name":"HasAbility",
        "returns":"bool",
        "description":"See whether this unit has an ability by name."
      },{
        "args":[],
        "name":"HasAnyActiveAbilities",
        "returns":"bool"
      },{
        "args":[],
        "name":"HasAttackCapability",
        "returns":"bool"
      },{
        "args":[],
        "name":"HasFlyMovementCapability",
        "returns":"bool"
      },{
        "args":[],
        "name":"HasFlyingVision",
        "returns":"bool"
      },{
        "args":[],
        "name":"HasGroundMovementCapability",
        "returns":"bool"
      },{
        "args":[],
        "name":"HasInventory",
        "returns":"bool",
        "description":"Does this unit have an inventory."
      },{
        "args":[{
            "type":"string",
            "name":"pItemName"
          }],
        "name":"HasItemInInventory",
        "returns":"bool",
        "description":"See whether this unit has an item by name."
      },{
        "args":[{
            "type":"string",
            "name":"pszScriptName"
          }],
        "name":"HasModifier",
        "returns":"bool",
        "description":"Sees if this unit has a given modifier."
      },{
        "args":[],
        "name":"HasMovementCapability",
        "returns":"bool"
      },{
        "args":[],
        "name":"HasScepter",
        "returns":"bool"
      },{
        "args":[{
            "type":"float",
            "name":"flAmount"
          },{
            "type":"handle",
            "name":"hInflictor"
          }],
        "name":"Heal",
        "returns":"void",
        "description":"Heal this unit."
      },{
        "args":[{
            "type":"float",
            "name":"flAmount"
          },{
            "type":"handle",
            "name":"hInflictor"
          },{
            "type":"bool",
            "name":"bLifesteal"
          },{
            "type":"bool",
            "name":"bAmplify"
          },{
            "type":"handle",
            "name":"hSource"
          },{
            "type":"bool",
            "name":"bSpellLifesteal"
          }],
        "name":"HealWithParams",
        "returns":"void",
        "description":"Heal this unit (with more parameters)"
      },{
        "args":[],
        "name":"Hold",
        "returns":"void",
        "description":"Hold position."
      },{
        "args":[],
        "name":"Interrupt",
        "returns":"void"
      },{
        "args":[],
        "name":"InterruptChannel",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bFindClearSpace"
          }],
        "name":"InterruptMotionControllers",
        "returns":"void"
      },{
        "args":[],
        "name":"IsAlive",
        "returns":"bool",
        "description":"Is this unit alive?"
      },{
        "args":[],
        "name":"IsAncient",
        "returns":"bool",
        "description":"Is this unit an Ancient?"
      },{
        "args":[],
        "name":"IsAttackImmune",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsAttacking",
        "returns":"bool"
      },{
        "args":[{
            "type":"handle",
            "name":"hEntity"
          }],
        "name":"IsAttackingEntity",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsBarracks",
        "returns":"bool",
        "description":"Is this unit a Barracks?"
      },{
        "args":[],
        "name":"IsBlind",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsBlockDisabled",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsBoss",
        "returns":"bool",
        "description":"Is this unit a boss?"
      },{
        "args":[],
        "name":"IsBossCreature",
        "returns":"bool",
        "description":"Is this unit a Boss Creature? (used by custom games)"
      },{
        "args":[],
        "name":"IsBuilding",
        "returns":"bool",
        "description":"Is this unit a building?"
      },{
        "args":[],
        "name":"IsChanneling",
        "returns":"bool",
        "description":"Is this unit currently channeling a spell?"
      },{
        "args":[],
        "name":"IsClone",
        "returns":"bool",
        "description":"Is this unit a clone? (Meepo)"
      },{
        "args":[],
        "name":"IsCommandRestricted",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsConsideredHero",
        "returns":"bool",
        "description":"Is this unit a considered a hero for targeting purposes?"
      },{
        "args":[],
        "name":"IsControllableByAnyPlayer",
        "returns":"bool",
        "description":"Is this unit controlled by any non-bot player?"
      },{
        "args":[],
        "name":"IsCourier",
        "returns":"bool",
        "description":"Is this unit a courier?"
      },{
        "args":[],
        "name":"IsCreature",
        "returns":"bool",
        "description":"Is this a Creature type NPC?"
      },{
        "args":[],
        "name":"IsCreep",
        "returns":"bool",
        "description":"Is this unit a creep?"
      },{
        "args":[],
        "name":"IsCreepHero",
        "returns":"bool",
        "description":"Is this unit a creep hero?"
      },{
        "args":[],
        "name":"IsCurrentlyHorizontalMotionControlled",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsCurrentlyVerticalMotionControlled",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsDisarmed",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsDominated",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsEvadeDisabled",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsFeared",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsFort",
        "returns":"bool",
        "description":"Is this unit an Ancient?"
      },{
        "args":[],
        "name":"IsFrozen",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsHero",
        "returns":"bool",
        "description":"Is this a hero or hero illusion?"
      },{
        "args":[],
        "name":"IsHeroWard",
        "returns":"bool",
        "description":"Is this a Hero Ward?"
      },{
        "args":[],
        "name":"IsHexed",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsIdle",
        "returns":"bool",
        "description":"Is this creature currently idle?"
      },{
        "args":[],
        "name":"IsIllusion",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"nShopType"
          },{
            "type":"bool",
            "name":"bPhysical"
          }],
        "name":"IsInRangeOfShop",
        "returns":"bool",
        "description":"Ask whether this unit is in range of the specified shop ( DOTA_SHOP_TYPE shop, bool bMustBePhysicallyNear"
      },{
        "args":[],
        "name":"IsInvisible",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsInvulnerable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsLowAttackPriority",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsMagicImmune",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsMovementImpaired",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsMoving",
        "returns":"bool",
        "description":"Is this unit moving?"
      },{
        "args":[],
        "name":"IsMuted",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsNeutralUnitType",
        "returns":"bool",
        "description":"Is this a neutral?"
      },{
        "args":[],
        "name":"IsNightmared",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"nTeam"
          }],
        "name":"IsOpposingTeam",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsOther",
        "returns":"bool",
        "description":"Is this unit a ward-type unit?"
      },{
        "args":[],
        "name":"IsOutOfGame",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsOwnedByAnyPlayer",
        "returns":"bool",
        "description":"Is this unit owned by any non-bot player?"
      },{
        "args":[],
        "name":"IsPhantom",
        "returns":"bool",
        "description":"Is this a phantom unit?"
      },{
        "args":[],
        "name":"IsPhantomBlocker",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsPhased",
        "returns":"bool"
      },{
        "args":[{
            "type":"Vector",
            "name":"vPosition"
          },{
            "type":"float",
            "name":"flRange"
          }],
        "name":"IsPositionInRange",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsRangedAttacker",
        "returns":"bool",
        "description":"Is this unit a ranged attacker?"
      },{
        "args":[],
        "name":"IsRealHero",
        "returns":"bool",
        "description":"Is this a real hero?"
      },{
        "args":[],
        "name":"IsReincarnating",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsRooted",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsShrine",
        "returns":"bool",
        "description":"Is this a shrine?"
      },{
        "args":[],
        "name":"IsSilenced",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsSpeciallyDeniable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsSpeciallyUndeniable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsStrongIllusion",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsStunned",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsSummoned",
        "returns":"bool",
        "description":"Is this unit summoned?"
      },{
        "args":[],
        "name":"IsTaunted",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsTempestDouble",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsTower",
        "returns":"bool",
        "description":"Is this a tower?"
      },{
        "args":[],
        "name":"IsUnableToMiss",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsUnselectable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsUntargetable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsWard",
        "returns":"bool",
        "description":"Is this a Ward?"
      },{
        "args":[],
        "name":"IsZombie",
        "returns":"bool",
        "description":"Is this entity an Undying Zombie?"
      },{
        "args":[{
            "type":"handle",
            "name":"hAbility"
          },{
            "type":"handle",
            "name":"hAttacker"
          }],
        "name":"Kill",
        "returns":"void",
        "description":"Kills this NPC, with the params Ability and Attacker."
      },{
        "args":[],
        "name":"MakeIllusion",
        "returns":"void"
      },{
        "args":[],
        "name":"MakePhantomBlocker",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iTeam"
          },{
            "type":"float",
            "name":"flRadius"
          }],
        "name":"MakeVisibleDueToAttack",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iTeam"
          },{
            "type":"float",
            "name":"flDuration"
          }],
        "name":"MakeVisibleToTeam",
        "returns":"void"
      },{
        "args":[],
        "name":"ManageModelChanges",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iDesiredHealthValue"
          },{
            "type":"handle",
            "name":"hAbility"
          },{
            "type":"bool",
            "name":"bLethal"
          },{
            "type":"int",
            "name":"iAdditionalFlags"
          }],
        "name":"ModifyHealth",
        "returns":"void",
        "description":"Sets the health to a specific value, with optional flags or inflictors."
      },{
        "args":[{
            "type":"handle",
            "name":"hNPC"
          }],
        "name":"MoveToNPC",
        "returns":"void",
        "description":"Move to follow a unit."
      },{
        "args":[{
            "type":"handle",
            "name":"hNPC"
          },{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"MoveToNPCToGiveItem",
        "returns":"void",
        "description":"Give an item to another unit."
      },{
        "args":[{
            "type":"Vector",
            "name":"vDest"
          }],
        "name":"MoveToPosition",
        "returns":"void",
        "description":"Issue a Move-To command."
      },{
        "args":[{
            "type":"Vector",
            "name":"vDest"
          }],
        "name":"MoveToPositionAggressive",
        "returns":"void",
        "description":"Issue an Attack-Move-To command."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"MoveToTargetToAttack",
        "returns":"void",
        "description":"Move to a target to attack."
      },{
        "args":[],
        "name":"NoHealthBar",
        "returns":"bool"
      },{
        "args":[],
        "name":"NoTeamMoveTo",
        "returns":"bool"
      },{
        "args":[],
        "name":"NoTeamSelect",
        "returns":"bool"
      },{
        "args":[],
        "name":"NoUnitCollision",
        "returns":"bool"
      },{
        "args":[],
        "name":"NotOnMinimap",
        "returns":"bool"
      },{
        "args":[],
        "name":"NotOnMinimapForEnemies",
        "returns":"bool"
      },{
        "args":[{
            "type":"bool",
            "name":"bOriginalModel"
          }],
        "name":"NotifyWearablesOfModelChange",
        "returns":"void"
      },{
        "args":[{
            "type":"Vector",
            "name":"pos"
          }],
        "name":"OnCommandMoveToDirection",
        "returns":"void",
        "description":"Tells the underlying AI to move in the given direction, skipping Dota orders"
      },{
        "args":[],
        "name":"PassivesDisabled",
        "returns":"bool"
      },{
        "args":[{
            "type":"Vector",
            "name":"vDest"
          }],
        "name":"PatrolToPosition",
        "returns":"void",
        "description":"Issue a Patrol-To command."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          },{
            "type":"bool",
            "name":"bUseCastAttackOrb"
          },{
            "type":"bool",
            "name":"bProcessProcs"
          },{
            "type":"bool",
            "name":"bSkipCooldown"
          },{
            "type":"bool",
            "name":"bIgnoreInvis"
          },{
            "type":"bool",
            "name":"bUseProjectile"
          },{
            "type":"bool",
            "name":"bFakeAttack"
          },{
            "type":"bool",
            "name":"bNeverMiss"
          }],
        "name":"PerformAttack",
        "returns":"void",
        "description":"Performs an attack on a target."
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"PickupDroppedItem",
        "returns":"void",
        "description":"Pick up a dropped item."
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"PickupRune",
        "returns":"void",
        "description":"Pick up a rune."
      },{
        "args":[{
            "type":"string",
            "name":"pVCD"
          }],
        "name":"PlayVCD",
        "returns":"void",
        "description":"Play a VCD on the NPC."
      },{
        "args":[],
        "name":"ProvidesVision",
        "returns":"bool"
      },{
        "args":[{
            "type":"bool",
            "name":"bRemovePositiveBuffs"
          },{
            "type":"bool",
            "name":"bRemoveDebuffs"
          },{
            "type":"bool",
            "name":"bFrameOnly"
          },{
            "type":"bool",
            "name":"bRemoveStuns"
          },{
            "type":"bool",
            "name":"bRemoveExceptions"
          }],
        "name":"Purge",
        "returns":"void",
        "description":"(bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions)"
      },{
        "args":[{
            "type":"float",
            "name":"flDelay"
          },{
            "type":"handle",
            "name":"hCriteriaTable"
          },{
            "type":"handle",
            "name":"hCompletionCallbackFn"
          },{
            "type":"handle",
            "name":"hContext"
          },{
            "type":"handle",
            "name":"hCallbackInfo"
          }],
        "name":"QueueConcept",
        "returns":"void",
        "description":"Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay."
      },{
        "args":[{
            "type":"float",
            "name":"flDelay"
          },{
            "type":"handle",
            "name":"hCriteriaTable"
          },{
            "type":"handle",
            "name":"hCompletionCallbackFn"
          },{
            "type":"handle",
            "name":"hContext"
          },{
            "type":"handle",
            "name":"hCallbackInfo"
          }],
        "name":"QueueTeamConcept",
        "returns":"void",
        "description":"Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on."
      },{
        "args":[{
            "type":"float",
            "name":"flDelay"
          },{
            "type":"handle",
            "name":"hCriteriaTable"
          },{
            "type":"handle",
            "name":"hCompletionCallbackFn"
          },{
            "type":"handle",
            "name":"hContext"
          },{
            "type":"handle",
            "name":"hCallbackInfo"
          }],
        "name":"QueueTeamConceptNoSpectators",
        "returns":"void",
        "description":"Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on. Is not played for spectators."
      },{
        "args":[{
            "type":"float",
            "name":"flAmount"
          }],
        "name":"ReduceMana",
        "returns":"float",
        "description":"Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent."
      },{
        "args":[{
            "type":"string",
            "name":"pszAbilityName"
          }],
        "name":"RemoveAbility",
        "returns":"void",
        "description":"Remove an ability from this unit by name."
      },{
        "args":[{
            "type":"handle",
            "name":"hAbility"
          }],
        "name":"RemoveAbilityByHandle",
        "returns":"void",
        "description":"Remove the passed ability from this unit."
      },{
        "args":[{
            "type":"string",
            "name":"pszAbilityName"
          }],
        "name":"RemoveAbilityFromIndexByName",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"targets"
          },{
            "type":"bool",
            "name":"bNow"
          },{
            "type":"bool",
            "name":"bPermanent"
          },{
            "type":"bool",
            "name":"bDeath"
          }],
        "name":"RemoveAllModifiers",
        "returns":"void",
        "description":"(int targets [0=all, 1=enemy, 2=ally], bool bNow, bool bPermanent, bool bDeath)"
      },{
        "args":[{
            "type":"string",
            "name":"pszScriptName"
          }],
        "name":"RemoveAllModifiersOfName",
        "returns":"void",
        "description":"Removes all copies of a modifier."
      },{
        "args":[{
            "type":"int",
            "name":"nActivity"
          }],
        "name":"RemoveGesture",
        "returns":"void",
        "description":"Remove the given gesture activity."
      },{
        "args":[{
            "type":"handle",
            "name":"hBuff"
          }],
        "name":"RemoveHorizontalMotionController",
        "returns":"void"
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"RemoveItem",
        "returns":"void",
        "description":"Removes the passed item from this unit's inventory and deletes it."
      },{
        "args":[{
            "type":"string",
            "name":"pszScriptName"
          }],
        "name":"RemoveModifierByName",
        "returns":"void",
        "description":"Removes a modifier."
      },{
        "args":[{
            "type":"string",
            "name":"pszScriptName"
          },{
            "type":"handle",
            "name":"hCaster"
          }],
        "name":"RemoveModifierByNameAndCaster",
        "returns":"void",
        "description":"Removes a modifier that was cast by the given caster."
      },{
        "args":[],
        "name":"RemoveNoDraw",
        "returns":"void",
        "description":"Remove the no draw flag."
      },{
        "args":[{
            "type":"handle",
            "name":"hBuff"
          }],
        "name":"RemoveVerticalMotionController",
        "returns":"void"
      },{
        "args":[],
        "name":"RespawnUnit",
        "returns":"void",
        "description":"Respawns the target unit if it can be respawned."
      },{
        "args":[],
        "name":"Script_GetAttackRange",
        "returns":"float",
        "description":"Gets this unit's attack range after all modifiers."
      },{
        "args":[],
        "name":"Script_IsDeniable",
        "returns":"bool"
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"SellItem",
        "returns":"void",
        "description":"Sells the passed item in this unit's inventory."
      },{
        "args":[{
            "type":"handle",
            "name":"hAbility"
          },{
            "type":"int",
            "name":"iIndex"
          }],
        "name":"SetAbilityByIndex",
        "returns":"void",
        "description":"Set the ability by index."
      },{
        "args":[{
            "type":"int",
            "name":"nRange"
          }],
        "name":"SetAcquisitionRange",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flWeight"
          }],
        "name":"SetAdditionalBattleMusicWeight",
        "returns":"void",
        "description":"Combat involving this creature will have this weight added to the music calcuations."
      },{
        "args":[{
            "type":"handle",
            "name":"hAggroTarget"
          }],
        "name":"SetAggroTarget",
        "returns":"void",
        "description":"Set this unit's aggro target to a specified unit."
      },{
        "args":[{
            "type":"int",
            "name":"iAttackCapabilities"
          }],
        "name":"SetAttackCapability",
        "returns":"void"
      },{
        "args":[{
            "type":"handle",
            "name":"hAttackTarget"
          }],
        "name":"SetAttacking",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flBaseAttackTime"
          }],
        "name":"SetBaseAttackTime",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"nMax"
          }],
        "name":"SetBaseDamageMax",
        "returns":"void",
        "description":"Sets the maximum base damage."
      },{
        "args":[{
            "type":"int",
            "name":"nMin"
          }],
        "name":"SetBaseDamageMin",
        "returns":"void",
        "description":"Sets the minimum base damage."
      },{
        "args":[{
            "type":"float",
            "name":"flHealthRegen"
          }],
        "name":"SetBaseHealthRegen",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flMagicalResistanceValue"
          }],
        "name":"SetBaseMagicalResistanceValue",
        "returns":"void",
        "description":"Sets base magical armor value."
      },{
        "args":[{
            "type":"float",
            "name":"flManaRegen"
          }],
        "name":"SetBaseManaRegen",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flBaseMaxHealth"
          }],
        "name":"SetBaseMaxHealth",
        "returns":"void",
        "description":"Set a new base max health value."
      },{
        "args":[{
            "type":"int",
            "name":"iMoveSpeed"
          }],
        "name":"SetBaseMoveSpeed",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bCanSell"
          }],
        "name":"SetCanSellItems",
        "returns":"void",
        "description":"Set whether or not this unit is allowed to sell items (bCanSellItems)"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"bool",
            "name":"bSkipAdjustingPosition"
          }],
        "name":"SetControllableByPlayer",
        "returns":"void",
        "description":"Set this unit controllable by the player with the passed ID."
      },{
        "args":[{
            "type":"handle",
            "name":"hEntity"
          }],
        "name":"SetCursorCastTarget",
        "returns":"void"
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          }],
        "name":"SetCursorPosition",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bTargetingNothing"
          }],
        "name":"SetCursorTargetingNothing",
        "returns":"void"
      },{
        "args":[{
            "type":"string",
            "name":"pLabel"
          },{
            "type":"int",
            "name":"r"
          },{
            "type":"int",
            "name":"g"
          },{
            "type":"int",
            "name":"b"
          }],
        "name":"SetCustomHealthLabel",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iRange"
          }],
        "name":"SetDayTimeVisionRange",
        "returns":"void",
        "description":"Set the base vision range."
      },{
        "args":[{
            "type":"int",
            "name":"iXPBounty"
          }],
        "name":"SetDeathXP",
        "returns":"void",
        "description":"Set the XP bounty on this unit."
      },{
        "args":[{
            "type":"float",
            "name":"flFollowRange"
          }],
        "name":"SetFollowRange",
        "returns":"void"
      },{
        "args":[{
            "type":"handle",
            "name":"hNPC"
          }],
        "name":"SetForceAttackTarget",
        "returns":"void"
      },{
        "args":[{
            "type":"handle",
            "name":"hNPC"
          }],
        "name":"SetForceAttackTargetAlly",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bHasInventory"
          }],
        "name":"SetHasInventory",
        "returns":"void",
        "description":"Set if this unit has an inventory."
      },{
        "args":[{
            "type":"int",
            "name":"nOffset"
          }],
        "name":"SetHealthBarOffsetOverride",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flHullRadius"
          }],
        "name":"SetHullRadius",
        "returns":"void",
        "description":"Set the collision hull radius of this NPC."
      },{
        "args":[{
            "type":"bool",
            "name":"bIdleAcquire"
          }],
        "name":"SetIdleAcquire",
        "returns":"void"
      },{
        "args":[{
            "type":"handle",
            "name":"hGoal"
          }],
        "name":"SetInitialGoalEntity",
        "returns":"void",
        "description":"Sets the initial waypoint goal for this NPC."
      },{
        "args":[{
            "type":"Vector",
            "name":"vPosition"
          }],
        "name":"SetInitialGoalPosition",
        "returns":"void",
        "description":"Set waypoint position for this NPC."
      },{
        "args":[{
            "type":"float",
            "name":"flMana"
          }],
        "name":"SetMana",
        "returns":"void",
        "description":"Set the mana on this unit."
      },{
        "args":[{
            "type":"float",
            "name":"flMaxMana"
          }],
        "name":"SetMaxMana",
        "returns":"void",
        "description":"Set the maximum mana of this unit."
      },{
        "args":[{
            "type":"int",
            "name":"iGoldBountyMax"
          }],
        "name":"SetMaximumGoldBounty",
        "returns":"void",
        "description":"Set the maximum gold bounty for this unit."
      },{
        "args":[{
            "type":"int",
            "name":"iGoldBountyMin"
          }],
        "name":"SetMinimumGoldBounty",
        "returns":"void",
        "description":"Set the minimum gold bounty for this unit."
      },{
        "args":[{
            "type":"string",
            "name":"pszScriptName"
          },{
            "type":"handle",
            "name":"hCaster"
          },{
            "type":"int",
            "name":"nStackCount"
          }],
        "name":"SetModifierStackCount",
        "returns":"void",
        "description":"Sets the stack count of a given modifier."
      },{
        "args":[{
            "type":"int",
            "name":"iMoveCapabilities"
          }],
        "name":"SetMoveCapability",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"must"
          }],
        "name":"SetMustReachEachGoalEntity",
        "returns":"void",
        "description":"Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path."
      },{
        "args":[{
            "type":"bool",
            "name":"neverMoveToClearSpace"
          }],
        "name":"SetNeverMoveToClearSpace",
        "returns":"void",
        "description":"If set to true, we will never attempt to move this unit to clear space, even when it unphases."
      },{
        "args":[{
            "type":"int",
            "name":"iRange"
          }],
        "name":"SetNightTimeVisionRange",
        "returns":"void",
        "description":"Returns the vision range after modifiers."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          }],
        "name":"SetOrigin",
        "returns":"void",
        "description":"Set the unit's origin."
      },{
        "args":[{
            "type":"string",
            "name":"pszModelName"
          }],
        "name":"SetOriginalModel",
        "returns":"void",
        "description":"Sets the original model of this entity, which it will tend to fall back to anytime its state changes."
      },{
        "args":[{
            "type":"float",
            "name":"flPhysicalArmorValue"
          }],
        "name":"SetPhysicalArmorBaseValue",
        "returns":"void",
        "description":"Sets base physical armor value."
      },{
        "args":[{
            "type":"string",
            "name":"pProjectileName"
          }],
        "name":"SetRangedProjectileName",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"revealRadius"
          }],
        "name":"SetRevealRadius",
        "returns":"void",
        "description":"sets the client side map reveal radius for this unit"
      },{
        "args":[{
            "type":"bool",
            "name":"bCompute"
          }],
        "name":"SetShouldComputeRemainingPathLength",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bShouldVisuallyFly"
          }],
        "name":"SetShouldDoFlyHeightVisual",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bStolenScepter"
          }],
        "name":"SetStolenScepter",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bCanRespawn"
          }],
        "name":"SetUnitCanRespawn",
        "returns":"void"
      },{
        "args":[{
            "type":"string",
            "name":"pName"
          }],
        "name":"SetUnitName",
        "returns":"void"
      },{
        "args":[],
        "name":"ShouldIdleAcquire",
        "returns":"bool"
      },{
        "args":[{
            "type":"handle",
            "name":"hCriteriaTable"
          }],
        "name":"SpeakConcept",
        "returns":"void",
        "description":"Speak a response system concept with the TLK_DOTA_CUSTOM concept."
      },{
        "args":[{
            "type":"float",
            "name":"flManaSpent"
          },{
            "type":"handle",
            "name":"hAbility"
          }],
        "name":"SpendMana",
        "returns":"void",
        "description":"Spend mana from this unit, this can be used for spending mana from abilities or item usage."
      },{
        "args":[{
            "type":"int",
            "name":"nActivity"
          }],
        "name":"StartGesture",
        "returns":"void",
        "description":"Add the given gesture activity."
      },{
        "args":[{
            "type":"int",
            "name":"nActivity"
          }],
        "name":"StartGestureFadeWithSequenceSettings",
        "returns":"void",
        "description":"Add the given gesture activity faded according to its sequence settings."
      },{
        "args":[{
            "type":"int",
            "name":"nActivity"
          },{
            "type":"float",
            "name":"fFadeIn"
          },{
            "type":"float",
            "name":"fFadeOut"
          }],
        "name":"StartGestureWithFade",
        "returns":"void",
        "description":"Add the given gesture activity faded according to to the parameters."
      },{
        "args":[{
            "type":"int",
            "name":"nActivity"
          },{
            "type":"float",
            "name":"fFadeIn"
          },{
            "type":"float",
            "name":"fFadeOut"
          },{
            "type":"float",
            "name":"flRate"
          }],
        "name":"StartGestureWithFadeAndPlaybackRate",
        "returns":"void",
        "description":"Add the given gesture activity faded according to to the parameters and with a playback rate override."
      },{
        "args":[{
            "type":"int",
            "name":"nActivity"
          },{
            "type":"float",
            "name":"flRate"
          }],
        "name":"StartGestureWithPlaybackRate",
        "returns":"void",
        "description":"Add the given gesture activity with a playback rate override."
      },{
        "args":[],
        "name":"Stop",
        "returns":"void",
        "description":"Stop the current order."
      },{
        "args":[],
        "name":"StopFacing",
        "returns":"void"
      },{
        "args":[{
            "type":"string",
            "name":"pAbilityName1"
          },{
            "type":"string",
            "name":"pAbilityName2"
          },{
            "type":"bool",
            "name":"bEnable1"
          },{
            "type":"bool",
            "name":"bEnable2"
          }],
        "name":"SwapAbilities",
        "returns":"void",
        "description":"Swaps the slots of the two passed abilities and sets them enabled/disabled."
      },{
        "args":[{
            "type":"int",
            "name":"nSlot1"
          },{
            "type":"int",
            "name":"nSlot2"
          }],
        "name":"SwapItems",
        "returns":"void",
        "description":"Swap the contents of two item slots (slot1, slot2)"
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"TakeItem",
        "returns":"handle",
        "description":"Removed the passed item from this unit's inventory."
      },{
        "args":[],
        "name":"TimeUntilNextAttack",
        "returns":"float"
      },{
        "args":[],
        "name":"TriggerModifierDodge",
        "returns":"bool"
      },{
        "args":[{
            "type":"handle",
            "name":"hAbility"
          }],
        "name":"TriggerSpellAbsorb",
        "returns":"bool"
      },{
        "args":[{
            "type":"handle",
            "name":"hAbility"
          }],
        "name":"TriggerSpellReflect",
        "returns":"void",
        "description":"Trigger the Lotus Orb-like effect.(hAbility)"
      },{
        "args":[{
            "type":"string",
            "name":"pszAbilityName"
          },{
            "type":"string",
            "name":"pszReplacedAbilityName"
          }],
        "name":"UnHideAbilityToSlot",
        "returns":"void",
        "description":"Makes the first ability unhidden, and puts it where second ability currently is. Will do nothing if the first ability is already unhidden and in a valid slot."
      },{
        "args":[],
        "name":"UnitCanRespawn",
        "returns":"bool"
      },{
        "args":[],
        "name":"WasKilledPassively",
        "returns":"bool"
      }],
    "extend":"CBaseFlex"
  },{
    "kind":"class",
    "name":"CDOTA_BaseNPC_Building",
    "members":[{
        "args":[],
        "name":"GetInvulnCount",
        "returns":"int",
        "description":"Get the invulnerability count for a building."
      },{
        "args":[{
            "type":"int",
            "name":"nInvulnCount"
          }],
        "name":"SetInvulnCount",
        "returns":"void",
        "description":"Set the invulnerability counter of this building."
      }],
    "extend":"CDOTA_BaseNPC"
  },{
    "kind":"class",
    "name":"CDOTA_BaseNPC_Creature",
    "members":[{
        "args":[{
            "type":"handle",
            "name":"hDropData"
          }],
        "name":"AddItemDrop",
        "returns":"void",
        "description":"Add the specified item drop to this creature."
      },{
        "args":[{
            "type":"int",
            "name":"iLevels"
          }],
        "name":"CreatureLevelUp",
        "returns":"void",
        "description":"Level the creature up by the specified number of levels"
      },{
        "args":[],
        "name":"GetDisableResistance",
        "returns":"float",
        "description":"Set creature's current disable resistance"
      },{
        "args":[],
        "name":"GetUltimateDisableResistance",
        "returns":"float",
        "description":"Set creature's current disable resistance from ultimates"
      },{
        "args":[],
        "name":"IsChampion",
        "returns":"bool",
        "description":"Is this unit a champion?"
      },{
        "args":[],
        "name":"IsReincarnating",
        "returns":"bool",
        "description":"Is this creature respawning?"
      },{
        "args":[],
        "name":"RemoveAllItemDrops",
        "returns":"void",
        "description":"Remove all item drops from this creature."
      },{
        "args":[{
            "type":"bool",
            "name":"bAggro"
          }],
        "name":"SetAggroOnOwnerOnDamage",
        "returns":"void",
        "description":"Does this creature aggro on the owner of the attacking unit when taking damage?"
      },{
        "args":[{
            "type":"float",
            "name":"flArmorGain"
          }],
        "name":"SetArmorGain",
        "returns":"void",
        "description":"Set the armor gained per level on this creature."
      },{
        "args":[{
            "type":"float",
            "name":"flAttackTimeGain"
          }],
        "name":"SetAttackTimeGain",
        "returns":"void",
        "description":"Set the attack time gained per level on this creature."
      },{
        "args":[{
            "type":"int",
            "name":"nBountyGain"
          }],
        "name":"SetBountyGain",
        "returns":"void",
        "description":"Set the bounty gold gained per level on this creature."
      },{
        "args":[{
            "type":"bool",
            "name":"bIsChampion"
          }],
        "name":"SetChampion",
        "returns":"void",
        "description":"Flag this unit as a champion creature."
      },{
        "args":[{
            "type":"int",
            "name":"nDamageGain"
          }],
        "name":"SetDamageGain",
        "returns":"void",
        "description":"Set the damage gained per level on this creature."
      },{
        "args":[{
            "type":"float",
            "name":"flDisableResistance"
          }],
        "name":"SetDisableResistance",
        "returns":"void",
        "description":"Set creature's current disable resistance"
      },{
        "args":[{
            "type":"float",
            "name":"flDisableResistanceGain"
          }],
        "name":"SetDisableResistanceGain",
        "returns":"void",
        "description":"Set the disable resistance gained per level on this creature."
      },{
        "args":[{
            "type":"int",
            "name":"nHPGain"
          }],
        "name":"SetHPGain",
        "returns":"void",
        "description":"Set the hit points gained per level on this creature."
      },{
        "args":[{
            "type":"float",
            "name":"flHPRegenGain"
          }],
        "name":"SetHPRegenGain",
        "returns":"void",
        "description":"Set the hit points regen gained per level on this creature."
      },{
        "args":[{
            "type":"float",
            "name":"flMagicResistanceGain"
          }],
        "name":"SetMagicResistanceGain",
        "returns":"void",
        "description":"Set the magic resistance gained per level on this creature."
      },{
        "args":[{
            "type":"int",
            "name":"nManaGain"
          }],
        "name":"SetManaGain",
        "returns":"void",
        "description":"Set the mana points gained per level on this creature."
      },{
        "args":[{
            "type":"float",
            "name":"flManaRegenGain"
          }],
        "name":"SetManaRegenGain",
        "returns":"void",
        "description":"Set the mana points regen gained per level on this creature."
      },{
        "args":[{
            "type":"int",
            "name":"nMoveSpeedGain"
          }],
        "name":"SetMoveSpeedGain",
        "returns":"void",
        "description":"Set the move speed gained per level on this creature."
      },{
        "args":[{
            "type":"bool",
            "name":"bRequiresReachingEndPath"
          }],
        "name":"SetRequiresReachingEndPath",
        "returns":"void",
        "description":"Set whether creatures require reaching their end path before becoming idle"
      },{
        "args":[{
            "type":"float",
            "name":"flUltDisableResistance"
          }],
        "name":"SetUltimateDisableResistance",
        "returns":"void",
        "description":"Set creature's current disable resistance from ultimates"
      },{
        "args":[{
            "type":"int",
            "name":"nXPGain"
          }],
        "name":"SetXPGain",
        "returns":"void",
        "description":"Set the XP gained per level on this creature."
      }],
    "extend":"CDOTA_BaseNPC"
  },{
    "kind":"class",
    "name":"CDOTA_BaseNPC_Hero",
    "members":[{
        "args":[{
            "type":"float",
            "name":"flXP"
          },{
            "type":"int",
            "name":"nReason"
          },{
            "type":"bool",
            "name":"bApplyBotDifficultyScaling"
          },{
            "type":"bool",
            "name":"bIncrementTotal"
          }],
        "name":"AddExperience",
        "returns":"bool",
        "description":"Params: Float XP, Bool applyBotDifficultyScaling"
      },{
        "args":[],
        "name":"Buyback",
        "returns":"void",
        "description":"Spend the gold and buyback with this hero."
      },{
        "args":[{
            "type":"bool",
            "name":"bForce"
          }],
        "name":"CalculateStatBonus",
        "returns":"void",
        "description":"Recalculate all stats after the hero gains stats."
      },{
        "args":[],
        "name":"CanEarnGold",
        "returns":"bool",
        "description":"Returns boolean value result of buyback gold limit time less than game time."
      },{
        "args":[],
        "name":"ClearLastHitMultikill",
        "returns":"void",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"ClearLastHitStreak",
        "returns":"void",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"ClearStreak",
        "returns":"void",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"GetAbilityPoints",
        "returns":"int",
        "description":"Gets the current unspent ability points."
      },{
        "args":[],
        "name":"GetAdditionalOwnedUnits",
        "returns":"table"
      },{
        "args":[],
        "name":"GetAgility",
        "returns":"float"
      },{
        "args":[],
        "name":"GetAgilityGain",
        "returns":"float"
      },{
        "args":[],
        "name":"GetAssists",
        "returns":"int",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[{
            "type":"int",
            "name":"nIndex"
          }],
        "name":"GetAttacker",
        "returns":"int"
      },{
        "args":[],
        "name":"GetBaseAgility",
        "returns":"float"
      },{
        "args":[],
        "name":"GetBaseDamageMax",
        "returns":"int",
        "description":"Hero damage is also affected by attributes."
      },{
        "args":[],
        "name":"GetBaseDamageMin",
        "returns":"int",
        "description":"Hero damage is also affected by attributes."
      },{
        "args":[],
        "name":"GetBaseIntellect",
        "returns":"float"
      },{
        "args":[],
        "name":"GetBaseManaRegen",
        "returns":"float",
        "description":"Returns the base mana regen."
      },{
        "args":[],
        "name":"GetBaseStrength",
        "returns":"float"
      },{
        "args":[],
        "name":"GetBonusDamageFromPrimaryStat",
        "returns":"int"
      },{
        "args":[],
        "name":"GetBuybackCooldownTime",
        "returns":"float",
        "description":"Return float value for the amount of time left on cooldown for this hero's buyback."
      },{
        "args":[{
            "type":"bool",
            "name":"bReturnOldValues"
          }],
        "name":"GetBuybackCost",
        "returns":"int",
        "description":"Return integer value for the gold cost of a buyback."
      },{
        "args":[],
        "name":"GetBuybackGoldLimitTime",
        "returns":"float",
        "description":"Returns the amount of time gold gain is limited after buying back."
      },{
        "args":[],
        "name":"GetCurrentXP",
        "returns":"int",
        "description":"Returns the amount of XP "
      },{
        "args":[],
        "name":"GetDeathGoldCost",
        "returns":"int"
      },{
        "args":[],
        "name":"GetDeaths",
        "returns":"int",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"GetDenies",
        "returns":"int",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"GetGold",
        "returns":"int",
        "description":"Returns gold amount for the player owning this hero"
      },{
        "args":[],
        "name":"GetGoldBounty",
        "returns":"int"
      },{
        "args":[],
        "name":"GetHeroID",
        "returns":"int"
      },{
        "args":[],
        "name":"GetIncreasedAttackSpeed",
        "returns":"float",
        "description":"Hero attack speed is also affected by agility."
      },{
        "args":[],
        "name":"GetIntellect",
        "returns":"float"
      },{
        "args":[],
        "name":"GetIntellectGain",
        "returns":"float"
      },{
        "args":[],
        "name":"GetKills",
        "returns":"int",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"GetLastHits",
        "returns":"int",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"GetMostRecentDamageTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetMultipleKillCount",
        "returns":"int"
      },{
        "args":[],
        "name":"GetNumAttackers",
        "returns":"int"
      },{
        "args":[],
        "name":"GetNumItemsInInventory",
        "returns":"int"
      },{
        "args":[],
        "name":"GetNumItemsInStash",
        "returns":"int"
      },{
        "args":[],
        "name":"GetPhysicalArmorBaseValue",
        "returns":"float",
        "description":"Hero armor is affected by attributes."
      },{
        "args":[],
        "name":"GetPlayerID",
        "returns":"int",
        "description":"Returns player ID of the player owning this hero"
      },{
        "args":[],
        "name":"GetPrimaryAttribute",
        "returns":"int",
        "description":"0 = strength, 1 = agility, 2 = intelligence."
      },{
        "args":[],
        "name":"GetPrimaryStatValue",
        "returns":"float"
      },{
        "args":[],
        "name":"GetReplicatingOtherHero",
        "returns":"handle"
      },{
        "args":[],
        "name":"GetRespawnTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetRespawnsDisabled",
        "returns":"bool",
        "description":"Is this hero prevented from respawning?"
      },{
        "args":[],
        "name":"GetStreak",
        "returns":"int",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"GetStrength",
        "returns":"float"
      },{
        "args":[],
        "name":"GetStrengthGain",
        "returns":"float"
      },{
        "args":[],
        "name":"GetTimeUntilRespawn",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"nSlotType"
          }],
        "name":"GetTogglableWearable",
        "returns":"handle",
        "description":"Get wearable entity in slot (slot)"
      },{
        "args":[],
        "name":"HasAnyAvailableInventorySpace",
        "returns":"bool"
      },{
        "args":[],
        "name":"HasFlyingVision",
        "returns":"bool"
      },{
        "args":[],
        "name":"HasOwnerAbandoned",
        "returns":"bool"
      },{
        "args":[{
            "type":"string",
            "name":"pItemName"
          },{
            "type":"bool",
            "name":"bIncludeStashCombines"
          },{
            "type":"bool",
            "name":"bAllowSelling"
          }],
        "name":"HasRoomForItem",
        "returns":"int",
        "description":"Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling"
      },{
        "args":[{
            "type":"bool",
            "name":"bPlayEffects"
          }],
        "name":"HeroLevelUp",
        "returns":"void",
        "description":"Levels up the hero, true or false to play effects."
      },{
        "args":[{
            "type":"int",
            "name":"iKillerID"
          }],
        "name":"IncrementAssists",
        "returns":"void",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[{
            "type":"int",
            "name":"iKillerID"
          }],
        "name":"IncrementDeaths",
        "returns":"void",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"IncrementDenies",
        "returns":"void",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[{
            "type":"int",
            "name":"iVictimID"
          }],
        "name":"IncrementKills",
        "returns":"void",
        "description":"Passed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"IncrementLastHitMultikill",
        "returns":"void",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"IncrementLastHitStreak",
        "returns":"void",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"IncrementLastHits",
        "returns":"void",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"IncrementNearbyCreepDeaths",
        "returns":"void",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"IncrementStreak",
        "returns":"void",
        "description":"Value is stored in PlayerResource."
      },{
        "args":[],
        "name":"IsBuybackDisabledByReapersScythe",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsReincarnating",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsStashEnabled",
        "returns":"bool"
      },{
        "args":[{
            "type":"handle",
            "name":"hHero"
          },{
            "type":"handle",
            "name":"hInflictor"
          }],
        "name":"KilledHero",
        "returns":"void",
        "description":"Args: Hero, Inflictor"
      },{
        "args":[{
            "type":"float",
            "name":"flNewAgility"
          }],
        "name":"ModifyAgility",
        "returns":"void",
        "description":"Adds passed value to base attribute value, then calls CalculateStatBonus."
      },{
        "args":[{
            "type":"int",
            "name":"iGoldChange"
          },{
            "type":"bool",
            "name":"bReliable"
          },{
            "type":"int",
            "name":"iReason"
          }],
        "name":"ModifyGold",
        "returns":"int",
        "description":"Gives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason"
      },{
        "args":[{
            "type":"int",
            "name":"iGoldChange"
          },{
            "type":"bool",
            "name":"bReliabe"
          },{
            "type":"int",
            "name":"iReason"
          }],
        "name":"ModifyGoldFiltered",
        "returns":"int",
        "description":"Gives this hero some gold, using the gold filter if extra filtering is on.  Args: int nGoldChange, bool bReliable, int reason"
      },{
        "args":[{
            "type":"float",
            "name":"flNewIntellect"
          }],
        "name":"ModifyIntellect",
        "returns":"void",
        "description":"Adds passed value to base attribute value, then calls CalculateStatBonus."
      },{
        "args":[{
            "type":"float",
            "name":"flNewStrength"
          }],
        "name":"ModifyStrength",
        "returns":"void",
        "description":"Adds passed value to base attribute value, then calls CalculateStatBonus."
      },{
        "args":[],
        "name":"PerformTaunt",
        "returns":"void"
      },{
        "args":[],
        "name":"RecordLastHit",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bBuyBack"
          },{
            "type":"bool",
            "name":"bRespawnPenalty"
          }],
        "name":"RespawnHero",
        "returns":"void",
        "description":"Respawn this hero."
      },{
        "args":[{
            "type":"int",
            "name":"iPoints"
          }],
        "name":"SetAbilityPoints",
        "returns":"void",
        "description":"Sets the current unspent ability points."
      },{
        "args":[{
            "type":"float",
            "name":"flAgility"
          }],
        "name":"SetBaseAgility",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flIntellect"
          }],
        "name":"SetBaseIntellect",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flStrength"
          }],
        "name":"SetBaseStrength",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"nDifficulty"
          }],
        "name":"SetBotDifficulty",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bBuybackDisabled"
          }],
        "name":"SetBuyBackDisabledByReapersScythe",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flTime"
          }],
        "name":"SetBuybackCooldownTime",
        "returns":"void",
        "description":"Sets the buyback cooldown time."
      },{
        "args":[{
            "type":"float",
            "name":"flTime"
          }],
        "name":"SetBuybackGoldLimitTime",
        "returns":"void",
        "description":"Set the amount of time gold gain is limited after buying back."
      },{
        "args":[{
            "type":"int",
            "name":"iValue"
          }],
        "name":"SetCustomDeathXP",
        "returns":"void",
        "description":"Sets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work!"
      },{
        "args":[{
            "type":"int",
            "name":"iGold"
          },{
            "type":"bool",
            "name":"bReliable"
          }],
        "name":"SetGold",
        "returns":"void",
        "description":"Sets the gold amount for the player owning this hero"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"SetPlayerID",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"nPrimaryAttribute"
          }],
        "name":"SetPrimaryAttribute",
        "returns":"void",
        "description":"Set this hero's primary attribute value."
      },{
        "args":[{
            "type":"Vector",
            "name":"vOrigin"
          }],
        "name":"SetRespawnPosition",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bDisableRespawns"
          }],
        "name":"SetRespawnsDisabled",
        "returns":"void",
        "description":"Prevent this hero from respawning."
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetStashEnabled",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"time"
          }],
        "name":"SetTimeUntilRespawn",
        "returns":"void"
      },{
        "args":[],
        "name":"ShouldDoFlyHeightVisual",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iCost"
          },{
            "type":"int",
            "name":"iReason"
          }],
        "name":"SpendGold",
        "returns":"void",
        "description":"Args: int nGold, int nReason"
      },{
        "args":[{
            "type":"handle",
            "name":"hAbility"
          }],
        "name":"UpgradeAbility",
        "returns":"void",
        "description":"This upgrades the passed ability if it exists and the hero has enough ability points."
      },{
        "args":[],
        "name":"WillReincarnate",
        "returns":"bool"
      }],
    "extend":"CDOTA_BaseNPC"
  },{
    "kind":"class",
    "name":"CDOTA_BaseNPC_NeutralItemStash",
    "members":[],
    "extend":"CDOTA_BaseNPC_Building"
  },{
    "kind":"class",
    "name":"CDOTA_BaseNPC_Shop",
    "members":[{
        "args":[],
        "name":"GetShopType",
        "returns":"int",
        "description":"Get the DOTA_SHOP_TYPE"
      },{
        "args":[{
            "type":"int",
            "name":"eShopType"
          }],
        "name":"SetShopType",
        "returns":"void",
        "description":"Set the DOTA_SHOP_TYPE."
      }],
    "extend":"CDOTA_BaseNPC_Building"
  },{
    "kind":"class",
    "name":"CDOTA_BaseNPC_Trap_Ward",
    "members":[{
        "args":[],
        "name":"GetTrapTarget",
        "returns":"Vector",
        "description":"Get the trap target for this entity."
      },{
        "args":[{
            "type":"string",
            "name":"pAnimation"
          }],
        "name":"SetAnimation",
        "returns":"void",
        "description":"Set the animation sequence for this entity."
      }],
    "extend":"CDOTA_BaseNPC_Creature"
  },{
    "kind":"class",
    "name":"CDOTA_BaseNPC_Watch_Tower",
    "members":[{
        "args":[],
        "name":"GetInteractAbilityName",
        "returns":"string",
        "description":"The name of the ability used when triggering interaction on the outpost."
      },{
        "args":[{
            "type":"string",
            "name":"pszInteractAbilityName"
          }],
        "name":"SetInteractAbilityName",
        "returns":"void",
        "description":"The name of the ability used when triggering interaction on the outpost."
      }],
    "extend":"CDOTA_BaseNPC_Building"
  },{
    "kind":"class",
    "name":"CDOTA_Buff",
    "members":[{
        "args":[{
            "type":"int",
            "name":"i"
          },{
            "type":"bool",
            "name":"bDestroyImmediately"
          },{
            "type":"bool",
            "name":"bStatusEffect"
          },{
            "type":"int",
            "name":"iPriority"
          },{
            "type":"bool",
            "name":"bHeroEffect"
          },{
            "type":"bool",
            "name":"bOverheadEffect"
          }],
        "name":"AddParticle",
        "returns":"void",
        "description":"(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect"
      },{
        "args":[{
            "type":"handle",
            "name":"table"
          }],
        "name":"CheckStateToTable",
        "returns":"void"
      },{
        "args":[],
        "name":"DecrementStackCount",
        "returns":"void",
        "description":"Decrease this modifier's stack count by 1."
      },{
        "args":[],
        "name":"Destroy",
        "returns":"void",
        "description":"Run all associated destroy functions, then remove the modifier."
      },{
        "args":[],
        "name":"DestroyOnExpire",
        "returns":"bool"
      },{
        "args":[],
        "name":"ForceRefresh",
        "returns":"void",
        "description":"Run all associated refresh functions on this modifier as if it was re-applied."
      },{
        "args":[],
        "name":"GetAbility",
        "returns":"handle",
        "description":"Get the ability that generated the modifier."
      },{
        "args":[],
        "name":"GetAuraDuration",
        "returns":"float",
        "description":"Returns aura stickiness (default 0.5)"
      },{
        "args":[],
        "name":"GetAuraOwner",
        "returns":"handle"
      },{
        "args":[],
        "name":"GetCaster",
        "returns":"handle",
        "description":"Get the owner of the ability responsible for the modifier."
      },{
        "args":[],
        "name":"GetClass",
        "returns":"string"
      },{
        "args":[],
        "name":"GetCreationTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetDieTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetDuration",
        "returns":"float"
      },{
        "args":[],
        "name":"GetElapsedTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetLastAppliedTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetName",
        "returns":"string"
      },{
        "args":[],
        "name":"GetParent",
        "returns":"handle",
        "description":"Get the unit the modifier is parented to."
      },{
        "args":[],
        "name":"GetRemainingTime",
        "returns":"float"
      },{
        "args":[],
        "name":"GetSerialNumber",
        "returns":"int"
      },{
        "args":[],
        "name":"GetStackCount",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iFunction"
          }],
        "name":"HasFunction",
        "returns":"bool"
      },{
        "args":[],
        "name":"IncrementStackCount",
        "returns":"void",
        "description":"Increase this modifier's stack count by 1."
      },{
        "args":[],
        "name":"IsDebuff",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsHexDebuff",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsStunDebuff",
        "returns":"bool"
      },{
        "args":[],
        "name":"SendBuffRefreshToClients",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flDuration"
          },{
            "type":"bool",
            "name":"bInformClient"
          }],
        "name":"SetDuration",
        "returns":"void",
        "description":"(flTime, bInformClients)"
      },{
        "args":[{
            "type":"float",
            "name":"flOffset"
          }],
        "name":"SetOverheadEffectOffset",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iCount"
          }],
        "name":"SetStackCount",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flInterval"
          }],
        "name":"StartIntervalThink",
        "returns":"void",
        "description":"Start this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1."
      }]
  },{
    "kind":"class",
    "name":"CDOTA_CustomUIManager",
    "instance":"CustomUI",
    "members":[{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"DynamicHud_Create",
        "returns":"void",
        "description":"Create a new custom UI HUD element for the specified player(s). ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ )"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          }],
        "name":"DynamicHud_Destroy",
        "returns":"void",
        "description":"Destroy a custom hud element ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID )"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"DynamicHud_SetDialogVariables",
        "returns":"void",
        "description":"Add or modify dialog variables for an existing custom hud element ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables )"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"bool"
          }],
        "name":"DynamicHud_SetVisible",
        "returns":"void",
        "description":"Toggle the visibility of an existing custom hud element ( PlayerID_t PlayerID /*-1 means everyone*/, string ElementID, bool Visible )"
      }]
  },{
    "kind":"class",
    "name":"CDOTA_Item",
    "members":[{
        "args":[],
        "name":"CanBeUsedOutOfInventory",
        "returns":"bool"
      },{
        "args":[],
        "name":"GetContainer",
        "returns":"handle",
        "description":"Get the container for this item."
      },{
        "args":[],
        "name":"GetCost",
        "returns":"int"
      },{
        "args":[],
        "name":"GetCurrentCharges",
        "returns":"int",
        "description":"Get the number of charges this item currently has."
      },{
        "args":[],
        "name":"GetInitialCharges",
        "returns":"int",
        "description":"Get the initial number of charges this item has."
      },{
        "args":[],
        "name":"GetItemSlot",
        "returns":"int"
      },{
        "args":[],
        "name":"GetItemState",
        "returns":"int",
        "description":"Gets whether item is unequipped or ready."
      },{
        "args":[],
        "name":"GetParent",
        "returns":"handle",
        "description":"Get the parent for this item."
      },{
        "args":[],
        "name":"GetPurchaseTime",
        "returns":"float",
        "description":"Get the purchase time of this item"
      },{
        "args":[],
        "name":"GetPurchaser",
        "returns":"handle",
        "description":"Get the purchaser for this item."
      },{
        "args":[],
        "name":"GetSecondaryCharges",
        "returns":"int",
        "description":"Get the number of secondary charges this item currently has."
      },{
        "args":[],
        "name":"GetShareability",
        "returns":"int"
      },{
        "args":[],
        "name":"GetValuelessCharges",
        "returns":"int",
        "description":"Get the number of valueless charges this item currently has."
      },{
        "args":[],
        "name":"IsAlertableItem",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsCastOnPickup",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsCombinable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsCombineLocked",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsDisassemblable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsDroppable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsInBackpack",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsItem",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsKillable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsMuted",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsNeutralDrop",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsPermanent",
        "returns":"bool",
        "description":"Is this a permanent item?"
      },{
        "args":[],
        "name":"IsPurchasable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsRecipe",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsRecipeGenerated",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsSellable",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsStackable",
        "returns":"bool"
      },{
        "args":[{
            "type":"bool",
            "name":"bAutoUse"
          },{
            "type":"float",
            "name":"flHeight"
          },{
            "type":"float",
            "name":"flDuration"
          },{
            "type":"Vector",
            "name":"vEndPoint"
          }],
        "name":"LaunchLoot",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bAutoUse"
          },{
            "type":"float",
            "name":"flInitialHeight"
          },{
            "type":"float",
            "name":"flLaunchHeight"
          },{
            "type":"float",
            "name":"flDuration"
          },{
            "type":"Vector",
            "name":"vEndPoint"
          }],
        "name":"LaunchLootInitialHeight",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bAutoUse"
          },{
            "type":"float",
            "name":"flRequiredHeight"
          },{
            "type":"float",
            "name":"flHeight"
          },{
            "type":"float",
            "name":"flDuration"
          },{
            "type":"Vector",
            "name":"vEndPoint"
          }],
        "name":"LaunchLootRequiredHeight",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iCharges"
          }],
        "name":"ModifyNumValuelessCharges",
        "returns":"void",
        "description":"Modifies the number of valueless charges on this item"
      },{
        "args":[],
        "name":"OnEquip",
        "returns":"void"
      },{
        "args":[],
        "name":"OnUnequip",
        "returns":"void"
      },{
        "args":[],
        "name":"RequiresCharges",
        "returns":"bool"
      },{
        "args":[{
            "type":"bool",
            "name":"bValue"
          }],
        "name":"SetCanBeUsedOutOfInventory",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bCastOnPickUp"
          }],
        "name":"SetCastOnPickup",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bCombineLocked"
          }],
        "name":"SetCombineLocked",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iCharges"
          }],
        "name":"SetCurrentCharges",
        "returns":"void",
        "description":"Set the number of charges on this item"
      },{
        "args":[{
            "type":"bool",
            "name":"bDroppable"
          }],
        "name":"SetDroppable",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iState"
          }],
        "name":"SetItemState",
        "returns":"void",
        "description":"Sets whether item is unequipped or ready."
      },{
        "args":[{
            "type":"bool",
            "name":"bOnlyPlayerHero"
          }],
        "name":"SetOnlyPlayerHeroPickup",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flTime"
          }],
        "name":"SetPurchaseTime",
        "returns":"void",
        "description":"Set the purchase time of this item"
      },{
        "args":[{
            "type":"handle",
            "name":"hPurchaser"
          }],
        "name":"SetPurchaser",
        "returns":"void",
        "description":"Set the purchaser of record for this item."
      },{
        "args":[{
            "type":"int",
            "name":"iCharges"
          }],
        "name":"SetSecondaryCharges",
        "returns":"void",
        "description":"Set the number of secondary charges on this item"
      },{
        "args":[{
            "type":"bool",
            "name":"bSellable"
          }],
        "name":"SetSellable",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iShareability"
          }],
        "name":"SetShareability",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bStacksWithOtherOwners"
          }],
        "name":"SetStacksWithOtherOwners",
        "returns":"void"
      },{
        "args":[],
        "name":"SpendCharge",
        "returns":"void"
      },{
        "args":[],
        "name":"StacksWithOtherOwners",
        "returns":"bool"
      },{
        "args":[],
        "name":"Think",
        "returns":"void",
        "description":"Think this item"
      }],
    "extend":"CDOTABaseAbility"
  },{
    "kind":"class",
    "name":"CDOTA_ItemSpawner",
    "members":[{
        "args":[],
        "name":"GetItemName",
        "returns":"string",
        "description":"Returns the item name"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CDOTA_Item_BagOfGold",
    "members":[{
        "args":[{
            "type":"float",
            "name":"flTime"
          }],
        "name":"SetLifeTime",
        "returns":"void",
        "description":"Set the life time of this item"
      }],
    "extend":"CDOTA_Item"
  },{
    "kind":"class",
    "name":"CDOTA_Item_DataDriven",
    "members":[{
        "args":[{
            "type":"handle",
            "name":"hCaster"
          },{
            "type":"handle",
            "name":"hTarget"
          },{
            "type":"string",
            "name":"pszModifierName"
          },{
            "type":"handle",
            "name":"hModifierTable"
          }],
        "name":"ApplyDataDrivenModifier",
        "returns":"void",
        "description":"Applies a data driven modifier to the target"
      },{
        "args":[{
            "type":"handle",
            "name":"hCaster"
          },{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"string",
            "name":"pszModifierName"
          },{
            "type":"handle",
            "name":"hModifierTable"
          }],
        "name":"ApplyDataDrivenThinker",
        "returns":"handle",
        "description":"Applies a data driven thinker at the location"
      }],
    "extend":"CDOTA_Item"
  },{
    "kind":"class",
    "name":"CDOTA_Item_EmptyBottle",
    "members":[{
        "args":[],
        "name":"ClearStoredRune",
        "returns":"void",
        "description":"Clear the stored rune."
      },{
        "args":[{
            "type":"int",
            "name":"iRuneType"
          }],
        "name":"OnRune",
        "returns":"bool",
        "description":"Place a rune in the bottle."
      },{
        "args":[{
            "type":"int",
            "name":"iRuneType"
          }],
        "name":"SetStoredRune",
        "returns":"void",
        "description":"Set the stored rune."
      }],
    "extend":"CDOTA_Item"
  },{
    "kind":"class",
    "name":"CDOTA_Item_Lua",
    "members":[{
        "args":[{
            "type":"handle",
            "name":"hUnit"
          }],
        "name":"CanUnitPickUp",
        "returns":"bool",
        "description":"Returns true if this item can be picked up by the target unit."
      },{
        "args":[],
        "name":"CastFilterResult",
        "returns":"int",
        "description":"Determine whether an issued command with no target is valid."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          }],
        "name":"CastFilterResultLocation",
        "returns":"int",
        "description":"(Vector vLocation) Determine whether an issued command on a location is valid."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"CastFilterResultTarget",
        "returns":"int",
        "description":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
      },{
        "args":[],
        "name":"GetAssociatedPrimaryAbilities",
        "returns":"string",
        "description":"Returns abilities that are stolen simultaneously, or otherwise related in functionality."
      },{
        "args":[],
        "name":"GetAssociatedSecondaryAbilities",
        "returns":"string",
        "description":"Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities."
      },{
        "args":[],
        "name":"GetBehavior",
        "returns":"double",
        "description":"Return cast behavior type of this ability."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"GetCastRange",
        "returns":"int",
        "description":"Return cast range of this ability."
      },{
        "args":[],
        "name":"GetChannelStartTime",
        "returns":"float",
        "description":"Return the channel start time of this ability."
      },{
        "args":[],
        "name":"GetChannelTime",
        "returns":"float",
        "description":"Return the channel time of this ability."
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetChannelledManaCostPerSecond",
        "returns":"int",
        "description":"Return mana cost at the given level per second while channeling (-1 is current)."
      },{
        "args":[],
        "name":"GetConceptRecipientType",
        "returns":"int",
        "description":"Return who hears speech when this spell is cast."
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetCooldown",
        "returns":"float",
        "description":"Return cooldown of this ability."
      },{
        "args":[],
        "name":"GetCustomCastError",
        "returns":"string",
        "description":"Return the error string of a failed command with no target."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          }],
        "name":"GetCustomCastErrorLocation",
        "returns":"string",
        "description":"(Vector vLocation) Return the error string of a failed command on a location."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"GetCustomCastErrorTarget",
        "returns":"string",
        "description":"(HSCRIPT hTarget) Return the error string of a failed command on a target."
      },{
        "args":[{
            "type":"int",
            "name":"nReason"
          }],
        "name":"GetCustomHudErrorMessage",
        "returns":"string",
        "description":"(DOTA_INVALID_ORDERS nReason) Return the error string of a failed order."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          },{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"GetEffectiveCastRange",
        "returns":"int",
        "description":"Return cast range of this ability, taking modifiers into account."
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetGoldCost",
        "returns":"int",
        "description":"Return gold cost at the given level (-1 is current)."
      },{
        "args":[],
        "name":"GetIntrinsicModifierName",
        "returns":"string",
        "description":"Returns the name of the modifier applied passively by this ability."
      },{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"GetManaCost",
        "returns":"int",
        "description":"Return mana cost at the given level (-1 is current)."
      },{
        "args":[],
        "name":"GetPlaybackRateOverride",
        "returns":"float",
        "description":"Return the animation rate of the cast animation."
      },{
        "args":[],
        "name":"IsHiddenAbilityCastable",
        "returns":"bool",
        "description":"Returns true if this ability can be used when not on the action panel."
      },{
        "args":[],
        "name":"IsHiddenWhenStolen",
        "returns":"bool",
        "description":"Returns true if this ability is hidden when stolen by Spell Steal."
      },{
        "args":[],
        "name":"IsMuted",
        "returns":"bool",
        "description":"Returns whether this item is muted or not."
      },{
        "args":[],
        "name":"IsRefreshable",
        "returns":"bool",
        "description":"Returns true if this ability is refreshed by Refresher Orb."
      },{
        "args":[],
        "name":"IsStealable",
        "returns":"bool",
        "description":"Returns true if this ability can be stolen by Spell Steal."
      },{
        "args":[],
        "name":"OnAbilityPhaseInterrupted",
        "returns":"void",
        "description":"Cast time did not complete successfully."
      },{
        "args":[],
        "name":"OnAbilityPhaseStart",
        "returns":"bool",
        "description":"Cast time begins (return true for successful cast)."
      },{
        "args":[{
            "type":"bool",
            "name":"bInterrupted"
          }],
        "name":"OnChannelFinish",
        "returns":"void",
        "description":"(bool bInterrupted) Channel finished."
      },{
        "args":[{
            "type":"float",
            "name":"flInterval"
          }],
        "name":"OnChannelThink",
        "returns":"void",
        "description":"(float flInterval) Channeling is taking place."
      },{
        "args":[],
        "name":"OnChargeCountChanged",
        "returns":"void",
        "description":"Runs when item's charge count changes."
      },{
        "args":[],
        "name":"OnHeroCalculateStatBonus",
        "returns":"void",
        "description":"Caster (hero only) gained a level, skilled an ability, or received a new stat bonus."
      },{
        "args":[{
            "type":"handle",
            "name":"unit"
          },{
            "type":"handle",
            "name":"attacker"
          },{
            "type":"handle",
            "name":"table"
          }],
        "name":"OnHeroDiedNearby",
        "returns":"void",
        "description":"A hero has died in the vicinity (ie Urn), takes table of params."
      },{
        "args":[],
        "name":"OnHeroLevelUp",
        "returns":"void",
        "description":"Caster gained a level."
      },{
        "args":[],
        "name":"OnInventoryContentsChanged",
        "returns":"void",
        "description":"Caster inventory changed."
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"OnItemEquipped",
        "returns":"void",
        "description":"( HSCRIPT hItem ) Caster equipped item."
      },{
        "args":[],
        "name":"OnOwnerDied",
        "returns":"void",
        "description":"Caster died."
      },{
        "args":[],
        "name":"OnOwnerSpawned",
        "returns":"void",
        "description":"Caster respawned or spawned for the first time."
      },{
        "args":[{
            "type":"handle",
            "name":"hTarget"
          },{
            "type":"Vector",
            "name":"vLocation"
          }],
        "name":"OnProjectileHit",
        "returns":"bool",
        "description":"(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)."
      },{
        "args":[{
            "type":"Vector",
            "name":"vLocation"
          }],
        "name":"OnProjectileThink",
        "returns":"void",
        "description":"(Vector vLocation) Projectile is actively moving."
      },{
        "args":[],
        "name":"OnSpellStart",
        "returns":"void",
        "description":"Cast time finished, spell effects begin."
      },{
        "args":[{
            "type":"handle",
            "name":"hSourceAbility"
          }],
        "name":"OnStolen",
        "returns":"void",
        "description":"( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal."
      },{
        "args":[],
        "name":"OnToggle",
        "returns":"void",
        "description":"Ability is toggled on/off."
      },{
        "args":[],
        "name":"OnUnStolen",
        "returns":"void",
        "description":"Special behavior when lost by Spell Steal."
      },{
        "args":[],
        "name":"OnUpgrade",
        "returns":"void",
        "description":"Ability gained a level."
      },{
        "args":[],
        "name":"ProcsMagicStick",
        "returns":"bool",
        "description":"Returns true if this ability will generate magic stick charges for nearby enemies."
      },{
        "args":[],
        "name":"SpeakTrigger",
        "returns":"int",
        "description":"Return the type of speech used."
      }],
    "extend":"CDOTA_Item"
  },{
    "kind":"class",
    "name":"CDOTA_Item_Physical",
    "members":[{
        "args":[],
        "name":"GetContainedItem",
        "returns":"handle",
        "description":"Returned the contained item."
      },{
        "args":[],
        "name":"GetCreationTime",
        "returns":"float",
        "description":"Returns the game time when this item was created in the world"
      },{
        "args":[{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"SetContainedItem",
        "returns":"void",
        "description":"Set the contained item."
      }],
    "extend":"CBaseAnimatingActivity"
  },{
    "kind":"class",
    "name":"CDOTA_MapTree",
    "members":[{
        "args":[{
            "type":"int",
            "name":"nTeamNumberKnownTo"
          }],
        "name":"CutDown",
        "returns":"void",
        "description":"Cuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team)"
      },{
        "args":[{
            "type":"float",
            "name":"flRegrowAfter"
          },{
            "type":"int",
            "name":"nTeamNumberKnownTo"
          }],
        "name":"CutDownRegrowAfter",
        "returns":"void",
        "description":"Cuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team)"
      },{
        "args":[],
        "name":"GrowBack",
        "returns":"void",
        "description":"Grows back the tree if it was cut down."
      },{
        "args":[],
        "name":"IsStanding",
        "returns":"bool",
        "description":"Returns true if the tree is standing, false if it has been cut down"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CDOTA_Modifier_Lua",
    "members":[{
        "args":[],
        "name":"AllowIllusionDuplicate",
        "returns":"bool",
        "description":"True/false if this modifier is active on illusions."
      },{
        "args":[],
        "name":"CanParentBeAutoAttacked",
        "returns":"bool"
      },{
        "args":[],
        "name":"DestroyOnExpire",
        "returns":"bool",
        "description":"True/false if this buff is removed when the duration expires."
      },{
        "args":[],
        "name":"GetAttributes",
        "returns":"int",
        "description":"Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t"
      },{
        "args":[],
        "name":"GetAuraDuration",
        "returns":"float",
        "description":"Returns aura stickiness"
      },{
        "args":[{
            "type":"handle",
            "name":"hEntity"
          }],
        "name":"GetAuraEntityReject",
        "returns":"bool",
        "description":"Return true/false if this entity should receive the aura under specific conditions"
      },{
        "args":[],
        "name":"GetAuraRadius",
        "returns":"int",
        "description":"Return the range around the parent this aura tries to apply its buff."
      },{
        "args":[],
        "name":"GetAuraSearchFlags",
        "returns":"int",
        "description":"Return the unit flags this aura respects when placing buffs."
      },{
        "args":[],
        "name":"GetAuraSearchTeam",
        "returns":"int",
        "description":"Return the teams this aura applies its buff to."
      },{
        "args":[],
        "name":"GetAuraSearchType",
        "returns":"int",
        "description":"Return the unit classifications this aura applies its buff to."
      },{
        "args":[],
        "name":"GetCritDamage",
        "returns":"float",
        "description":"A Modifier that listens to MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE has to have a GetCritDamage implementation so we can know when to evaluate it. Value should be in 'times the original value format' e.g: 1.5 not 150"
      },{
        "args":[],
        "name":"GetEffectAttachType",
        "returns":"int",
        "description":"Return the attach type of the particle system from GetEffectName."
      },{
        "args":[],
        "name":"GetEffectName",
        "returns":"string",
        "description":"Return the name of the particle system that is created while this modifier is active."
      },{
        "args":[],
        "name":"GetHeroEffectName",
        "returns":"string",
        "description":"Return the name of the hero effect particle system that is created while this modifier is active."
      },{
        "args":[],
        "name":"GetModifierAura",
        "returns":"string",
        "description":"The name of the secondary modifier that will be applied by this modifier (if it is an aura)."
      },{
        "args":[],
        "name":"GetPriority",
        "returns":"int",
        "description":"Return the priority order this modifier will be applied over others."
      },{
        "args":[],
        "name":"GetStatusEffectName",
        "returns":"string",
        "description":"Return the name of the status effect particle system that is created while this modifier is active."
      },{
        "args":[],
        "name":"GetTexture",
        "returns":"string",
        "description":"Return the name of the buff icon to be shown for this modifier."
      },{
        "args":[],
        "name":"HeroEffectPriority",
        "returns":"int",
        "description":"Relationship of this hero effect with those from other buffs (higher is more likely to be shown)."
      },{
        "args":[],
        "name":"IsAura",
        "returns":"bool",
        "description":"True/false if this modifier is an aura."
      },{
        "args":[],
        "name":"IsAuraActiveOnDeath",
        "returns":"bool",
        "description":"True/false if this aura provides buffs when the parent is dead."
      },{
        "args":[],
        "name":"IsDebuff",
        "returns":"bool",
        "description":"True/false if this modifier should be displayed as a debuff."
      },{
        "args":[],
        "name":"IsHidden",
        "returns":"bool",
        "description":"True/false if this modifier should be displayed on the buff bar."
      },{
        "args":[],
        "name":"IsPermanent",
        "returns":"bool"
      },{
        "args":[],
        "name":"IsPurgable",
        "returns":"bool",
        "description":"True/false if this modifier can be purged."
      },{
        "args":[],
        "name":"IsPurgeException",
        "returns":"bool",
        "description":"True/false if this modifier can be purged by strong dispels."
      },{
        "args":[],
        "name":"IsStunDebuff",
        "returns":"bool",
        "description":"True/false if this modifier is considered a stun for purge reasons."
      },{
        "args":[{
            "type":"handle",
            "name":"table"
          }],
        "name":"OnCreated",
        "returns":"void",
        "description":"Runs when the modifier is created."
      },{
        "args":[],
        "name":"OnDestroy",
        "returns":"void",
        "description":"Runs when the modifier is destroyed (after unit loses modifier)."
      },{
        "args":[],
        "name":"OnIntervalThink",
        "returns":"void",
        "description":"Runs when the think interval occurs."
      },{
        "args":[{
            "type":"handle",
            "name":"table"
          }],
        "name":"OnRefresh",
        "returns":"void",
        "description":"Runs when the modifier is refreshed."
      },{
        "args":[],
        "name":"OnRemoved",
        "returns":"void",
        "description":"Runs when the modifier is destroyed (before unit loses modifier)."
      },{
        "args":[{
            "type":"int",
            "name":"iStackCount"
          }],
        "name":"OnStackCountChanged",
        "returns":"void",
        "description":"Runs when stack count changes (param is old count)."
      },{
        "args":[],
        "name":"RemoveOnDeath",
        "returns":"bool",
        "description":"True/false if this modifier is removed when the parent dies."
      },{
        "args":[{
            "type":"bool",
            "name":"bHasCustomData"
          }],
        "name":"SetHasCustomTransmitterData",
        "returns":"void"
      },{
        "args":[],
        "name":"ShouldUseOverheadOffset",
        "returns":"bool",
        "description":"Apply the overhead offset to the attached effect."
      },{
        "args":[],
        "name":"StatusEffectPriority",
        "returns":"int",
        "description":"Relationship of this status effect with those from other buffs (higher is more likely to be shown)."
      }],
    "extend":"CDOTA_Buff"
  },{
    "kind":"class",
    "name":"CDOTA_Modifier_Lua_Horizontal_Motion",
    "members":[{
        "args":[],
        "name":"ApplyHorizontalMotionController",
        "returns":"bool",
        "description":"Starts the horizontal motion controller effects for this buff.  Returns true if successful."
      },{
        "args":[],
        "name":"GetPriority",
        "returns":"int",
        "description":"Get the priority"
      },{
        "args":[],
        "name":"OnHorizontalMotionInterrupted",
        "returns":"void",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[{
            "type":"int",
            "name":"nMotionPriority"
          }],
        "name":"SetPriority",
        "returns":"void",
        "description":"Set the priority"
      },{
        "args":[{
            "type":"handle",
            "name":"me"
          },{
            "type":"float",
            "name":"dt"
          }],
        "name":"UpdateHorizontalMotion",
        "returns":"void",
        "description":"Perform any motion from the given interval on the NPC."
      }],
    "extend":"CDOTA_Modifier_Lua"
  },{
    "kind":"class",
    "name":"CDOTA_Modifier_Lua_Motion_Both",
    "members":[{
        "args":[],
        "name":"ApplyHorizontalMotionController",
        "returns":"bool",
        "description":"Starts the horizontal motion controller effects for this buff.  Returns true if successful."
      },{
        "args":[],
        "name":"ApplyVerticalMotionController",
        "returns":"bool",
        "description":"Starts the vertical motion controller effects for this buff.  Returns true if successful."
      },{
        "args":[],
        "name":"GetPriority",
        "returns":"int",
        "description":"Get the priority"
      },{
        "args":[],
        "name":"OnHorizontalMotionInterrupted",
        "returns":"void",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[],
        "name":"OnVerticalMotionInterrupted",
        "returns":"void",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[{
            "type":"int",
            "name":"nMotionPriority"
          }],
        "name":"SetPriority",
        "returns":"void",
        "description":"Set the priority"
      },{
        "args":[{
            "type":"handle",
            "name":"me"
          },{
            "type":"float",
            "name":"dt"
          }],
        "name":"UpdateHorizontalMotion",
        "returns":"void",
        "description":"Perform any motion from the given interval on the NPC."
      },{
        "args":[{
            "type":"handle",
            "name":"me"
          },{
            "type":"float",
            "name":"dt"
          }],
        "name":"UpdateVerticalMotion",
        "returns":"void",
        "description":"Perform any motion from the given interval on the NPC."
      }],
    "extend":"CDOTA_Modifier_Lua"
  },{
    "kind":"class",
    "name":"CDOTA_Modifier_Lua_Vertical_Motion",
    "members":[{
        "args":[],
        "name":"ApplyVerticalMotionController",
        "returns":"bool",
        "description":"Starts the vertical motion controller effects for this buff.  Returns true if successful."
      },{
        "args":[],
        "name":"GetMotionPriority",
        "returns":"int",
        "description":"Get the priority"
      },{
        "args":[],
        "name":"OnVerticalMotionInterrupted",
        "returns":"void",
        "description":"Called when the motion gets interrupted."
      },{
        "args":[{
            "type":"int",
            "name":"nMotionPriority"
          }],
        "name":"SetMotionPriority",
        "returns":"void",
        "description":"Set the priority"
      },{
        "args":[{
            "type":"handle",
            "name":"me"
          },{
            "type":"float",
            "name":"dt"
          }],
        "name":"UpdateVerticalMotion",
        "returns":"void",
        "description":"Perform any motion from the given interval on the NPC."
      }],
    "extend":"CDOTA_Modifier_Lua"
  },{
    "kind":"class",
    "name":"CDOTA_NeutralSpawner",
    "members":[{
        "args":[],
        "name":"CreatePendingUnits",
        "returns":"void"
      },{
        "args":[],
        "name":"SelectSpawnType",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bIgnoreBlockers"
          }],
        "name":"SpawnNextBatch",
        "returns":"void"
      }],
    "extend":"CPointEntity"
  },{
    "instance":"PlayerResource",
    "kind":"class",
    "name":"CDOTA_PlayerResource",
    "members":[{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"AddAegisPickup",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nReason"
          }],
        "name":"AddCandyEvent",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"float",
            "name":"flFarmValue"
          },{
            "type":"bool",
            "name":"bEarnedValue"
          }],
        "name":"AddClaimedFarm",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iCost"
          }],
        "name":"AddGoldSpentOnSupport",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nTeamNumber"
          },{
            "type":"handle",
            "name":"hItem"
          }],
        "name":"AddNeutralItemToStash",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nRunes"
          }],
        "name":"AddRunePickup",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"nUnitOwnerPlayerID"
          },{
            "type":"int",
            "name":"nOtherPlayerID"
          }],
        "name":"AreUnitsSharedWithPlayerID",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"CanRepick",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"ClearKillsMatrix",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"ClearLastHitMultikill",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"ClearLastHitStreak",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"ClearPlayer",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"ClearRawPlayerDamageMatrix",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"ClearStreak",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetAegisPickups",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetAssists",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetBroadcasterChannel",
        "returns":"unsigned"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetBroadcasterChannelSlot",
        "returns":"unsigned"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetClaimedDenies",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"bool",
            "name":"bOnlyEarned"
          }],
        "name":"GetClaimedFarm",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetClaimedMisses",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetConnectionState",
        "returns":"<unknown>"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"bool",
            "name":"bTotal"
          }],
        "name":"GetCreepDamageTaken",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetCustomBuybackCooldown",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetCustomBuybackCost",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetCustomTeamAssignment",
        "returns":"int",
        "description":"Get the current custom team assignment for this player."
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iVictimID"
          }],
        "name":"GetDamageDoneToHero",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetDeaths",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetDenies",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          }],
        "name":"GetEventGameUpgrades",
        "returns":"handle",
        "description":"(nPlayerID)"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          }],
        "name":"GetEventPointsForPlayerID",
        "returns":"unsigned"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          }],
        "name":"GetEventPremiumPoints",
        "returns":"unsigned"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          }],
        "name":"GetEventRanks",
        "returns":"<unknown>"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetGold",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetGoldLostToDeath",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetGoldPerMin",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetGoldSpentOnBuybacks",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetGoldSpentOnConsumables",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetGoldSpentOnItems",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetGoldSpentOnSupport",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetHealing",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"bool",
            "name":"bTotal"
          }],
        "name":"GetHeroDamageTaken",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetKills",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iVictimID"
          }],
        "name":"GetKillsDoneToHero",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          }],
        "name":"GetLabyrinthEventGameHeroUnlocks",
        "returns":"handle",
        "description":"(nPlayerID)"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetLastHitMultikill",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetLastHitStreak",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetLastHits",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetLevel",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetLiveSpectatorTeam",
        "returns":"<unknown>"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetMisses",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetNearbyCreepDeaths",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetNetWorth",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"int",
            "name":"nEventID"
          },{
            "type":"unsigned",
            "name":"unActionID"
          }],
        "name":"GetNetworkedEventActionClaimCount",
        "returns":"int",
        "description":"(nPlayerID, eEvent, nActionID)"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"int",
            "name":"nEventID"
          },{
            "type":"string",
            "name":"pActionName"
          }],
        "name":"GetNetworkedEventActionClaimCountByName",
        "returns":"int",
        "description":"(nPlayerID, eEvent, pActionName)"
      },{
        "args":[{
            "type":"int",
            "name":"nCourierIndex"
          },{
            "type":"int",
            "name":"nTeamNumber"
          }],
        "name":"GetNthCourierForTeam",
        "returns":"handle"
      },{
        "args":[{
            "type":"int",
            "name":"iTeamNumber"
          },{
            "type":"int",
            "name":"iNthPlayer"
          }],
        "name":"GetNthPlayerIDOnTeam",
        "returns":"int"
      },{
        "args":[],
        "name":"GetNumConnectedHumanPlayers",
        "returns":"int",
        "description":"Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetNumConsumablesPurchased",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"nTeamNumber"
          }],
        "name":"GetNumCouriersForTeam",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetNumItemsPurchased",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetPartyID",
        "returns":"uint64"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetPlayer",
        "returns":"handle"
      },{
        "args":[],
        "name":"GetPlayerCount",
        "returns":"int",
        "description":"Includes spectators and players not assigned to a team"
      },{
        "args":[{
            "type":"int",
            "name":"iTeam"
          }],
        "name":"GetPlayerCountForTeam",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetPlayerLoadedCompletely",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetPlayerName",
        "returns":"string"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerId"
          }],
        "name":"GetPreferredCourierForPlayer",
        "returns":"handle"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetRawPlayerDamage",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetReliableGold",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetRespawnSeconds",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetRoshanKills",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetRunePickups",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetSelectedHeroEntity",
        "returns":"handle"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetSelectedHeroID",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetSelectedHeroName",
        "returns":"string"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetSteamAccountID",
        "returns":"unsigned"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetSteamID",
        "returns":"uint64",
        "description":"Get the 64 bit steam ID for a given player."
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetStreak",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetStuns",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetTeam",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iTeam"
          }],
        "name":"GetTeamKills",
        "returns":"int"
      },{
        "args":[],
        "name":"GetTeamPlayerCount",
        "returns":"int",
        "description":"(Deprecated: use GetNumConnectedHumanPlayers) Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetTimeOfLastConsumablePurchase",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetTimeOfLastDeath",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetTimeOfLastItemPurchase",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetTotalEarnedGold",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetTotalEarnedXP",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetTotalGoldSpent",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"bool",
            "name":"bTotal"
          }],
        "name":"GetTowerDamageTaken",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetTowerKills",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"int",
            "name":"nOtherPlayerID"
          }],
        "name":"GetUnitShareMaskForPlayer",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetUnreliableGold",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"GetXPPerMin",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"HasCustomGameTicketForPlayerID",
        "returns":"bool",
        "description":"Does this player have a custom game ticket for this game?"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"HasRandomed",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"HasSelectedHero",
        "returns":"bool"
      },{
        "args":[],
        "name":"HasSetNetworkedEventActionClaimCount",
        "returns":"bool"
      },{
        "args":[],
        "name":"HaveAllPlayersJoined",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iVictimID"
          }],
        "name":"IncrementAssists",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nValue"
          }],
        "name":"IncrementClaimedDenies",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nValue"
          }],
        "name":"IncrementClaimedMisses",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iKillerID"
          }],
        "name":"IncrementDeaths",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nValue"
          }],
        "name":"IncrementDenies",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iVictimID"
          }],
        "name":"IncrementKills",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nCount"
          }],
        "name":"IncrementLastHitMultikill",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nCount"
          }],
        "name":"IncrementLastHitStreak",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nCount"
          }],
        "name":"IncrementLastHits",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nValue"
          }],
        "name":"IncrementMisses",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nCreeps"
          }],
        "name":"IncrementNearbyCreepDeaths",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"nCount"
          }],
        "name":"IncrementStreak",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iXP"
          },{
            "type":"int",
            "name":"nReason"
          }],
        "name":"IncrementTotalEarnedXP",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"IsBroadcaster",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"int",
            "name":"nOtherPlayerID"
          }],
        "name":"IsDisableHelpSetForPlayerID",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"IsFakeClient",
        "returns":"bool"
      },{
        "args":[{
            "type":"string",
            "name":"pHeroname"
          },{
            "type":"bool",
            "name":"bIgnoreUnrevealedPick"
          }],
        "name":"IsHeroSelected",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"nUnitOwnerPlayerID"
          },{
            "type":"int",
            "name":"nOtherPlayerID"
          }],
        "name":"IsHeroSharedWithPlayerID",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"IsValidPlayer",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"IsValidPlayerID",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"IsValidTeamPlayer",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          }],
        "name":"IsValidTeamPlayerID",
        "returns":"bool"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iGoldChange"
          },{
            "type":"bool",
            "name":"bReliable"
          },{
            "type":"int",
            "name":"nReason"
          }],
        "name":"ModifyGold",
        "returns":"int"
      },{
        "args":[],
        "name":"NumPlayers",
        "returns":"int"
      },{
        "args":[],
        "name":"NumTeamPlayers",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"item_definition_index"
          },{
            "type":"int",
            "name":"nChargeIncrementOrDecrement"
          }],
        "name":"RecordConsumableAbilityChargeChange",
        "returns":"void",
        "description":"Increment or decrement consumable charges (nPlayerID, item_definition_index, nChargeIncrementOrDecrement)"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"eEvent"
          },{
            "type":"int",
            "name":"unActionID"
          },{
            "type":"int",
            "name":"unAudit"
          },{
            "type":"unsigned",
            "name":"unQuantity"
          },{
            "type":"unsigned",
            "name":"unAuditData"
          }],
        "name":"RecordEventActionGrant",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"string",
            "name":"pszActionName"
          },{
            "type":"int",
            "name":"unAudit"
          },{
            "type":"unsigned",
            "name":"unQuantity"
          },{
            "type":"unsigned",
            "name":"unAuditData"
          }],
        "name":"RecordEventActionGrantForPrimaryEvent",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"string",
            "name":"pszHeroClass"
          },{
            "type":"int",
            "name":"nGold"
          },{
            "type":"int",
            "name":"nXP"
          }],
        "name":"ReplaceHeroWith",
        "returns":"handle",
        "description":"(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"string",
            "name":"pszHeroClass"
          },{
            "type":"int",
            "name":"nGold"
          },{
            "type":"int",
            "name":"nXP"
          }],
        "name":"ReplaceHeroWithNoTransfer",
        "returns":"handle",
        "description":"(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP, without transferring items/abilities if same hero"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          }],
        "name":"ResetBuybackCostTime",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"ResetTotalEarnedGold",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"float",
            "name":"flBuybackCooldown"
          }],
        "name":"SetBuybackCooldownTime",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"float",
            "name":"flBuybackCooldown"
          }],
        "name":"SetBuybackGoldLimitTime",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"handle",
            "name":"hTarget"
          }],
        "name":"SetCameraTarget",
        "returns":"void",
        "description":"(playerID, entity) - force the given player's camera to follow the given entity"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"bool",
            "name":"bCanRepick"
          }],
        "name":"SetCanRepick",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"float",
            "name":"flCooldownTime"
          }],
        "name":"SetCustomBuybackCooldown",
        "returns":"void",
        "description":"Set the buyback cooldown for this player."
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iGoldCost"
          }],
        "name":"SetCustomBuybackCost",
        "returns":"void",
        "description":"Set the buyback cost for this player."
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iParam"
          }],
        "name":"SetCustomIntParam",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"r"
          },{
            "type":"int",
            "name":"g"
          },{
            "type":"int",
            "name":"b"
          }],
        "name":"SetCustomPlayerColor",
        "returns":"void",
        "description":"Set custom color for player (minimap, scoreboard, etc)"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iTeamAssignment"
          }],
        "name":"SetCustomTeamAssignment",
        "returns":"void",
        "description":"Set custom team assignment for this player."
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iGold"
          },{
            "type":"bool",
            "name":"bReliable"
          }],
        "name":"SetGold",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          }],
        "name":"SetHasRandomed",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"float",
            "name":"flLastBuybackTime"
          }],
        "name":"SetLastBuybackTime",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"handle",
            "name":"hEntity"
          }],
        "name":"SetOverrideSelectionEntity",
        "returns":"void",
        "description":"Set the forced selection entity for a player."
      },{
        "args":[{
            "type":"int",
            "name":"nPlayerID"
          },{
            "type":"int",
            "name":"nOtherPlayerID"
          },{
            "type":"int",
            "name":"nFlag"
          },{
            "type":"bool",
            "name":"bState"
          }],
        "name":"SetUnitShareMaskForPlayer",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iCost"
          },{
            "type":"int",
            "name":"iReason"
          }],
        "name":"SpendGold",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iPlayerID"
          },{
            "type":"int",
            "name":"iTeamNumber"
          },{
            "type":"int",
            "name":"desiredSlot"
          }],
        "name":"UpdateTeamSlot",
        "returns":"void"
      },{
        "args":[{
            "type":"string",
            "name":"pHeroFilename"
          },{
            "type":"bool",
            "name":"bIgnoreUnrevealedPick"
          }],
        "name":"WhoSelectedHero",
        "returns":"int"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CDOTA_ShopTrigger",
    "members":[{
        "args":[],
        "name":"GetShopType",
        "returns":"int",
        "description":"Get the DOTA_SHOP_TYPE"
      },{
        "args":[{
            "type":"int",
            "name":"eShopType"
          }],
        "name":"SetShopType",
        "returns":"void",
        "description":"Set the DOTA_SHOP_TYPE."
      }],
    "extend":"CBaseTrigger"
  },{
    "kind":"class",
    "name":"CDOTA_SimpleObstruction",
    "members":[{
        "args":[],
        "name":"IsEnabled",
        "returns":"bool",
        "description":"Returns whether the obstruction is currently active"
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          },{
            "type":"bool",
            "name":"bForce"
          }],
        "name":"SetEnabled",
        "returns":"void",
        "description":"Enable or disable the obstruction"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CDOTA_Unit_Courier",
    "members":[{
        "args":[{
            "type":"int",
            "name":"iLevel"
          }],
        "name":"UpgradeCourier",
        "returns":"void",
        "description":"Upgrade the courier ( int param ) times."
      }],
    "extend":"CDOTA_BaseNPC"
  },{
    "kind":"class",
    "name":"CDOTA_Unit_CustomGameAnnouncer",
    "members":[{
        "args":[{
            "type":"bool",
            "name":"bIsServerAuthoritative"
          }],
        "name":"SetServerAuthoritative",
        "returns":"void",
        "description":"Determines whether response criteria is matched on server or client"
      }],
    "extend":"CDOTA_BaseNPC"
  },{
    "kind":"class",
    "name":"CDOTA_Unit_CustomGameAnnouncerAghanim",
    "members":[{
        "args":[{
            "type":"string",
            "name":"pAnimation"
          }],
        "name":"SetAnimation",
        "returns":"void",
        "description":"Set the animation sequence for this entity."
      },{
        "args":[{
            "type":"bool",
            "name":"bIsServerAuthoritative"
          }],
        "name":"SetServerAuthoritative",
        "returns":"void",
        "description":"Determines whether response criteria is matched on server or client"
      }],
    "extend":"CDOTA_BaseNPC"
  },{
    "kind":"class",
    "name":"CDOTA_Unit_Diretide_Portal",
    "members":[{
        "args":[],
        "name":"GetPartnerPortal",
        "returns":"handle"
      },{
        "args":[],
        "name":"ResetPortal",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"nRuneType"
          }],
        "name":"SetInvasionRuneType",
        "returns":"void"
      },{
        "args":[{
            "type":"handle",
            "name":"hPortal"
          }],
        "name":"SetPartnerPortal",
        "returns":"void"
      },{
        "args":[{
            "type":"bool",
            "name":"bActive"
          }],
        "name":"SetPortalActive",
        "returns":"void"
      }],
    "extend":"CDOTA_BaseNPC_Building"
  },{
    "kind":"class",
    "name":"CDOTA_Unit_Nian",
    "members":[{
        "args":[],
        "name":"GetHorn",
        "returns":"handle",
        "description":"Is the Nian horn?"
      },{
        "args":[],
        "name":"GetTail",
        "returns":"handle",
        "description":"Is the Nian's tail broken?"
      },{
        "args":[],
        "name":"IsHornAlive",
        "returns":"bool",
        "description":"Is the Nian's horn broken?"
      },{
        "args":[],
        "name":"IsTailAlive",
        "returns":"bool",
        "description":"Is the Nian's tail broken?"
      }],
    "extend":"CDOTA_BaseNPC_Creature"
  },{
    "kind":"class",
    "name":"CDebugOverlayScriptHelper",
    "instance":"debugoverlay",
    "members":[{
        "args":[{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"float"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Axis",
        "returns":"void",
        "description":"Draws an axis. Specify origin + orientation in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Box",
        "returns":"void",
        "description":"Draws a world-space axis-aligned box. Specify bounds in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"BoxAngles",
        "returns":"void",
        "description":"Draws an oriented box at the origin. Specify bounds in local space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Capsule",
        "returns":"void",
        "description":"Draws a capsule. Specify base in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Circle",
        "returns":"void",
        "description":"Draws a circle. Specify center in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"CircleScreenOriented",
        "returns":"void",
        "description":"Draws a circle oriented to the screen. Specify center in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Cone",
        "returns":"void",
        "description":"Draws a wireframe cone. Specify endpoint and direction in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Cross",
        "returns":"void",
        "description":"Draws a screen-aligned cross. Specify origin in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Cross3D",
        "returns":"void",
        "description":"Draws a world-aligned cross. Specify origin in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Cross3DOriented",
        "returns":"void",
        "description":"Draws an oriented cross. Specify origin in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"DrawTickMarkedLine",
        "returns":"void",
        "description":"Draws a dashed line. Specify endpoints in world space."
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          },{
            "type":"float"
          }],
        "name":"EntityAttachments",
        "returns":"void",
        "description":"Draws the attachments of the entity"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"EntityAxis",
        "returns":"void",
        "description":"Draws the axis of the entity origin"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"EntityBounds",
        "returns":"void",
        "description":"Draws bounds of an entity"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          }],
        "name":"EntitySkeleton",
        "returns":"void",
        "description":"Draws the skeleton of the entity"
      },{
        "args":[{
            "type":"ehandle"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"EntityText",
        "returns":"void",
        "description":"Draws text on an entity"
      },{
        "args":[{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"FilledRect2D",
        "returns":"void",
        "description":"Draws a screen-space filled 2D rectangle. Coordinates are in pixels."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"HorzArrow",
        "returns":"void",
        "description":"Draws a horizontal arrow. Specify endpoints in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Line",
        "returns":"void",
        "description":"Draws a line between two points"
      },{
        "args":[{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"Line2D",
        "returns":"void",
        "description":"Draws a line between two points in screenspace"
      },{
        "args":[],
        "name":"PopDebugOverlayScope",
        "returns":"void",
        "description":"Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "name":"PushAndClearDebugOverlayScope",
        "returns":"void",
        "description":"Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id."
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "name":"PushDebugOverlayScope",
        "returns":"void",
        "description":"Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
      },{
        "args":[{
            "type":"utlstringtoken"
          }],
        "name":"RemoveAllInScope",
        "returns":"void",
        "description":"Removes all overlays marked with a specific identifier, regardless of their lifetime."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"SolidCone",
        "returns":"void",
        "description":"Draws a solid cone. Specify endpoint and direction in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Sphere",
        "returns":"void",
        "description":"Draws a wireframe sphere. Specify center in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"SweptBox",
        "returns":"void",
        "description":"Draws a swept box. Specify endpoints in world space and the bounds in local space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"Text",
        "returns":"void",
        "description":"Draws 2D text. Specify origin in world space."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"float"
          }],
        "name":"Texture",
        "returns":"void",
        "description":"Draws a screen-space texture. Coordinates are in pixels."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Triangle",
        "returns":"void",
        "description":"Draws a filled triangle. Specify vertices in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"VectorText3D",
        "returns":"void",
        "description":"Draws 3D text. Specify origin + orientation in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"VertArrow",
        "returns":"void",
        "description":"Draws a vertical arrow. Specify endpoints in world space."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"YawArrow",
        "returns":"void",
        "description":"Draws a arrow associated with a specific yaw. Specify endpoints in world space."
      }]
  },{
    "kind":"class",
    "name":"CDotaQuest",
    "members":[{
        "args":[{
            "type":"handle",
            "name":"hSubquest"
          }],
        "name":"AddSubquest",
        "returns":"void",
        "description":"Add a subquest to this quest"
      },{
        "args":[],
        "name":"CompleteQuest",
        "returns":"void",
        "description":"Mark this quest complete"
      },{
        "args":[{
            "type":"int",
            "name":"nIndex"
          }],
        "name":"GetSubquest",
        "returns":"handle",
        "description":"Finds a subquest from this quest by index"
      },{
        "args":[{
            "type":"string",
            "name":"pszName"
          }],
        "name":"GetSubquestByName",
        "returns":"handle",
        "description":"Finds a subquest from this quest by name"
      },{
        "args":[{
            "type":"handle",
            "name":"hSubquest"
          }],
        "name":"RemoveSubquest",
        "returns":"void",
        "description":"Remove a subquest from this quest"
      },{
        "args":[{
            "type":"string",
            "name":"pszString"
          }],
        "name":"SetTextReplaceString",
        "returns":"void",
        "description":"Set the text replace string for this quest"
      },{
        "args":[{
            "type":"int",
            "name":"valueSlot"
          },{
            "type":"int",
            "name":"value"
          }],
        "name":"SetTextReplaceValue",
        "returns":"void",
        "description":"Set a quest value"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CDotaSubquestBase",
    "members":[{
        "args":[],
        "name":"CompleteSubquest",
        "returns":"void",
        "description":"Mark this subquest complete"
      },{
        "args":[{
            "type":"string",
            "name":"pszString"
          }],
        "name":"SetTextReplaceString",
        "returns":"void",
        "description":"Set the text replace string for this subquest"
      },{
        "args":[{
            "type":"int",
            "name":"valueSlot"
          },{
            "type":"int",
            "name":"value"
          }],
        "name":"SetTextReplaceValue",
        "returns":"void",
        "description":"Set a subquest value"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CDotaTutorialNPCBlocker",
    "members":[{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetEnabled",
        "returns":"void"
      },{
        "args":[{
            "type":"handle",
            "name":"hBlocker"
          }],
        "name":"SetOtherBlocker",
        "returns":"void"
      }],
    "extend":"CBaseFlex"
  },{
    "kind":"class",
    "name":"CEntities",
    "instance":"Entities",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "name":"CreateByClassname",
        "returns":"handle",
        "description":"Creates an entity by classname"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"FindAllByClassname",
        "returns":"table",
        "description":"Finds all entities by class name. Returns an array containing all the found entities."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "name":"FindAllByClassnameWithin",
        "returns":"table",
        "description":"Find entities by class name within a radius."
      },{
        "args":[{
            "type":"string"
          }],
        "name":"FindAllByModel",
        "returns":"table",
        "description":"Find entities by model name."
      },{
        "args":[{
            "type":"string"
          }],
        "name":"FindAllByName",
        "returns":"table",
        "description":"Find all entities by name. Returns an array containing all the found entities in it."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "name":"FindAllByNameWithin",
        "returns":"table",
        "description":"Find entities by name within a radius."
      },{
        "args":[{
            "type":"string"
          }],
        "name":"FindAllByTarget",
        "returns":"table",
        "description":"Find entities by targetname."
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "name":"FindAllInSphere",
        "returns":"table",
        "description":"Find entities within a radius."
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          }],
        "name":"FindByClassname",
        "returns":"handle",
        "description":"Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "name":"FindByClassnameNearest",
        "returns":"handle",
        "description":"Find entities by class name nearest to a point."
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "name":"FindByClassnameWithin",
        "returns":"handle",
        "description":"Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          }],
        "name":"FindByModel",
        "returns":"handle",
        "description":"Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "name":"FindByModelWithin",
        "returns":"handle",
        "description":"Find entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          }],
        "name":"FindByName",
        "returns":"handle",
        "description":"Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "name":"FindByNameNearest",
        "returns":"handle",
        "description":"Find entities by name nearest to a point."
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "name":"FindByNameWithin",
        "returns":"handle",
        "description":"Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"string"
          }],
        "name":"FindByTarget",
        "returns":"handle",
        "description":"Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[{
            "type":"handle"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "name":"FindInSphere",
        "returns":"handle",
        "description":"Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
      },{
        "args":[],
        "name":"First",
        "returns":"handle",
        "description":"Begin an iteration over the list of entities"
      },{
        "args":[],
        "name":"GetLocalPlayer",
        "returns":"handle",
        "description":"Get the local player controller (backcompat)."
      },{
        "args":[],
        "name":"GetLocalPlayerController",
        "returns":"handle",
        "description":"Get the local player controller."
      },{
        "args":[],
        "name":"GetLocalPlayerPawn",
        "returns":"handle",
        "description":"Get the local player pawn."
      },{
        "args":[{
            "type":"handle"
          }],
        "name":"Next",
        "returns":"handle",
        "description":"Continue an iteration over the list of entities, providing reference to a previously found entity"
      }]
  },{
    "kind":"class",
    "name":"CEntityInstance",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"ConnectOutput",
        "returns":"void",
        "description":"Adds an I/O connection that will call the named function on this entity when the specified output fires."
      },{
        "args":[],
        "name":"Destroy",
        "returns":"void"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"DisconnectOutput",
        "returns":"void",
        "description":"Removes a connected script function from an I/O event on this entity."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"DisconnectRedirectedOutput",
        "returns":"void",
        "description":"Removes a connected script function from an I/O event on the passed entity."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          },{
            "type":"handle"
          },{
            "type":"table"
          },{
            "type":"float"
          }],
        "name":"FireOutput",
        "returns":"void",
        "description":"Fire an entity output"
      },{
        "args":[],
        "name":"GetClassname",
        "returns":"string"
      },{
        "args":[],
        "name":"GetDebugName",
        "returns":"string",
        "description":"Get the entity name w/help if not defined (i.e. classname/etc)"
      },{
        "args":[],
        "name":"GetEntityHandle",
        "returns":"ehandle",
        "description":"Get the entity as an EHANDLE"
      },{
        "args":[],
        "name":"GetEntityIndex",
        "returns":"int"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"GetIntAttr",
        "returns":"int",
        "description":"Get Integer Attribute"
      },{
        "args":[],
        "name":"GetName",
        "returns":"string"
      },{
        "args":[],
        "name":"GetOrCreatePrivateScriptScope",
        "returns":"handle",
        "description":"Retrieve, creating if necessary, the private per-instance script-side data associated with an entity"
      },{
        "args":[],
        "name":"GetOrCreatePublicScriptScope",
        "returns":"handle",
        "description":"Retrieve, creating if necessary, the public script-side data associated with an entity"
      },{
        "args":[],
        "name":"GetPrivateScriptScope",
        "returns":"handle",
        "description":"Retrieve the private per-instance script-side data associated with an entity"
      },{
        "args":[],
        "name":"GetPublicScriptScope",
        "returns":"handle",
        "description":"Retrieve the public script-side data associated with an entity"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"RedirectOutput",
        "returns":"void",
        "description":"Adds an I/O connection that will call the named function on the passed entity when the specified output fires."
      },{
        "args":[],
        "name":"RemoveSelf",
        "returns":"void",
        "description":"Delete this entity"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"SetIntAttr",
        "returns":"void",
        "description":"Set Integer Attribute"
      },{
        "args":[],
        "name":"entindex",
        "returns":"int"
      }]
  },{
    "kind":"class",
    "name":"CEntityScriptFramework",
    "instance":"NativeFunctions",
    "members":[]
  },{
    "kind":"class",
    "name":"CEnvEntityMaker",
    "members":[{
        "args":[],
        "name":"SpawnEntity",
        "returns":"void",
        "description":"Create an entity at the location of the maker"
      },{
        "args":[{
            "type":"handle",
            "name":"hEntity"
          }],
        "name":"SpawnEntityAtEntityOrigin",
        "returns":"void",
        "description":"Create an entity at the location of a specified entity instance"
      },{
        "args":[{
            "type":"Vector",
            "name":"vecAlternateOrigin"
          },{
            "type":"Vector",
            "name":"vecAlternateAngles"
          }],
        "name":"SpawnEntityAtLocation",
        "returns":"void",
        "description":"Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)"
      },{
        "args":[{
            "type":"string",
            "name":"pszName"
          }],
        "name":"SpawnEntityAtNamedEntityOrigin",
        "returns":"void",
        "description":"Create an entity at the location of a named entity"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CEnvProjectedTexture",
    "members":[{
        "args":[{
            "type":"float",
            "name":"flRange"
          }],
        "name":"SetFarRange",
        "returns":"void",
        "description":"Set light maximum range"
      },{
        "args":[{
            "type":"float",
            "name":"flAtten"
          }],
        "name":"SetLinearAttenuation",
        "returns":"void",
        "description":"Set light linear attenuation value"
      },{
        "args":[{
            "type":"float",
            "name":"flRange"
          }],
        "name":"SetNearRange",
        "returns":"void",
        "description":"Set light minimum range"
      },{
        "args":[{
            "type":"float",
            "name":"flAtten"
          }],
        "name":"SetQuadraticAttenuation",
        "returns":"void",
        "description":"Set light quadratic attenuation value"
      },{
        "args":[{
            "type":"bool",
            "name":"bOn"
          },{
            "type":"float",
            "name":"flIntensity"
          },{
            "type":"float",
            "name":"flNoise"
          },{
            "type":"int",
            "name":"nPlanes"
          },{
            "type":"float",
            "name":"flPlaneOffset"
          }],
        "name":"SetVolumetrics",
        "returns":"void",
        "description":"Turn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CFoWBlockerRegion",
    "members":[{
        "args":[{
            "type":"Vector",
            "name":"vMins"
          },{
            "type":"Vector",
            "name":"vMaxs"
          },{
            "type":"bool",
            "name":"bClearRegion"
          }],
        "name":"AddRectangularBlocker",
        "returns":"void",
        "description":"AddRectangularBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle"
      },{
        "args":[{
            "type":"Vector",
            "name":"vMins"
          },{
            "type":"Vector",
            "name":"vMaxs"
          },{
            "type":"bool",
            "name":"bClearRegion"
          }],
        "name":"AddRectangularOutlineBlocker",
        "returns":"void",
        "description":"AddRectangularOutlineBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle outline"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CInfoData",
    "members":[{
        "args":[{
            "type":"utlstringtoken",
            "name":"tok"
          },{
            "type":"Vector",
            "name":"vDefault"
          }],
        "name":"QueryColor",
        "returns":"Vector",
        "description":"Query color data for this key"
      },{
        "args":[{
            "type":"utlstringtoken",
            "name":"tok"
          },{
            "type":"float",
            "name":"flDefault"
          }],
        "name":"QueryFloat",
        "returns":"float",
        "description":"Query float data for this key"
      },{
        "args":[{
            "type":"utlstringtoken",
            "name":"tok"
          },{
            "type":"int",
            "name":"nDefault"
          }],
        "name":"QueryInt",
        "returns":"int",
        "description":"Query int data for this key"
      },{
        "args":[{
            "type":"utlstringtoken",
            "name":"tok"
          },{
            "type":"float",
            "name":"flDefault"
          }],
        "name":"QueryNumber",
        "returns":"float",
        "description":"Query number data for this key"
      },{
        "args":[{
            "type":"utlstringtoken",
            "name":"tok"
          },{
            "type":"string",
            "name":"pDefault"
          }],
        "name":"QueryString",
        "returns":"string",
        "description":"Query string data for this key"
      },{
        "args":[{
            "type":"utlstringtoken",
            "name":"tok"
          },{
            "type":"Vector",
            "name":"vDefault"
          }],
        "name":"QueryVector",
        "returns":"Vector",
        "description":"Query vector data for this key"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CInfoPlayerStartDota",
    "members":[{
        "args":[],
        "name":"IsEnabled",
        "returns":"bool",
        "description":"Returns whether the object is currently active"
      },{
        "args":[{
            "type":"bool",
            "name":"bEnabled"
          }],
        "name":"SetEnabled",
        "returns":"void",
        "description":"Enable or disable the obstruction"
      }],
    "extend":"CPointEntity"
  },{
    "kind":"class",
    "name":"CInfoWorldLayer",
    "members":[{
        "args":[],
        "name":"HideWorldLayer",
        "returns":"void",
        "description":"Hides this layer"
      },{
        "args":[],
        "name":"ShowWorldLayer",
        "returns":"void",
        "description":"Shows this layer"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CLogicRelay",
    "members":[{
        "args":[{
            "type":"handle",
            "name":"hActivator"
          },{
            "type":"handle",
            "name":"hCaller"
          }],
        "name":"Trigger",
        "returns":"void",
        "description":"Trigger( hActivator, hCaller ) : Triggers the logic_relay"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CLogicScript",
    "members":[],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CMarkupVolumeTagged",
    "members":[{
        "args":[{
            "type":"string",
            "name":"pszTagName"
          }],
        "name":"HasTag",
        "returns":"bool",
        "description":"Does this volume have the given tag."
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CNativeOutputs",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"AddOutput",
        "returns":"void",
        "description":"Add an output"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"Init",
        "returns":"void",
        "description":"Initialize with number of outputs"
      }]
  },{
    "kind":"class",
    "name":"CParticleSystem",
    "members":[],
    "extend":"CBaseModelEntity"
  },{
    "kind":"class",
    "name":"CPhysicsProp",
    "members":[{
        "args":[],
        "name":"DisableMotion",
        "returns":"void",
        "description":"Disable motion for the prop"
      },{
        "args":[],
        "name":"EnableMotion",
        "returns":"void",
        "description":"Enable motion for the prop"
      },{
        "args":[{
            "type":"bool",
            "name":"bIsDynamicVsDynamicContinuousEnabled"
          }],
        "name":"SetDynamicVsDynamicContinuous",
        "returns":"void",
        "description":"Enable/disable dynamic vs dynamic continuous collision traces"
      }],
    "extend":"CBaseAnimatingActivity"
  },{
    "kind":"class",
    "name":"CPointClientUIWorldPanel",
    "members":[{
        "args":[],
        "name":"AcceptUserInput",
        "returns":"void",
        "description":"Tells the panel to accept user input."
      },{
        "args":[{
            "type":"string",
            "name":"pszClasses"
          }],
        "name":"AddCSSClasses",
        "returns":"void",
        "description":"Adds CSS class(es) to the panel"
      },{
        "args":[],
        "name":"IgnoreUserInput",
        "returns":"void",
        "description":"Tells the panel to ignore user input."
      },{
        "args":[],
        "name":"IsGrabbable",
        "returns":"bool",
        "description":"Returns whether this entity is grabbable."
      },{
        "args":[{
            "type":"string",
            "name":"pszClasses"
          }],
        "name":"RemoveCSSClasses",
        "returns":"void",
        "description":"Remove CSS class(es) from the panel"
      }],
    "extend":"CBaseModelEntity"
  },{
    "kind":"class",
    "name":"CPointEntity",
    "members":[],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CPointTemplate",
    "members":[{
        "args":[],
        "name":"DeleteCreatedSpawnGroups",
        "returns":"void",
        "description":"DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this."
      },{
        "args":[],
        "name":"ForceSpawn",
        "returns":"void",
        "description":"ForceSpawn() : Spawns all of the entities the point_template is pointing at."
      },{
        "args":[],
        "name":"GetSpawnedEntities",
        "returns":"handle",
        "description":"GetSpawnedEntities() : Get the list of the most recent spawned entities"
      },{
        "args":[{
            "type":"handle",
            "name":"hCallbackFunc"
          },{
            "type":"handle",
            "name":"hCallbackScope"
          }],
        "name":"SetSpawnCallback",
        "returns":"void",
        "description":"SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array."
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CPointWorldText",
    "members":[{
        "args":[{
            "type":"string",
            "name":"pMessage"
          }],
        "name":"SetMessage",
        "returns":"void",
        "description":"Set the message on this entity."
      }],
    "extend":"CBaseModelEntity"
  },{
    "kind":"class",
    "name":"CSceneEntity",
    "members":[{
        "args":[{
            "type":"int"
          }],
        "name":"AddBroadcastTeamTarget",
        "returns":"void",
        "description":"Adds a team (by index) to the broadcast list"
      },{
        "args":[],
        "name":"Cancel",
        "returns":"void",
        "description":"Cancel scene playback"
      },{
        "args":[],
        "name":"EstimateLength",
        "returns":"float",
        "description":"Returns length of this scene in seconds."
      },{
        "args":[],
        "name":"FindCamera",
        "returns":"handle",
        "description":"Get the camera"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"FindNamedEntity",
        "returns":"handle",
        "description":"given an entity reference, such as !target, get actual entity from scene object"
      },{
        "args":[],
        "name":"IsPaused",
        "returns":"bool",
        "description":"If this scene is currently paused."
      },{
        "args":[],
        "name":"IsPlayingBack",
        "returns":"bool",
        "description":"If this scene is currently playing."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"LoadSceneFromString",
        "returns":"bool",
        "description":"given a dummy scene name and a vcd string, load the scene"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"RemoveBroadcastTeamTarget",
        "returns":"void",
        "description":"Removes a team (by index) from the broadcast list"
      },{
        "args":[{
            "type":"handle"
          }],
        "name":"Start",
        "returns":"void",
        "description":"Start scene playback, takes activatorEntity as param"
      }],
    "extend":"CBaseEntity"
  },{
    "kind":"class",
    "name":"CScriptHeroList",
    "instance":"HeroList",
    "members":[{
        "args":[],
        "name":"GetAllHeroes",
        "returns":"table",
        "description":"Returns all the heroes in the world"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GetHero",
        "returns":"handle",
        "description":"Get the Nth hero in the Hero List"
      },{
        "args":[],
        "name":"GetHeroCount",
        "returns":"int",
        "description":"Returns the number of heroes in the world"
      }]
  },{
    "kind":"class",
    "name":"CScriptKeyValues",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "name":"GetValue",
        "returns":"table",
        "description":"Reads a spawn key"
      }]
  },{
    "kind":"class",
    "name":"CScriptParticleManager",
    "instance":"ParticleManager",
    "members":[{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          }],
        "name":"CreateParticle",
        "returns":"int",
        "description":"Creates a new particle effect"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"handle"
          }],
        "name":"CreateParticleForPlayer",
        "returns":"int",
        "description":"Creates a new particle effect that only plays for the specified player"
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"int"
          }],
        "name":"CreateParticleForTeam",
        "returns":"int",
        "description":"Creates a new particle effect that only plays for the specified team"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"bool"
          }],
        "name":"DestroyParticle",
        "returns":"void",
        "description":"(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"GetParticleReplacement",
        "returns":"string"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"ReleaseParticleIndex",
        "returns":"void",
        "description":"Frees the specified particle index"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"SetParticleAlwaysSimulate",
        "returns":"void"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControl",
        "returns":"void",
        "description":"Set the control point data for a control on a particle effect"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"bool"
          }],
        "name":"SetParticleControlEnt",
        "returns":"void"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControlFallback",
        "returns":"void",
        "description":"(int iIndex, int iPoint, Vector vecPosition)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControlForward",
        "returns":"void",
        "description":"[OBSOLETE - Use SetParticleControlTransformForward] (int nFXIndex, int nPoint, vForward)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControlOrientation",
        "returns":"void",
        "description":"[OBSOLETE - Use SetParticleControlTransform] (int nFXIndex, int nPoint, vForward, vRight, vUp) - Set the orientation for a control on a particle effect (NOTE: This is left handed -- bad!!)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControlOrientationFLU",
        "returns":"void",
        "description":"[OBSOLETE - Use SetParticleControlTransform] (int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"QAngle"
          }],
        "name":"SetParticleControlTransform",
        "returns":"void",
        "description":"(int nFXIndex, int nPoint, vOrigin, qAngles)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControlTransformForward",
        "returns":"void",
        "description":"(int nFXIndex, int nPoint, vOrigin, vForward)"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"SetParticleFoWProperties",
        "returns":"void",
        "description":"int nfxindex, int nPoint, int nPoint2, float flRadius"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"bool"
          }],
        "name":"SetParticleShouldCheckFoW",
        "returns":"bool",
        "description":"int nfxindex, bool bCheckFoW"
      }]
  },{
    "kind":"class",
    "name":"CScriptPrecacheContext",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "name":"AddResource",
        "returns":"void",
        "description":"Precaches a specific resource"
      },{
        "args":[{
            "type":"string"
          }],
        "name":"GetValue",
        "returns":"table",
        "description":"Reads a spawn key"
      }]
  },{
    "kind":"class",
    "name":"CScriptUniformRandomStream",
    "members":[{
        "args":[{
            "type":"float",
            "name":"flMinVal"
          },{
            "type":"float",
            "name":"flMaxVal"
          }],
        "name":"RandomFloat",
        "returns":"float"
      },{
        "args":[{
            "type":"float",
            "name":"flMinVal"
          },{
            "type":"float",
            "name":"flMaxVal"
          },{
            "type":"float",
            "name":"flExponent"
          }],
        "name":"RandomFloatExp",
        "returns":"float"
      },{
        "args":[{
            "type":"int",
            "name":"iMinVal"
          },{
            "type":"int",
            "name":"iMaxVal"
          }],
        "name":"RandomInt",
        "returns":"int"
      },{
        "args":[{
            "type":"int",
            "name":"iPercentage"
          }],
        "name":"RollPercentage",
        "returns":"bool"
      }]
  },{
    "kind":"class",
    "name":"CTakeDamageInfo",
    "members":[{
        "args":[{
            "type":"float",
            "name":"flAddAmount"
          }],
        "name":"AddDamage",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"bitsDamageType"
          }],
        "name":"AddDamageType",
        "returns":"void"
      },{
        "args":[],
        "name":"GetAmmoType",
        "returns":"int"
      },{
        "args":[],
        "name":"GetAttacker",
        "returns":"handle"
      },{
        "args":[],
        "name":"GetDamage",
        "returns":"float"
      },{
        "args":[],
        "name":"GetDamageCustom",
        "returns":"int"
      },{
        "args":[],
        "name":"GetDamageForce",
        "returns":"Vector"
      },{
        "args":[],
        "name":"GetDamagePosition",
        "returns":"Vector"
      },{
        "args":[],
        "name":"GetDamageType",
        "returns":"int"
      },{
        "args":[],
        "name":"GetInflictor",
        "returns":"handle"
      },{
        "args":[],
        "name":"GetOriginalDamage",
        "returns":"float"
      },{
        "args":[],
        "name":"GetReportedPosition",
        "returns":"Vector"
      },{
        "args":[{
            "type":"int",
            "name":"bitsToTest"
          }],
        "name":"HasDamageType",
        "returns":"bool"
      },{
        "args":[{
            "type":"float",
            "name":"flScaleAmount"
          }],
        "name":"ScaleDamage",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iAmmoType"
          }],
        "name":"SetAmmoType",
        "returns":"void"
      },{
        "args":[{
            "type":"handle",
            "name":"hAttacker"
          }],
        "name":"SetAttacker",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flDamage"
          }],
        "name":"SetDamage",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"iDamageCustom"
          }],
        "name":"SetDamageCustom",
        "returns":"void"
      },{
        "args":[{
            "type":"Vector",
            "name":"damageForce"
          }],
        "name":"SetDamageForce",
        "returns":"void"
      },{
        "args":[{
            "type":"Vector",
            "name":"damagePosition"
          }],
        "name":"SetDamagePosition",
        "returns":"void"
      },{
        "args":[{
            "type":"int",
            "name":"bitsDamageType"
          }],
        "name":"SetDamageType",
        "returns":"void"
      },{
        "args":[{
            "type":"float",
            "name":"flOriginalDamage"
          }],
        "name":"SetOriginalDamage",
        "returns":"void"
      },{
        "args":[{
            "type":"Vector",
            "name":"reportedPosition"
          }],
        "name":"SetReportedPosition",
        "returns":"void"
      }]
  },{
    "kind":"class",
    "name":"Convars",
    "instance":"Convars",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "name":"GetBool",
        "returns":"table",
        "description":"GetBool(name) : returns the convar as a boolean flag."
      },{
        "args":[],
        "name":"GetCommandClient",
        "returns":"handle",
        "description":"GetCommandClient() : returns the player who issued this console command."
      },{
        "args":[],
        "name":"GetDOTACommandClient",
        "returns":"handle",
        "description":"GetDOTACommandClient() : returns the DOTA player who issued this console command."
      },{
        "args":[{
            "type":"string"
          }],
        "name":"GetFloat",
        "returns":"table",
        "description":"GetFloat(name) : returns the convar as a float. May return null if no such convar."
      },{
        "args":[{
            "type":"string"
          }],
        "name":"GetInt",
        "returns":"table",
        "description":"GetInt(name) : returns the convar as an int. May return null if no such convar."
      },{
        "args":[{
            "type":"string"
          }],
        "name":"GetStr",
        "returns":"table",
        "description":"GetStr(name) : returns the convar as a string. May return null if no such convar."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"RegisterCommand",
        "returns":"void",
        "description":"RegisterCommand(name, fn, helpString, flags) : register a console command."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"RegisterConvar",
        "returns":"void",
        "description":"RegisterConvar(name, defaultValue, helpString, flags): register a new console variable."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"bool"
          }],
        "name":"SetBool",
        "returns":"void",
        "description":"SetBool(name, val) : sets the value of the convar to the bool."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"float"
          }],
        "name":"SetFloat",
        "returns":"void",
        "description":"SetFloat(name, val) : sets the value of the convar to the float."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"SetInt",
        "returns":"void",
        "description":"SetInt(name, val) : sets the value of the convar to the int."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"SetStr",
        "returns":"void",
        "description":"SetStr(name, val) : sets the value of the convar to the string."
      }]
  },{
    "kind":"class",
    "name":"GlobalSys",
    "instance":"GlobalSys",
    "members":[{
        "args":[{
            "type":"string"
          }],
        "name":"CommandLineCheck",
        "returns":"table",
        "description":"CommandLineCheck(name) : returns true if the command line param was used, otherwise false."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"float"
          }],
        "name":"CommandLineFloat",
        "returns":"table",
        "description":"CommandLineFloat(name) : returns the command line param as a float."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"CommandLineInt",
        "returns":"table",
        "description":"CommandLineInt(name) : returns the command line param as an int."
      },{
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"CommandLineStr",
        "returns":"table",
        "description":"CommandLineStr(name) : returns the command line param as a string."
      }]
  },{
    "kind":"class",
    "name":"GridNav",
    "instance":"GridNav",
    "members":[{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"CanFindPath",
        "returns":"bool",
        "description":"Determine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd)"
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"bool"
          }],
        "name":"DestroyTreesAroundPoint",
        "returns":"void",
        "description":"Destroy all trees in the area(vPosition, flRadius, bFullCollision"
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"FindPathLength",
        "returns":"float",
        "description":"Find a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd )"
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"bool"
          }],
        "name":"GetAllTreesAroundPoint",
        "returns":"table",
        "description":"Returns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision)."
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GridPosToWorldCenterX",
        "returns":"float",
        "description":"Get the X position of the center of a given X index"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GridPosToWorldCenterY",
        "returns":"float",
        "description":"Get the Y position of the center of a given Y index"
      },{
        "args":[{
            "type":"Vector"
          }],
        "name":"IsBlocked",
        "returns":"bool",
        "description":"Checks whether the given position is blocked"
      },{
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"bool"
          }],
        "name":"IsNearbyTree",
        "returns":"bool",
        "description":"(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point"
      },{
        "args":[{
            "type":"Vector"
          }],
        "name":"IsTraversable",
        "returns":"bool",
        "description":"Checks whether the given position is traversable"
      },{
        "args":[],
        "name":"RegrowAllTrees",
        "returns":"void",
        "description":"Causes all trees in the map to regrow"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"WorldToGridPosX",
        "returns":"int",
        "description":"Get the X index of a given world X position"
      },{
        "args":[{
            "type":"float"
          }],
        "name":"WorldToGridPosY",
        "returns":"int",
        "description":"Get the Y index of a given world Y position"
      }]
  },{
    "kind":"class",
    "name":"ProjectileManager",
    "instance":"ProjectileManager",
    "members":[{
        "args":[{
            "type":"handle"
          },{
            "type":"int"
          }],
        "name":"ChangeTrackingProjectileSpeed",
        "returns":"void",
        "description":"Update speed"
      },{
        "args":[{
            "type":"handle"
          }],
        "name":"CreateLinearProjectile",
        "returns":"int",
        "description":"Creates a linear projectile and returns the projectile ID"
      },{
        "args":[{
            "type":"handle"
          }],
        "name":"CreateTrackingProjectile",
        "returns":"int",
        "description":"Creates a tracking projectile"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"DestroyLinearProjectile",
        "returns":"void",
        "description":"Destroys the linear projectile matching the argument ID"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"DestroyTrackingProjectile",
        "returns":"void",
        "description":"Destroy a tracking projectile early"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GetLinearProjectileLocation",
        "returns":"Vector",
        "description":"Returns current location of projectile"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GetLinearProjectileRadius",
        "returns":"float",
        "description":"Returns current radius of projectile"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GetLinearProjectileVelocity",
        "returns":"Vector",
        "description":"Returns a vector representing the current velocity of the projectile."
      },{
        "args":[{
            "type":"int"
          }],
        "name":"GetTrackingProjectileLocation",
        "returns":"Vector",
        "description":"Returns current location of projectile"
      },{
        "args":[{
            "type":"int"
          }],
        "name":"IsValidProjectile",
        "returns":"bool",
        "description":"Is this a valid projectile?"
      },{
        "args":[{
            "type":"handle"
          }],
        "name":"ProjectileDodge",
        "returns":"void",
        "description":"Makes the specified unit dodge projectiles"
      },{
        "args":[{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"float"
          }],
        "name":"UpdateLinearProjectileDirection",
        "returns":"void",
        "description":"Update velocity"
      }]
  },{
    "kind":"class",
    "name":"SteamInfo",
    "instance":"SteamInfo",
    "members":[{
        "args":[],
        "name":"IsPublicUniverse",
        "returns":"bool",
        "description":"Is the script connected to the public Steam universe"
      }]
  }]
$> cl_script_reload
Initializing script VM...
...done
[{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"float",
    "name":"AngleDiff",
    "description":"Returns the number of degrees difference between two yaw angles"
  },{
    "args":[{
        "type":"QAngle"
      }],
    "kind":"function",
    "returns":"Vector",
    "name":"AnglesToVector",
    "description":"Generate a vector given a QAngles"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"AppendToLogFile",
    "description":"AppendToLogFile is deprecated. Print to the console for logging instead."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"Quaternion",
    "name":"AxisAngleToQuaternion",
    "description":"(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "returns":"Vector",
    "name":"CalcClosestPointOnEntityOBB",
    "description":"Compute the closest point on the OBB of an entity."
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"float",
    "name":"CalcDistanceBetweenEntityOBB",
    "description":"Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping."
  },{
    "returns":"float",
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "name":"CalcDistanceToLineSegment2D",
    "kind":"function"
  },{
    "args":[{
        "type":"ehandle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"CancelEntityIOEvents",
    "description":"Create all I/O events for a particular entity"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"bool",
    "name":"CreateEffect",
    "description":"Pass table - Inputs: entity, effect"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "returns":"handle",
    "name":"CreateHTTPRequest",
    "description":"Create an HTTP request."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "returns":"handle",
    "name":"CreateHTTPRequestScriptVM",
    "description":"Create an HTTP request."
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "returns":"handle",
    "name":"CreateUniformRandomStream",
    "description":"( iSeed ) - Creates a separate random number stream."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "returns":"Vector",
    "name":"CrossVectors",
    "description":"(vector,vector) cross product between two vectors"
  },{
    "args":[],
    "kind":"function",
    "returns":"void",
    "name":"DebugBreak",
    "description":"Breaks in the debugger"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"void",
    "name":"DebugDrawBox",
    "description":"Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"void",
    "name":"DebugDrawBoxDirection",
    "description":"Draw a debug forward box (cent, min, max, forward, vRgb, a, duration)"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"void",
    "name":"DebugDrawCircle",
    "description":"Draw a debug circle (center, vRgb, a, rad, ztest, duration)"
  },{
    "args":[],
    "kind":"function",
    "returns":"void",
    "name":"DebugDrawClear",
    "description":"Try to clear all the debug overlay info"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"void",
    "name":"DebugDrawLine",
    "description":"Draw a debug overlay line (origin, target, r, g, b, ztest, duration)"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"void",
    "name":"DebugDrawLine_vCol",
    "description":"Draw a debug line using color vec (start, end, vRgb, a, ztest, duration)"
  },{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"void",
    "name":"DebugDrawScreenTextLine",
    "description":"Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"void",
    "name":"DebugDrawSphere",
    "description":"Draw a debug sphere (center, vRgb, a, rad, ztest, duration)"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"string"
      },{
        "type":"bool"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"void",
    "name":"DebugDrawText",
    "description":"Draw text in 3d (origin, text, bViewCheck, duration)"
  },{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"float"
      },{
        "type":"string"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "returns":"void",
    "name":"DebugScreenTextPretty",
    "description":"Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"bool",
    "name":"DoIncludeScript",
    "description":"Execute a script (internal)"
  },{
    "args":[{
        "type":"bool"
      },{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"DoScriptAssert",
    "description":"#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"string",
    "name":"DoUniqueString",
    "description":"#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"EmitSoundOn",
    "description":"Play named sound on Entity"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"EmitSoundOnClient",
    "description":"Play named sound only on the client for the passed in player"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "returns":"handle",
    "name":"EntIndexToHScript",
    "description":"Turn an entity index integer to an HScript representing that entity's script instance."
  },{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"float",
    "name":"ExponentialDecay",
    "description":"Smooth curve decreasing slower as it approaches zero"
  },{
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"FireEntityIOInputNameOnly",
    "description":"Fire Entity's Action Input w/no data"
  },{
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"FireEntityIOInputString",
    "description":"Fire Entity's Action Input with passed String - you own the memory"
  },{
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "returns":"void",
    "name":"FireEntityIOInputVec",
    "description":"Fire Entity's Action Input with passed Vector - you own the memory"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"FireGameEvent",
    "description":"Fire a game event."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"FireGameEventLocal",
    "description":"Fire a game event without broadcasting to the client."
  },{
    "args":[],
    "kind":"function",
    "returns":"float",
    "name":"FrameTime",
    "description":"Get the time spent on the server in the last frame"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"table",
    "name":"GetAbilityKeyValuesByName",
    "description":"Get ability data by ability name."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"string",
    "name":"GetAbilityTextureNameForAbility",
    "description":"Gets the ability texture name for an ability"
  },{
    "args":[],
    "kind":"function",
    "returns":"int",
    "name":"GetActiveSpawnGroupHandle",
    "description":"Returns the currently active spawn group handle"
  },{
    "args":[],
    "kind":"function",
    "returns":"int",
    "name":"GetFrameCount",
    "description":"Returns the engines current frame count"
  },{
    "args":[],
    "kind":"function",
    "returns":"handle",
    "name":"GetListenServerHost",
    "description":"Get the local player on a listen server."
  },{
    "args":[],
    "kind":"function",
    "returns":"int",
    "name":"GetLocalPlayerID",
    "description":"Get the local player ID."
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "returns":"int",
    "name":"GetLocalPlayerTeam",
    "description":"Get the local player team."
  },{
    "args":[],
    "kind":"function",
    "returns":"string",
    "name":"GetMapName",
    "description":"Get the name of the map."
  },{
    "args":[{
        "type":"ehandle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "returns":"float",
    "name":"GetMaxOutputDelay",
    "description":"Get the longest delay for all events attached to an output"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"Vector",
    "name":"GetPhysAngularVelocity",
    "description":"Get Angular Velocity for VPHYS or normal object. Returns a vector of the axis of rotation, multiplied by the degrees of rotation per second."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"Vector",
    "name":"GetPhysVelocity",
    "description":"Get Velocity for VPHYS or normal object"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"table",
    "name":"GetUnitKeyValuesByName",
    "description":"Get unit data by ability name."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"InitLogFile",
    "description":"InitLogFile is deprecated. Print to the console for logging instead."
  },{
    "args":[],
    "kind":"function",
    "returns":"bool",
    "name":"IsClient",
    "description":"Returns true if this is lua running from the client.dll."
  },{
    "args":[],
    "kind":"function",
    "returns":"bool",
    "name":"IsDedicatedServer",
    "description":"Returns true if this server is a dedicated server."
  },{
    "args":[],
    "kind":"function",
    "returns":"<unknown>",
    "name":"IsDotaAltPressed",
    "description":"Returns true if whatever alt is remapped to is pressed"
  },{
    "args":[],
    "kind":"function",
    "returns":"<unknown>",
    "name":"IsDotaCtrlPressed",
    "description":"Returns true if whatever ctrl is remapped to is pressed"
  },{
    "args":[],
    "kind":"function",
    "returns":"bool",
    "name":"IsInToolsMode",
    "description":"Returns true if this is lua running within tools mode."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"bool",
    "name":"IsMarkedForDeletion",
    "description":"Returns true if the entity is valid and marked for deletion."
  },{
    "args":[],
    "kind":"function",
    "returns":"bool",
    "name":"IsServer",
    "description":"Returns true if this is lua running from the server.dll."
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"bool",
    "name":"IsValidEntity",
    "description":"Checks to see if the given hScript is a valid entity"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"Vector",
    "name":"LerpVectors",
    "description":"(vector,vector,float) lerp between two vectors by a float factor returning new vector"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"int"
      }],
    "kind":"function",
    "returns":"void",
    "name":"LinkLuaModifier",
    "description":"Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType)."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"int",
    "name":"ListenToGameEvent",
    "description":"Register as a listener for a game event from script."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"table",
    "name":"LoadKeyValues",
    "description":"Creates a table from the specified keyvalues text file"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"table",
    "name":"LoadKeyValuesFromString",
    "description":"Creates a table from the specified keyvalues string"
  },{
    "args":[],
    "kind":"function",
    "returns":"table",
    "name":"LocalTime",
    "description":"Get the current local time"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"int",
    "name":"MakeStringToken",
    "description":"Checks to see if the given hScript is a valid entity"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "returns":"void",
    "name":"ManuallyTriggerSpawnGroupCompletion",
    "description":"Triggers the creation of entities in a manually-completed spawn group"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"Msg",
    "description":"Print a message"
  },{
    "args":[],
    "kind":"function",
    "returns":"float",
    "name":"Plat_FloatTime",
    "description":"Get the current float time from the engine"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "returns":"handle",
    "name":"PlayerInstanceFromIndex",
    "description":"Get a script instance of a player by index."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"PrecacheEntityFromTable",
    "description":"Precache an entity from KeyValues in table"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"PrecacheEntityListFromTable",
    "description":"Precache a list of entity KeyValues tables"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"PrintLinkedConsoleMessage",
    "description":"Print a console message with a linked console command"
  },{
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"QAngle",
    "name":"QSlerp",
    "description":"(from angle, to angle, time) - Spherical lerp of angle from->to based on time"
  },{
    "args":[{
        "type":"float"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"float",
    "name":"RandomFloat",
    "description":"Get a random float within a range"
  },{
    "args":[{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "returns":"int",
    "name":"RandomInt",
    "description":"Get a random int within a range"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"RegisterSpawnGroupFilterProxy",
    "description":"Create a C proxy for a script-based spawn group filter"
  },{
    "args":[],
    "kind":"function",
    "returns":"void",
    "name":"ReloadMOTD",
    "description":"Reloads the MotD file"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"RemoveSpawnGroupFilterProxy",
    "description":"Remove the C proxy for a script-based spawn group filter"
  },{
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "returns":"QAngle",
    "name":"RotateOrientation",
    "description":"Rotate a QAngle by another QAngle."
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"QAngle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "returns":"Vector",
    "name":"RotatePosition",
    "description":"Rotate a Vector around a point."
  },{
    "args":[{
        "type":"Quaternion"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"Quaternion",
    "name":"RotateQuaternionByAxisAngle",
    "description":"(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis"
  },{
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "returns":"QAngle",
    "name":"RotationDelta",
    "description":"Find the delta between two QAngles."
  },{
    "args":[{
        "type":"QAngle"
      },{
        "type":"QAngle"
      }],
    "kind":"function",
    "returns":"Vector",
    "name":"RotationDeltaAsAngularVelocity",
    "description":"converts delta QAngle to an angular velocity Vector"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"float"
      },{
        "type":"int"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "returns":"void",
    "name":"ScreenShake",
    "description":"Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"SendToConsole",
    "description":"Send a string to the console as a client command"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"void",
    "name":"SetOpvarFloatAll",
    "description":"Sets an opvar value for all players"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"string"
      },{
        "type":"float"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"SetOpvarFloatPlayer",
    "description":"Sets an opvar value for a single player"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "returns":"void",
    "name":"SetPhysAngularVelocity",
    "description":"Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"SetQuestName",
    "description":"Set the current quest name."
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "returns":"void",
    "name":"SetQuestPhase",
    "description":"Set the current quest phase."
  },{
    "args":[{
        "type":"ehandle"
      },{
        "type":"bool"
      }],
    "kind":"function",
    "returns":"void",
    "name":"SetRenderingEnabled",
    "description":"Set rendering on/off for an ehandle"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      },{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"SpawnEntityFromTableAsynchronous",
    "description":"Asynchronously spawns a single entity from a table"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"handle",
    "name":"SpawnEntityFromTableSynchronous",
    "description":"Synchronously spawns a single entity from a table"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"bool"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"bool",
    "name":"SpawnEntityGroupFromTable",
    "description":"Hierarchically spawn an entity group from a set of spawn tables."
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"int",
    "name":"SpawnEntityListFromTableAsynchronous",
    "description":"Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"handle",
    "name":"SpawnEntityListFromTableSynchronous",
    "description":"Synchronously spawn an entity group from a list of spawn tables."
  },{
    "args":[{
        "type":"Quaternion"
      },{
        "type":"Quaternion"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"Quaternion",
    "name":"SplineQuaternions",
    "description":"(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]"
  },{
    "args":[{
        "type":"Vector"
      },{
        "type":"Vector"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"Vector",
    "name":"SplineVectors",
    "description":"(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"StartSoundEvent",
    "description":"Start a sound event"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "returns":"void",
    "name":"StartSoundEventFromPosition",
    "description":"Start a sound event from position"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "returns":"void",
    "name":"StartSoundEventFromPositionReliable",
    "description":"Start a sound event from position with reliable delivery"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"Vector"
      }],
    "kind":"function",
    "returns":"void",
    "name":"StartSoundEventFromPositionUnreliable",
    "description":"Start a sound event from position with optional delivery"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"StartSoundEventReliable",
    "description":"Start a sound event with reliable delivery"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"StartSoundEventUnreliable",
    "description":"Start a sound event with optional delivery"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"StopEffect",
    "description":"Pass entity and effect name"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"StopListeningToAllGameEvents",
    "description":"Stop listening to all game events within a specific context."
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "returns":"bool",
    "name":"StopListeningToGameEvent",
    "description":"Stop listening to a particular game event."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"StopSoundEvent",
    "description":"Stops a sound event with optional delivery"
  },{
    "args":[{
        "type":"string"
      },{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"StopSoundOn",
    "description":"Stop named sound on Entity"
  },{
    "args":[],
    "kind":"function",
    "returns":"float",
    "name":"Time",
    "description":"Get the current server time"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"bool",
    "name":"TraceCollideable",
    "description":"Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"bool",
    "name":"TraceHull",
    "description":"Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"bool",
    "name":"TraceLine",
    "description":"Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"UTIL_Remove",
    "description":"Removes the specified entity"
  },{
    "args":[{
        "type":"handle"
      }],
    "kind":"function",
    "returns":"void",
    "name":"UTIL_RemoveImmediate",
    "description":"Immediately removes the specified entity"
  },{
    "args":[{
        "type":"handle"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      },{
        "type":"int"
      }],
    "kind":"function",
    "returns":"int",
    "name":"UnitFilter",
    "description":"Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"UnloadSpawnGroup",
    "description":"Unload a spawn group by name"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "returns":"void",
    "name":"UnloadSpawnGroupByHandle",
    "description":"Unload a spawn group by handle"
  },{
    "args":[{
        "type":"int"
      }],
    "kind":"function",
    "returns":"handle",
    "name":"UserIDToControllerHScript",
    "description":"Turn a userid integer (typically, fields named 'userid' in game events) to an HScript representing the associated player controller's script instance."
  },{
    "args":[{
        "type":"Vector"
      }],
    "kind":"function",
    "returns":"QAngle",
    "name":"VectorToAngles",
    "description":"Get Qangles (with no roll) for a Vector."
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"void",
    "name":"Warning",
    "description":"Print a warning"
  },{
    "args":[{
        "type":"string"
      }],
    "kind":"function",
    "returns":"float",
    "name":"cvar_getf",
    "description":"Gets the value of the given cvar, as a float."
  },{
    "args":[{
        "type":"string"
      },{
        "type":"float"
      }],
    "kind":"function",
    "returns":"bool",
    "name":"cvar_setf",
    "description":"Sets the value of the given cvar, as a float."
  },{
    "kind":"constant",
    "value":2,
    "enum":"AbilityLearnResult_t",
    "name":"ABILITY_CANNOT_BE_UPGRADED_AT_MAX"
  },{
    "kind":"constant",
    "value":1,
    "enum":"AbilityLearnResult_t",
    "name":"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE"
  },{
    "kind":"constant",
    "value":3,
    "enum":"AbilityLearnResult_t",
    "name":"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL"
  },{
    "kind":"constant",
    "value":0,
    "enum":"AbilityLearnResult_t",
    "name":"ABILITY_CAN_BE_UPGRADED"
  },{
    "kind":"constant",
    "value":4,
    "enum":"AbilityLearnResult_t",
    "name":"ABILITY_NOT_LEARNABLE"
  },{
    "kind":"constant",
    "value":2,
    "enum":"ABILITY_TYPES",
    "name":"ABILITY_TYPE_ATTRIBUTES"
  },{
    "kind":"constant",
    "value":0,
    "enum":"ABILITY_TYPES",
    "name":"ABILITY_TYPE_BASIC"
  },{
    "kind":"constant",
    "value":3,
    "enum":"ABILITY_TYPES",
    "name":"ABILITY_TYPE_HIDDEN"
  },{
    "kind":"constant",
    "value":1,
    "enum":"ABILITY_TYPES",
    "name":"ABILITY_TYPE_ULTIMATE"
  },{
    "kind":"constant",
    "value":1765,
    "name":"ACD_DOTA_IDLE"
  },{
    "kind":"constant",
    "value":1,
    "name":"ACTIVATE_TYPE_DATAUPDATE_CREATION"
  },{
    "kind":"constant",
    "value":0,
    "name":"ACTIVATE_TYPE_INITIAL_CREATION"
  },{
    "kind":"constant",
    "value":2,
    "name":"ACTIVATE_TYPE_ONRESTORE"
  },{
    "kind":"constant",
    "value":137,
    "name":"ACT_180_LEFT"
  },{
    "kind":"constant",
    "value":138,
    "name":"ACT_180_RIGHT"
  },{
    "kind":"constant",
    "value":139,
    "name":"ACT_90_LEFT"
  },{
    "kind":"constant",
    "value":140,
    "name":"ACT_90_RIGHT"
  },{
    "kind":"constant",
    "value":48,
    "name":"ACT_ALIEN_BURROW_IDLE"
  },{
    "kind":"constant",
    "value":49,
    "name":"ACT_ALIEN_BURROW_OUT"
  },{
    "kind":"constant",
    "value":968,
    "name":"ACT_ANTLION_SCUTTLE_BACK"
  },{
    "kind":"constant",
    "value":967,
    "name":"ACT_ANTLION_SCUTTLE_FORWARD"
  },{
    "kind":"constant",
    "value":969,
    "name":"ACT_ANTLION_SCUTTLE_LEFT"
  },{
    "kind":"constant",
    "value":970,
    "name":"ACT_ANTLION_SCUTTLE_RIGHT"
  },{
    "kind":"constant",
    "value":71,
    "name":"ACT_ARM"
  },{
    "kind":"constant",
    "value":178,
    "name":"ACT_BARNACLE_CHEW"
  },{
    "kind":"constant",
    "value":177,
    "name":"ACT_BARNACLE_CHOMP"
  },{
    "kind":"constant",
    "value":175,
    "name":"ACT_BARNACLE_HIT"
  },{
    "kind":"constant",
    "value":176,
    "name":"ACT_BARNACLE_PULL"
  },{
    "kind":"constant",
    "value":64,
    "name":"ACT_BIG_FLINCH"
  },{
    "kind":"constant",
    "value":384,
    "name":"ACT_BUSY_LEAN_BACK"
  },{
    "kind":"constant",
    "value":385,
    "name":"ACT_BUSY_LEAN_BACK_ENTRY"
  },{
    "kind":"constant",
    "value":386,
    "name":"ACT_BUSY_LEAN_BACK_EXIT"
  },{
    "kind":"constant",
    "value":381,
    "name":"ACT_BUSY_LEAN_LEFT"
  },{
    "kind":"constant",
    "value":382,
    "name":"ACT_BUSY_LEAN_LEFT_ENTRY"
  },{
    "kind":"constant",
    "value":383,
    "name":"ACT_BUSY_LEAN_LEFT_EXIT"
  },{
    "kind":"constant",
    "value":394,
    "name":"ACT_BUSY_QUEUE"
  },{
    "kind":"constant",
    "value":390,
    "name":"ACT_BUSY_SIT_CHAIR"
  },{
    "kind":"constant",
    "value":391,
    "name":"ACT_BUSY_SIT_CHAIR_ENTRY"
  },{
    "kind":"constant",
    "value":392,
    "name":"ACT_BUSY_SIT_CHAIR_EXIT"
  },{
    "kind":"constant",
    "value":387,
    "name":"ACT_BUSY_SIT_GROUND"
  },{
    "kind":"constant",
    "value":388,
    "name":"ACT_BUSY_SIT_GROUND_ENTRY"
  },{
    "kind":"constant",
    "value":389,
    "name":"ACT_BUSY_SIT_GROUND_EXIT"
  },{
    "kind":"constant",
    "value":393,
    "name":"ACT_BUSY_STAND"
  },{
    "kind":"constant",
    "value":35,
    "name":"ACT_CLIMB_DISMOUNT"
  },{
    "kind":"constant",
    "value":34,
    "name":"ACT_CLIMB_DOWN"
  },{
    "kind":"constant",
    "value":33,
    "name":"ACT_CLIMB_UP"
  },{
    "kind":"constant",
    "value":110,
    "name":"ACT_COMBAT_IDLE"
  },{
    "kind":"constant",
    "value":3,
    "name":"ACT_COVER"
  },{
    "kind":"constant",
    "value":5,
    "name":"ACT_COVER_LOW"
  },{
    "kind":"constant",
    "value":346,
    "name":"ACT_COVER_LOW_RPG"
  },{
    "kind":"constant",
    "value":4,
    "name":"ACT_COVER_MED"
  },{
    "kind":"constant",
    "value":296,
    "name":"ACT_COVER_PISTOL_LOW"
  },{
    "kind":"constant",
    "value":297,
    "name":"ACT_COVER_SMG1_LOW"
  },{
    "kind":"constant",
    "value":62,
    "name":"ACT_COWER"
  },{
    "kind":"constant",
    "value":474,
    "name":"ACT_CROSSBOW_DRAW_UNLOADED"
  },{
    "kind":"constant",
    "value":44,
    "name":"ACT_CROUCH"
  },{
    "kind":"constant",
    "value":45,
    "name":"ACT_CROUCHIDLE"
  },{
    "kind":"constant",
    "value":105,
    "name":"ACT_CROUCHIDLE_AGITATED"
  },{
    "kind":"constant",
    "value":104,
    "name":"ACT_CROUCHIDLE_AIM_STIMULATED"
  },{
    "kind":"constant",
    "value":103,
    "name":"ACT_CROUCHIDLE_STIMULATED"
  },{
    "kind":"constant",
    "value":439,
    "name":"ACT_CROUCHING_GRENADEIDLE"
  },{
    "kind":"constant",
    "value":440,
    "name":"ACT_CROUCHING_GRENADEREADY"
  },{
    "kind":"constant",
    "value":441,
    "name":"ACT_CROUCHING_PRIMARYATTACK"
  },{
    "kind":"constant",
    "value":458,
    "name":"ACT_CROUCHING_SHIELD_ATTACK"
  },{
    "kind":"constant",
    "value":456,
    "name":"ACT_CROUCHING_SHIELD_DOWN"
  },{
    "kind":"constant",
    "value":459,
    "name":"ACT_CROUCHING_SHIELD_KNOCKBACK"
  },{
    "kind":"constant",
    "value":455,
    "name":"ACT_CROUCHING_SHIELD_UP"
  },{
    "kind":"constant",
    "value":457,
    "name":"ACT_CROUCHING_SHIELD_UP_IDLE"
  },{
    "kind":"constant",
    "value":881,
    "name":"ACT_CROUCH_IDLE_AUTOGUN"
  },{
    "kind":"constant",
    "value":890,
    "name":"ACT_CROUCH_IDLE_DUAL"
  },{
    "kind":"constant",
    "value":896,
    "name":"ACT_CROUCH_IDLE_RIFLE"
  },{
    "kind":"constant",
    "value":894,
    "name":"ACT_CROUCH_IDLE_SHOTGUN"
  },{
    "kind":"constant",
    "value":1016,
    "name":"ACT_CSGO_ALIVE_LOOP"
  },{
    "kind":"constant",
    "value":1008,
    "name":"ACT_CSGO_CATCH"
  },{
    "kind":"constant",
    "value":1022,
    "name":"ACT_CSGO_CLIMB_LADDER"
  },{
    "kind":"constant",
    "value":993,
    "name":"ACT_CSGO_DEFUSE"
  },{
    "kind":"constant",
    "value":994,
    "name":"ACT_CSGO_DEFUSE_WITH_KIT"
  },{
    "kind":"constant",
    "value":1007,
    "name":"ACT_CSGO_DEPLOY"
  },{
    "kind":"constant",
    "value":1026,
    "name":"ACT_CSGO_EXIT_LADDER_BOTTOM"
  },{
    "kind":"constant",
    "value":1025,
    "name":"ACT_CSGO_EXIT_LADDER_TOP"
  },{
    "kind":"constant",
    "value":1021,
    "name":"ACT_CSGO_FALL"
  },{
    "kind":"constant",
    "value":996,
    "name":"ACT_CSGO_FIRE_PRIMARY"
  },{
    "kind":"constant",
    "value":997,
    "name":"ACT_CSGO_FIRE_PRIMARY_OPT_1"
  },{
    "kind":"constant",
    "value":998,
    "name":"ACT_CSGO_FIRE_PRIMARY_OPT_2"
  },{
    "kind":"constant",
    "value":999,
    "name":"ACT_CSGO_FIRE_SECONDARY"
  },{
    "kind":"constant",
    "value":1000,
    "name":"ACT_CSGO_FIRE_SECONDARY_OPT_1"
  },{
    "kind":"constant",
    "value":1001,
    "name":"ACT_CSGO_FIRE_SECONDARY_OPT_2"
  },{
    "kind":"constant",
    "value":995,
    "name":"ACT_CSGO_FLASHBANG_REACTION"
  },{
    "kind":"constant",
    "value":1017,
    "name":"ACT_CSGO_FLINCH"
  },{
    "kind":"constant",
    "value":1018,
    "name":"ACT_CSGO_FLINCH_HEAD"
  },{
    "kind":"constant",
    "value":1019,
    "name":"ACT_CSGO_FLINCH_MOLOTOV"
  },{
    "kind":"constant",
    "value":1015,
    "name":"ACT_CSGO_IDLE_ADJUST_STOPPEDMOVING"
  },{
    "kind":"constant",
    "value":1014,
    "name":"ACT_CSGO_IDLE_TURN_BALANCEADJUST"
  },{
    "kind":"constant",
    "value":1020,
    "name":"ACT_CSGO_JUMP"
  },{
    "kind":"constant",
    "value":1024,
    "name":"ACT_CSGO_LAND_HEAVY"
  },{
    "kind":"constant",
    "value":1023,
    "name":"ACT_CSGO_LAND_LIGHT"
  },{
    "kind":"constant",
    "value":992,
    "name":"ACT_CSGO_NULL"
  },{
    "kind":"constant",
    "value":1006,
    "name":"ACT_CSGO_OPERATE"
  },{
    "kind":"constant",
    "value":1027,
    "name":"ACT_CSGO_PARACHUTE"
  },{
    "kind":"constant",
    "value":1013,
    "name":"ACT_CSGO_PLANT_BOMB"
  },{
    "kind":"constant",
    "value":1002,
    "name":"ACT_CSGO_RELOAD"
  },{
    "kind":"constant",
    "value":1005,
    "name":"ACT_CSGO_RELOAD_END"
  },{
    "kind":"constant",
    "value":1004,
    "name":"ACT_CSGO_RELOAD_LOOP"
  },{
    "kind":"constant",
    "value":1003,
    "name":"ACT_CSGO_RELOAD_START"
  },{
    "kind":"constant",
    "value":1010,
    "name":"ACT_CSGO_SILENCER_ATTACH"
  },{
    "kind":"constant",
    "value":1009,
    "name":"ACT_CSGO_SILENCER_DETACH"
  },{
    "kind":"constant",
    "value":1028,
    "name":"ACT_CSGO_TAUNT"
  },{
    "kind":"constant",
    "value":1011,
    "name":"ACT_CSGO_TWITCH"
  },{
    "kind":"constant",
    "value":1012,
    "name":"ACT_CSGO_TWITCH_BUYZONE"
  },{
    "kind":"constant",
    "value":471,
    "name":"ACT_DEPLOY"
  },{
    "kind":"constant",
    "value":472,
    "name":"ACT_DEPLOY_IDLE"
  },{
    "kind":"constant",
    "value":21,
    "name":"ACT_DIEBACKWARD"
  },{
    "kind":"constant",
    "value":22,
    "name":"ACT_DIEFORWARD"
  },{
    "kind":"constant",
    "value":24,
    "name":"ACT_DIERAGDOLL"
  },{
    "kind":"constant",
    "value":20,
    "name":"ACT_DIESIMPLE"
  },{
    "kind":"constant",
    "value":23,
    "name":"ACT_DIEVIOLENT"
  },{
    "kind":"constant",
    "value":117,
    "name":"ACT_DIE_BACKSHOT"
  },{
    "kind":"constant",
    "value":404,
    "name":"ACT_DIE_BACKSIDE"
  },{
    "kind":"constant",
    "value":396,
    "name":"ACT_DIE_BARNACLE_SWALLOW"
  },{
    "kind":"constant",
    "value":115,
    "name":"ACT_DIE_CHESTSHOT"
  },{
    "kind":"constant",
    "value":990,
    "name":"ACT_DIE_CROUCH"
  },{
    "kind":"constant",
    "value":408,
    "name":"ACT_DIE_CROUCH_BACKSIDE"
  },{
    "kind":"constant",
    "value":406,
    "name":"ACT_DIE_CROUCH_FRONTSIDE"
  },{
    "kind":"constant",
    "value":991,
    "name":"ACT_DIE_CROUCH_HEADSHOT"
  },{
    "kind":"constant",
    "value":409,
    "name":"ACT_DIE_CROUCH_LEFTSIDE"
  },{
    "kind":"constant",
    "value":407,
    "name":"ACT_DIE_CROUCH_RIGHTSIDE"
  },{
    "kind":"constant",
    "value":402,
    "name":"ACT_DIE_FRONTSIDE"
  },{
    "kind":"constant",
    "value":116,
    "name":"ACT_DIE_GUTSHOT"
  },{
    "kind":"constant",
    "value":114,
    "name":"ACT_DIE_HEADSHOT"
  },{
    "kind":"constant",
    "value":410,
    "name":"ACT_DIE_INCAP"
  },{
    "kind":"constant",
    "value":405,
    "name":"ACT_DIE_LEFTSIDE"
  },{
    "kind":"constant",
    "value":403,
    "name":"ACT_DIE_RIGHTSIDE"
  },{
    "kind":"constant",
    "value":988,
    "name":"ACT_DIE_STAND"
  },{
    "kind":"constant",
    "value":411,
    "name":"ACT_DIE_STANDING"
  },{
    "kind":"constant",
    "value":989,
    "name":"ACT_DIE_STAND_HEADSHOT"
  },{
    "kind":"constant",
    "value":72,
    "name":"ACT_DISARM"
  },{
    "kind":"constant",
    "value":416,
    "name":"ACT_DI_ALYX_ANTLION"
  },{
    "kind":"constant",
    "value":415,
    "name":"ACT_DI_ALYX_HEADCRAB_MELEE"
  },{
    "kind":"constant",
    "value":413,
    "name":"ACT_DI_ALYX_ZOMBIE_MELEE"
  },{
    "kind":"constant",
    "value":418,
    "name":"ACT_DI_ALYX_ZOMBIE_SHOTGUN26"
  },{
    "kind":"constant",
    "value":417,
    "name":"ACT_DI_ALYX_ZOMBIE_SHOTGUN64"
  },{
    "kind":"constant",
    "value":414,
    "name":"ACT_DI_ALYX_ZOMBIE_TORSO_MELEE"
  },{
    "kind":"constant",
    "value":1580,
    "name":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END"
  },{
    "kind":"constant",
    "value":1572,
    "name":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START"
  },{
    "kind":"constant",
    "value":1573,
    "name":"ACT_DOTA_ALCHEMIST_CONCOCTION"
  },{
    "kind":"constant",
    "value":1579,
    "name":"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW"
  },{
    "kind":"constant",
    "value":1627,
    "name":"ACT_DOTA_AMBUSH"
  },{
    "kind":"constant",
    "value":1677,
    "name":"ACT_DOTA_ANCESTRAL_SPIRIT"
  },{
    "kind":"constant",
    "value":1682,
    "name":"ACT_DOTA_ARCTIC_BURN_END"
  },{
    "kind":"constant",
    "value":1661,
    "name":"ACT_DOTA_AREA_DENY"
  },{
    "kind":"constant",
    "value":1503,
    "name":"ACT_DOTA_ATTACK"
  },{
    "kind":"constant",
    "value":1504,
    "name":"ACT_DOTA_ATTACK2"
  },{
    "kind":"constant",
    "value":1505,
    "name":"ACT_DOTA_ATTACK_EVENT"
  },{
    "kind":"constant",
    "value":1705,
    "name":"ACT_DOTA_ATTACK_EVENT_BASH"
  },{
    "kind":"constant",
    "value":1758,
    "name":"ACT_DOTA_ATTACK_SPECIAL"
  },{
    "kind":"constant",
    "value":1707,
    "name":"ACT_DOTA_AW_MAGNETIC_FIELD"
  },{
    "kind":"constant",
    "value":1614,
    "name":"ACT_DOTA_BELLYACHE_END"
  },{
    "kind":"constant",
    "value":1613,
    "name":"ACT_DOTA_BELLYACHE_LOOP"
  },{
    "kind":"constant",
    "value":1612,
    "name":"ACT_DOTA_BELLYACHE_START"
  },{
    "kind":"constant",
    "value":1732,
    "name":"ACT_DOTA_BLINK_DAGGER"
  },{
    "kind":"constant",
    "value":1733,
    "name":"ACT_DOTA_BLINK_DAGGER_END"
  },{
    "kind":"constant",
    "value":1640,
    "name":"ACT_DOTA_BRIDGE_DESTROY"
  },{
    "kind":"constant",
    "value":1650,
    "name":"ACT_DOTA_BRIDGE_THREAT"
  },{
    "kind":"constant",
    "value":1644,
    "name":"ACT_DOTA_CAGED_CREEP_RAGE"
  },{
    "kind":"constant",
    "value":1645,
    "name":"ACT_DOTA_CAGED_CREEP_RAGE_OUT"
  },{
    "kind":"constant",
    "value":1646,
    "name":"ACT_DOTA_CAGED_CREEP_SMASH"
  },{
    "kind":"constant",
    "value":1647,
    "name":"ACT_DOTA_CAGED_CREEP_SMASH_OUT"
  },{
    "kind":"constant",
    "value":1599,
    "name":"ACT_DOTA_CANCEL_SIREN_SONG"
  },{
    "kind":"constant",
    "value":1533,
    "name":"ACT_DOTA_CAPTURE"
  },{
    "kind":"constant",
    "value":1717,
    "name":"ACT_DOTA_CAPTURE_CARD"
  },{
    "kind":"constant",
    "value":1698,
    "name":"ACT_DOTA_CAPTURE_PET"
  },{
    "kind":"constant",
    "value":1706,
    "name":"ACT_DOTA_CAPTURE_RARE"
  },{
    "kind":"constant",
    "value":1510,
    "name":"ACT_DOTA_CAST_ABILITY_1"
  },{
    "kind":"constant",
    "value":1540,
    "name":"ACT_DOTA_CAST_ABILITY_1_END"
  },{
    "kind":"constant",
    "value":1511,
    "name":"ACT_DOTA_CAST_ABILITY_2"
  },{
    "kind":"constant",
    "value":1748,
    "name":"ACT_DOTA_CAST_ABILITY_2_ALLY"
  },{
    "kind":"constant",
    "value":1541,
    "name":"ACT_DOTA_CAST_ABILITY_2_END"
  },{
    "kind":"constant",
    "value":1653,
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL"
  },{
    "kind":"constant",
    "value":1654,
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END"
  },{
    "kind":"constant",
    "value":1652,
    "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START"
  },{
    "kind":"constant",
    "value":1512,
    "name":"ACT_DOTA_CAST_ABILITY_3"
  },{
    "kind":"constant",
    "value":1542,
    "name":"ACT_DOTA_CAST_ABILITY_3_END"
  },{
    "kind":"constant",
    "value":1513,
    "name":"ACT_DOTA_CAST_ABILITY_4"
  },{
    "kind":"constant",
    "value":1543,
    "name":"ACT_DOTA_CAST_ABILITY_4_END"
  },{
    "kind":"constant",
    "value":1514,
    "name":"ACT_DOTA_CAST_ABILITY_5"
  },{
    "kind":"constant",
    "value":1515,
    "name":"ACT_DOTA_CAST_ABILITY_6"
  },{
    "kind":"constant",
    "value":1598,
    "name":"ACT_DOTA_CAST_ABILITY_7"
  },{
    "kind":"constant",
    "value":1547,
    "name":"ACT_DOTA_CAST_ABILITY_ROT"
  },{
    "kind":"constant",
    "value":1585,
    "name":"ACT_DOTA_CAST_ALACRITY"
  },{
    "kind":"constant",
    "value":1741,
    "name":"ACT_DOTA_CAST_ALACRITY_ORB"
  },{
    "kind":"constant",
    "value":1702,
    "name":"ACT_DOTA_CAST_BURROW_END"
  },{
    "kind":"constant",
    "value":1586,
    "name":"ACT_DOTA_CAST_CHAOS_METEOR"
  },{
    "kind":"constant",
    "value":1742,
    "name":"ACT_DOTA_CAST_CHAOS_METEOR_ORB"
  },{
    "kind":"constant",
    "value":1581,
    "name":"ACT_DOTA_CAST_COLD_SNAP"
  },{
    "kind":"constant",
    "value":1737,
    "name":"ACT_DOTA_CAST_COLD_SNAP_ORB"
  },{
    "kind":"constant",
    "value":1590,
    "name":"ACT_DOTA_CAST_DEAFENING_BLAST"
  },{
    "kind":"constant",
    "value":1746,
    "name":"ACT_DOTA_CAST_DEAFENING_BLAST_ORB"
  },{
    "kind":"constant",
    "value":1538,
    "name":"ACT_DOTA_CAST_DRAGONBREATH"
  },{
    "kind":"constant",
    "value":1584,
    "name":"ACT_DOTA_CAST_EMP"
  },{
    "kind":"constant",
    "value":1740,
    "name":"ACT_DOTA_CAST_EMP_ORB"
  },{
    "kind":"constant",
    "value":1771,
    "name":"ACT_DOTA_CAST_FENCE"
  },{
    "kind":"constant",
    "value":1588,
    "name":"ACT_DOTA_CAST_FORGE_SPIRIT"
  },{
    "kind":"constant",
    "value":1744,
    "name":"ACT_DOTA_CAST_FORGE_SPIRIT_ORB"
  },{
    "kind":"constant",
    "value":1708,
    "name":"ACT_DOTA_CAST_GHOST_SHIP"
  },{
    "kind":"constant",
    "value":1582,
    "name":"ACT_DOTA_CAST_GHOST_WALK"
  },{
    "kind":"constant",
    "value":1738,
    "name":"ACT_DOTA_CAST_GHOST_WALK_ORB"
  },{
    "kind":"constant",
    "value":1589,
    "name":"ACT_DOTA_CAST_ICE_WALL"
  },{
    "kind":"constant",
    "value":1745,
    "name":"ACT_DOTA_CAST_ICE_WALL_ORB"
  },{
    "kind":"constant",
    "value":1564,
    "name":"ACT_DOTA_CAST_LIFE_BREAK_END"
  },{
    "kind":"constant",
    "value":1563,
    "name":"ACT_DOTA_CAST_LIFE_BREAK_START"
  },{
    "kind":"constant",
    "value":1597,
    "name":"ACT_DOTA_CAST_REFRACTION"
  },{
    "kind":"constant",
    "value":1587,
    "name":"ACT_DOTA_CAST_SUN_STRIKE"
  },{
    "kind":"constant",
    "value":1743,
    "name":"ACT_DOTA_CAST_SUN_STRIKE_ORB"
  },{
    "kind":"constant",
    "value":1583,
    "name":"ACT_DOTA_CAST_TORNADO"
  },{
    "kind":"constant",
    "value":1739,
    "name":"ACT_DOTA_CAST_TORNADO_ORB"
  },{
    "kind":"constant",
    "value":1562,
    "name":"ACT_DOTA_CAST_WILD_AXES_END"
  },{
    "kind":"constant",
    "value":1611,
    "name":"ACT_DOTA_CENTAUR_STAMPEDE"
  },{
    "kind":"constant",
    "value":1520,
    "name":"ACT_DOTA_CHANNEL_ABILITY_1"
  },{
    "kind":"constant",
    "value":1521,
    "name":"ACT_DOTA_CHANNEL_ABILITY_2"
  },{
    "kind":"constant",
    "value":1522,
    "name":"ACT_DOTA_CHANNEL_ABILITY_3"
  },{
    "kind":"constant",
    "value":1523,
    "name":"ACT_DOTA_CHANNEL_ABILITY_4"
  },{
    "kind":"constant",
    "value":1524,
    "name":"ACT_DOTA_CHANNEL_ABILITY_5"
  },{
    "kind":"constant",
    "value":1525,
    "name":"ACT_DOTA_CHANNEL_ABILITY_6"
  },{
    "kind":"constant",
    "value":1600,
    "name":"ACT_DOTA_CHANNEL_ABILITY_7"
  },{
    "kind":"constant",
    "value":1526,
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_1"
  },{
    "kind":"constant",
    "value":1527,
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_2"
  },{
    "kind":"constant",
    "value":1528,
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_3"
  },{
    "kind":"constant",
    "value":1529,
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_4"
  },{
    "kind":"constant",
    "value":1530,
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_5"
  },{
    "kind":"constant",
    "value":1531,
    "name":"ACT_DOTA_CHANNEL_END_ABILITY_6"
  },{
    "kind":"constant",
    "value":1673,
    "name":"ACT_DOTA_CHILLING_TOUCH"
  },{
    "kind":"constant",
    "value":1671,
    "name":"ACT_DOTA_COLD_FEET"
  },{
    "kind":"constant",
    "value":1532,
    "name":"ACT_DOTA_CONSTANT_LAYER"
  },{
    "kind":"constant",
    "value":1734,
    "name":"ACT_DOTA_CUSTOM_TOWER_ATTACK"
  },{
    "kind":"constant",
    "value":1736,
    "name":"ACT_DOTA_CUSTOM_TOWER_DIE"
  },{
    "kind":"constant",
    "value":1757,
    "name":"ACT_DOTA_CUSTOM_TOWER_HIGH_FIVE"
  },{
    "kind":"constant",
    "value":1735,
    "name":"ACT_DOTA_CUSTOM_TOWER_IDLE"
  },{
    "kind":"constant",
    "value":1755,
    "name":"ACT_DOTA_CUSTOM_TOWER_IDLE_RARE"
  },{
    "kind":"constant",
    "value":1756,
    "name":"ACT_DOTA_CUSTOM_TOWER_TAUNT"
  },{
    "kind":"constant",
    "value":1773,
    "name":"ACT_DOTA_CYCLONE"
  },{
    "kind":"constant",
    "value":1651,
    "name":"ACT_DOTA_DAGON"
  },{
    "kind":"constant",
    "value":1642,
    "name":"ACT_DOTA_DEATH_BY_SNIPER"
  },{
    "kind":"constant",
    "value":1592,
    "name":"ACT_DOTA_DEFEAT"
  },{
    "kind":"constant",
    "value":1711,
    "name":"ACT_DOTA_DEFEAT_START"
  },{
    "kind":"constant",
    "value":1506,
    "name":"ACT_DOTA_DIE"
  },{
    "kind":"constant",
    "value":1548,
    "name":"ACT_DOTA_DIE_SPECIAL"
  },{
    "kind":"constant",
    "value":1509,
    "name":"ACT_DOTA_DISABLED"
  },{
    "kind":"constant",
    "value":1766,
    "name":"ACT_DOTA_DISABLED_END"
  },{
    "kind":"constant",
    "value":1712,
    "name":"ACT_DOTA_DP_SPIRIT_SIPHON"
  },{
    "kind":"constant",
    "value":1570,
    "name":"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK"
  },{
    "kind":"constant",
    "value":1539,
    "name":"ACT_DOTA_ECHO_SLAM"
  },{
    "kind":"constant",
    "value":1674,
    "name":"ACT_DOTA_ENFEEBLE"
  },{
    "kind":"constant",
    "value":1714,
    "name":"ACT_DOTA_ES_STONE_CALLER"
  },{
    "kind":"constant",
    "value":1675,
    "name":"ACT_DOTA_FATAL_BONDS"
  },{
    "kind":"constant",
    "value":1508,
    "name":"ACT_DOTA_FLAIL"
  },{
    "kind":"constant",
    "value":1685,
    "name":"ACT_DOTA_FLEE"
  },{
    "kind":"constant",
    "value":1507,
    "name":"ACT_DOTA_FLINCH"
  },{
    "kind":"constant",
    "value":1602,
    "name":"ACT_DOTA_FORCESTAFF_END"
  },{
    "kind":"constant",
    "value":1630,
    "name":"ACT_DOTA_FRUSTRATION"
  },{
    "kind":"constant",
    "value":1709,
    "name":"ACT_DOTA_FXANIM"
  },{
    "kind":"constant",
    "value":1728,
    "name":"ACT_DOTA_GENERIC_CHANNEL_1"
  },{
    "kind":"constant",
    "value":1754,
    "name":"ACT_DOTA_GENERIC_CHANNEL_1_START"
  },{
    "kind":"constant",
    "value":1625,
    "name":"ACT_DOTA_GESTURE_ACCENT"
  },{
    "kind":"constant",
    "value":1624,
    "name":"ACT_DOTA_GESTURE_POINT"
  },{
    "kind":"constant",
    "value":1690,
    "name":"ACT_DOTA_GREET"
  },{
    "kind":"constant",
    "value":1621,
    "name":"ACT_DOTA_GREEVIL_BLINK_BONE"
  },{
    "kind":"constant",
    "value":1617,
    "name":"ACT_DOTA_GREEVIL_CAST"
  },{
    "kind":"constant",
    "value":1620,
    "name":"ACT_DOTA_GREEVIL_HOOK_END"
  },{
    "kind":"constant",
    "value":1619,
    "name":"ACT_DOTA_GREEVIL_HOOK_START"
  },{
    "kind":"constant",
    "value":1618,
    "name":"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY"
  },{
    "kind":"constant",
    "value":1730,
    "name":"ACT_DOTA_GS_INK_CREATURE"
  },{
    "kind":"constant",
    "value":1729,
    "name":"ACT_DOTA_GS_SOUL_CHAIN"
  },{
    "kind":"constant",
    "value":1672,
    "name":"ACT_DOTA_ICE_VORTEX"
  },{
    "kind":"constant",
    "value":1500,
    "name":"ACT_DOTA_IDLE"
  },{
    "kind":"constant",
    "value":1636,
    "name":"ACT_DOTA_IDLE_IMPATIENT"
  },{
    "kind":"constant",
    "value":1648,
    "name":"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP"
  },{
    "kind":"constant",
    "value":1501,
    "name":"ACT_DOTA_IDLE_RARE"
  },{
    "kind":"constant",
    "value":1622,
    "name":"ACT_DOTA_IDLE_SLEEPING"
  },{
    "kind":"constant",
    "value":1639,
    "name":"ACT_DOTA_IDLE_SLEEPING_END"
  },{
    "kind":"constant",
    "value":1774,
    "name":"ACT_DOTA_IMPALE"
  },{
    "kind":"constant",
    "value":1623,
    "name":"ACT_DOTA_INTRO"
  },{
    "kind":"constant",
    "value":1649,
    "name":"ACT_DOTA_INTRO_LOOP"
  },{
    "kind":"constant",
    "value":1697,
    "name":"ACT_DOTA_ITEM_DROP"
  },{
    "kind":"constant",
    "value":1628,
    "name":"ACT_DOTA_ITEM_LOOK"
  },{
    "kind":"constant",
    "value":1696,
    "name":"ACT_DOTA_ITEM_PICKUP"
  },{
    "kind":"constant",
    "value":1575,
    "name":"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP"
  },{
    "kind":"constant",
    "value":1574,
    "name":"ACT_DOTA_JAKIRO_LIQUIDFIRE_START"
  },{
    "kind":"constant",
    "value":1535,
    "name":"ACT_DOTA_KILLTAUNT"
  },{
    "kind":"constant",
    "value":1679,
    "name":"ACT_DOTA_KINETIC_FIELD"
  },{
    "kind":"constant",
    "value":1578,
    "name":"ACT_DOTA_LASSO_LOOP"
  },{
    "kind":"constant",
    "value":1658,
    "name":"ACT_DOTA_LEAP_STUN"
  },{
    "kind":"constant",
    "value":1659,
    "name":"ACT_DOTA_LEAP_SWIPE"
  },{
    "kind":"constant",
    "value":1703,
    "name":"ACT_DOTA_LIFESTEALER_ASSIMILATE"
  },{
    "kind":"constant",
    "value":1704,
    "name":"ACT_DOTA_LIFESTEALER_EJECT"
  },{
    "kind":"constant",
    "value":1576,
    "name":"ACT_DOTA_LIFESTEALER_INFEST"
  },{
    "kind":"constant",
    "value":1577,
    "name":"ACT_DOTA_LIFESTEALER_INFEST_END"
  },{
    "kind":"constant",
    "value":1567,
    "name":"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS"
  },{
    "kind":"constant",
    "value":1566,
    "name":"ACT_DOTA_LIFESTEALER_RAGE"
  },{
    "kind":"constant",
    "value":1601,
    "name":"ACT_DOTA_LOADOUT"
  },{
    "kind":"constant",
    "value":1683,
    "name":"ACT_DOTA_LOADOUT_RARE"
  },{
    "kind":"constant",
    "value":1643,
    "name":"ACT_DOTA_LOOK_AROUND"
  },{
    "kind":"constant",
    "value":1606,
    "name":"ACT_DOTA_MAGNUS_SKEWER_END"
  },{
    "kind":"constant",
    "value":1605,
    "name":"ACT_DOTA_MAGNUS_SKEWER_START"
  },{
    "kind":"constant",
    "value":1607,
    "name":"ACT_DOTA_MEDUSA_STONE_GAZE"
  },{
    "kind":"constant",
    "value":1676,
    "name":"ACT_DOTA_MIDNIGHT_PULSE"
  },{
    "kind":"constant",
    "value":1681,
    "name":"ACT_DOTA_MINI_TAUNT"
  },{
    "kind":"constant",
    "value":1722,
    "name":"ACT_DOTA_MK_FUR_ARMY"
  },{
    "kind":"constant",
    "value":1723,
    "name":"ACT_DOTA_MK_SPRING_CAST"
  },{
    "kind":"constant",
    "value":1719,
    "name":"ACT_DOTA_MK_SPRING_END"
  },{
    "kind":"constant",
    "value":1718,
    "name":"ACT_DOTA_MK_SPRING_SOAR"
  },{
    "kind":"constant",
    "value":1715,
    "name":"ACT_DOTA_MK_STRIKE"
  },{
    "kind":"constant",
    "value":1764,
    "name":"ACT_DOTA_MK_STRIKE_END"
  },{
    "kind":"constant",
    "value":1721,
    "name":"ACT_DOTA_MK_TREE_END"
  },{
    "kind":"constant",
    "value":1720,
    "name":"ACT_DOTA_MK_TREE_SOAR"
  },{
    "kind":"constant",
    "value":1724,
    "name":"ACT_DOTA_NECRO_GHOST_SHROUD"
  },{
    "kind":"constant",
    "value":1660,
    "name":"ACT_DOTA_NIAN_INTRO_LEAP"
  },{
    "kind":"constant",
    "value":1657,
    "name":"ACT_DOTA_NIAN_PIN_END"
  },{
    "kind":"constant",
    "value":1656,
    "name":"ACT_DOTA_NIAN_PIN_LOOP"
  },{
    "kind":"constant",
    "value":1655,
    "name":"ACT_DOTA_NIAN_PIN_START"
  },{
    "kind":"constant",
    "value":1662,
    "name":"ACT_DOTA_NIAN_PIN_TO_STUN"
  },{
    "kind":"constant",
    "value":1565,
    "name":"ACT_DOTA_NIGHTSTALKER_TRANSITION"
  },{
    "kind":"constant",
    "value":1747,
    "name":"ACT_DOTA_NOTICE"
  },{
    "kind":"constant",
    "value":1516,
    "name":"ACT_DOTA_OVERRIDE_ABILITY_1"
  },{
    "kind":"constant",
    "value":1517,
    "name":"ACT_DOTA_OVERRIDE_ABILITY_2"
  },{
    "kind":"constant",
    "value":1518,
    "name":"ACT_DOTA_OVERRIDE_ABILITY_3"
  },{
    "kind":"constant",
    "value":1519,
    "name":"ACT_DOTA_OVERRIDE_ABILITY_4"
  },{
    "kind":"constant",
    "value":1725,
    "name":"ACT_DOTA_OVERRIDE_ARCANA"
  },{
    "kind":"constant",
    "value":1751,
    "name":"ACT_DOTA_OVERRIDE_LOADOUT"
  },{
    "kind":"constant",
    "value":1701,
    "name":"ACT_DOTA_PET_LEVEL"
  },{
    "kind":"constant",
    "value":1699,
    "name":"ACT_DOTA_PET_WARD_OBSERVER"
  },{
    "kind":"constant",
    "value":1700,
    "name":"ACT_DOTA_PET_WARD_SENTRY"
  },{
    "kind":"constant",
    "value":1760,
    "name":"ACT_DOTA_PIERCE_THE_VEIL"
  },{
    "kind":"constant",
    "value":1603,
    "name":"ACT_DOTA_POOF_END"
  },{
    "kind":"constant",
    "value":1635,
    "name":"ACT_DOTA_PRESENT_ITEM"
  },{
    "kind":"constant",
    "value":1768,
    "name":"ACT_DOTA_RADIANT_CREEP_HAMMER"
  },{
    "kind":"constant",
    "value":1549,
    "name":"ACT_DOTA_RATTLETRAP_BATTERYASSAULT"
  },{
    "kind":"constant",
    "value":1553,
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_END"
  },{
    "kind":"constant",
    "value":1552,
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP"
  },{
    "kind":"constant",
    "value":1551,
    "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_START"
  },{
    "kind":"constant",
    "value":1550,
    "name":"ACT_DOTA_RATTLETRAP_POWERCOGS"
  },{
    "kind":"constant",
    "value":1663,
    "name":"ACT_DOTA_RAZE_1"
  },{
    "kind":"constant",
    "value":1664,
    "name":"ACT_DOTA_RAZE_2"
  },{
    "kind":"constant",
    "value":1665,
    "name":"ACT_DOTA_RAZE_3"
  },{
    "kind":"constant",
    "value":1610,
    "name":"ACT_DOTA_RELAX_END"
  },{
    "kind":"constant",
    "value":1769,
    "name":"ACT_DOTA_RELAX_IN"
  },{
    "kind":"constant",
    "value":1609,
    "name":"ACT_DOTA_RELAX_LOOP"
  },{
    "kind":"constant",
    "value":1634,
    "name":"ACT_DOTA_RELAX_LOOP_END"
  },{
    "kind":"constant",
    "value":1770,
    "name":"ACT_DOTA_RELAX_OUT"
  },{
    "kind":"constant",
    "value":1608,
    "name":"ACT_DOTA_RELAX_START"
  },{
    "kind":"constant",
    "value":1615,
    "name":"ACT_DOTA_ROQUELAIRE_LAND"
  },{
    "kind":"constant",
    "value":1616,
    "name":"ACT_DOTA_ROQUELAIRE_LAND_IDLE"
  },{
    "kind":"constant",
    "value":1502,
    "name":"ACT_DOTA_RUN"
  },{
    "kind":"constant",
    "value":1777,
    "name":"ACT_DOTA_RUN_ALT"
  },{
    "kind":"constant",
    "value":1761,
    "name":"ACT_DOTA_RUN_RARE"
  },{
    "kind":"constant",
    "value":1568,
    "name":"ACT_DOTA_SAND_KING_BURROW_IN"
  },{
    "kind":"constant",
    "value":1569,
    "name":"ACT_DOTA_SAND_KING_BURROW_OUT"
  },{
    "kind":"constant",
    "value":1687,
    "name":"ACT_DOTA_SHAKE"
  },{
    "kind":"constant",
    "value":1670,
    "name":"ACT_DOTA_SHALLOW_GRAVE"
  },{
    "kind":"constant",
    "value":1637,
    "name":"ACT_DOTA_SHARPEN_WEAPON"
  },{
    "kind":"constant",
    "value":1638,
    "name":"ACT_DOTA_SHARPEN_WEAPON_OUT"
  },{
    "kind":"constant",
    "value":1695,
    "name":"ACT_DOTA_SHOPKEEPER_PET_INTERACT"
  },{
    "kind":"constant",
    "value":1633,
    "name":"ACT_DOTA_SHRUG"
  },{
    "kind":"constant",
    "value":1749,
    "name":"ACT_DOTA_SHUFFLE_L"
  },{
    "kind":"constant",
    "value":1750,
    "name":"ACT_DOTA_SHUFFLE_R"
  },{
    "kind":"constant",
    "value":1604,
    "name":"ACT_DOTA_SLARK_POUNCE"
  },{
    "kind":"constant",
    "value":1626,
    "name":"ACT_DOTA_SLEEPING_END"
  },{
    "kind":"constant",
    "value":1726,
    "name":"ACT_DOTA_SLIDE"
  },{
    "kind":"constant",
    "value":1727,
    "name":"ACT_DOTA_SLIDE_LOOP"
  },{
    "kind":"constant",
    "value":1534,
    "name":"ACT_DOTA_SPAWN"
  },{
    "kind":"constant",
    "value":1594,
    "name":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END"
  },{
    "kind":"constant",
    "value":1593,
    "name":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE"
  },{
    "kind":"constant",
    "value":1772,
    "name":"ACT_DOTA_SPWN"
  },{
    "kind":"constant",
    "value":1629,
    "name":"ACT_DOTA_STARTLE"
  },{
    "kind":"constant",
    "value":1680,
    "name":"ACT_DOTA_STATIC_STORM"
  },{
    "kind":"constant",
    "value":1684,
    "name":"ACT_DOTA_SWIM"
  },{
    "kind":"constant",
    "value":1688,
    "name":"ACT_DOTA_SWIM_IDLE"
  },{
    "kind":"constant",
    "value":1536,
    "name":"ACT_DOTA_TAUNT"
  },{
    "kind":"constant",
    "value":1641,
    "name":"ACT_DOTA_TAUNT_SNIPER"
  },{
    "kind":"constant",
    "value":1752,
    "name":"ACT_DOTA_TAUNT_SPECIAL"
  },{
    "kind":"constant",
    "value":1595,
    "name":"ACT_DOTA_TELEPORT"
  },{
    "kind":"constant",
    "value":1693,
    "name":"ACT_DOTA_TELEPORT_COOP_END"
  },{
    "kind":"constant",
    "value":1694,
    "name":"ACT_DOTA_TELEPORT_COOP_EXIT"
  },{
    "kind":"constant",
    "value":1691,
    "name":"ACT_DOTA_TELEPORT_COOP_START"
  },{
    "kind":"constant",
    "value":1692,
    "name":"ACT_DOTA_TELEPORT_COOP_WAIT"
  },{
    "kind":"constant",
    "value":1596,
    "name":"ACT_DOTA_TELEPORT_END"
  },{
    "kind":"constant",
    "value":1632,
    "name":"ACT_DOTA_TELEPORT_END_REACT"
  },{
    "kind":"constant",
    "value":1631,
    "name":"ACT_DOTA_TELEPORT_REACT"
  },{
    "kind":"constant",
    "value":1753,
    "name":"ACT_DOTA_TELEPORT_START"
  },{
    "kind":"constant",
    "value":1537,
    "name":"ACT_DOTA_THIRST"
  },{
    "kind":"constant",
    "value":1678,
    "name":"ACT_DOTA_THUNDER_STRIKE"
  },{
    "kind":"constant",
    "value":1555,
    "name":"ACT_DOTA_TINKER_REARM1"
  },{
    "kind":"constant",
    "value":1556,
    "name":"ACT_DOTA_TINKER_REARM2"
  },{
    "kind":"constant",
    "value":1557,
    "name":"ACT_DOTA_TINKER_REARM3"
  },{
    "kind":"constant",
    "value":1775,
    "name":"ACT_DOTA_TORRENT"
  },{
    "kind":"constant",
    "value":1731,
    "name":"ACT_DOTA_TRANSITION"
  },{
    "kind":"constant",
    "value":1759,
    "name":"ACT_DOTA_TRANSITION_IDLE"
  },{
    "kind":"constant",
    "value":1713,
    "name":"ACT_DOTA_TRICKS_END"
  },{
    "kind":"constant",
    "value":1686,
    "name":"ACT_DOTA_TROT"
  },{
    "kind":"constant",
    "value":1666,
    "name":"ACT_DOTA_UNDYING_DECAY"
  },{
    "kind":"constant",
    "value":1667,
    "name":"ACT_DOTA_UNDYING_SOUL_RIP"
  },{
    "kind":"constant",
    "value":1668,
    "name":"ACT_DOTA_UNDYING_TOMBSTONE"
  },{
    "kind":"constant",
    "value":1716,
    "name":"ACT_DOTA_VERSUS"
  },{
    "kind":"constant",
    "value":1591,
    "name":"ACT_DOTA_VICTORY"
  },{
    "kind":"constant",
    "value":1710,
    "name":"ACT_DOTA_VICTORY_START"
  },{
    "kind":"constant",
    "value":1762,
    "name":"ACT_DOTA_VIPER_DIVE"
  },{
    "kind":"constant",
    "value":1763,
    "name":"ACT_DOTA_VIPER_DIVE_END"
  },{
    "kind":"constant",
    "value":1776,
    "name":"ACT_DOTA_VOODOO_REST"
  },{
    "kind":"constant",
    "value":1689,
    "name":"ACT_DOTA_WAIT_IDLE"
  },{
    "kind":"constant",
    "value":1561,
    "name":"ACT_DOTA_WEAVERBUG_ATTACH"
  },{
    "kind":"constant",
    "value":1571,
    "name":"ACT_DOTA_WHEEL_LAYER"
  },{
    "kind":"constant",
    "value":1669,
    "name":"ACT_DOTA_WHIRLING_AXES_RANGED"
  },{
    "kind":"constant",
    "value":179,
    "name":"ACT_DO_NOT_DISTURB"
  },{
    "kind":"constant",
    "value":73,
    "name":"ACT_DROP_WEAPON"
  },{
    "kind":"constant",
    "value":74,
    "name":"ACT_DROP_WEAPON_SHOTGUN"
  },{
    "kind":"constant",
    "value":395,
    "name":"ACT_DUCK_DODGE"
  },{
    "kind":"constant",
    "value":430,
    "name":"ACT_DYINGLOOP"
  },{
    "kind":"constant",
    "value":431,
    "name":"ACT_DYINGTODEAD"
  },{
    "kind":"constant",
    "value":910,
    "name":"ACT_EXPLODE"
  },{
    "kind":"constant",
    "value":906,
    "name":"ACT_FIRE"
  },{
    "kind":"constant",
    "value":438,
    "name":"ACT_FIRE_END"
  },{
    "kind":"constant",
    "value":437,
    "name":"ACT_FIRE_LOOP"
  },{
    "kind":"constant",
    "value":907,
    "name":"ACT_FIRE_RECOVER"
  },{
    "kind":"constant",
    "value":436,
    "name":"ACT_FIRE_START"
  },{
    "kind":"constant",
    "value":900,
    "name":"ACT_FLICK_LEFT"
  },{
    "kind":"constant",
    "value":901,
    "name":"ACT_FLICK_LEFT_MIDDLE"
  },{
    "kind":"constant",
    "value":903,
    "name":"ACT_FLICK_RIGHT"
  },{
    "kind":"constant",
    "value":902,
    "name":"ACT_FLICK_RIGHT_MIDDLE"
  },{
    "kind":"constant",
    "value":119,
    "name":"ACT_FLINCH_CHEST"
  },{
    "kind":"constant",
    "value":127,
    "name":"ACT_FLINCH_CHEST_BACK"
  },{
    "kind":"constant",
    "value":130,
    "name":"ACT_FLINCH_CROUCH_BACK"
  },{
    "kind":"constant",
    "value":129,
    "name":"ACT_FLINCH_CROUCH_FRONT"
  },{
    "kind":"constant",
    "value":131,
    "name":"ACT_FLINCH_CROUCH_LEFT"
  },{
    "kind":"constant",
    "value":132,
    "name":"ACT_FLINCH_CROUCH_RIGHT"
  },{
    "kind":"constant",
    "value":118,
    "name":"ACT_FLINCH_HEAD"
  },{
    "kind":"constant",
    "value":126,
    "name":"ACT_FLINCH_HEAD_BACK"
  },{
    "kind":"constant",
    "value":121,
    "name":"ACT_FLINCH_LEFTARM"
  },{
    "kind":"constant",
    "value":123,
    "name":"ACT_FLINCH_LEFTLEG"
  },{
    "kind":"constant",
    "value":125,
    "name":"ACT_FLINCH_PHYSICS"
  },{
    "kind":"constant",
    "value":122,
    "name":"ACT_FLINCH_RIGHTARM"
  },{
    "kind":"constant",
    "value":124,
    "name":"ACT_FLINCH_RIGHTLEG"
  },{
    "kind":"constant",
    "value":120,
    "name":"ACT_FLINCH_STOMACH"
  },{
    "kind":"constant",
    "value":128,
    "name":"ACT_FLINCH_STOMACH_BACK"
  },{
    "kind":"constant",
    "value":25,
    "name":"ACT_FLY"
  },{
    "kind":"constant",
    "value":476,
    "name":"ACT_GAUSS_SPINCYCLE"
  },{
    "kind":"constant",
    "value":475,
    "name":"ACT_GAUSS_SPINUP"
  },{
    "kind":"constant",
    "value":397,
    "name":"ACT_GESTURE_BARNACLE_STRANGLE"
  },{
    "kind":"constant",
    "value":153,
    "name":"ACT_GESTURE_BIG_FLINCH"
  },{
    "kind":"constant",
    "value":154,
    "name":"ACT_GESTURE_FLINCH_BLAST"
  },{
    "kind":"constant",
    "value":156,
    "name":"ACT_GESTURE_FLINCH_BLAST_DAMAGED"
  },{
    "kind":"constant",
    "value":157,
    "name":"ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN"
  },{
    "kind":"constant",
    "value":155,
    "name":"ACT_GESTURE_FLINCH_BLAST_SHOTGUN"
  },{
    "kind":"constant",
    "value":159,
    "name":"ACT_GESTURE_FLINCH_CHEST"
  },{
    "kind":"constant",
    "value":158,
    "name":"ACT_GESTURE_FLINCH_HEAD"
  },{
    "kind":"constant",
    "value":161,
    "name":"ACT_GESTURE_FLINCH_LEFTARM"
  },{
    "kind":"constant",
    "value":163,
    "name":"ACT_GESTURE_FLINCH_LEFTLEG"
  },{
    "kind":"constant",
    "value":162,
    "name":"ACT_GESTURE_FLINCH_RIGHTARM"
  },{
    "kind":"constant",
    "value":164,
    "name":"ACT_GESTURE_FLINCH_RIGHTLEG"
  },{
    "kind":"constant",
    "value":160,
    "name":"ACT_GESTURE_FLINCH_STOMACH"
  },{
    "kind":"constant",
    "value":147,
    "name":"ACT_GESTURE_MELEE_ATTACK1"
  },{
    "kind":"constant",
    "value":148,
    "name":"ACT_GESTURE_MELEE_ATTACK2"
  },{
    "kind":"constant",
    "value":313,
    "name":"ACT_GESTURE_MELEE_ATTACK_SWING"
  },{
    "kind":"constant",
    "value":145,
    "name":"ACT_GESTURE_RANGE_ATTACK1"
  },{
    "kind":"constant",
    "value":149,
    "name":"ACT_GESTURE_RANGE_ATTACK1_LOW"
  },{
    "kind":"constant",
    "value":146,
    "name":"ACT_GESTURE_RANGE_ATTACK2"
  },{
    "kind":"constant",
    "value":150,
    "name":"ACT_GESTURE_RANGE_ATTACK2_LOW"
  },{
    "kind":"constant",
    "value":298,
    "name":"ACT_GESTURE_RANGE_ATTACK_AR1"
  },{
    "kind":"constant",
    "value":299,
    "name":"ACT_GESTURE_RANGE_ATTACK_AR2"
  },{
    "kind":"constant",
    "value":300,
    "name":"ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE"
  },{
    "kind":"constant",
    "value":301,
    "name":"ACT_GESTURE_RANGE_ATTACK_HMG1"
  },{
    "kind":"constant",
    "value":302,
    "name":"ACT_GESTURE_RANGE_ATTACK_ML"
  },{
    "kind":"constant",
    "value":307,
    "name":"ACT_GESTURE_RANGE_ATTACK_PISTOL"
  },{
    "kind":"constant",
    "value":308,
    "name":"ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW"
  },{
    "kind":"constant",
    "value":306,
    "name":"ACT_GESTURE_RANGE_ATTACK_SHOTGUN"
  },{
    "kind":"constant",
    "value":309,
    "name":"ACT_GESTURE_RANGE_ATTACK_SLAM"
  },{
    "kind":"constant",
    "value":303,
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG1"
  },{
    "kind":"constant",
    "value":304,
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG1_LOW"
  },{
    "kind":"constant",
    "value":305,
    "name":"ACT_GESTURE_RANGE_ATTACK_SMG2"
  },{
    "kind":"constant",
    "value":312,
    "name":"ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE"
  },{
    "kind":"constant",
    "value":311,
    "name":"ACT_GESTURE_RANGE_ATTACK_THROW"
  },{
    "kind":"constant",
    "value":310,
    "name":"ACT_GESTURE_RANGE_ATTACK_TRIPWIRE"
  },{
    "kind":"constant",
    "value":377,
    "name":"ACT_GESTURE_RELOAD"
  },{
    "kind":"constant",
    "value":378,
    "name":"ACT_GESTURE_RELOAD_PISTOL"
  },{
    "kind":"constant",
    "value":380,
    "name":"ACT_GESTURE_RELOAD_SHOTGUN"
  },{
    "kind":"constant",
    "value":379,
    "name":"ACT_GESTURE_RELOAD_SMG1"
  },{
    "kind":"constant",
    "value":152,
    "name":"ACT_GESTURE_SMALL_FLINCH"
  },{
    "kind":"constant",
    "value":165,
    "name":"ACT_GESTURE_TURN_LEFT"
  },{
    "kind":"constant",
    "value":167,
    "name":"ACT_GESTURE_TURN_LEFT45"
  },{
    "kind":"constant",
    "value":171,
    "name":"ACT_GESTURE_TURN_LEFT45_FLAT"
  },{
    "kind":"constant",
    "value":169,
    "name":"ACT_GESTURE_TURN_LEFT90"
  },{
    "kind":"constant",
    "value":173,
    "name":"ACT_GESTURE_TURN_LEFT90_FLAT"
  },{
    "kind":"constant",
    "value":166,
    "name":"ACT_GESTURE_TURN_RIGHT"
  },{
    "kind":"constant",
    "value":168,
    "name":"ACT_GESTURE_TURN_RIGHT45"
  },{
    "kind":"constant",
    "value":172,
    "name":"ACT_GESTURE_TURN_RIGHT45_FLAT"
  },{
    "kind":"constant",
    "value":170,
    "name":"ACT_GESTURE_TURN_RIGHT90"
  },{
    "kind":"constant",
    "value":174,
    "name":"ACT_GESTURE_TURN_RIGHT90_FLAT"
  },{
    "kind":"constant",
    "value":27,
    "name":"ACT_GLIDE"
  },{
    "kind":"constant",
    "value":958,
    "name":"ACT_GRABBITYGLOVES_ACTIVE"
  },{
    "kind":"constant",
    "value":959,
    "name":"ACT_GRABBITYGLOVES_ACTIVE_IDLE"
  },{
    "kind":"constant",
    "value":960,
    "name":"ACT_GRABBITYGLOVES_DEACTIVATE"
  },{
    "kind":"constant",
    "value":955,
    "name":"ACT_GRABBITYGLOVES_GRAB"
  },{
    "kind":"constant",
    "value":957,
    "name":"ACT_GRABBITYGLOVES_GRAB_IDLE"
  },{
    "kind":"constant",
    "value":961,
    "name":"ACT_GRABBITYGLOVES_PULL"
  },{
    "kind":"constant",
    "value":956,
    "name":"ACT_GRABBITYGLOVES_RELEASE"
  },{
    "kind":"constant",
    "value":962,
    "name":"ACT_HEADCRAB_SMOKE_BOMB"
  },{
    "kind":"constant",
    "value":963,
    "name":"ACT_HEADCRAB_SPIT"
  },{
    "kind":"constant",
    "value":500,
    "name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE"
  },{
    "kind":"constant",
    "value":501,
    "name":"ACT_HL2MP_GESTURE_RELOAD_MELEE"
  },{
    "kind":"constant",
    "value":498,
    "name":"ACT_HL2MP_IDLE_CROUCH_MELEE"
  },{
    "kind":"constant",
    "value":496,
    "name":"ACT_HL2MP_IDLE_MELEE"
  },{
    "kind":"constant",
    "value":502,
    "name":"ACT_HL2MP_JUMP_MELEE"
  },{
    "kind":"constant",
    "value":497,
    "name":"ACT_HL2MP_RUN_MELEE"
  },{
    "kind":"constant",
    "value":499,
    "name":"ACT_HL2MP_WALK_CROUCH_MELEE"
  },{
    "kind":"constant",
    "value":30,
    "name":"ACT_HOP"
  },{
    "kind":"constant",
    "value":26,
    "name":"ACT_HOVER"
  },{
    "kind":"constant",
    "value":1,
    "name":"ACT_IDLE"
  },{
    "kind":"constant",
    "value":493,
    "name":"ACT_IDLETORUN"
  },{
    "kind":"constant",
    "value":80,
    "name":"ACT_IDLE_AGITATED"
  },{
    "kind":"constant",
    "value":93,
    "name":"ACT_IDLE_AIM_AGITATED"
  },{
    "kind":"constant",
    "value":879,
    "name":"ACT_IDLE_AIM_AUTOGUN"
  },{
    "kind":"constant",
    "value":888,
    "name":"ACT_IDLE_AIM_DUAL"
  },{
    "kind":"constant",
    "value":884,
    "name":"ACT_IDLE_AIM_PISTOL"
  },{
    "kind":"constant",
    "value":91,
    "name":"ACT_IDLE_AIM_RELAXED"
  },{
    "kind":"constant",
    "value":895,
    "name":"ACT_IDLE_AIM_RIFLE"
  },{
    "kind":"constant",
    "value":331,
    "name":"ACT_IDLE_AIM_RIFLE_STIMULATED"
  },{
    "kind":"constant",
    "value":893,
    "name":"ACT_IDLE_AIM_SHOTGUN"
  },{
    "kind":"constant",
    "value":94,
    "name":"ACT_IDLE_AIM_STEALTH"
  },{
    "kind":"constant",
    "value":92,
    "name":"ACT_IDLE_AIM_STIMULATED"
  },{
    "kind":"constant",
    "value":77,
    "name":"ACT_IDLE_ANGRY"
  },{
    "kind":"constant",
    "value":342,
    "name":"ACT_IDLE_ANGRY_MELEE"
  },{
    "kind":"constant",
    "value":318,
    "name":"ACT_IDLE_ANGRY_PISTOL"
  },{
    "kind":"constant",
    "value":345,
    "name":"ACT_IDLE_ANGRY_RPG"
  },{
    "kind":"constant",
    "value":319,
    "name":"ACT_IDLE_ANGRY_SHOTGUN"
  },{
    "kind":"constant",
    "value":316,
    "name":"ACT_IDLE_ANGRY_SMG1"
  },{
    "kind":"constant",
    "value":878,
    "name":"ACT_IDLE_AUTOGUN"
  },{
    "kind":"constant",
    "value":427,
    "name":"ACT_IDLE_CARRY"
  },{
    "kind":"constant",
    "value":887,
    "name":"ACT_IDLE_DUAL"
  },{
    "kind":"constant",
    "value":82,
    "name":"ACT_IDLE_HURT"
  },{
    "kind":"constant",
    "value":340,
    "name":"ACT_IDLE_MANNEDGUN"
  },{
    "kind":"constant",
    "value":341,
    "name":"ACT_IDLE_MELEE"
  },{
    "kind":"constant",
    "value":133,
    "name":"ACT_IDLE_ON_FIRE"
  },{
    "kind":"constant",
    "value":321,
    "name":"ACT_IDLE_PACKAGE"
  },{
    "kind":"constant",
    "value":317,
    "name":"ACT_IDLE_PISTOL"
  },{
    "kind":"constant",
    "value":78,
    "name":"ACT_IDLE_RELAXED"
  },{
    "kind":"constant",
    "value":314,
    "name":"ACT_IDLE_RIFLE"
  },{
    "kind":"constant",
    "value":344,
    "name":"ACT_IDLE_RPG"
  },{
    "kind":"constant",
    "value":343,
    "name":"ACT_IDLE_RPG_RELAXED"
  },{
    "kind":"constant",
    "value":336,
    "name":"ACT_IDLE_SHOTGUN_AGITATED"
  },{
    "kind":"constant",
    "value":334,
    "name":"ACT_IDLE_SHOTGUN_RELAXED"
  },{
    "kind":"constant",
    "value":335,
    "name":"ACT_IDLE_SHOTGUN_STIMULATED"
  },{
    "kind":"constant",
    "value":315,
    "name":"ACT_IDLE_SMG1"
  },{
    "kind":"constant",
    "value":325,
    "name":"ACT_IDLE_SMG1_RELAXED"
  },{
    "kind":"constant",
    "value":326,
    "name":"ACT_IDLE_SMG1_STIMULATED"
  },{
    "kind":"constant",
    "value":81,
    "name":"ACT_IDLE_STEALTH"
  },{
    "kind":"constant",
    "value":320,
    "name":"ACT_IDLE_STEALTH_PISTOL"
  },{
    "kind":"constant",
    "value":79,
    "name":"ACT_IDLE_STIMULATED"
  },{
    "kind":"constant",
    "value":323,
    "name":"ACT_IDLE_SUITCASE"
  },{
    "kind":"constant",
    "value":852,
    "name":"ACT_ITEM1_VM_DRAW"
  },{
    "kind":"constant",
    "value":859,
    "name":"ACT_ITEM1_VM_DRYFIRE"
  },{
    "kind":"constant",
    "value":853,
    "name":"ACT_ITEM1_VM_HOLSTER"
  },{
    "kind":"constant",
    "value":854,
    "name":"ACT_ITEM1_VM_IDLE"
  },{
    "kind":"constant",
    "value":861,
    "name":"ACT_ITEM1_VM_IDLE_LOWERED"
  },{
    "kind":"constant",
    "value":860,
    "name":"ACT_ITEM1_VM_IDLE_TO_LOWERED"
  },{
    "kind":"constant",
    "value":862,
    "name":"ACT_ITEM1_VM_LOWERED_TO_IDLE"
  },{
    "kind":"constant",
    "value":856,
    "name":"ACT_ITEM1_VM_PRIMARYATTACK"
  },{
    "kind":"constant",
    "value":855,
    "name":"ACT_ITEM1_VM_PULLBACK"
  },{
    "kind":"constant",
    "value":858,
    "name":"ACT_ITEM1_VM_RELOAD"
  },{
    "kind":"constant",
    "value":857,
    "name":"ACT_ITEM1_VM_SECONDARYATTACK"
  },{
    "kind":"constant",
    "value":863,
    "name":"ACT_ITEM2_VM_DRAW"
  },{
    "kind":"constant",
    "value":870,
    "name":"ACT_ITEM2_VM_DRYFIRE"
  },{
    "kind":"constant",
    "value":864,
    "name":"ACT_ITEM2_VM_HOLSTER"
  },{
    "kind":"constant",
    "value":865,
    "name":"ACT_ITEM2_VM_IDLE"
  },{
    "kind":"constant",
    "value":872,
    "name":"ACT_ITEM2_VM_IDLE_LOWERED"
  },{
    "kind":"constant",
    "value":871,
    "name":"ACT_ITEM2_VM_IDLE_TO_LOWERED"
  },{
    "kind":"constant",
    "value":873,
    "name":"ACT_ITEM2_VM_LOWERED_TO_IDLE"
  },{
    "kind":"constant",
    "value":867,
    "name":"ACT_ITEM2_VM_PRIMARYATTACK"
  },{
    "kind":"constant",
    "value":866,
    "name":"ACT_ITEM2_VM_PULLBACK"
  },{
    "kind":"constant",
    "value":869,
    "name":"ACT_ITEM2_VM_RELOAD"
  },{
    "kind":"constant",
    "value":868,
    "name":"ACT_ITEM2_VM_SECONDARYATTACK"
  },{
    "kind":"constant",
    "value":29,
    "name":"ACT_JUMP"
  },{
    "kind":"constant",
    "value":883,
    "name":"ACT_JUMP_AUTOGUN"
  },{
    "kind":"constant",
    "value":892,
    "name":"ACT_JUMP_DUAL"
  },{
    "kind":"constant",
    "value":32,
    "name":"ACT_LAND"
  },{
    "kind":"constant",
    "value":31,
    "name":"ACT_LEAP"
  },{
    "kind":"constant",
    "value":61,
    "name":"ACT_LOOKBACK_LEFT"
  },{
    "kind":"constant",
    "value":60,
    "name":"ACT_LOOKBACK_RIGHT"
  },{
    "kind":"constant",
    "value":65,
    "name":"ACT_MELEE_ATTACK1"
  },{
    "kind":"constant",
    "value":66,
    "name":"ACT_MELEE_ATTACK2"
  },{
    "kind":"constant",
    "value":291,
    "name":"ACT_MELEE_ATTACK_SWING"
  },{
    "kind":"constant",
    "value":151,
    "name":"ACT_MELEE_ATTACK_SWING_GESTURE"
  },{
    "kind":"constant",
    "value":830,
    "name":"ACT_MELEE_VM_DRAW"
  },{
    "kind":"constant",
    "value":837,
    "name":"ACT_MELEE_VM_DRYFIRE"
  },{
    "kind":"constant",
    "value":831,
    "name":"ACT_MELEE_VM_HOLSTER"
  },{
    "kind":"constant",
    "value":832,
    "name":"ACT_MELEE_VM_IDLE"
  },{
    "kind":"constant",
    "value":839,
    "name":"ACT_MELEE_VM_IDLE_LOWERED"
  },{
    "kind":"constant",
    "value":838,
    "name":"ACT_MELEE_VM_IDLE_TO_LOWERED"
  },{
    "kind":"constant",
    "value":840,
    "name":"ACT_MELEE_VM_LOWERED_TO_IDLE"
  },{
    "kind":"constant",
    "value":834,
    "name":"ACT_MELEE_VM_PRIMARYATTACK"
  },{
    "kind":"constant",
    "value":833,
    "name":"ACT_MELEE_VM_PULLBACK"
  },{
    "kind":"constant",
    "value":836,
    "name":"ACT_MELEE_VM_RELOAD"
  },{
    "kind":"constant",
    "value":835,
    "name":"ACT_MELEE_VM_SECONDARYATTACK"
  },{
    "kind":"constant",
    "value":1544,
    "name":"ACT_MIRANA_LEAP_END"
  },{
    "kind":"constant",
    "value":510,
    "name":"ACT_MP_AIRWALK"
  },{
    "kind":"constant",
    "value":729,
    "name":"ACT_MP_AIRWALK_BUILDING"
  },{
    "kind":"constant",
    "value":646,
    "name":"ACT_MP_AIRWALK_ITEM1"
  },{
    "kind":"constant",
    "value":663,
    "name":"ACT_MP_AIRWALK_ITEM2"
  },{
    "kind":"constant",
    "value":625,
    "name":"ACT_MP_AIRWALK_MELEE"
  },{
    "kind":"constant",
    "value":748,
    "name":"ACT_MP_AIRWALK_PDA"
  },{
    "kind":"constant",
    "value":559,
    "name":"ACT_MP_AIRWALK_PRIMARY"
  },{
    "kind":"constant",
    "value":594,
    "name":"ACT_MP_AIRWALK_SECONDARY"
  },{
    "kind":"constant",
    "value":739,
    "name":"ACT_MP_ATTACK_AIRWALK_BUILDING"
  },{
    "kind":"constant",
    "value":535,
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE"
  },{
    "kind":"constant",
    "value":743,
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING"
  },{
    "kind":"constant",
    "value":641,
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE"
  },{
    "kind":"constant",
    "value":589,
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY"
  },{
    "kind":"constant",
    "value":620,
    "name":"ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY"
  },{
    "kind":"constant",
    "value":658,
    "name":"ACT_MP_ATTACK_AIRWALK_ITEM1"
  },{
    "kind":"constant",
    "value":675,
    "name":"ACT_MP_ATTACK_AIRWALK_ITEM2"
  },{
    "kind":"constant",
    "value":637,
    "name":"ACT_MP_ATTACK_AIRWALK_MELEE"
  },{
    "kind":"constant",
    "value":573,
    "name":"ACT_MP_ATTACK_AIRWALK_PRIMARY"
  },{
    "kind":"constant",
    "value":533,
    "name":"ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE"
  },{
    "kind":"constant",
    "value":604,
    "name":"ACT_MP_ATTACK_AIRWALK_SECONDARY"
  },{
    "kind":"constant",
    "value":534,
    "name":"ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE"
  },{
    "kind":"constant",
    "value":737,
    "name":"ACT_MP_ATTACK_CROUCH_BUILDING"
  },{
    "kind":"constant",
    "value":529,
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE"
  },{
    "kind":"constant",
    "value":741,
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING"
  },{
    "kind":"constant",
    "value":639,
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_MELEE"
  },{
    "kind":"constant",
    "value":587,
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY"
  },{
    "kind":"constant",
    "value":618,
    "name":"ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY"
  },{
    "kind":"constant",
    "value":655,
    "name":"ACT_MP_ATTACK_CROUCH_ITEM1"
  },{
    "kind":"constant",
    "value":656,
    "name":"ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY"
  },{
    "kind":"constant",
    "value":672,
    "name":"ACT_MP_ATTACK_CROUCH_ITEM2"
  },{
    "kind":"constant",
    "value":673,
    "name":"ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY"
  },{
    "kind":"constant",
    "value":634,
    "name":"ACT_MP_ATTACK_CROUCH_MELEE"
  },{
    "kind":"constant",
    "value":635,
    "name":"ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY"
  },{
    "kind":"constant",
    "value":552,
    "name":"ACT_MP_ATTACK_CROUCH_POSTFIRE"
  },{
    "kind":"constant",
    "value":551,
    "name":"ACT_MP_ATTACK_CROUCH_PREFIRE"
  },{
    "kind":"constant",
    "value":570,
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARY"
  },{
    "kind":"constant",
    "value":526,
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARYFIRE"
  },{
    "kind":"constant",
    "value":527,
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED"
  },{
    "kind":"constant",
    "value":571,
    "name":"ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED"
  },{
    "kind":"constant",
    "value":602,
    "name":"ACT_MP_ATTACK_CROUCH_SECONDARY"
  },{
    "kind":"constant",
    "value":528,
    "name":"ACT_MP_ATTACK_CROUCH_SECONDARYFIRE"
  },{
    "kind":"constant",
    "value":736,
    "name":"ACT_MP_ATTACK_STAND_BUILDING"
  },{
    "kind":"constant",
    "value":525,
    "name":"ACT_MP_ATTACK_STAND_GRENADE"
  },{
    "kind":"constant",
    "value":740,
    "name":"ACT_MP_ATTACK_STAND_GRENADE_BUILDING"
  },{
    "kind":"constant",
    "value":638,
    "name":"ACT_MP_ATTACK_STAND_GRENADE_MELEE"
  },{
    "kind":"constant",
    "value":586,
    "name":"ACT_MP_ATTACK_STAND_GRENADE_PRIMARY"
  },{
    "kind":"constant",
    "value":617,
    "name":"ACT_MP_ATTACK_STAND_GRENADE_SECONDARY"
  },{
    "kind":"constant",
    "value":653,
    "name":"ACT_MP_ATTACK_STAND_ITEM1"
  },{
    "kind":"constant",
    "value":654,
    "name":"ACT_MP_ATTACK_STAND_ITEM1_SECONDARY"
  },{
    "kind":"constant",
    "value":670,
    "name":"ACT_MP_ATTACK_STAND_ITEM2"
  },{
    "kind":"constant",
    "value":671,
    "name":"ACT_MP_ATTACK_STAND_ITEM2_SECONDARY"
  },{
    "kind":"constant",
    "value":632,
    "name":"ACT_MP_ATTACK_STAND_MELEE"
  },{
    "kind":"constant",
    "value":633,
    "name":"ACT_MP_ATTACK_STAND_MELEE_SECONDARY"
  },{
    "kind":"constant",
    "value":755,
    "name":"ACT_MP_ATTACK_STAND_PDA"
  },{
    "kind":"constant",
    "value":549,
    "name":"ACT_MP_ATTACK_STAND_POSTFIRE"
  },{
    "kind":"constant",
    "value":548,
    "name":"ACT_MP_ATTACK_STAND_PREFIRE"
  },{
    "kind":"constant",
    "value":568,
    "name":"ACT_MP_ATTACK_STAND_PRIMARY"
  },{
    "kind":"constant",
    "value":522,
    "name":"ACT_MP_ATTACK_STAND_PRIMARYFIRE"
  },{
    "kind":"constant",
    "value":523,
    "name":"ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED"
  },{
    "kind":"constant",
    "value":569,
    "name":"ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED"
  },{
    "kind":"constant",
    "value":601,
    "name":"ACT_MP_ATTACK_STAND_SECONDARY"
  },{
    "kind":"constant",
    "value":524,
    "name":"ACT_MP_ATTACK_STAND_SECONDARYFIRE"
  },{
    "kind":"constant",
    "value":550,
    "name":"ACT_MP_ATTACK_STAND_STARTFIRE"
  },{
    "kind":"constant",
    "value":738,
    "name":"ACT_MP_ATTACK_SWIM_BUILDING"
  },{
    "kind":"constant",
    "value":532,
    "name":"ACT_MP_ATTACK_SWIM_GRENADE"
  },{
    "kind":"constant",
    "value":742,
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_BUILDING"
  },{
    "kind":"constant",
    "value":640,
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_MELEE"
  },{
    "kind":"constant",
    "value":588,
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY"
  },{
    "kind":"constant",
    "value":619,
    "name":"ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY"
  },{
    "kind":"constant",
    "value":657,
    "name":"ACT_MP_ATTACK_SWIM_ITEM1"
  },{
    "kind":"constant",
    "value":674,
    "name":"ACT_MP_ATTACK_SWIM_ITEM2"
  },{
    "kind":"constant",
    "value":636,
    "name":"ACT_MP_ATTACK_SWIM_MELEE"
  },{
    "kind":"constant",
    "value":756,
    "name":"ACT_MP_ATTACK_SWIM_PDA"
  },{
    "kind":"constant",
    "value":554,
    "name":"ACT_MP_ATTACK_SWIM_POSTFIRE"
  },{
    "kind":"constant",
    "value":553,
    "name":"ACT_MP_ATTACK_SWIM_PREFIRE"
  },{
    "kind":"constant",
    "value":572,
    "name":"ACT_MP_ATTACK_SWIM_PRIMARY"
  },{
    "kind":"constant",
    "value":530,
    "name":"ACT_MP_ATTACK_SWIM_PRIMARYFIRE"
  },{
    "kind":"constant",
    "value":603,
    "name":"ACT_MP_ATTACK_SWIM_SECONDARY"
  },{
    "kind":"constant",
    "value":531,
    "name":"ACT_MP_ATTACK_SWIM_SECONDARYFIRE"
  },{
    "kind":"constant",
    "value":511,
    "name":"ACT_MP_CROUCHWALK"
  },{
    "kind":"constant",
    "value":730,
    "name":"ACT_MP_CROUCHWALK_BUILDING"
  },{
    "kind":"constant",
    "value":647,
    "name":"ACT_MP_CROUCHWALK_ITEM1"
  },{
    "kind":"constant",
    "value":664,
    "name":"ACT_MP_CROUCHWALK_ITEM2"
  },{
    "kind":"constant",
    "value":626,
    "name":"ACT_MP_CROUCHWALK_MELEE"
  },{
    "kind":"constant",
    "value":749,
    "name":"ACT_MP_CROUCHWALK_PDA"
  },{
    "kind":"constant",
    "value":560,
    "name":"ACT_MP_CROUCHWALK_PRIMARY"
  },{
    "kind":"constant",
    "value":595,
    "name":"ACT_MP_CROUCHWALK_SECONDARY"
  },{
    "kind":"constant",
    "value":726,
    "name":"ACT_MP_CROUCH_BUILDING"
  },{
    "kind":"constant",
    "value":506,
    "name":"ACT_MP_CROUCH_DEPLOYED"
  },{
    "kind":"constant",
    "value":505,
    "name":"ACT_MP_CROUCH_DEPLOYED_IDLE"
  },{
    "kind":"constant",
    "value":504,
    "name":"ACT_MP_CROUCH_IDLE"
  },{
    "kind":"constant",
    "value":643,
    "name":"ACT_MP_CROUCH_ITEM1"
  },{
    "kind":"constant",
    "value":660,
    "name":"ACT_MP_CROUCH_ITEM2"
  },{
    "kind":"constant",
    "value":622,
    "name":"ACT_MP_CROUCH_MELEE"
  },{
    "kind":"constant",
    "value":745,
    "name":"ACT_MP_CROUCH_PDA"
  },{
    "kind":"constant",
    "value":556,
    "name":"ACT_MP_CROUCH_PRIMARY"
  },{
    "kind":"constant",
    "value":591,
    "name":"ACT_MP_CROUCH_SECONDARY"
  },{
    "kind":"constant",
    "value":519,
    "name":"ACT_MP_DEPLOYED"
  },{
    "kind":"constant",
    "value":507,
    "name":"ACT_MP_DEPLOYED_IDLE"
  },{
    "kind":"constant",
    "value":566,
    "name":"ACT_MP_DEPLOYED_PRIMARY"
  },{
    "kind":"constant",
    "value":517,
    "name":"ACT_MP_DOUBLEJUMP"
  },{
    "kind":"constant",
    "value":676,
    "name":"ACT_MP_GESTURE_FLINCH"
  },{
    "kind":"constant",
    "value":683,
    "name":"ACT_MP_GESTURE_FLINCH_CHEST"
  },{
    "kind":"constant",
    "value":682,
    "name":"ACT_MP_GESTURE_FLINCH_HEAD"
  },{
    "kind":"constant",
    "value":680,
    "name":"ACT_MP_GESTURE_FLINCH_ITEM1"
  },{
    "kind":"constant",
    "value":681,
    "name":"ACT_MP_GESTURE_FLINCH_ITEM2"
  },{
    "kind":"constant",
    "value":685,
    "name":"ACT_MP_GESTURE_FLINCH_LEFTARM"
  },{
    "kind":"constant",
    "value":687,
    "name":"ACT_MP_GESTURE_FLINCH_LEFTLEG"
  },{
    "kind":"constant",
    "value":679,
    "name":"ACT_MP_GESTURE_FLINCH_MELEE"
  },{
    "kind":"constant",
    "value":677,
    "name":"ACT_MP_GESTURE_FLINCH_PRIMARY"
  },{
    "kind":"constant",
    "value":686,
    "name":"ACT_MP_GESTURE_FLINCH_RIGHTARM"
  },{
    "kind":"constant",
    "value":688,
    "name":"ACT_MP_GESTURE_FLINCH_RIGHTLEG"
  },{
    "kind":"constant",
    "value":678,
    "name":"ACT_MP_GESTURE_FLINCH_SECONDARY"
  },{
    "kind":"constant",
    "value":684,
    "name":"ACT_MP_GESTURE_FLINCH_STOMACH"
  },{
    "kind":"constant",
    "value":758,
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT"
  },{
    "kind":"constant",
    "value":794,
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING"
  },{
    "kind":"constant",
    "value":782,
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1"
  },{
    "kind":"constant",
    "value":788,
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2"
  },{
    "kind":"constant",
    "value":776,
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_MELEE"
  },{
    "kind":"constant",
    "value":800,
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_PDA"
  },{
    "kind":"constant",
    "value":764,
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY"
  },{
    "kind":"constant",
    "value":770,
    "name":"ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY"
  },{
    "kind":"constant",
    "value":759,
    "name":"ACT_MP_GESTURE_VC_FISTPUMP"
  },{
    "kind":"constant",
    "value":795,
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_BUILDING"
  },{
    "kind":"constant",
    "value":783,
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_ITEM1"
  },{
    "kind":"constant",
    "value":789,
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_ITEM2"
  },{
    "kind":"constant",
    "value":777,
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_MELEE"
  },{
    "kind":"constant",
    "value":801,
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_PDA"
  },{
    "kind":"constant",
    "value":765,
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY"
  },{
    "kind":"constant",
    "value":771,
    "name":"ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY"
  },{
    "kind":"constant",
    "value":757,
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH"
  },{
    "kind":"constant",
    "value":793,
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING"
  },{
    "kind":"constant",
    "value":781,
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1"
  },{
    "kind":"constant",
    "value":787,
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2"
  },{
    "kind":"constant",
    "value":775,
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_MELEE"
  },{
    "kind":"constant",
    "value":799,
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_PDA"
  },{
    "kind":"constant",
    "value":763,
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY"
  },{
    "kind":"constant",
    "value":769,
    "name":"ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY"
  },{
    "kind":"constant",
    "value":762,
    "name":"ACT_MP_GESTURE_VC_NODNO"
  },{
    "kind":"constant",
    "value":798,
    "name":"ACT_MP_GESTURE_VC_NODNO_BUILDING"
  },{
    "kind":"constant",
    "value":786,
    "name":"ACT_MP_GESTURE_VC_NODNO_ITEM1"
  },{
    "kind":"constant",
    "value":792,
    "name":"ACT_MP_GESTURE_VC_NODNO_ITEM2"
  },{
    "kind":"constant",
    "value":780,
    "name":"ACT_MP_GESTURE_VC_NODNO_MELEE"
  },{
    "kind":"constant",
    "value":804,
    "name":"ACT_MP_GESTURE_VC_NODNO_PDA"
  },{
    "kind":"constant",
    "value":768,
    "name":"ACT_MP_GESTURE_VC_NODNO_PRIMARY"
  },{
    "kind":"constant",
    "value":774,
    "name":"ACT_MP_GESTURE_VC_NODNO_SECONDARY"
  },{
    "kind":"constant",
    "value":761,
    "name":"ACT_MP_GESTURE_VC_NODYES"
  },{
    "kind":"constant",
    "value":797,
    "name":"ACT_MP_GESTURE_VC_NODYES_BUILDING"
  },{
    "kind":"constant",
    "value":785,
    "name":"ACT_MP_GESTURE_VC_NODYES_ITEM1"
  },{
    "kind":"constant",
    "value":791,
    "name":"ACT_MP_GESTURE_VC_NODYES_ITEM2"
  },{
    "kind":"constant",
    "value":779,
    "name":"ACT_MP_GESTURE_VC_NODYES_MELEE"
  },{
    "kind":"constant",
    "value":803,
    "name":"ACT_MP_GESTURE_VC_NODYES_PDA"
  },{
    "kind":"constant",
    "value":767,
    "name":"ACT_MP_GESTURE_VC_NODYES_PRIMARY"
  },{
    "kind":"constant",
    "value":773,
    "name":"ACT_MP_GESTURE_VC_NODYES_SECONDARY"
  },{
    "kind":"constant",
    "value":760,
    "name":"ACT_MP_GESTURE_VC_THUMBSUP"
  },{
    "kind":"constant",
    "value":796,
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_BUILDING"
  },{
    "kind":"constant",
    "value":784,
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_ITEM1"
  },{
    "kind":"constant",
    "value":790,
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_ITEM2"
  },{
    "kind":"constant",
    "value":778,
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_MELEE"
  },{
    "kind":"constant",
    "value":802,
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_PDA"
  },{
    "kind":"constant",
    "value":766,
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY"
  },{
    "kind":"constant",
    "value":772,
    "name":"ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY"
  },{
    "kind":"constant",
    "value":691,
    "name":"ACT_MP_GRENADE1_ATTACK"
  },{
    "kind":"constant",
    "value":689,
    "name":"ACT_MP_GRENADE1_DRAW"
  },{
    "kind":"constant",
    "value":690,
    "name":"ACT_MP_GRENADE1_IDLE"
  },{
    "kind":"constant",
    "value":694,
    "name":"ACT_MP_GRENADE2_ATTACK"
  },{
    "kind":"constant",
    "value":692,
    "name":"ACT_MP_GRENADE2_DRAW"
  },{
    "kind":"constant",
    "value":693,
    "name":"ACT_MP_GRENADE2_IDLE"
  },{
    "kind":"constant",
    "value":715,
    "name":"ACT_MP_ITEM1_GRENADE1_ATTACK"
  },{
    "kind":"constant",
    "value":713,
    "name":"ACT_MP_ITEM1_GRENADE1_DRAW"
  },{
    "kind":"constant",
    "value":714,
    "name":"ACT_MP_ITEM1_GRENADE1_IDLE"
  },{
    "kind":"constant",
    "value":718,
    "name":"ACT_MP_ITEM1_GRENADE2_ATTACK"
  },{
    "kind":"constant",
    "value":716,
    "name":"ACT_MP_ITEM1_GRENADE2_DRAW"
  },{
    "kind":"constant",
    "value":717,
    "name":"ACT_MP_ITEM1_GRENADE2_IDLE"
  },{
    "kind":"constant",
    "value":721,
    "name":"ACT_MP_ITEM2_GRENADE1_ATTACK"
  },{
    "kind":"constant",
    "value":719,
    "name":"ACT_MP_ITEM2_GRENADE1_DRAW"
  },{
    "kind":"constant",
    "value":720,
    "name":"ACT_MP_ITEM2_GRENADE1_IDLE"
  },{
    "kind":"constant",
    "value":724,
    "name":"ACT_MP_ITEM2_GRENADE2_ATTACK"
  },{
    "kind":"constant",
    "value":722,
    "name":"ACT_MP_ITEM2_GRENADE2_DRAW"
  },{
    "kind":"constant",
    "value":723,
    "name":"ACT_MP_ITEM2_GRENADE2_IDLE"
  },{
    "kind":"constant",
    "value":513,
    "name":"ACT_MP_JUMP"
  },{
    "kind":"constant",
    "value":731,
    "name":"ACT_MP_JUMP_BUILDING"
  },{
    "kind":"constant",
    "value":515,
    "name":"ACT_MP_JUMP_FLOAT"
  },{
    "kind":"constant",
    "value":733,
    "name":"ACT_MP_JUMP_FLOAT_BUILDING"
  },{
    "kind":"constant",
    "value":650,
    "name":"ACT_MP_JUMP_FLOAT_ITEM1"
  },{
    "kind":"constant",
    "value":667,
    "name":"ACT_MP_JUMP_FLOAT_ITEM2"
  },{
    "kind":"constant",
    "value":629,
    "name":"ACT_MP_JUMP_FLOAT_MELEE"
  },{
    "kind":"constant",
    "value":752,
    "name":"ACT_MP_JUMP_FLOAT_PDA"
  },{
    "kind":"constant",
    "value":563,
    "name":"ACT_MP_JUMP_FLOAT_PRIMARY"
  },{
    "kind":"constant",
    "value":598,
    "name":"ACT_MP_JUMP_FLOAT_SECONDARY"
  },{
    "kind":"constant",
    "value":648,
    "name":"ACT_MP_JUMP_ITEM1"
  },{
    "kind":"constant",
    "value":665,
    "name":"ACT_MP_JUMP_ITEM2"
  },{
    "kind":"constant",
    "value":516,
    "name":"ACT_MP_JUMP_LAND"
  },{
    "kind":"constant",
    "value":734,
    "name":"ACT_MP_JUMP_LAND_BUILDING"
  },{
    "kind":"constant",
    "value":651,
    "name":"ACT_MP_JUMP_LAND_ITEM1"
  },{
    "kind":"constant",
    "value":668,
    "name":"ACT_MP_JUMP_LAND_ITEM2"
  },{
    "kind":"constant",
    "value":630,
    "name":"ACT_MP_JUMP_LAND_MELEE"
  },{
    "kind":"constant",
    "value":753,
    "name":"ACT_MP_JUMP_LAND_PDA"
  },{
    "kind":"constant",
    "value":564,
    "name":"ACT_MP_JUMP_LAND_PRIMARY"
  },{
    "kind":"constant",
    "value":599,
    "name":"ACT_MP_JUMP_LAND_SECONDARY"
  },{
    "kind":"constant",
    "value":627,
    "name":"ACT_MP_JUMP_MELEE"
  },{
    "kind":"constant",
    "value":750,
    "name":"ACT_MP_JUMP_PDA"
  },{
    "kind":"constant",
    "value":561,
    "name":"ACT_MP_JUMP_PRIMARY"
  },{
    "kind":"constant",
    "value":596,
    "name":"ACT_MP_JUMP_SECONDARY"
  },{
    "kind":"constant",
    "value":514,
    "name":"ACT_MP_JUMP_START"
  },{
    "kind":"constant",
    "value":732,
    "name":"ACT_MP_JUMP_START_BUILDING"
  },{
    "kind":"constant",
    "value":649,
    "name":"ACT_MP_JUMP_START_ITEM1"
  },{
    "kind":"constant",
    "value":666,
    "name":"ACT_MP_JUMP_START_ITEM2"
  },{
    "kind":"constant",
    "value":628,
    "name":"ACT_MP_JUMP_START_MELEE"
  },{
    "kind":"constant",
    "value":751,
    "name":"ACT_MP_JUMP_START_PDA"
  },{
    "kind":"constant",
    "value":562,
    "name":"ACT_MP_JUMP_START_PRIMARY"
  },{
    "kind":"constant",
    "value":597,
    "name":"ACT_MP_JUMP_START_SECONDARY"
  },{
    "kind":"constant",
    "value":709,
    "name":"ACT_MP_MELEE_GRENADE1_ATTACK"
  },{
    "kind":"constant",
    "value":707,
    "name":"ACT_MP_MELEE_GRENADE1_DRAW"
  },{
    "kind":"constant",
    "value":708,
    "name":"ACT_MP_MELEE_GRENADE1_IDLE"
  },{
    "kind":"constant",
    "value":712,
    "name":"ACT_MP_MELEE_GRENADE2_ATTACK"
  },{
    "kind":"constant",
    "value":710,
    "name":"ACT_MP_MELEE_GRENADE2_DRAW"
  },{
    "kind":"constant",
    "value":711,
    "name":"ACT_MP_MELEE_GRENADE2_IDLE"
  },{
    "kind":"constant",
    "value":697,
    "name":"ACT_MP_PRIMARY_GRENADE1_ATTACK"
  },{
    "kind":"constant",
    "value":695,
    "name":"ACT_MP_PRIMARY_GRENADE1_DRAW"
  },{
    "kind":"constant",
    "value":696,
    "name":"ACT_MP_PRIMARY_GRENADE1_IDLE"
  },{
    "kind":"constant",
    "value":700,
    "name":"ACT_MP_PRIMARY_GRENADE2_ATTACK"
  },{
    "kind":"constant",
    "value":698,
    "name":"ACT_MP_PRIMARY_GRENADE2_DRAW"
  },{
    "kind":"constant",
    "value":699,
    "name":"ACT_MP_PRIMARY_GRENADE2_IDLE"
  },{
    "kind":"constant",
    "value":545,
    "name":"ACT_MP_RELOAD_AIRWALK"
  },{
    "kind":"constant",
    "value":547,
    "name":"ACT_MP_RELOAD_AIRWALK_END"
  },{
    "kind":"constant",
    "value":546,
    "name":"ACT_MP_RELOAD_AIRWALK_LOOP"
  },{
    "kind":"constant",
    "value":583,
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY"
  },{
    "kind":"constant",
    "value":585,
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY_END"
  },{
    "kind":"constant",
    "value":584,
    "name":"ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP"
  },{
    "kind":"constant",
    "value":614,
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY"
  },{
    "kind":"constant",
    "value":616,
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY_END"
  },{
    "kind":"constant",
    "value":615,
    "name":"ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP"
  },{
    "kind":"constant",
    "value":539,
    "name":"ACT_MP_RELOAD_CROUCH"
  },{
    "kind":"constant",
    "value":541,
    "name":"ACT_MP_RELOAD_CROUCH_END"
  },{
    "kind":"constant",
    "value":540,
    "name":"ACT_MP_RELOAD_CROUCH_LOOP"
  },{
    "kind":"constant",
    "value":577,
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY"
  },{
    "kind":"constant",
    "value":579,
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY_END"
  },{
    "kind":"constant",
    "value":578,
    "name":"ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP"
  },{
    "kind":"constant",
    "value":608,
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY"
  },{
    "kind":"constant",
    "value":610,
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY_END"
  },{
    "kind":"constant",
    "value":609,
    "name":"ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP"
  },{
    "kind":"constant",
    "value":536,
    "name":"ACT_MP_RELOAD_STAND"
  },{
    "kind":"constant",
    "value":538,
    "name":"ACT_MP_RELOAD_STAND_END"
  },{
    "kind":"constant",
    "value":537,
    "name":"ACT_MP_RELOAD_STAND_LOOP"
  },{
    "kind":"constant",
    "value":574,
    "name":"ACT_MP_RELOAD_STAND_PRIMARY"
  },{
    "kind":"constant",
    "value":576,
    "name":"ACT_MP_RELOAD_STAND_PRIMARY_END"
  },{
    "kind":"constant",
    "value":575,
    "name":"ACT_MP_RELOAD_STAND_PRIMARY_LOOP"
  },{
    "kind":"constant",
    "value":605,
    "name":"ACT_MP_RELOAD_STAND_SECONDARY"
  },{
    "kind":"constant",
    "value":607,
    "name":"ACT_MP_RELOAD_STAND_SECONDARY_END"
  },{
    "kind":"constant",
    "value":606,
    "name":"ACT_MP_RELOAD_STAND_SECONDARY_LOOP"
  },{
    "kind":"constant",
    "value":542,
    "name":"ACT_MP_RELOAD_SWIM"
  },{
    "kind":"constant",
    "value":544,
    "name":"ACT_MP_RELOAD_SWIM_END"
  },{
    "kind":"constant",
    "value":543,
    "name":"ACT_MP_RELOAD_SWIM_LOOP"
  },{
    "kind":"constant",
    "value":580,
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY"
  },{
    "kind":"constant",
    "value":582,
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY_END"
  },{
    "kind":"constant",
    "value":581,
    "name":"ACT_MP_RELOAD_SWIM_PRIMARY_LOOP"
  },{
    "kind":"constant",
    "value":611,
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY"
  },{
    "kind":"constant",
    "value":613,
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY_END"
  },{
    "kind":"constant",
    "value":612,
    "name":"ACT_MP_RELOAD_SWIM_SECONDARY_LOOP"
  },{
    "kind":"constant",
    "value":508,
    "name":"ACT_MP_RUN"
  },{
    "kind":"constant",
    "value":727,
    "name":"ACT_MP_RUN_BUILDING"
  },{
    "kind":"constant",
    "value":644,
    "name":"ACT_MP_RUN_ITEM1"
  },{
    "kind":"constant",
    "value":661,
    "name":"ACT_MP_RUN_ITEM2"
  },{
    "kind":"constant",
    "value":623,
    "name":"ACT_MP_RUN_MELEE"
  },{
    "kind":"constant",
    "value":746,
    "name":"ACT_MP_RUN_PDA"
  },{
    "kind":"constant",
    "value":557,
    "name":"ACT_MP_RUN_PRIMARY"
  },{
    "kind":"constant",
    "value":592,
    "name":"ACT_MP_RUN_SECONDARY"
  },{
    "kind":"constant",
    "value":703,
    "name":"ACT_MP_SECONDARY_GRENADE1_ATTACK"
  },{
    "kind":"constant",
    "value":701,
    "name":"ACT_MP_SECONDARY_GRENADE1_DRAW"
  },{
    "kind":"constant",
    "value":702,
    "name":"ACT_MP_SECONDARY_GRENADE1_IDLE"
  },{
    "kind":"constant",
    "value":706,
    "name":"ACT_MP_SECONDARY_GRENADE2_ATTACK"
  },{
    "kind":"constant",
    "value":704,
    "name":"ACT_MP_SECONDARY_GRENADE2_DRAW"
  },{
    "kind":"constant",
    "value":705,
    "name":"ACT_MP_SECONDARY_GRENADE2_IDLE"
  },{
    "kind":"constant",
    "value":512,
    "name":"ACT_MP_SPRINT"
  },{
    "kind":"constant",
    "value":725,
    "name":"ACT_MP_STAND_BUILDING"
  },{
    "kind":"constant",
    "value":503,
    "name":"ACT_MP_STAND_IDLE"
  },{
    "kind":"constant",
    "value":642,
    "name":"ACT_MP_STAND_ITEM1"
  },{
    "kind":"constant",
    "value":659,
    "name":"ACT_MP_STAND_ITEM2"
  },{
    "kind":"constant",
    "value":621,
    "name":"ACT_MP_STAND_MELEE"
  },{
    "kind":"constant",
    "value":744,
    "name":"ACT_MP_STAND_PDA"
  },{
    "kind":"constant",
    "value":555,
    "name":"ACT_MP_STAND_PRIMARY"
  },{
    "kind":"constant",
    "value":590,
    "name":"ACT_MP_STAND_SECONDARY"
  },{
    "kind":"constant",
    "value":518,
    "name":"ACT_MP_SWIM"
  },{
    "kind":"constant",
    "value":735,
    "name":"ACT_MP_SWIM_BUILDING"
  },{
    "kind":"constant",
    "value":520,
    "name":"ACT_MP_SWIM_DEPLOYED"
  },{
    "kind":"constant",
    "value":567,
    "name":"ACT_MP_SWIM_DEPLOYED_PRIMARY"
  },{
    "kind":"constant",
    "value":652,
    "name":"ACT_MP_SWIM_ITEM1"
  },{
    "kind":"constant",
    "value":669,
    "name":"ACT_MP_SWIM_ITEM2"
  },{
    "kind":"constant",
    "value":631,
    "name":"ACT_MP_SWIM_MELEE"
  },{
    "kind":"constant",
    "value":754,
    "name":"ACT_MP_SWIM_PDA"
  },{
    "kind":"constant",
    "value":565,
    "name":"ACT_MP_SWIM_PRIMARY"
  },{
    "kind":"constant",
    "value":600,
    "name":"ACT_MP_SWIM_SECONDARY"
  },{
    "kind":"constant",
    "value":521,
    "name":"ACT_MP_VCD"
  },{
    "kind":"constant",
    "value":509,
    "name":"ACT_MP_WALK"
  },{
    "kind":"constant",
    "value":728,
    "name":"ACT_MP_WALK_BUILDING"
  },{
    "kind":"constant",
    "value":645,
    "name":"ACT_MP_WALK_ITEM1"
  },{
    "kind":"constant",
    "value":662,
    "name":"ACT_MP_WALK_ITEM2"
  },{
    "kind":"constant",
    "value":624,
    "name":"ACT_MP_WALK_MELEE"
  },{
    "kind":"constant",
    "value":747,
    "name":"ACT_MP_WALK_PDA"
  },{
    "kind":"constant",
    "value":558,
    "name":"ACT_MP_WALK_PRIMARY"
  },{
    "kind":"constant",
    "value":593,
    "name":"ACT_MP_WALK_SECONDARY"
  },{
    "kind":"constant",
    "value":966,
    "name":"ACT_NEUTRAL_REF_POSE"
  },{
    "kind":"constant",
    "value":463,
    "name":"ACT_OBJ_ASSEMBLING"
  },{
    "kind":"constant",
    "value":469,
    "name":"ACT_OBJ_DETERIORATING"
  },{
    "kind":"constant",
    "value":464,
    "name":"ACT_OBJ_DISMANTLING"
  },{
    "kind":"constant",
    "value":467,
    "name":"ACT_OBJ_IDLE"
  },{
    "kind":"constant",
    "value":468,
    "name":"ACT_OBJ_PLACING"
  },{
    "kind":"constant",
    "value":466,
    "name":"ACT_OBJ_RUNNING"
  },{
    "kind":"constant",
    "value":465,
    "name":"ACT_OBJ_STARTUP"
  },{
    "kind":"constant",
    "value":470,
    "name":"ACT_OBJ_UPGRADING"
  },{
    "kind":"constant",
    "value":412,
    "name":"ACT_OPEN_DOOR"
  },{
    "kind":"constant",
    "value":442,
    "name":"ACT_OVERLAY_GRENADEIDLE"
  },{
    "kind":"constant",
    "value":443,
    "name":"ACT_OVERLAY_GRENADEREADY"
  },{
    "kind":"constant",
    "value":444,
    "name":"ACT_OVERLAY_PRIMARYATTACK"
  },{
    "kind":"constant",
    "value":448,
    "name":"ACT_OVERLAY_SHIELD_ATTACK"
  },{
    "kind":"constant",
    "value":446,
    "name":"ACT_OVERLAY_SHIELD_DOWN"
  },{
    "kind":"constant",
    "value":449,
    "name":"ACT_OVERLAY_SHIELD_KNOCKBACK"
  },{
    "kind":"constant",
    "value":445,
    "name":"ACT_OVERLAY_SHIELD_UP"
  },{
    "kind":"constant",
    "value":447,
    "name":"ACT_OVERLAY_SHIELD_UP_IDLE"
  },{
    "kind":"constant",
    "value":841,
    "name":"ACT_PDA_VM_DRAW"
  },{
    "kind":"constant",
    "value":848,
    "name":"ACT_PDA_VM_DRYFIRE"
  },{
    "kind":"constant",
    "value":842,
    "name":"ACT_PDA_VM_HOLSTER"
  },{
    "kind":"constant",
    "value":843,
    "name":"ACT_PDA_VM_IDLE"
  },{
    "kind":"constant",
    "value":850,
    "name":"ACT_PDA_VM_IDLE_LOWERED"
  },{
    "kind":"constant",
    "value":849,
    "name":"ACT_PDA_VM_IDLE_TO_LOWERED"
  },{
    "kind":"constant",
    "value":851,
    "name":"ACT_PDA_VM_LOWERED_TO_IDLE"
  },{
    "kind":"constant",
    "value":845,
    "name":"ACT_PDA_VM_PRIMARYATTACK"
  },{
    "kind":"constant",
    "value":844,
    "name":"ACT_PDA_VM_PULLBACK"
  },{
    "kind":"constant",
    "value":847,
    "name":"ACT_PDA_VM_RELOAD"
  },{
    "kind":"constant",
    "value":846,
    "name":"ACT_PDA_VM_SECONDARYATTACK"
  },{
    "kind":"constant",
    "value":272,
    "name":"ACT_PHYSCANNON_UPGRADE"
  },{
    "kind":"constant",
    "value":75,
    "name":"ACT_PICKUP_GROUND"
  },{
    "kind":"constant",
    "value":76,
    "name":"ACT_PICKUP_RACK"
  },{
    "kind":"constant",
    "value":489,
    "name":"ACT_PLAYER_CROUCH_FIRE"
  },{
    "kind":"constant",
    "value":490,
    "name":"ACT_PLAYER_CROUCH_WALK_FIRE"
  },{
    "kind":"constant",
    "value":488,
    "name":"ACT_PLAYER_IDLE_FIRE"
  },{
    "kind":"constant",
    "value":492,
    "name":"ACT_PLAYER_RUN_FIRE"
  },{
    "kind":"constant",
    "value":491,
    "name":"ACT_PLAYER_WALK_FIRE"
  },{
    "kind":"constant",
    "value":338,
    "name":"ACT_POLICE_HARASS1"
  },{
    "kind":"constant",
    "value":339,
    "name":"ACT_POLICE_HARASS2"
  },{
    "kind":"constant",
    "value":909,
    "name":"ACT_PREP_EXPLODE"
  },{
    "kind":"constant",
    "value":905,
    "name":"ACT_PREP_TO_FIRE"
  },{
    "kind":"constant",
    "value":808,
    "name":"ACT_PRIMARY_VM_DRAW"
  },{
    "kind":"constant",
    "value":815,
    "name":"ACT_PRIMARY_VM_DRYFIRE"
  },{
    "kind":"constant",
    "value":809,
    "name":"ACT_PRIMARY_VM_HOLSTER"
  },{
    "kind":"constant",
    "value":810,
    "name":"ACT_PRIMARY_VM_IDLE"
  },{
    "kind":"constant",
    "value":817,
    "name":"ACT_PRIMARY_VM_IDLE_LOWERED"
  },{
    "kind":"constant",
    "value":816,
    "name":"ACT_PRIMARY_VM_IDLE_TO_LOWERED"
  },{
    "kind":"constant",
    "value":818,
    "name":"ACT_PRIMARY_VM_LOWERED_TO_IDLE"
  },{
    "kind":"constant",
    "value":812,
    "name":"ACT_PRIMARY_VM_PRIMARYATTACK"
  },{
    "kind":"constant",
    "value":811,
    "name":"ACT_PRIMARY_VM_PULLBACK"
  },{
    "kind":"constant",
    "value":814,
    "name":"ACT_PRIMARY_VM_RELOAD"
  },{
    "kind":"constant",
    "value":813,
    "name":"ACT_PRIMARY_VM_SECONDARYATTACK"
  },{
    "kind":"constant",
    "value":952,
    "name":"ACT_RAGDOLL_RECOVERY_BACK"
  },{
    "kind":"constant",
    "value":951,
    "name":"ACT_RAGDOLL_RECOVERY_FRONT"
  },{
    "kind":"constant",
    "value":953,
    "name":"ACT_RAGDOLL_RECOVERY_LEFT"
  },{
    "kind":"constant",
    "value":954,
    "name":"ACT_RAGDOLL_RECOVERY_RIGHT"
  },{
    "kind":"constant",
    "value":295,
    "name":"ACT_RANGE_AIM_AR2_LOW"
  },{
    "kind":"constant",
    "value":292,
    "name":"ACT_RANGE_AIM_LOW"
  },{
    "kind":"constant",
    "value":294,
    "name":"ACT_RANGE_AIM_PISTOL_LOW"
  },{
    "kind":"constant",
    "value":293,
    "name":"ACT_RANGE_AIM_SMG1_LOW"
  },{
    "kind":"constant",
    "value":16,
    "name":"ACT_RANGE_ATTACK1"
  },{
    "kind":"constant",
    "value":18,
    "name":"ACT_RANGE_ATTACK1_LOW"
  },{
    "kind":"constant",
    "value":17,
    "name":"ACT_RANGE_ATTACK2"
  },{
    "kind":"constant",
    "value":19,
    "name":"ACT_RANGE_ATTACK2_LOW"
  },{
    "kind":"constant",
    "value":273,
    "name":"ACT_RANGE_ATTACK_AR1"
  },{
    "kind":"constant",
    "value":274,
    "name":"ACT_RANGE_ATTACK_AR2"
  },{
    "kind":"constant",
    "value":276,
    "name":"ACT_RANGE_ATTACK_AR2_GRENADE"
  },{
    "kind":"constant",
    "value":275,
    "name":"ACT_RANGE_ATTACK_AR2_LOW"
  },{
    "kind":"constant",
    "value":882,
    "name":"ACT_RANGE_ATTACK_AUTOGUN"
  },{
    "kind":"constant",
    "value":891,
    "name":"ACT_RANGE_ATTACK_DUAL"
  },{
    "kind":"constant",
    "value":277,
    "name":"ACT_RANGE_ATTACK_HMG1"
  },{
    "kind":"constant",
    "value":278,
    "name":"ACT_RANGE_ATTACK_ML"
  },{
    "kind":"constant",
    "value":284,
    "name":"ACT_RANGE_ATTACK_PISTOL"
  },{
    "kind":"constant",
    "value":285,
    "name":"ACT_RANGE_ATTACK_PISTOL_LOW"
  },{
    "kind":"constant",
    "value":897,
    "name":"ACT_RANGE_ATTACK_RIFLE"
  },{
    "kind":"constant",
    "value":290,
    "name":"ACT_RANGE_ATTACK_RPG"
  },{
    "kind":"constant",
    "value":282,
    "name":"ACT_RANGE_ATTACK_SHOTGUN"
  },{
    "kind":"constant",
    "value":283,
    "name":"ACT_RANGE_ATTACK_SHOTGUN_LOW"
  },{
    "kind":"constant",
    "value":286,
    "name":"ACT_RANGE_ATTACK_SLAM"
  },{
    "kind":"constant",
    "value":279,
    "name":"ACT_RANGE_ATTACK_SMG1"
  },{
    "kind":"constant",
    "value":280,
    "name":"ACT_RANGE_ATTACK_SMG1_LOW"
  },{
    "kind":"constant",
    "value":281,
    "name":"ACT_RANGE_ATTACK_SMG2"
  },{
    "kind":"constant",
    "value":289,
    "name":"ACT_RANGE_ATTACK_SNIPER_RIFLE"
  },{
    "kind":"constant",
    "value":288,
    "name":"ACT_RANGE_ATTACK_THROW"
  },{
    "kind":"constant",
    "value":287,
    "name":"ACT_RANGE_ATTACK_TRIPWIRE"
  },{
    "kind":"constant",
    "value":421,
    "name":"ACT_READINESS_AGITATED_TO_STIMULATED"
  },{
    "kind":"constant",
    "value":425,
    "name":"ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED"
  },{
    "kind":"constant",
    "value":423,
    "name":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED"
  },{
    "kind":"constant",
    "value":424,
    "name":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK"
  },{
    "kind":"constant",
    "value":426,
    "name":"ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED"
  },{
    "kind":"constant",
    "value":419,
    "name":"ACT_READINESS_RELAXED_TO_STIMULATED"
  },{
    "kind":"constant",
    "value":420,
    "name":"ACT_READINESS_RELAXED_TO_STIMULATED_WALK"
  },{
    "kind":"constant",
    "value":422,
    "name":"ACT_READINESS_STIMULATED_TO_RELAXED"
  },{
    "kind":"constant",
    "value":67,
    "name":"ACT_RELOAD"
  },{
    "kind":"constant",
    "value":880,
    "name":"ACT_RELOAD_AUTOGUN"
  },{
    "kind":"constant",
    "value":889,
    "name":"ACT_RELOAD_DUAL"
  },{
    "kind":"constant",
    "value":875,
    "name":"ACT_RELOAD_FAIL"
  },{
    "kind":"constant",
    "value":69,
    "name":"ACT_RELOAD_FINISH"
  },{
    "kind":"constant",
    "value":70,
    "name":"ACT_RELOAD_LOW"
  },{
    "kind":"constant",
    "value":371,
    "name":"ACT_RELOAD_PISTOL"
  },{
    "kind":"constant",
    "value":372,
    "name":"ACT_RELOAD_PISTOL_LOW"
  },{
    "kind":"constant",
    "value":375,
    "name":"ACT_RELOAD_SHOTGUN"
  },{
    "kind":"constant",
    "value":376,
    "name":"ACT_RELOAD_SHOTGUN_LOW"
  },{
    "kind":"constant",
    "value":373,
    "name":"ACT_RELOAD_SMG1"
  },{
    "kind":"constant",
    "value":374,
    "name":"ACT_RELOAD_SMG1_LOW"
  },{
    "kind":"constant",
    "value":68,
    "name":"ACT_RELOAD_START"
  },{
    "kind":"constant",
    "value":874,
    "name":"ACT_RELOAD_SUCCEED"
  },{
    "kind":"constant",
    "value":0,
    "name":"ACT_RESET"
  },{
    "kind":"constant",
    "value":432,
    "name":"ACT_RIDE_MANNED_GUN"
  },{
    "kind":"constant",
    "value":40,
    "name":"ACT_ROLL_LEFT"
  },{
    "kind":"constant",
    "value":41,
    "name":"ACT_ROLL_RIGHT"
  },{
    "kind":"constant",
    "value":10,
    "name":"ACT_RUN"
  },{
    "kind":"constant",
    "value":494,
    "name":"ACT_RUNTOIDLE"
  },{
    "kind":"constant",
    "value":89,
    "name":"ACT_RUN_AGITATED"
  },{
    "kind":"constant",
    "value":11,
    "name":"ACT_RUN_AIM"
  },{
    "kind":"constant",
    "value":101,
    "name":"ACT_RUN_AIM_AGITATED"
  },{
    "kind":"constant",
    "value":877,
    "name":"ACT_RUN_AIM_AUTOGUN"
  },{
    "kind":"constant",
    "value":886,
    "name":"ACT_RUN_AIM_DUAL"
  },{
    "kind":"constant",
    "value":367,
    "name":"ACT_RUN_AIM_PISTOL"
  },{
    "kind":"constant",
    "value":99,
    "name":"ACT_RUN_AIM_RELAXED"
  },{
    "kind":"constant",
    "value":358,
    "name":"ACT_RUN_AIM_RIFLE"
  },{
    "kind":"constant",
    "value":333,
    "name":"ACT_RUN_AIM_RIFLE_STIMULATED"
  },{
    "kind":"constant",
    "value":363,
    "name":"ACT_RUN_AIM_SHOTGUN"
  },{
    "kind":"constant",
    "value":102,
    "name":"ACT_RUN_AIM_STEALTH"
  },{
    "kind":"constant",
    "value":370,
    "name":"ACT_RUN_AIM_STEALTH_PISTOL"
  },{
    "kind":"constant",
    "value":100,
    "name":"ACT_RUN_AIM_STIMULATED"
  },{
    "kind":"constant",
    "value":12,
    "name":"ACT_RUN_CROUCH"
  },{
    "kind":"constant",
    "value":13,
    "name":"ACT_RUN_CROUCH_AIM"
  },{
    "kind":"constant",
    "value":360,
    "name":"ACT_RUN_CROUCH_AIM_RIFLE"
  },{
    "kind":"constant",
    "value":359,
    "name":"ACT_RUN_CROUCH_RIFLE"
  },{
    "kind":"constant",
    "value":350,
    "name":"ACT_RUN_CROUCH_RPG"
  },{
    "kind":"constant",
    "value":107,
    "name":"ACT_RUN_HURT"
  },{
    "kind":"constant",
    "value":135,
    "name":"ACT_RUN_ON_FIRE"
  },{
    "kind":"constant",
    "value":365,
    "name":"ACT_RUN_PISTOL"
  },{
    "kind":"constant",
    "value":14,
    "name":"ACT_RUN_PROTECTED"
  },{
    "kind":"constant",
    "value":87,
    "name":"ACT_RUN_RELAXED"
  },{
    "kind":"constant",
    "value":357,
    "name":"ACT_RUN_RIFLE"
  },{
    "kind":"constant",
    "value":328,
    "name":"ACT_RUN_RIFLE_RELAXED"
  },{
    "kind":"constant",
    "value":330,
    "name":"ACT_RUN_RIFLE_STIMULATED"
  },{
    "kind":"constant",
    "value":348,
    "name":"ACT_RUN_RPG"
  },{
    "kind":"constant",
    "value":352,
    "name":"ACT_RUN_RPG_RELAXED"
  },{
    "kind":"constant",
    "value":112,
    "name":"ACT_RUN_SCARED"
  },{
    "kind":"constant",
    "value":90,
    "name":"ACT_RUN_STEALTH"
  },{
    "kind":"constant",
    "value":361,
    "name":"ACT_RUN_STEALTH_PISTOL"
  },{
    "kind":"constant",
    "value":88,
    "name":"ACT_RUN_STIMULATED"
  },{
    "kind":"constant",
    "value":911,
    "name":"ACT_SCRIPT_CUSTOM_0"
  },{
    "kind":"constant",
    "value":912,
    "name":"ACT_SCRIPT_CUSTOM_1"
  },{
    "kind":"constant",
    "value":921,
    "name":"ACT_SCRIPT_CUSTOM_10"
  },{
    "kind":"constant",
    "value":922,
    "name":"ACT_SCRIPT_CUSTOM_11"
  },{
    "kind":"constant",
    "value":923,
    "name":"ACT_SCRIPT_CUSTOM_12"
  },{
    "kind":"constant",
    "value":924,
    "name":"ACT_SCRIPT_CUSTOM_13"
  },{
    "kind":"constant",
    "value":925,
    "name":"ACT_SCRIPT_CUSTOM_14"
  },{
    "kind":"constant",
    "value":926,
    "name":"ACT_SCRIPT_CUSTOM_15"
  },{
    "kind":"constant",
    "value":927,
    "name":"ACT_SCRIPT_CUSTOM_16"
  },{
    "kind":"constant",
    "value":928,
    "name":"ACT_SCRIPT_CUSTOM_17"
  },{
    "kind":"constant",
    "value":929,
    "name":"ACT_SCRIPT_CUSTOM_18"
  },{
    "kind":"constant",
    "value":930,
    "name":"ACT_SCRIPT_CUSTOM_19"
  },{
    "kind":"constant",
    "value":913,
    "name":"ACT_SCRIPT_CUSTOM_2"
  },{
    "kind":"constant",
    "value":931,
    "name":"ACT_SCRIPT_CUSTOM_20"
  },{
    "kind":"constant",
    "value":932,
    "name":"ACT_SCRIPT_CUSTOM_21"
  },{
    "kind":"constant",
    "value":933,
    "name":"ACT_SCRIPT_CUSTOM_22"
  },{
    "kind":"constant",
    "value":934,
    "name":"ACT_SCRIPT_CUSTOM_23"
  },{
    "kind":"constant",
    "value":935,
    "name":"ACT_SCRIPT_CUSTOM_24"
  },{
    "kind":"constant",
    "value":936,
    "name":"ACT_SCRIPT_CUSTOM_25"
  },{
    "kind":"constant",
    "value":937,
    "name":"ACT_SCRIPT_CUSTOM_26"
  },{
    "kind":"constant",
    "value":938,
    "name":"ACT_SCRIPT_CUSTOM_27"
  },{
    "kind":"constant",
    "value":939,
    "name":"ACT_SCRIPT_CUSTOM_28"
  },{
    "kind":"constant",
    "value":940,
    "name":"ACT_SCRIPT_CUSTOM_29"
  },{
    "kind":"constant",
    "value":914,
    "name":"ACT_SCRIPT_CUSTOM_3"
  },{
    "kind":"constant",
    "value":941,
    "name":"ACT_SCRIPT_CUSTOM_30"
  },{
    "kind":"constant",
    "value":942,
    "name":"ACT_SCRIPT_CUSTOM_31"
  },{
    "kind":"constant",
    "value":915,
    "name":"ACT_SCRIPT_CUSTOM_4"
  },{
    "kind":"constant",
    "value":916,
    "name":"ACT_SCRIPT_CUSTOM_5"
  },{
    "kind":"constant",
    "value":917,
    "name":"ACT_SCRIPT_CUSTOM_6"
  },{
    "kind":"constant",
    "value":918,
    "name":"ACT_SCRIPT_CUSTOM_7"
  },{
    "kind":"constant",
    "value":919,
    "name":"ACT_SCRIPT_CUSTOM_8"
  },{
    "kind":"constant",
    "value":920,
    "name":"ACT_SCRIPT_CUSTOM_9"
  },{
    "kind":"constant",
    "value":15,
    "name":"ACT_SCRIPT_CUSTOM_MOVE"
  },{
    "kind":"constant",
    "value":819,
    "name":"ACT_SECONDARY_VM_DRAW"
  },{
    "kind":"constant",
    "value":826,
    "name":"ACT_SECONDARY_VM_DRYFIRE"
  },{
    "kind":"constant",
    "value":820,
    "name":"ACT_SECONDARY_VM_HOLSTER"
  },{
    "kind":"constant",
    "value":821,
    "name":"ACT_SECONDARY_VM_IDLE"
  },{
    "kind":"constant",
    "value":828,
    "name":"ACT_SECONDARY_VM_IDLE_LOWERED"
  },{
    "kind":"constant",
    "value":827,
    "name":"ACT_SECONDARY_VM_IDLE_TO_LOWERED"
  },{
    "kind":"constant",
    "value":829,
    "name":"ACT_SECONDARY_VM_LOWERED_TO_IDLE"
  },{
    "kind":"constant",
    "value":823,
    "name":"ACT_SECONDARY_VM_PRIMARYATTACK"
  },{
    "kind":"constant",
    "value":822,
    "name":"ACT_SECONDARY_VM_PULLBACK"
  },{
    "kind":"constant",
    "value":825,
    "name":"ACT_SECONDARY_VM_RELOAD"
  },{
    "kind":"constant",
    "value":824,
    "name":"ACT_SECONDARY_VM_SECONDARYATTACK"
  },{
    "kind":"constant",
    "value":453,
    "name":"ACT_SHIELD_ATTACK"
  },{
    "kind":"constant",
    "value":451,
    "name":"ACT_SHIELD_DOWN"
  },{
    "kind":"constant",
    "value":454,
    "name":"ACT_SHIELD_KNOCKBACK"
  },{
    "kind":"constant",
    "value":450,
    "name":"ACT_SHIELD_UP"
  },{
    "kind":"constant",
    "value":452,
    "name":"ACT_SHIELD_UP_IDLE"
  },{
    "kind":"constant",
    "value":37,
    "name":"ACT_SHIPLADDER_DOWN"
  },{
    "kind":"constant",
    "value":36,
    "name":"ACT_SHIPLADDER_UP"
  },{
    "kind":"constant",
    "value":264,
    "name":"ACT_SHOTGUN_PUMP"
  },{
    "kind":"constant",
    "value":263,
    "name":"ACT_SHOTGUN_RELOAD_FINISH"
  },{
    "kind":"constant",
    "value":262,
    "name":"ACT_SHOTGUN_RELOAD_START"
  },{
    "kind":"constant",
    "value":50,
    "name":"ACT_SIGNAL1"
  },{
    "kind":"constant",
    "value":51,
    "name":"ACT_SIGNAL2"
  },{
    "kind":"constant",
    "value":52,
    "name":"ACT_SIGNAL3"
  },{
    "kind":"constant",
    "value":53,
    "name":"ACT_SIGNAL_ADVANCE"
  },{
    "kind":"constant",
    "value":54,
    "name":"ACT_SIGNAL_FORWARD"
  },{
    "kind":"constant",
    "value":55,
    "name":"ACT_SIGNAL_GROUP"
  },{
    "kind":"constant",
    "value":56,
    "name":"ACT_SIGNAL_HALT"
  },{
    "kind":"constant",
    "value":57,
    "name":"ACT_SIGNAL_LEFT"
  },{
    "kind":"constant",
    "value":58,
    "name":"ACT_SIGNAL_RIGHT"
  },{
    "kind":"constant",
    "value":59,
    "name":"ACT_SIGNAL_TAKECOVER"
  },{
    "kind":"constant",
    "value":258,
    "name":"ACT_SLAM_DETONATOR_DETONATE"
  },{
    "kind":"constant",
    "value":257,
    "name":"ACT_SLAM_DETONATOR_DRAW"
  },{
    "kind":"constant",
    "value":259,
    "name":"ACT_SLAM_DETONATOR_HOLSTER"
  },{
    "kind":"constant",
    "value":256,
    "name":"ACT_SLAM_DETONATOR_IDLE"
  },{
    "kind":"constant",
    "value":260,
    "name":"ACT_SLAM_DETONATOR_STICKWALL_DRAW"
  },{
    "kind":"constant",
    "value":261,
    "name":"ACT_SLAM_DETONATOR_THROW_DRAW"
  },{
    "kind":"constant",
    "value":226,
    "name":"ACT_SLAM_STICKWALL_ATTACH"
  },{
    "kind":"constant",
    "value":227,
    "name":"ACT_SLAM_STICKWALL_ATTACH2"
  },{
    "kind":"constant",
    "value":230,
    "name":"ACT_SLAM_STICKWALL_DETONATE"
  },{
    "kind":"constant",
    "value":231,
    "name":"ACT_SLAM_STICKWALL_DETONATOR_HOLSTER"
  },{
    "kind":"constant",
    "value":232,
    "name":"ACT_SLAM_STICKWALL_DRAW"
  },{
    "kind":"constant",
    "value":224,
    "name":"ACT_SLAM_STICKWALL_IDLE"
  },{
    "kind":"constant",
    "value":228,
    "name":"ACT_SLAM_STICKWALL_ND_ATTACH"
  },{
    "kind":"constant",
    "value":229,
    "name":"ACT_SLAM_STICKWALL_ND_ATTACH2"
  },{
    "kind":"constant",
    "value":233,
    "name":"ACT_SLAM_STICKWALL_ND_DRAW"
  },{
    "kind":"constant",
    "value":225,
    "name":"ACT_SLAM_STICKWALL_ND_IDLE"
  },{
    "kind":"constant",
    "value":234,
    "name":"ACT_SLAM_STICKWALL_TO_THROW"
  },{
    "kind":"constant",
    "value":235,
    "name":"ACT_SLAM_STICKWALL_TO_THROW_ND"
  },{
    "kind":"constant",
    "value":236,
    "name":"ACT_SLAM_STICKWALL_TO_TRIPMINE_ND"
  },{
    "kind":"constant",
    "value":247,
    "name":"ACT_SLAM_THROW_DETONATE"
  },{
    "kind":"constant",
    "value":248,
    "name":"ACT_SLAM_THROW_DETONATOR_HOLSTER"
  },{
    "kind":"constant",
    "value":243,
    "name":"ACT_SLAM_THROW_DRAW"
  },{
    "kind":"constant",
    "value":237,
    "name":"ACT_SLAM_THROW_IDLE"
  },{
    "kind":"constant",
    "value":244,
    "name":"ACT_SLAM_THROW_ND_DRAW"
  },{
    "kind":"constant",
    "value":238,
    "name":"ACT_SLAM_THROW_ND_IDLE"
  },{
    "kind":"constant",
    "value":239,
    "name":"ACT_SLAM_THROW_THROW"
  },{
    "kind":"constant",
    "value":240,
    "name":"ACT_SLAM_THROW_THROW2"
  },{
    "kind":"constant",
    "value":241,
    "name":"ACT_SLAM_THROW_THROW_ND"
  },{
    "kind":"constant",
    "value":242,
    "name":"ACT_SLAM_THROW_THROW_ND2"
  },{
    "kind":"constant",
    "value":245,
    "name":"ACT_SLAM_THROW_TO_STICKWALL"
  },{
    "kind":"constant",
    "value":246,
    "name":"ACT_SLAM_THROW_TO_STICKWALL_ND"
  },{
    "kind":"constant",
    "value":249,
    "name":"ACT_SLAM_THROW_TO_TRIPMINE_ND"
  },{
    "kind":"constant",
    "value":252,
    "name":"ACT_SLAM_TRIPMINE_ATTACH"
  },{
    "kind":"constant",
    "value":253,
    "name":"ACT_SLAM_TRIPMINE_ATTACH2"
  },{
    "kind":"constant",
    "value":251,
    "name":"ACT_SLAM_TRIPMINE_DRAW"
  },{
    "kind":"constant",
    "value":250,
    "name":"ACT_SLAM_TRIPMINE_IDLE"
  },{
    "kind":"constant",
    "value":254,
    "name":"ACT_SLAM_TRIPMINE_TO_STICKWALL_ND"
  },{
    "kind":"constant",
    "value":255,
    "name":"ACT_SLAM_TRIPMINE_TO_THROW_ND"
  },{
    "kind":"constant",
    "value":898,
    "name":"ACT_SLEEP"
  },{
    "kind":"constant",
    "value":63,
    "name":"ACT_SMALL_FLINCH"
  },{
    "kind":"constant",
    "value":267,
    "name":"ACT_SMG2_DRAW2"
  },{
    "kind":"constant",
    "value":269,
    "name":"ACT_SMG2_DRYFIRE2"
  },{
    "kind":"constant",
    "value":266,
    "name":"ACT_SMG2_FIRE2"
  },{
    "kind":"constant",
    "value":265,
    "name":"ACT_SMG2_IDLE2"
  },{
    "kind":"constant",
    "value":268,
    "name":"ACT_SMG2_RELOAD2"
  },{
    "kind":"constant",
    "value":270,
    "name":"ACT_SMG2_TOAUTO"
  },{
    "kind":"constant",
    "value":271,
    "name":"ACT_SMG2_TOBURST"
  },{
    "kind":"constant",
    "value":108,
    "name":"ACT_SPECIAL_ATTACK1"
  },{
    "kind":"constant",
    "value":109,
    "name":"ACT_SPECIAL_ATTACK2"
  },{
    "kind":"constant",
    "value":180,
    "name":"ACT_SPECIFIC_SEQUENCE"
  },{
    "kind":"constant",
    "value":904,
    "name":"ACT_SPINAROUND"
  },{
    "kind":"constant",
    "value":908,
    "name":"ACT_SPRAY"
  },{
    "kind":"constant",
    "value":46,
    "name":"ACT_STAND"
  },{
    "kind":"constant",
    "value":429,
    "name":"ACT_STARTDYING"
  },{
    "kind":"constant",
    "value":143,
    "name":"ACT_STEP_BACK"
  },{
    "kind":"constant",
    "value":144,
    "name":"ACT_STEP_FORE"
  },{
    "kind":"constant",
    "value":141,
    "name":"ACT_STEP_LEFT"
  },{
    "kind":"constant",
    "value":142,
    "name":"ACT_STEP_RIGHT"
  },{
    "kind":"constant",
    "value":1554,
    "name":"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE"
  },{
    "kind":"constant",
    "value":38,
    "name":"ACT_STRAFE_LEFT"
  },{
    "kind":"constant",
    "value":39,
    "name":"ACT_STRAFE_RIGHT"
  },{
    "kind":"constant",
    "value":28,
    "name":"ACT_SWIM"
  },{
    "kind":"constant",
    "value":1558,
    "name":"ACT_TINY_AVALANCHE"
  },{
    "kind":"constant",
    "value":1560,
    "name":"ACT_TINY_GROWL"
  },{
    "kind":"constant",
    "value":1559,
    "name":"ACT_TINY_TOSS"
  },{
    "kind":"constant",
    "value":2,
    "name":"ACT_TRANSITION"
  },{
    "kind":"constant",
    "value":462,
    "name":"ACT_TURN"
  },{
    "kind":"constant",
    "value":461,
    "name":"ACT_TURNLEFT45"
  },{
    "kind":"constant",
    "value":460,
    "name":"ACT_TURNRIGHT45"
  },{
    "kind":"constant",
    "value":42,
    "name":"ACT_TURN_LEFT"
  },{
    "kind":"constant",
    "value":43,
    "name":"ACT_TURN_RIGHT"
  },{
    "kind":"constant",
    "value":473,
    "name":"ACT_UNDEPLOY"
  },{
    "kind":"constant",
    "value":47,
    "name":"ACT_USE"
  },{
    "kind":"constant",
    "value":113,
    "name":"ACT_VICTORY_DANCE"
  },{
    "kind":"constant",
    "value":222,
    "name":"ACT_VM_ATTACH_SILENCER"
  },{
    "kind":"constant",
    "value":181,
    "name":"ACT_VM_DEPLOY"
  },{
    "kind":"constant",
    "value":223,
    "name":"ACT_VM_DETACH_SILENCER"
  },{
    "kind":"constant",
    "value":183,
    "name":"ACT_VM_DRAW"
  },{
    "kind":"constant",
    "value":495,
    "name":"ACT_VM_DRAW_DEPLOYED"
  },{
    "kind":"constant",
    "value":481,
    "name":"ACT_VM_DRAW_SILENCED"
  },{
    "kind":"constant",
    "value":191,
    "name":"ACT_VM_DROP"
  },{
    "kind":"constant",
    "value":196,
    "name":"ACT_VM_DRYFIRE"
  },{
    "kind":"constant",
    "value":483,
    "name":"ACT_VM_DRYFIRE_LEFT"
  },{
    "kind":"constant",
    "value":479,
    "name":"ACT_VM_DRYFIRE_SILENCED"
  },{
    "kind":"constant",
    "value":186,
    "name":"ACT_VM_FIDGET"
  },{
    "kind":"constant",
    "value":209,
    "name":"ACT_VM_HAULBACK"
  },{
    "kind":"constant",
    "value":201,
    "name":"ACT_VM_HITCENTER"
  },{
    "kind":"constant",
    "value":202,
    "name":"ACT_VM_HITCENTER2"
  },{
    "kind":"constant",
    "value":197,
    "name":"ACT_VM_HITLEFT"
  },{
    "kind":"constant",
    "value":198,
    "name":"ACT_VM_HITLEFT2"
  },{
    "kind":"constant",
    "value":199,
    "name":"ACT_VM_HITRIGHT"
  },{
    "kind":"constant",
    "value":200,
    "name":"ACT_VM_HITRIGHT2"
  },{
    "kind":"constant",
    "value":184,
    "name":"ACT_VM_HOLSTER"
  },{
    "kind":"constant",
    "value":185,
    "name":"ACT_VM_IDLE"
  },{
    "kind":"constant",
    "value":482,
    "name":"ACT_VM_IDLE_EMPTY_LEFT"
  },{
    "kind":"constant",
    "value":214,
    "name":"ACT_VM_IDLE_LOWERED"
  },{
    "kind":"constant",
    "value":480,
    "name":"ACT_VM_IDLE_SILENCED"
  },{
    "kind":"constant",
    "value":213,
    "name":"ACT_VM_IDLE_TO_LOWERED"
  },{
    "kind":"constant",
    "value":484,
    "name":"ACT_VM_IS_DRAW"
  },{
    "kind":"constant",
    "value":485,
    "name":"ACT_VM_IS_HOLSTER"
  },{
    "kind":"constant",
    "value":486,
    "name":"ACT_VM_IS_IDLE"
  },{
    "kind":"constant",
    "value":487,
    "name":"ACT_VM_IS_PRIMARYATTACK"
  },{
    "kind":"constant",
    "value":215,
    "name":"ACT_VM_LOWERED_TO_IDLE"
  },{
    "kind":"constant",
    "value":221,
    "name":"ACT_VM_MAUL_LOOP"
  },{
    "kind":"constant",
    "value":207,
    "name":"ACT_VM_MISSCENTER"
  },{
    "kind":"constant",
    "value":208,
    "name":"ACT_VM_MISSCENTER2"
  },{
    "kind":"constant",
    "value":203,
    "name":"ACT_VM_MISSLEFT"
  },{
    "kind":"constant",
    "value":204,
    "name":"ACT_VM_MISSLEFT2"
  },{
    "kind":"constant",
    "value":205,
    "name":"ACT_VM_MISSRIGHT"
  },{
    "kind":"constant",
    "value":206,
    "name":"ACT_VM_MISSRIGHT2"
  },{
    "kind":"constant",
    "value":219,
    "name":"ACT_VM_PICKUP"
  },{
    "kind":"constant",
    "value":193,
    "name":"ACT_VM_PRIMARYATTACK"
  },{
    "kind":"constant",
    "value":477,
    "name":"ACT_VM_PRIMARYATTACK_SILENCED"
  },{
    "kind":"constant",
    "value":187,
    "name":"ACT_VM_PULLBACK"
  },{
    "kind":"constant",
    "value":188,
    "name":"ACT_VM_PULLBACK_HIGH"
  },{
    "kind":"constant",
    "value":189,
    "name":"ACT_VM_PULLBACK_LOW"
  },{
    "kind":"constant",
    "value":192,
    "name":"ACT_VM_PULLPIN"
  },{
    "kind":"constant",
    "value":216,
    "name":"ACT_VM_RECOIL1"
  },{
    "kind":"constant",
    "value":217,
    "name":"ACT_VM_RECOIL2"
  },{
    "kind":"constant",
    "value":218,
    "name":"ACT_VM_RECOIL3"
  },{
    "kind":"constant",
    "value":220,
    "name":"ACT_VM_RELEASE"
  },{
    "kind":"constant",
    "value":195,
    "name":"ACT_VM_RELOAD"
  },{
    "kind":"constant",
    "value":182,
    "name":"ACT_VM_RELOAD_EMPTY"
  },{
    "kind":"constant",
    "value":478,
    "name":"ACT_VM_RELOAD_SILENCED"
  },{
    "kind":"constant",
    "value":194,
    "name":"ACT_VM_SECONDARYATTACK"
  },{
    "kind":"constant",
    "value":433,
    "name":"ACT_VM_SPRINT_ENTER"
  },{
    "kind":"constant",
    "value":434,
    "name":"ACT_VM_SPRINT_IDLE"
  },{
    "kind":"constant",
    "value":435,
    "name":"ACT_VM_SPRINT_LEAVE"
  },{
    "kind":"constant",
    "value":210,
    "name":"ACT_VM_SWINGHARD"
  },{
    "kind":"constant",
    "value":212,
    "name":"ACT_VM_SWINGHIT"
  },{
    "kind":"constant",
    "value":211,
    "name":"ACT_VM_SWINGMISS"
  },{
    "kind":"constant",
    "value":190,
    "name":"ACT_VM_THROW"
  },{
    "kind":"constant",
    "value":805,
    "name":"ACT_VM_UNUSABLE"
  },{
    "kind":"constant",
    "value":806,
    "name":"ACT_VM_UNUSABLE_TO_USABLE"
  },{
    "kind":"constant",
    "value":807,
    "name":"ACT_VM_USABLE_TO_UNUSABLE"
  },{
    "kind":"constant",
    "value":986,
    "name":"ACT_VR_PISTOL_BURST_ATTACK"
  },{
    "kind":"constant",
    "value":984,
    "name":"ACT_VR_PISTOL_BURST_TOGGLE"
  },{
    "kind":"constant",
    "value":947,
    "name":"ACT_VR_PISTOL_CLIP_IN_CHAMBERED"
  },{
    "kind":"constant",
    "value":948,
    "name":"ACT_VR_PISTOL_CLIP_IN_SLIDE_BACK"
  },{
    "kind":"constant",
    "value":945,
    "name":"ACT_VR_PISTOL_CLIP_OUT_CHAMBERED"
  },{
    "kind":"constant",
    "value":946,
    "name":"ACT_VR_PISTOL_CLIP_OUT_SLIDE_BACK"
  },{
    "kind":"constant",
    "value":971,
    "name":"ACT_VR_PISTOL_EMPTY_CLIP_IN_SLIDE_BACK"
  },{
    "kind":"constant",
    "value":949,
    "name":"ACT_VR_PISTOL_IDLE_SLIDE_BACK"
  },{
    "kind":"constant",
    "value":950,
    "name":"ACT_VR_PISTOL_IDLE_SLIDE_BACK_CLIP_READY"
  },{
    "kind":"constant",
    "value":943,
    "name":"ACT_VR_PISTOL_LAST_SHOT"
  },{
    "kind":"constant",
    "value":982,
    "name":"ACT_VR_PISTOL_LONG_CLIP_IN_CHAMBERED"
  },{
    "kind":"constant",
    "value":983,
    "name":"ACT_VR_PISTOL_LONG_CLIP_IN_SLIDE_BACK"
  },{
    "kind":"constant",
    "value":985,
    "name":"ACT_VR_PISTOL_LOW_KICK"
  },{
    "kind":"constant",
    "value":944,
    "name":"ACT_VR_PISTOL_SLIDE_RELEASE"
  },{
    "kind":"constant",
    "value":977,
    "name":"ACT_VR_SHOTGUN_CLOSE_CHAMBER"
  },{
    "kind":"constant",
    "value":987,
    "name":"ACT_VR_SHOTGUN_GRENADE_TWIST"
  },{
    "kind":"constant",
    "value":972,
    "name":"ACT_VR_SHOTGUN_IDLE"
  },{
    "kind":"constant",
    "value":973,
    "name":"ACT_VR_SHOTGUN_OPEN_CHAMBER"
  },{
    "kind":"constant",
    "value":974,
    "name":"ACT_VR_SHOTGUN_RELOAD_1"
  },{
    "kind":"constant",
    "value":975,
    "name":"ACT_VR_SHOTGUN_RELOAD_2"
  },{
    "kind":"constant",
    "value":976,
    "name":"ACT_VR_SHOTGUN_RELOAD_3"
  },{
    "kind":"constant",
    "value":979,
    "name":"ACT_VR_SHOTGUN_SHOOT"
  },{
    "kind":"constant",
    "value":980,
    "name":"ACT_VR_SHOTGUN_SLIDE_BACK"
  },{
    "kind":"constant",
    "value":981,
    "name":"ACT_VR_SHOTGUN_SLIDE_FORWARD"
  },{
    "kind":"constant",
    "value":978,
    "name":"ACT_VR_SHOTGUN_TRIGGER_SQUEEZE"
  },{
    "kind":"constant",
    "value":899,
    "name":"ACT_WAKE"
  },{
    "kind":"constant",
    "value":6,
    "name":"ACT_WALK"
  },{
    "kind":"constant",
    "value":85,
    "name":"ACT_WALK_AGITATED"
  },{
    "kind":"constant",
    "value":7,
    "name":"ACT_WALK_AIM"
  },{
    "kind":"constant",
    "value":97,
    "name":"ACT_WALK_AIM_AGITATED"
  },{
    "kind":"constant",
    "value":876,
    "name":"ACT_WALK_AIM_AUTOGUN"
  },{
    "kind":"constant",
    "value":885,
    "name":"ACT_WALK_AIM_DUAL"
  },{
    "kind":"constant",
    "value":366,
    "name":"ACT_WALK_AIM_PISTOL"
  },{
    "kind":"constant",
    "value":95,
    "name":"ACT_WALK_AIM_RELAXED"
  },{
    "kind":"constant",
    "value":354,
    "name":"ACT_WALK_AIM_RIFLE"
  },{
    "kind":"constant",
    "value":332,
    "name":"ACT_WALK_AIM_RIFLE_STIMULATED"
  },{
    "kind":"constant",
    "value":362,
    "name":"ACT_WALK_AIM_SHOTGUN"
  },{
    "kind":"constant",
    "value":98,
    "name":"ACT_WALK_AIM_STEALTH"
  },{
    "kind":"constant",
    "value":369,
    "name":"ACT_WALK_AIM_STEALTH_PISTOL"
  },{
    "kind":"constant",
    "value":96,
    "name":"ACT_WALK_AIM_STIMULATED"
  },{
    "kind":"constant",
    "value":337,
    "name":"ACT_WALK_ANGRY"
  },{
    "kind":"constant",
    "value":428,
    "name":"ACT_WALK_CARRY"
  },{
    "kind":"constant",
    "value":8,
    "name":"ACT_WALK_CROUCH"
  },{
    "kind":"constant",
    "value":9,
    "name":"ACT_WALK_CROUCH_AIM"
  },{
    "kind":"constant",
    "value":356,
    "name":"ACT_WALK_CROUCH_AIM_RIFLE"
  },{
    "kind":"constant",
    "value":355,
    "name":"ACT_WALK_CROUCH_RIFLE"
  },{
    "kind":"constant",
    "value":349,
    "name":"ACT_WALK_CROUCH_RPG"
  },{
    "kind":"constant",
    "value":106,
    "name":"ACT_WALK_HURT"
  },{
    "kind":"constant",
    "value":134,
    "name":"ACT_WALK_ON_FIRE"
  },{
    "kind":"constant",
    "value":322,
    "name":"ACT_WALK_PACKAGE"
  },{
    "kind":"constant",
    "value":364,
    "name":"ACT_WALK_PISTOL"
  },{
    "kind":"constant",
    "value":83,
    "name":"ACT_WALK_RELAXED"
  },{
    "kind":"constant",
    "value":353,
    "name":"ACT_WALK_RIFLE"
  },{
    "kind":"constant",
    "value":327,
    "name":"ACT_WALK_RIFLE_RELAXED"
  },{
    "kind":"constant",
    "value":329,
    "name":"ACT_WALK_RIFLE_STIMULATED"
  },{
    "kind":"constant",
    "value":347,
    "name":"ACT_WALK_RPG"
  },{
    "kind":"constant",
    "value":351,
    "name":"ACT_WALK_RPG_RELAXED"
  },{
    "kind":"constant",
    "value":111,
    "name":"ACT_WALK_SCARED"
  },{
    "kind":"constant",
    "value":86,
    "name":"ACT_WALK_STEALTH"
  },{
    "kind":"constant",
    "value":368,
    "name":"ACT_WALK_STEALTH_PISTOL"
  },{
    "kind":"constant",
    "value":84,
    "name":"ACT_WALK_STIMULATED"
  },{
    "kind":"constant",
    "value":324,
    "name":"ACT_WALK_SUITCASE"
  },{
    "kind":"constant",
    "value":1546,
    "name":"ACT_WAVEFORM_END"
  },{
    "kind":"constant",
    "value":1545,
    "name":"ACT_WAVEFORM_START"
  },{
    "kind":"constant",
    "value":965,
    "name":"ACT_ZOMBIE_LUNGE"
  },{
    "kind":"constant",
    "value":964,
    "name":"ACT_ZOMBIE_TRIP"
  },{
    "kind":"constant",
    "value":31,
    "name":"AE_CL_ADD_PARTICLE_EFFECT_CP"
  },{
    "kind":"constant",
    "value":17,
    "name":"AE_CL_BODYGROUP_SET_VALUE"
  },{
    "kind":"constant",
    "value":19,
    "name":"AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN"
  },{
    "kind":"constant",
    "value":23,
    "name":"AE_CL_CLOTH_ATTR"
  },{
    "kind":"constant",
    "value":26,
    "name":"AE_CL_CLOTH_EFFECT"
  },{
    "kind":"constant",
    "value":24,
    "name":"AE_CL_CLOTH_GROUND_OFFSET"
  },{
    "kind":"constant",
    "value":25,
    "name":"AE_CL_CLOTH_STIFFEN"
  },{
    "kind":"constant",
    "value":27,
    "name":"AE_CL_CREATE_ANIM_SCOPE_PROP"
  },{
    "kind":"constant",
    "value":7,
    "name":"AE_CL_CREATE_PARTICLE_EFFECT"
  },{
    "kind":"constant",
    "value":9,
    "name":"AE_CL_CREATE_PARTICLE_EFFECT_CFG"
  },{
    "kind":"constant",
    "value":16,
    "name":"AE_CL_DISABLE_BODYGROUP"
  },{
    "kind":"constant",
    "value":35,
    "name":"AE_CL_DOTA_NPC_CREATE_PARTICLE_EFFECT"
  },{
    "kind":"constant",
    "value":33,
    "name":"AE_CL_DOTA_PLAY_STATUS_EFFECT"
  },{
    "kind":"constant",
    "value":36,
    "name":"AE_CL_DOTA_RUBICK_ARCANA_CREATE_PARTICLE_EFFECT"
  },{
    "kind":"constant",
    "value":34,
    "name":"AE_CL_DOTA_STOP_STATUS_EFFECT"
  },{
    "kind":"constant",
    "value":15,
    "name":"AE_CL_ENABLE_BODYGROUP"
  },{
    "kind":"constant",
    "value":29,
    "name":"AE_CL_HIDE_PARTICLE_EFFECT"
  },{
    "kind":"constant",
    "value":1,
    "name":"AE_CL_PLAYSOUND"
  },{
    "kind":"constant",
    "value":2,
    "name":"AE_CL_PLAYSOUND_ATTACHMENT"
  },{
    "kind":"constant",
    "value":6,
    "name":"AE_CL_PLAYSOUND_LOOPING"
  },{
    "kind":"constant",
    "value":3,
    "name":"AE_CL_PLAYSOUND_POSITION"
  },{
    "kind":"constant",
    "value":30,
    "name":"AE_CL_SHOW_PARTICLE_EFFECT"
  },{
    "kind":"constant",
    "value":32,
    "name":"AE_CL_SPEECH"
  },{
    "kind":"constant",
    "value":5,
    "name":"AE_CL_STOPSOUND"
  },{
    "kind":"constant",
    "value":8,
    "name":"AE_CL_STOP_PARTICLE_EFFECT"
  },{
    "kind":"constant",
    "value":14,
    "name":"AE_CL_STOP_RAGDOLL_CONTROL"
  },{
    "kind":"constant",
    "value":28,
    "name":"AE_CL_SUPPRESS_EVENTS_WITH_TAG"
  },{
    "kind":"constant",
    "value":41,
    "name":"AE_DOTA_CREATE_CLINKZ_ATTACK"
  },{
    "kind":"constant",
    "value":43,
    "name":"AE_DOTA_DIE_PHANTOM_DEATH_PARTICLES"
  },{
    "kind":"constant",
    "value":38,
    "name":"AE_DOTA_PET_ITEM_DROP"
  },{
    "kind":"constant",
    "value":37,
    "name":"AE_DOTA_PET_ITEM_PICKUP"
  },{
    "kind":"constant",
    "value":45,
    "name":"AE_DOTA_PLAY_SOUND_ATTACK"
  },{
    "kind":"constant",
    "value":42,
    "name":"AE_DOTA_PLAY_SOUND_ATTACK_BACKSTAB"
  },{
    "kind":"constant",
    "value":40,
    "name":"AE_DOTA_PLAY_SOUND_ATTACK_SPECIAL"
  },{
    "kind":"constant",
    "value":39,
    "name":"AE_DOTA_SUPPRESS_CONSTANT_LAYER"
  },{
    "kind":"constant",
    "value":44,
    "name":"AE_DOTA_SWITCH_ATTACK_COMBO"
  },{
    "kind":"constant",
    "value":0,
    "name":"AE_EMPTY"
  },{
    "kind":"constant",
    "value":22,
    "name":"AE_FIRE_INPUT"
  },{
    "kind":"constant",
    "value":12,
    "name":"AE_FOOTSTEP"
  },{
    "kind":"constant",
    "value":13,
    "name":"AE_RAGDOLL"
  },{
    "kind":"constant",
    "value":18,
    "name":"AE_SV_BODYGROUP_SET_VALUE"
  },{
    "kind":"constant",
    "value":10,
    "name":"AE_SV_CREATE_PARTICLE_EFFECT_CFG"
  },{
    "kind":"constant",
    "value":4,
    "name":"AE_SV_PLAYSOUND"
  },{
    "kind":"constant",
    "value":11,
    "name":"AE_SV_STOP_PARTICLE_EFFECT"
  },{
    "kind":"constant",
    "value":20,
    "name":"AE_WPN_PRIMARYATTACK"
  },{
    "kind":"constant",
    "value":21,
    "name":"AE_WPN_SECONDARYATTACK"
  },{
    "kind":"constant",
    "value":1,
    "name":"CLIENT_DLL"
  },{
    "kind":"constant",
    "value":1048576,
    "name":"DMG_ACID"
  },{
    "kind":"constant",
    "value":8192,
    "name":"DMG_ALWAYSGIB"
  },{
    "kind":"constant",
    "value":64,
    "name":"DMG_BLAST"
  },{
    "kind":"constant",
    "value":2,
    "name":"DMG_BULLET"
  },{
    "kind":"constant",
    "value":8,
    "name":"DMG_BURN"
  },{
    "kind":"constant",
    "value":128,
    "name":"DMG_CLUB"
  },{
    "kind":"constant",
    "value":1,
    "name":"DMG_CRUSH"
  },{
    "kind":"constant",
    "value":16384,
    "name":"DMG_DROWN"
  },{
    "kind":"constant",
    "value":524288,
    "name":"DMG_DROWNRECOVER"
  },{
    "kind":"constant",
    "value":1024,
    "name":"DMG_ENERGYBEAM"
  },{
    "kind":"constant",
    "value":32,
    "name":"DMG_FALL"
  },{
    "kind":"constant",
    "value":0,
    "name":"DMG_GENERIC"
  },{
    "kind":"constant",
    "value":65536,
    "name":"DMG_NERVEGAS"
  },{
    "kind":"constant",
    "value":4096,
    "name":"DMG_NEVERGIB"
  },{
    "kind":"constant",
    "value":32768,
    "name":"DMG_PARALYZE"
  },{
    "kind":"constant",
    "value":8388608,
    "name":"DMG_PHYSGUN"
  },{
    "kind":"constant",
    "value":16777216,
    "name":"DMG_PLASMA"
  },{
    "kind":"constant",
    "value":131072,
    "name":"DMG_POISON"
  },{
    "kind":"constant",
    "value":2048,
    "name":"DMG_PREVENT_PHYSICS_FORCE"
  },{
    "kind":"constant",
    "value":262144,
    "name":"DMG_RADIATION"
  },{
    "kind":"constant",
    "value":4194304,
    "name":"DMG_REMOVENORAGDOLL"
  },{
    "kind":"constant",
    "value":256,
    "name":"DMG_SHOCK"
  },{
    "kind":"constant",
    "value":4,
    "name":"DMG_SLASH"
  },{
    "kind":"constant",
    "value":2097152,
    "name":"DMG_SLOWBURN"
  },{
    "kind":"constant",
    "value":512,
    "name":"DMG_SONIC"
  },{
    "kind":"constant",
    "value":16,
    "name":"DMG_VEHICLE"
  },{
    "kind":"constant",
    "value":32,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_AOE"
  },{
    "kind":"constant",
    "value":131072,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_ATTACK"
  },{
    "kind":"constant",
    "value":65536,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_AURA"
  },{
    "kind":"constant",
    "value":4096,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_AUTOCAST"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST"
  },{
    "kind":"constant",
    "value":128,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_CHANNELLED"
  },{
    "kind":"constant",
    "value":1024,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"
  },{
    "kind":"constant",
    "value":16777216,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET"
  },{
    "kind":"constant",
    "value":536870912,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL"
  },{
    "kind":"constant",
    "value":8388608,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT"
  },{
    "kind":"constant",
    "value":33554432,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"
  },{
    "kind":"constant",
    "value":262144,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_HIDDEN"
  },{
    "kind":"constant",
    "value":134217728,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
  },{
    "kind":"constant",
    "value":4194304,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_MUTED"
  },{
    "kind":"constant",
    "value":2097152,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE"
  },{
    "kind":"constant",
    "value":2048,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
  },{
    "kind":"constant",
    "value":256,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_ITEM"
  },{
    "kind":"constant",
    "value":-2147483648,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_NONE"
  },{
    "kind":"constant",
    "value":67108864,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN"
  },{
    "kind":"constant",
    "value":64,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
  },{
    "kind":"constant",
    "value":32768,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET"
  },{
    "kind":"constant",
    "value":16384,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT"
  },{
    "kind":"constant",
    "value":8192,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_OVERSHOOT"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_PASSIVE"
  },{
    "kind":"constant",
    "value":16,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_POINT"
  },{
    "kind":"constant",
    "value":524288,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
  },{
    "kind":"constant",
    "value":268435456,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE"
  },{
    "kind":"constant",
    "value":512,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_TOGGLE"
  },{
    "kind":"constant",
    "value":8,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX"
  },{
    "kind":"constant",
    "value":1048576,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED"
  },{
    "kind":"constant",
    "value":1073741824,
    "enum":"DOTA_ABILITY_BEHAVIOR",
    "name":"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DOTAAbilitySpeakTrigger_t",
    "name":"DOTA_ABILITY_SPEAK_CAST"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTAAbilitySpeakTrigger_t",
    "name":"DOTA_ABILITY_SPEAK_START_ACTION_PHASE"
  },{
    "kind":"constant",
    "value":1,
    "enum":"Attributes",
    "name":"DOTA_ATTRIBUTE_AGILITY"
  },{
    "kind":"constant",
    "value":4,
    "enum":"AttributeDerivedStats",
    "name":"DOTA_ATTRIBUTE_AGILITY_ARMOR"
  },{
    "kind":"constant",
    "value":5,
    "enum":"AttributeDerivedStats",
    "name":"DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED"
  },{
    "kind":"constant",
    "value":3,
    "enum":"AttributeDerivedStats",
    "name":"DOTA_ATTRIBUTE_AGILITY_DAMAGE"
  },{
    "kind":"constant",
    "value":2,
    "enum":"Attributes",
    "name":"DOTA_ATTRIBUTE_INTELLECT"
  },{
    "kind":"constant",
    "value":6,
    "enum":"AttributeDerivedStats",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE"
  },{
    "kind":"constant",
    "value":7,
    "enum":"AttributeDerivedStats",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA"
  },{
    "kind":"constant",
    "value":8,
    "enum":"AttributeDerivedStats",
    "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN"
  },{
    "kind":"constant",
    "value":-1,
    "enum":"Attributes",
    "name":"DOTA_ATTRIBUTE_INVALID"
  },{
    "kind":"constant",
    "value":3,
    "enum":"Attributes",
    "name":"DOTA_ATTRIBUTE_MAX"
  },{
    "kind":"constant",
    "value":0,
    "enum":"Attributes",
    "name":"DOTA_ATTRIBUTE_STRENGTH"
  },{
    "kind":"constant",
    "value":0,
    "enum":"AttributeDerivedStats",
    "name":"DOTA_ATTRIBUTE_STRENGTH_DAMAGE"
  },{
    "kind":"constant",
    "value":1,
    "enum":"AttributeDerivedStats",
    "name":"DOTA_ATTRIBUTE_STRENGTH_HP"
  },{
    "kind":"constant",
    "value":2,
    "enum":"AttributeDerivedStats",
    "name":"DOTA_ATTRIBUTE_STRENGTH_HP_REGEN"
  },{
    "kind":"constant",
    "value":0,
    "enum":"modifierremove",
    "name":"DOTA_BUFF_REMOVE_ALL"
  },{
    "kind":"constant",
    "value":2,
    "enum":"modifierremove",
    "name":"DOTA_BUFF_REMOVE_ALLY"
  },{
    "kind":"constant",
    "value":1,
    "enum":"modifierremove",
    "name":"DOTA_BUFF_REMOVE_ENEMY"
  },{
    "kind":"constant",
    "value":2,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_ATTACK"
  },{
    "kind":"constant",
    "value":3,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_CAST"
  },{
    "kind":"constant",
    "value":6,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_DRAG"
  },{
    "kind":"constant",
    "value":4,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_DROP_ITEM"
  },{
    "kind":"constant",
    "value":5,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_DROP_SHOP_ITEM"
  },{
    "kind":"constant",
    "value":12,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_LAST"
  },{
    "kind":"constant",
    "value":7,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_LEARN_ABILITY"
  },{
    "kind":"constant",
    "value":1,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_MOVE"
  },{
    "kind":"constant",
    "value":0,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_NONE"
  },{
    "kind":"constant",
    "value":8,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_PATROL"
  },{
    "kind":"constant",
    "value":11,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_RADAR"
  },{
    "kind":"constant",
    "value":10,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_UNUSED"
  },{
    "kind":"constant",
    "value":9,
    "enum":"CLICK_BEHAVIORS",
    "name":"DOTA_CLICK_BEHAVIOR_VECTOR_CAST"
  },{
    "kind":"constant",
    "value":5,
    "enum":"DOTALimits_t",
    "name":"DOTA_DEFAULT_MAX_TEAM",
    "description":"Default number of players per team."
  },{
    "kind":"constant",
    "value":10,
    "enum":"DOTALimits_t",
    "name":"DOTA_DEFAULT_MAX_TEAM_PLAYERS",
    "description":"Default number of non-spectator players supported."
  },{
    "kind":"constant",
    "value":57,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_AP_SELECT"
  },{
    "kind":"constant",
    "value":32,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_AR_SELECT"
  },{
    "kind":"constant",
    "value":54,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_BD_SELECT"
  },{
    "kind":"constant",
    "value":37,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_BAN1"
  },{
    "kind":"constant",
    "value":38,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_BAN2"
  },{
    "kind":"constant",
    "value":39,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_BAN3"
  },{
    "kind":"constant",
    "value":40,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_BAN4"
  },{
    "kind":"constant",
    "value":41,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_BAN5"
  },{
    "kind":"constant",
    "value":42,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_BAN6"
  },{
    "kind":"constant",
    "value":36,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_CAPTAINPICK"
  },{
    "kind":"constant",
    "value":35,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_INTRO"
  },{
    "kind":"constant",
    "value":53,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_PICK"
  },{
    "kind":"constant",
    "value":43,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT1"
  },{
    "kind":"constant",
    "value":52,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT10"
  },{
    "kind":"constant",
    "value":44,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT2"
  },{
    "kind":"constant",
    "value":45,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT3"
  },{
    "kind":"constant",
    "value":46,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT4"
  },{
    "kind":"constant",
    "value":47,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT5"
  },{
    "kind":"constant",
    "value":48,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT6"
  },{
    "kind":"constant",
    "value":49,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT7"
  },{
    "kind":"constant",
    "value":50,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT8"
  },{
    "kind":"constant",
    "value":51,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CD_SELECT9"
  },{
    "kind":"constant",
    "value":7,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN1"
  },{
    "kind":"constant",
    "value":16,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN10"
  },{
    "kind":"constant",
    "value":17,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN11"
  },{
    "kind":"constant",
    "value":18,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN12"
  },{
    "kind":"constant",
    "value":19,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN13"
  },{
    "kind":"constant",
    "value":20,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN14"
  },{
    "kind":"constant",
    "value":8,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN2"
  },{
    "kind":"constant",
    "value":9,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN3"
  },{
    "kind":"constant",
    "value":10,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN4"
  },{
    "kind":"constant",
    "value":11,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN5"
  },{
    "kind":"constant",
    "value":12,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN6"
  },{
    "kind":"constant",
    "value":13,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN7"
  },{
    "kind":"constant",
    "value":14,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN8"
  },{
    "kind":"constant",
    "value":15,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_BAN9"
  },{
    "kind":"constant",
    "value":6,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_CAPTAINPICK"
  },{
    "kind":"constant",
    "value":5,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_INTRO"
  },{
    "kind":"constant",
    "value":31,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_PICK"
  },{
    "kind":"constant",
    "value":21,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT1"
  },{
    "kind":"constant",
    "value":30,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT10"
  },{
    "kind":"constant",
    "value":22,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT2"
  },{
    "kind":"constant",
    "value":23,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT3"
  },{
    "kind":"constant",
    "value":24,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT4"
  },{
    "kind":"constant",
    "value":25,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT5"
  },{
    "kind":"constant",
    "value":26,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT6"
  },{
    "kind":"constant",
    "value":27,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT7"
  },{
    "kind":"constant",
    "value":28,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT8"
  },{
    "kind":"constant",
    "value":29,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CM_SELECT9"
  },{
    "kind":"constant",
    "value":62,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_COUNT"
  },{
    "kind":"constant",
    "value":60,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES"
  },{
    "kind":"constant",
    "value":34,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_FH_SELECT"
  },{
    "kind":"constant",
    "value":3,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED"
  },{
    "kind":"constant",
    "value":33,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_MO_SELECT"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_NONE"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_RD_SELECT_UNUSED"
  },{
    "kind":"constant",
    "value":61,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_SCENARIO_PICK"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_SD_SELECT"
  },{
    "kind":"constant",
    "value":59,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HEROPICK_STATE_SELECT_PENALTY"
  },{
    "kind":"constant",
    "value":55,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT"
  },{
    "kind":"constant",
    "value":56,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HERO_PICK_STATE_ARDM_SELECT"
  },{
    "kind":"constant",
    "value":58,
    "enum":"DOTA_HeroPickState",
    "name":"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT"
  },{
    "kind":"constant",
    "value":44,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_CANT_AUTO_CAST"
  },{
    "kind":"constant",
    "value":25,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_CANT_BE_TOGGLED"
  },{
    "kind":"constant",
    "value":12,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_CANT_BE_UPGRADED"
  },{
    "kind":"constant",
    "value":83,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_CANT_BE_UPGRADED_AT_MAX"
  },{
    "kind":"constant",
    "value":73,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_DISABLED_BY_ROOT"
  },{
    "kind":"constant",
    "value":110,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_DISABLED_BY_TETHER"
  },{
    "kind":"constant",
    "value":84,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_INACTIVE"
  },{
    "kind":"constant",
    "value":15,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_IN_COOLDOWN"
  },{
    "kind":"constant",
    "value":60,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_IS_HIDDEN"
  },{
    "kind":"constant",
    "value":8,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_AN_ITEM"
  },{
    "kind":"constant",
    "value":16,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_LEARNED"
  },{
    "kind":"constant",
    "value":11,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_OWNED_BY_UNIT"
  },{
    "kind":"constant",
    "value":101,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_POSITIONED"
  },{
    "kind":"constant",
    "value":102,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_TARGETTED"
  },{
    "kind":"constant",
    "value":111,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_NOT_UNLOCKED"
  },{
    "kind":"constant",
    "value":116,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_PING_DEAD_ALLY"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_REQUIRED"
  },{
    "kind":"constant",
    "value":103,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ABILITY_REQUIRES_TARGET"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_BAD_ABILITY_ENTITY"
  },{
    "kind":"constant",
    "value":115,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_BEYOND_PHYSICAL_ITEM_LIMIT"
  },{
    "kind":"constant",
    "value":100,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_ABILITY_PING_BAD_TEAM"
  },{
    "kind":"constant",
    "value":54,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_ACCEPT_ATTACK_TARGET"
  },{
    "kind":"constant",
    "value":99,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_DISABLED_BY_GAME_MODE"
  },{
    "kind":"constant",
    "value":91,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_IN_COOLDOWN"
  },{
    "kind":"constant",
    "value":90,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_NOT_ENOUGH_GOLD"
  },{
    "kind":"constant",
    "value":98,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_REAPERS_SCYTHE"
  },{
    "kind":"constant",
    "value":88,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_UNIT_NOT_A_HERO"
  },{
    "kind":"constant",
    "value":89,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_BUYBACK_UNIT_NOT_DEAD"
  },{
    "kind":"constant",
    "value":109,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_DRAG_REQUIRED"
  },{
    "kind":"constant",
    "value":55,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_NO_CHARGES"
  },{
    "kind":"constant",
    "value":50,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_ANCIENT"
  },{
    "kind":"constant",
    "value":32,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_ATTACK_IMMUNE"
  },{
    "kind":"constant",
    "value":49,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_BUILDING"
  },{
    "kind":"constant",
    "value":95,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_CONSIDERED_HERO"
  },{
    "kind":"constant",
    "value":59,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_COURIER"
  },{
    "kind":"constant",
    "value":56,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_CREEP"
  },{
    "kind":"constant",
    "value":79,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_DOMINATED"
  },{
    "kind":"constant",
    "value":30,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_ENEMY"
  },{
    "kind":"constant",
    "value":47,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_HERO"
  },{
    "kind":"constant",
    "value":53,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_MECHANICAL"
  },{
    "kind":"constant",
    "value":48,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_OTHER"
  },{
    "kind":"constant",
    "value":76,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_SUMMONED"
  },{
    "kind":"constant",
    "value":29,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_ON_TEAMMATE"
  },{
    "kind":"constant",
    "value":17,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_PASSIVE_ABILITY"
  },{
    "kind":"constant",
    "value":107,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_CAST_RIVER_PAINT"
  },{
    "kind":"constant",
    "value":65,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_DENY_HEALTH_TOO_HIGH"
  },{
    "kind":"constant",
    "value":92,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_DISASSEMBLE_STASH_OUT_OF_RANGE"
  },{
    "kind":"constant",
    "value":87,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_DRAG_CHANNELING_ITEM"
  },{
    "kind":"constant",
    "value":93,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_EJECT_ITEM_NOT_IN_STASH"
  },{
    "kind":"constant",
    "value":112,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_FOUNTAIN_DROP_UNIT_NOT_DEAD"
  },{
    "kind":"constant",
    "value":58,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_GIVE_ITEM_TO_ENEMY"
  },{
    "kind":"constant",
    "value":86,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_GLYPH"
  },{
    "kind":"constant",
    "value":117,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_LOCKCOMBINE_NEUTRAL_ITEMS"
  },{
    "kind":"constant",
    "value":68,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_PICK_UP_ITEM"
  },{
    "kind":"constant",
    "value":78,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_PURCHASE_DISALLOWED_ITEM"
  },{
    "kind":"constant",
    "value":104,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_RADAR"
  },{
    "kind":"constant",
    "value":70,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_SELL_ITEM"
  },{
    "kind":"constant",
    "value":71,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_SELL_ITEM_WHILE_DEAD"
  },{
    "kind":"constant",
    "value":69,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_SELL_NO_SHOP_IN_RANGE"
  },{
    "kind":"constant",
    "value":96,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CANT_SHOP_AUTO_BUY_ENABLED"
  },{
    "kind":"constant",
    "value":80,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CAST_CUSTOM"
  },{
    "kind":"constant",
    "value":118,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_COUNT"
  },{
    "kind":"constant",
    "value":106,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_CUSTOM_SHOP_NOT_IN_RANGE"
  },{
    "kind":"constant",
    "value":19,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_DEAD_TARGET"
  },{
    "kind":"constant",
    "value":94,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_GAME_IS_PAUSED"
  },{
    "kind":"constant",
    "value":28,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_HERO_CANT_BE_DENIED"
  },{
    "kind":"constant",
    "value":67,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_HOME_SHOP_NOT_IN_RANGE"
  },{
    "kind":"constant",
    "value":114,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_ALREADY_PURCHASED"
  },{
    "kind":"constant",
    "value":42,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_CANT_BE_DROPPED"
  },{
    "kind":"constant",
    "value":52,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_CANT_BE_MOVED_TO_SLOT"
  },{
    "kind":"constant",
    "value":51,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_CANT_BE_MOVED_TO_STASH"
  },{
    "kind":"constant",
    "value":61,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_IN_COOLDOWN"
  },{
    "kind":"constant",
    "value":81,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_DISASSEMBLABLE"
  },{
    "kind":"constant",
    "value":37,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_IN_ACTIVE_INVENTORY"
  },{
    "kind":"constant",
    "value":34,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_IN_INVENTORY"
  },{
    "kind":"constant",
    "value":85,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_IN_MAIN_INVENTORY"
  },{
    "kind":"constant",
    "value":113,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_IN_NEUTRAL_ITEM_STASH"
  },{
    "kind":"constant",
    "value":35,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_NOT_IN_UNIT_INVENTORY"
  },{
    "kind":"constant",
    "value":82,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ITEM_OUT_OF_STOCK"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_NOT_CONTROLLABLE_BY_PLAYER"
  },{
    "kind":"constant",
    "value":63,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_NOT_ENOUGH_GOLD"
  },{
    "kind":"constant",
    "value":14,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_NOT_ENOUGH_MANA"
  },{
    "kind":"constant",
    "value":105,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_NO_COURIER"
  },{
    "kind":"constant",
    "value":13,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_NO_POINTS_FOR_ABILITY_UPGRADE"
  },{
    "kind":"constant",
    "value":5,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_NPC_TARGET_REQUIRED"
  },{
    "kind":"constant",
    "value":97,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_ONLY_DELIBERATE_CHANNELING_CANCEL"
  },{
    "kind":"constant",
    "value":18,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_PHANTOM_TARGET"
  },{
    "kind":"constant",
    "value":9,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_PHYSICAL_ITEM_TARGET_REQUIRED"
  },{
    "kind":"constant",
    "value":64,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_PURCHASE_AUTOCOMBINE_RECIPE"
  },{
    "kind":"constant",
    "value":33,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_PURCHASE_INVALID_ITEM"
  },{
    "kind":"constant",
    "value":10,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_RUNE_TARGET_REQUIRED"
  },{
    "kind":"constant",
    "value":62,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_SECRET_SHOP_NOT_IN_RANGE"
  },{
    "kind":"constant",
    "value":66,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_SIDE_SHOP_NOT_IN_RANGE"
  },{
    "kind":"constant",
    "value":23,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_ATTACK_IMMUNE"
  },{
    "kind":"constant",
    "value":72,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_CANT_BE_DENIED"
  },{
    "kind":"constant",
    "value":26,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_CANT_BE_SEEN"
  },{
    "kind":"constant",
    "value":57,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_CANT_TAKE_ITEMS"
  },{
    "kind":"constant",
    "value":7,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_ENTITY_INDEX_OUT_OF_RANGE"
  },{
    "kind":"constant",
    "value":27,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_INVISIBLE"
  },{
    "kind":"constant",
    "value":22,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_INVULNERABLE"
  },{
    "kind":"constant",
    "value":77,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_MAGIC_IMMUNE_ALLY"
  },{
    "kind":"constant",
    "value":21,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_MAGIC_IMMUNE_ENEMY"
  },{
    "kind":"constant",
    "value":45,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_POSITION_OFF_MAP"
  },{
    "kind":"constant",
    "value":6,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_TREE_INDEX_NOT_A_TREE"
  },{
    "kind":"constant",
    "value":43,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_TREE_NOT_ACTIVE"
  },{
    "kind":"constant",
    "value":36,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_TARGET_UNSELECTABLE"
  },{
    "kind":"constant",
    "value":41,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_CANT_ATTACK"
  },{
    "kind":"constant",
    "value":39,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_CANT_MANIPULATE_ITEMS"
  },{
    "kind":"constant",
    "value":31,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_CANT_MOVE"
  },{
    "kind":"constant",
    "value":46,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_CANT_MOVE_TARGET_OUT_OF_RANGE"
  },{
    "kind":"constant",
    "value":38,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_CANT_PICK_UP_RUNES"
  },{
    "kind":"constant",
    "value":74,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_COMMAND_RESTRICTED"
  },{
    "kind":"constant",
    "value":20,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_IS_DEAD"
  },{
    "kind":"constant",
    "value":40,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_IS_ILLUSION"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_IS_NOT_NPC"
  },{
    "kind":"constant",
    "value":75,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_MUTED"
  },{
    "kind":"constant",
    "value":108,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_OBSTRUCTED"
  },{
    "kind":"constant",
    "value":24,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNIT_SILENCED"
  },{
    "kind":"constant",
    "value":3,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_INVALID_ORDER_UNRECOGNIZED_ORDER"
  },{
    "kind":"constant",
    "value":35,
    "name":"DOTA_MAX_ABILITIES"
  },{
    "kind":"constant",
    "value":64,
    "enum":"DOTALimits_t",
    "name":"DOTA_MAX_PLAYERS",
    "description":"Max number of players connected to the server including spectators."
  },{
    "kind":"constant",
    "value":10,
    "enum":"DOTALimits_t",
    "name":"DOTA_MAX_PLAYER_TEAMS",
    "description":"Max number of player teams supported."
  },{
    "kind":"constant",
    "value":15,
    "enum":"DOTALimits_t",
    "name":"DOTA_MAX_SPECTATOR_LOBBY_SIZE",
    "description":"Max number of viewers in a spectator lobby."
  },{
    "kind":"constant",
    "value":40,
    "enum":"DOTALimits_t",
    "name":"DOTA_MAX_SPECTATOR_TEAM_SIZE",
    "description":"How many spectators can watch."
  },{
    "kind":"constant",
    "value":24,
    "enum":"DOTALimits_t",
    "name":"DOTA_MAX_TEAM",
    "description":"Max number of players per team."
  },{
    "kind":"constant",
    "value":24,
    "enum":"DOTALimits_t",
    "name":"DOTA_MAX_TEAM_PLAYERS",
    "description":"Max number of non-spectator players supported."
  },{
    "kind":"constant",
    "value":3,
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOW"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTA_MOTION_CONTROLLER_PRIORITY",
    "name":"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM"
  },{
    "kind":"constant",
    "value":-1,
    "enum":"DOTA_INVALID_ORDERS",
    "name":"DOTA_ORDER_SUCCESS"
  },{
    "kind":"constant",
    "value":1,
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_1"
  },{
    "kind":"constant",
    "value":2,
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_2"
  },{
    "kind":"constant",
    "value":4,
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_3"
  },{
    "kind":"constant",
    "value":5,
    "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_4"
  },{
    "kind":"constant",
    "value":3,
    "name":"DOTA_PROJECTILE_ATTACHMENT_HITLOCATION"
  },{
    "kind":"constant",
    "value":6,
    "name":"DOTA_PROJECTILE_ATTACHMENT_LAST"
  },{
    "kind":"constant",
    "value":0,
    "name":"DOTA_PROJECTILE_ATTACHMENT_NONE"
  },{
    "kind":"constant",
    "value":67,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ANTIMAGE_SILENT"
  },{
    "kind":"constant",
    "value":65,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ARMADILLO_HEARTPIERCER"
  },{
    "kind":"constant",
    "value":25,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ATOS"
  },{
    "kind":"constant",
    "value":8,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_AXE_HELIX"
  },{
    "kind":"constant",
    "value":9,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_AXE_HELIX_ATTACK"
  },{
    "kind":"constant",
    "value":75,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_BATRIDER_NAPALM"
  },{
    "kind":"constant",
    "value":23,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_BREWMASTER_CINDER_BREW"
  },{
    "kind":"constant",
    "value":22,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_BREWMASTER_CRIT"
  },{
    "kind":"constant",
    "value":28,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CHAOS_CRIT"
  },{
    "kind":"constant",
    "value":60,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CHAOS_DOUBLE_CRIT"
  },{
    "kind":"constant",
    "value":61,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CHAOS_TRIPLE_CRIT"
  },{
    "kind":"constant",
    "value":31,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CM_FREEZING_FIELD"
  },{
    "kind":"constant",
    "value":6,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_COLD_REBUKE"
  },{
    "kind":"constant",
    "value":77,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_1"
  },{
    "kind":"constant",
    "value":78,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_2"
  },{
    "kind":"constant",
    "value":79,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_3"
  },{
    "kind":"constant",
    "value":80,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_4"
  },{
    "kind":"constant",
    "value":81,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_5"
  },{
    "kind":"constant",
    "value":82,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_6"
  },{
    "kind":"constant",
    "value":83,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_7"
  },{
    "kind":"constant",
    "value":84,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_8"
  },{
    "kind":"constant",
    "value":85,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GAME_9"
  },{
    "kind":"constant",
    "value":76,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_CUSTOM_GENERIC"
  },{
    "kind":"constant",
    "value":27,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_DAZZLE_SCEPTER"
  },{
    "kind":"constant",
    "value":13,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_DROW_MARKSMANSHIP"
  },{
    "kind":"constant",
    "value":18,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_FACELESS_BASH"
  },{
    "kind":"constant",
    "value":20,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_FACELESS_EVADE_ATTACK"
  },{
    "kind":"constant",
    "value":19,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_FACELESS_EVADE_SPELL"
  },{
    "kind":"constant",
    "value":21,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_FACELESS_VOID_BACKTRACK"
  },{
    "kind":"constant",
    "value":32,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_GENERIC_BASHER"
  },{
    "kind":"constant",
    "value":62,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_GENERIC_EVASION"
  },{
    "kind":"constant",
    "value":63,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_GENERIC_HEIGHT_MISS"
  },{
    "kind":"constant",
    "value":64,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_GENERIC_MISS"
  },{
    "kind":"constant",
    "value":41,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_ABYSSAL"
  },{
    "kind":"constant",
    "value":42,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_ABYSSAL_BLOCK"
  },{
    "kind":"constant",
    "value":37,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_BASHER"
  },{
    "kind":"constant",
    "value":51,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_BUTTERFLY"
  },{
    "kind":"constant",
    "value":45,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_CRIMSON_GUARD"
  },{
    "kind":"constant",
    "value":35,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_GREATERCRIT"
  },{
    "kind":"constant",
    "value":47,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_HALBRED_MAIM"
  },{
    "kind":"constant",
    "value":39,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_JAVELIN_ACCURACY"
  },{
    "kind":"constant",
    "value":36,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_LESSERCRIT"
  },{
    "kind":"constant",
    "value":52,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_MAELSTROM"
  },{
    "kind":"constant",
    "value":53,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR"
  },{
    "kind":"constant",
    "value":54,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_MJOLLNIR_STATIC"
  },{
    "kind":"constant",
    "value":55,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_MKB"
  },{
    "kind":"constant",
    "value":57,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_NAGINATA"
  },{
    "kind":"constant",
    "value":46,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_PMS"
  },{
    "kind":"constant",
    "value":49,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_SANGEKAYA_MAIM"
  },{
    "kind":"constant",
    "value":48,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_SANGEYASHA_MAIM"
  },{
    "kind":"constant",
    "value":50,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_SANGE_MAIM"
  },{
    "kind":"constant",
    "value":56,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_SILVER_EDGE"
  },{
    "kind":"constant",
    "value":38,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_SOLAR_CREST"
  },{
    "kind":"constant",
    "value":43,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_STOUT"
  },{
    "kind":"constant",
    "value":40,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_TRIDENT"
  },{
    "kind":"constant",
    "value":44,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_ITEM_VANGUARD"
  },{
    "kind":"constant",
    "value":26,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_JUGG_CRIT"
  },{
    "kind":"constant",
    "value":10,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_LEGION_MOMENT"
  },{
    "kind":"constant",
    "value":17,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_LONE_DRUID_ENTANGLE"
  },{
    "kind":"constant",
    "value":29,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_LYCAN_CRIT"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_MAGNUS_SHARD"
  },{
    "kind":"constant",
    "value":73,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_MARS_BULWARK"
  },{
    "kind":"constant",
    "value":66,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_MARS_SHIELD"
  },{
    "kind":"constant",
    "value":74,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_MUERTA_GUNSLINGER"
  },{
    "kind":"constant",
    "value":68,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER1"
  },{
    "kind":"constant",
    "value":69,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER2"
  },{
    "kind":"constant",
    "value":70,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER3"
  },{
    "kind":"constant",
    "value":71,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER4"
  },{
    "kind":"constant",
    "value":72,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_NEUTRAL_DROP_TIER5"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_NONE"
  },{
    "kind":"constant",
    "value":12,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_OD_ESSENCE"
  },{
    "kind":"constant",
    "value":15,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_OGRE_ITEM_MULTICAST"
  },{
    "kind":"constant",
    "value":14,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_OGRE_MAGI_FIREBLAST"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_PHANTOMASSASSIN_CRIT"
  },{
    "kind":"constant",
    "value":3,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_PHANTOMASSASSIN_DAGGER"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_PHANTOMLANCER_JUXTAPOSE"
  },{
    "kind":"constant",
    "value":59,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_RIKI_SMOKE_SCREEN"
  },{
    "kind":"constant",
    "value":33,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_SKELETONKING_CRIT"
  },{
    "kind":"constant",
    "value":34,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_SKELETONKING_CRIT_MORTAL"
  },{
    "kind":"constant",
    "value":11,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_SLARDAR_BASH"
  },{
    "kind":"constant",
    "value":24,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_SNIPER_HEADSHOT"
  },{
    "kind":"constant",
    "value":16,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_SPIRITBREAKER_GREATERBASH"
  },{
    "kind":"constant",
    "value":5,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_TINY_CRAGGY"
  },{
    "kind":"constant",
    "value":58,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_TROLL_BASH"
  },{
    "kind":"constant",
    "value":30,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_TUSK_CRIT"
  },{
    "kind":"constant",
    "value":7,
    "enum":"DotaPseudoRandomType",
    "name":"DOTA_PSEUDO_RANDOM_WOLF_CRIT"
  },{
    "kind":"constant",
    "value":6,
    "enum":"DOTA_RUNES",
    "name":"DOTA_RUNE_ARCANE"
  },{
    "kind":"constant",
    "value":5,
    "enum":"DOTA_RUNES",
    "name":"DOTA_RUNE_BOUNTY"
  },{
    "kind":"constant",
    "value":8,
    "enum":"DOTA_RUNES",
    "name":"DOTA_RUNE_COUNT"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_RUNES",
    "name":"DOTA_RUNE_DOUBLEDAMAGE"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DOTA_RUNES",
    "name":"DOTA_RUNE_HASTE"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTA_RUNES",
    "name":"DOTA_RUNE_ILLUSION"
  },{
    "kind":"constant",
    "value":-1,
    "enum":"DOTA_RUNES",
    "name":"DOTA_RUNE_INVALID"
  },{
    "kind":"constant",
    "value":3,
    "enum":"DOTA_RUNES",
    "name":"DOTA_RUNE_INVISIBILITY"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTA_RUNES",
    "name":"DOTA_RUNE_REGENERATION"
  },{
    "kind":"constant",
    "value":7,
    "enum":"DOTA_RUNES",
    "name":"DOTA_RUNE_WATER"
  },{
    "kind":"constant",
    "value":6,
    "enum":"DOTA_SHOP_TYPE",
    "name":"DOTA_SHOP_CUSTOM"
  },{
    "kind":"constant",
    "value":3,
    "enum":"DOTA_SHOP_TYPE",
    "name":"DOTA_SHOP_GROUND"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_SHOP_TYPE",
    "name":"DOTA_SHOP_HOME"
  },{
    "kind":"constant",
    "value":7,
    "enum":"DOTA_SHOP_TYPE",
    "name":"DOTA_SHOP_NEUTRALS"
  },{
    "kind":"constant",
    "value":8,
    "enum":"DOTA_SHOP_TYPE",
    "name":"DOTA_SHOP_NONE"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTA_SHOP_TYPE",
    "name":"DOTA_SHOP_SECRET"
  },{
    "kind":"constant",
    "value":5,
    "enum":"DOTA_SHOP_TYPE",
    "name":"DOTA_SHOP_SECRET2"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DOTA_SHOP_TYPE",
    "name":"DOTA_SHOP_SIDE"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTA_SHOP_TYPE",
    "name":"DOTA_SHOP_SIDE2"
  },{
    "kind":"constant",
    "value":7,
    "enum":"DOTASpeechType_t",
    "name":"DOTA_SPEECH_BAD_TEAM"
  },{
    "kind":"constant",
    "value":6,
    "enum":"DOTASpeechType_t",
    "name":"DOTA_SPEECH_GOOD_TEAM"
  },{
    "kind":"constant",
    "value":10,
    "enum":"DOTASpeechType_t",
    "name":"DOTA_SPEECH_RECIPIENT_TYPE_MAX"
  },{
    "kind":"constant",
    "value":8,
    "enum":"DOTASpeechType_t",
    "name":"DOTA_SPEECH_SPECTATOR"
  },{
    "kind":"constant",
    "value":5,
    "enum":"DOTASpeechType_t",
    "name":"DOTA_SPEECH_USER_ALL"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTASpeechType_t",
    "name":"DOTA_SPEECH_USER_INVALID"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTASpeechType_t",
    "name":"DOTA_SPEECH_USER_NEARBY"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DOTASpeechType_t",
    "name":"DOTA_SPEECH_USER_SINGLE"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTASpeechType_t",
    "name":"DOTA_SPEECH_USER_TEAM"
  },{
    "kind":"constant",
    "value":3,
    "enum":"DOTASpeechType_t",
    "name":"DOTA_SPEECH_USER_TEAM_NEARBY"
  },{
    "kind":"constant",
    "value":9,
    "enum":"DOTASpeechType_t",
    "name":"DOTA_SPEECH_USER_TEAM_NOSPECTATOR"
  },{
    "kind":"constant",
    "value":3,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_BADGUYS"
  },{
    "kind":"constant",
    "value":14,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_COUNT"
  },{
    "kind":"constant",
    "value":6,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_CUSTOM_1"
  },{
    "kind":"constant",
    "value":7,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_CUSTOM_2"
  },{
    "kind":"constant",
    "value":8,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_CUSTOM_3"
  },{
    "kind":"constant",
    "value":9,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_CUSTOM_4"
  },{
    "kind":"constant",
    "value":10,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_CUSTOM_5"
  },{
    "kind":"constant",
    "value":11,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_CUSTOM_6"
  },{
    "kind":"constant",
    "value":12,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_CUSTOM_7"
  },{
    "kind":"constant",
    "value":13,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_CUSTOM_8"
  },{
    "kind":"constant",
    "value":8,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_CUSTOM_COUNT"
  },{
    "kind":"constant",
    "value":13,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_CUSTOM_MAX"
  },{
    "kind":"constant",
    "value":6,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_CUSTOM_MIN"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_FIRST"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_GOODGUYS"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_NEUTRALS"
  },{
    "kind":"constant",
    "value":5,
    "enum":"DOTATeam_t",
    "name":"DOTA_TEAM_NOTEAM"
  },{
    "kind":"constant",
    "value":55,
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "name":"DOTA_UNIT_TARGET_ALL"
  },{
    "kind":"constant",
    "value":18,
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "name":"DOTA_UNIT_TARGET_BASIC"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "name":"DOTA_UNIT_TARGET_BUILDING"
  },{
    "kind":"constant",
    "value":16,
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "name":"DOTA_UNIT_TARGET_COURIER"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "name":"DOTA_UNIT_TARGET_CREEP"
  },{
    "kind":"constant",
    "value":128,
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "name":"DOTA_UNIT_TARGET_CUSTOM"
  },{
    "kind":"constant",
    "value":65536,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP"
  },{
    "kind":"constant",
    "value":8,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_DEAD"
  },{
    "kind":"constant",
    "value":128,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE"
  },{
    "kind":"constant",
    "value":64,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_INVULNERABLE"
  },{
    "kind":"constant",
    "value":16,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
  },{
    "kind":"constant",
    "value":32768,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_MANA_ONLY"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_NONE"
  },{
    "kind":"constant",
    "value":512,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS"
  },{
    "kind":"constant",
    "value":16384,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE"
  },{
    "kind":"constant",
    "value":131072,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"
  },{
    "kind":"constant",
    "value":2048,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED"
  },{
    "kind":"constant",
    "value":8192,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS"
  },{
    "kind":"constant",
    "value":32,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES"
  },{
    "kind":"constant",
    "value":524288,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED"
  },{
    "kind":"constant",
    "value":4096,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED"
  },{
    "kind":"constant",
    "value":256,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_NO_INVIS"
  },{
    "kind":"constant",
    "value":262144,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD"
  },{
    "kind":"constant",
    "value":1024,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED"
  },{
    "kind":"constant",
    "value":1048576,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY"
  },{
    "kind":"constant",
    "value":2097152,
    "enum":"DOTA_UNIT_TARGET_FLAGS",
    "name":"DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "name":"DOTA_UNIT_TARGET_HERO"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "name":"DOTA_UNIT_TARGET_NONE"
  },{
    "kind":"constant",
    "value":32,
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "name":"DOTA_UNIT_TARGET_OTHER"
  },{
    "kind":"constant",
    "value":256,
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "name":"DOTA_UNIT_TARGET_SELF"
  },{
    "kind":"constant",
    "value":3,
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "name":"DOTA_UNIT_TARGET_TEAM_BOTH"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "name":"DOTA_UNIT_TARGET_TEAM_CUSTOM"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "name":"DOTA_UNIT_TARGET_TEAM_ENEMY"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "name":"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTA_UNIT_TARGET_TEAM",
    "name":"DOTA_UNIT_TARGET_TEAM_NONE"
  },{
    "kind":"constant",
    "value":64,
    "enum":"DOTA_UNIT_TARGET_TYPE",
    "name":"DOTA_UNIT_TARGET_TREE"
  },{
    "kind":"constant",
    "value":2,
    "name":"DOUBLE_SHOT"
  },{
    "kind":"constant",
    "value":0,
    "name":"EMPTY"
  },{
    "kind":"constant",
    "value":128,
    "name":"FCVAR_ARCHIVE"
  },{
    "kind":"constant",
    "value":16384,
    "name":"FCVAR_CHEAT"
  },{
    "kind":"constant",
    "value":65536,
    "name":"FCVAR_DEMO"
  },{
    "kind":"constant",
    "value":2,
    "name":"FCVAR_DEVELOPMENTONLY"
  },{
    "kind":"constant",
    "value":131072,
    "name":"FCVAR_DONTRECORD"
  },{
    "kind":"constant",
    "value":16,
    "name":"FCVAR_HIDDEN"
  },{
    "kind":"constant",
    "value":0,
    "name":"FCVAR_NONE"
  },{
    "kind":"constant",
    "value":256,
    "name":"FCVAR_NOTIFY"
  },{
    "kind":"constant",
    "value":4194304,
    "name":"FCVAR_NOT_CONNECTED"
  },{
    "kind":"constant",
    "value":32768,
    "name":"FCVAR_PER_USER"
  },{
    "kind":"constant",
    "value":32,
    "name":"FCVAR_PROTECTED"
  },{
    "kind":"constant",
    "value":8192,
    "name":"FCVAR_REPLICATED"
  },{
    "kind":"constant",
    "value":64,
    "name":"FCVAR_SPONLY"
  },{
    "kind":"constant",
    "value":2048,
    "name":"FCVAR_UNLOGGED"
  },{
    "kind":"constant",
    "value":512,
    "name":"FCVAR_USERINFO"
  },{
    "kind":"constant",
    "value":134217728,
    "name":"FCVAR_VCONSOLE_SET_FOCUS"
  },{
    "kind":"constant",
    "value":0,
    "name":"FIND_ANY_ORDER"
  },{
    "kind":"constant",
    "value":1,
    "name":"FIND_CLOSEST"
  },{
    "kind":"constant",
    "value":2,
    "name":"FIND_FARTHEST"
  },{
    "kind":"constant",
    "value":-1,
    "name":"FIND_UNITS_EVERYWHERE"
  },{
    "kind":"constant",
    "value":4,
    "enum":"LuaModifierType",
    "name":"LUA_MODIFIER_INVALID"
  },{
    "kind":"constant",
    "value":3,
    "enum":"LuaModifierType",
    "name":"LUA_MODIFIER_MOTION_BOTH"
  },{
    "kind":"constant",
    "value":1,
    "enum":"LuaModifierType",
    "name":"LUA_MODIFIER_MOTION_HORIZONTAL"
  },{
    "kind":"constant",
    "value":0,
    "enum":"LuaModifierType",
    "name":"LUA_MODIFIER_MOTION_NONE"
  },{
    "kind":"constant",
    "value":2,
    "enum":"LuaModifierType",
    "name":"LUA_MODIFIER_MOTION_VERTICAL"
  },{
    "kind":"constant",
    "value":16,
    "enum":"ParticleAttachment_t",
    "name":"MAX_PATTACH_TYPES"
  },{
    "kind":"constant",
    "value":5,
    "name":"MELEE_HIT"
  },{
    "kind":"constant",
    "value":7,
    "name":"MELEE_HIT_PLAYER"
  },{
    "kind":"constant",
    "value":6,
    "name":"MELEE_HIT_WORLD"
  },{
    "kind":"constant",
    "value":4,
    "name":"MELEE_MISS"
  },{
    "kind":"constant",
    "value":8,
    "enum":"DOTAModifierAttribute_t",
    "name":"MODIFIER_ATTRIBUTE_AURA_PRIORITY"
  },{
    "kind":"constant",
    "value":16,
    "enum":"DOTAModifierAttribute_t",
    "name":"MODIFIER_ATTRIBUTE_IGNORE_DODGE"
  },{
    "kind":"constant",
    "value":4,
    "enum":"DOTAModifierAttribute_t",
    "name":"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE"
  },{
    "kind":"constant",
    "value":2,
    "enum":"DOTAModifierAttribute_t",
    "name":"MODIFIER_ATTRIBUTE_MULTIPLE"
  },{
    "kind":"constant",
    "value":0,
    "enum":"DOTAModifierAttribute_t",
    "name":"MODIFIER_ATTRIBUTE_NONE"
  },{
    "kind":"constant",
    "value":1,
    "enum":"DOTAModifierAttribute_t",
    "name":"MODIFIER_ATTRIBUTE_PERMANENT"
  },{
    "kind":"constant",
    "value":187,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL",
    "description":"OnAbilityEndChannel"
  },{
    "kind":"constant",
    "value":184,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ABILITY_EXECUTED",
    "description":"OnAbilityExecuted"
  },{
    "kind":"constant",
    "value":185,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST",
    "description":"OnAbilityFullyCast"
  },{
    "kind":"constant",
    "value":183,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ABILITY_START",
    "description":"OnAbilityStart"
  },{
    "kind":"constant",
    "value":233,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ASSIST",
    "description":"OnAssist"
  },{
    "kind":"constant",
    "value":176,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ATTACK",
    "description":"OnAttack"
  },{
    "kind":"constant",
    "value":197,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ATTACKED",
    "description":"OnAttacked"
  },{
    "kind":"constant",
    "value":179,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ATTACK_ALLIED",
    "description":"OnAttackAllied"
  },{
    "kind":"constant",
    "value":247,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ATTACK_CANCELLED",
    "description":"OnAttackCancelled"
  },{
    "kind":"constant",
    "value":178,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ATTACK_FAIL",
    "description":"OnAttackFail"
  },{
    "kind":"constant",
    "value":236,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ATTACK_FINISHED",
    "description":"OnAttackFinished"
  },{
    "kind":"constant",
    "value":177,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ATTACK_LANDED",
    "description":"OnAttackLanded"
  },{
    "kind":"constant",
    "value":174,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ATTACK_RECORD",
    "description":"OnAttackRecord"
  },{
    "kind":"constant",
    "value":244,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY",
    "description":"OnAttackRecordDestroy"
  },{
    "kind":"constant",
    "value":175,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ATTACK_START",
    "description":"OnAttackStart"
  },{
    "kind":"constant",
    "value":254,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ATTEMPT_PROJECTILE_DODGE",
    "description":"OnAttemptProjectileDodge"
  },{
    "kind":"constant",
    "value":186,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_BREAK_INVISIBILITY",
    "description":"OnBreakInvisibility"
  },{
    "kind":"constant",
    "value":209,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_BUILDING_KILLED",
    "description":"OnBuildingKilled"
  },{
    "kind":"constant",
    "value":195,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_DAMAGE_CALCULATED",
    "description":"OnDamageCalculated"
  },{
    "kind":"constant",
    "value":198,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_DEATH",
    "description":"OnDeath"
  },{
    "kind":"constant",
    "value":191,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_DEATH_PREVENTED",
    "description":"OnDamagePrevented"
  },{
    "kind":"constant",
    "value":231,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_DOMINATED",
    "description":"OnDominated"
  },{
    "kind":"constant",
    "value":204,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_HEALTH_GAINED",
    "description":"OnHealthGained"
  },{
    "kind":"constant",
    "value":208,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_HEAL_RECEIVED",
    "description":"OnHealReceived"
  },{
    "kind":"constant",
    "value":207,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_HERO_KILLED",
    "description":"OnHeroKilled"
  },{
    "kind":"constant",
    "value":232,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_KILL",
    "description":"OnKill"
  },{
    "kind":"constant",
    "value":196,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_MAGIC_DAMAGE_CALCULATED",
    "description":"OnMagicDamageCalculated"
  },{
    "kind":"constant",
    "value":205,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_MANA_GAINED",
    "description":"OnManaGained"
  },{
    "kind":"constant",
    "value":210,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_MODEL_CHANGED",
    "description":"OnModelChanged"
  },{
    "kind":"constant",
    "value":211,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_MODIFIER_ADDED",
    "description":"OnModifierAdded"
  },{
    "kind":"constant",
    "value":193,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ORB_EFFECT",
    "description":"Unused"
  },{
    "kind":"constant",
    "value":181,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_ORDER",
    "description":"OnOrder"
  },{
    "kind":"constant",
    "value":255,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_PREDEBUFF_APPLIED",
    "description":"OnPreDebuffApplied"
  },{
    "kind":"constant",
    "value":194,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_PROCESS_CLEAVE",
    "description":"OnProcessCleave"
  },{
    "kind":"constant",
    "value":188,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_PROCESS_UPGRADE",
    "description":"Unused"
  },{
    "kind":"constant",
    "value":180,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_PROJECTILE_DODGE",
    "description":"OnProjectileDodge"
  },{
    "kind":"constant",
    "value":245,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT",
    "description":"OnProjectileObstructionHit"
  },{
    "kind":"constant",
    "value":189,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_REFRESH",
    "description":"Unused"
  },{
    "kind":"constant",
    "value":199,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_RESPAWN",
    "description":"OnRespawn"
  },{
    "kind":"constant",
    "value":203,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_SET_LOCATION",
    "description":"OnSetLocation"
  },{
    "kind":"constant",
    "value":173,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_SPELL_TARGET_READY",
    "description":"OnSpellTargetReady"
  },{
    "kind":"constant",
    "value":200,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_SPENT_MANA",
    "description":"OnSpentMana"
  },{
    "kind":"constant",
    "value":192,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_STATE_CHANGED",
    "description":"OnStateChanged"
  },{
    "kind":"constant",
    "value":190,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_TAKEDAMAGE",
    "description":"OnTakeDamage"
  },{
    "kind":"constant",
    "value":206,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT",
    "description":"OnTakeDamageKillCredit"
  },{
    "kind":"constant",
    "value":202,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_TELEPORTED",
    "description":"OnTeleported"
  },{
    "kind":"constant",
    "value":201,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_TELEPORTING",
    "description":"OnTeleporting"
  },{
    "kind":"constant",
    "value":182,
    "enum":"modifierfunction",
    "name":"MODIFIER_EVENT_ON_UNIT_MOVED",
    "description":"OnUnitMoved"
  },{
    "kind":"constant",
    "value":65535,
    "enum":"modifierfunction",
    "name":"MODIFIER_FUNCTION_INVALID"
  },{
    "kind":"constant",
    "value":262,
    "enum":"modifierfunction",
    "name":"MODIFIER_FUNCTION_LAST"
  },{
    "kind":"constant",
    "value":2,
    "enum":"modifierpriority",
    "name":"MODIFIER_PRIORITY_HIGH"
  },{
    "kind":"constant",
    "value":0,
    "enum":"modifierpriority",
    "name":"MODIFIER_PRIORITY_LOW"
  },{
    "kind":"constant",
    "value":1,
    "enum":"modifierpriority",
    "name":"MODIFIER_PRIORITY_NORMAL"
  },{
    "kind":"constant",
    "value":4,
    "enum":"modifierpriority",
    "name":"MODIFIER_PRIORITY_SUPER_ULTRA"
  },{
    "kind":"constant",
    "value":3,
    "enum":"modifierpriority",
    "name":"MODIFIER_PRIORITY_ULTRA"
  },{
    "kind":"constant",
    "value":230,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ABILITY_LAYOUT",
    "description":"GetModifierAbilityLayout"
  },{
    "kind":"constant",
    "value":149,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL",
    "description":"GetAbsoluteNoDamageMagical"
  },{
    "kind":"constant",
    "value":148,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL",
    "description":"GetAbsoluteNoDamagePhysical"
  },{
    "kind":"constant",
    "value":150,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE",
    "description":"GetAbsoluteNoDamagePure"
  },{
    "kind":"constant",
    "value":138,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ABSORB_SPELL",
    "description":"GetAbsorbSpell"
  },{
    "kind":"constant",
    "value":160,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK",
    "description":"GetAlwaysAllowAttack"
  },{
    "kind":"constant",
    "value":172,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ALWAYS_AUTOATTACK_WHILE_HOLD_POSITION",
    "description":"GetAlwaysAutoAttackWhileHoldPosition"
  },{
    "kind":"constant",
    "value":161,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK",
    "description":"GetAllowEtherealAttack"
  },{
    "kind":"constant",
    "value":29,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE",
    "description":"GetModifierAttackSpeedBaseOverride"
  },{
    "kind":"constant",
    "value":31,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT",
    "description":"GetModifierAttackSpeedBonus_Constant"
  },{
    "kind":"constant",
    "value":253,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_PERCENTAGE",
    "description":"GetModifierAttackSpeedPercentage"
  },{
    "kind":"constant",
    "value":250,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE",
    "description":"GetModifierAttackSpeedReductionPercentage"
  },{
    "kind":"constant",
    "value":122,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ATTACK_ANIM_TIME_PERCENTAGE",
    "description":"GetModifierPercentageAttackAnimTime"
  },{
    "kind":"constant",
    "value":38,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT",
    "description":"GetModifierAttackPointConstant"
  },{
    "kind":"constant",
    "value":107,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE",
    "description":"GetModifierAttackRangeOverride"
  },{
    "kind":"constant",
    "value":108,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS",
    "description":"GetModifierAttackRangeBonus"
  },{
    "kind":"constant",
    "value":110,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE",
    "description":"GetModifierAttackRangeBonusPercentage"
  },{
    "kind":"constant",
    "value":109,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE",
    "description":"GetModifierAttackRangeBonusUnique"
  },{
    "kind":"constant",
    "value":252,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET"
  },{
    "kind":"constant",
    "value":67,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_AVOID_DAMAGE",
    "description":"GetModifierAvoidDamage"
  },{
    "kind":"constant",
    "value":68,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_AVOID_SPELL",
    "description":"GetModifierAvoidSpell"
  },{
    "kind":"constant",
    "value":4,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE",
    "description":"GetModifierBaseAttack_BonusDamage"
  },{
    "kind":"constant",
    "value":56,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierBaseDamageOutgoing_Percentage"
  },{
    "kind":"constant",
    "value":57,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE",
    "description":"GetModifierBaseDamageOutgoing_PercentageUnique"
  },{
    "kind":"constant",
    "value":35,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT",
    "description":"GetModifierBaseAttackTimeConstant"
  },{
    "kind":"constant",
    "value":36,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST",
    "description":"GetModifierBaseAttackTimeConstant_Adjust"
  },{
    "kind":"constant",
    "value":37,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_PERCENTAGE",
    "description":"GetModifierBaseAttackTimePercentage"
  },{
    "kind":"constant",
    "value":82,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BASE_MANA_REGEN",
    "description":"GetModifierBaseRegen"
  },{
    "kind":"constant",
    "value":39,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierBonusDamageOutgoing_Percentage"
  },{
    "kind":"constant",
    "value":141,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BONUS_DAY_VISION",
    "description":"GetBonusDayVision"
  },{
    "kind":"constant",
    "value":142,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION",
    "description":"GetBonusNightVision"
  },{
    "kind":"constant",
    "value":143,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE",
    "description":"GetBonusNightVisionUnique"
  },{
    "kind":"constant",
    "value":144,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE",
    "description":"GetBonusVisionPercentage"
  },{
    "kind":"constant",
    "value":249,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS",
    "description":"BotAttackScoreBonus"
  },{
    "kind":"constant",
    "value":164,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER",
    "description":"Unused"
  },{
    "kind":"constant",
    "value":165,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER",
    "description":"Unused"
  },{
    "kind":"constant",
    "value":238,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_CAN_ATTACK_TREES",
    "description":"GetModifierCanAttackTrees"
  },{
    "kind":"constant",
    "value":121,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE",
    "description":"GetModifierPercentageCasttime"
  },{
    "kind":"constant",
    "value":103,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS",
    "description":"GetModifierCastRangeBonus"
  },{
    "kind":"constant",
    "value":104,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_PERCENTAGE",
    "description":"GetModifierCastRangeBonusPercentage"
  },{
    "kind":"constant",
    "value":106,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING",
    "description":"GetModifierCastRangeBonusStacking"
  },{
    "kind":"constant",
    "value":105,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET",
    "description":"GetModifierCastRangeBonusTarget"
  },{
    "kind":"constant",
    "value":227,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE",
    "description":"GetModifierChangeAbilityValue"
  },{
    "kind":"constant",
    "value":119,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE",
    "description":"GetModifierPercentageCooldown"
  },{
    "kind":"constant",
    "value":120,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING",
    "description":"GetModifierPercentageCooldownOngoing"
  },{
    "kind":"constant",
    "value":256,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING",
    "description":"GetModifierPercentageCooldownStacking"
  },{
    "kind":"constant",
    "value":33,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT",
    "description":"GetModifierCooldownReduction_Constant"
  },{
    "kind":"constant",
    "value":40,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierDamageOutgoing_Percentage"
  },{
    "kind":"constant",
    "value":41,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION",
    "description":"GetModifierDamageOutgoing_Percentage_Illusion"
  },{
    "kind":"constant",
    "value":42,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY",
    "description":"GetModifierDamageOutgoing_Percentage_Illusion_Amplify"
  },{
    "kind":"constant",
    "value":125,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_DEATHGOLDCOST",
    "description":"GetModifierConstantDeathGoldCost"
  },{
    "kind":"constant",
    "value":140,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_DISABLE_AUTOATTACK",
    "description":"GetDisableAutoAttack"
  },{
    "kind":"constant",
    "value":159,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_DISABLE_HEALING",
    "description":"GetDisableHealing"
  },{
    "kind":"constant",
    "value":225,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_DISABLE_TURNING",
    "description":"GetModifierDisableTurning"
  },{
    "kind":"constant",
    "value":167,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_DODGE_PROJECTILE",
    "description":"GetModifierDodgeProjectile"
  },{
    "kind":"constant",
    "value":242,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER",
    "description":"GetModifierNoVisionOfAttacker"
  },{
    "kind":"constant",
    "value":62,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_EVASION_CONSTANT",
    "description":"GetModifierEvasion_Constant"
  },{
    "kind":"constant",
    "value":126,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_EXP_RATE_BOOST",
    "description":"GetModifierPercentageExpRateBoost"
  },{
    "kind":"constant",
    "value":92,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS",
    "description":"GetModifierExtraHealthBonus"
  },{
    "kind":"constant",
    "value":95,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE",
    "description":"GetModifierExtraHealthPercentage"
  },{
    "kind":"constant",
    "value":93,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS",
    "description":"GetModifierExtraManaBonus"
  },{
    "kind":"constant",
    "value":94,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS_PERCENTAGE",
    "description":"GetModifierExtraManaBonusPercentage"
  },{
    "kind":"constant",
    "value":96,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE",
    "description":"GetModifierExtraManaPercentage"
  },{
    "kind":"constant",
    "value":91,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS",
    "description":"GetModifierExtraStrengthBonus"
  },{
    "kind":"constant",
    "value":30,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_FIXED_ATTACK_RATE",
    "description":"GetModifierFixedAttackRate"
  },{
    "kind":"constant",
    "value":145,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_FIXED_DAY_VISION",
    "description":"GetFixedDayVision"
  },{
    "kind":"constant",
    "value":146,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_FIXED_NIGHT_VISION",
    "description":"GetFixedNightVision"
  },{
    "kind":"constant",
    "value":224,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP",
    "description":"GetForceDrawOnMinimap"
  },{
    "kind":"constant",
    "value":127,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_GOLD_RATE_BOOST",
    "description":"GetModifierPercentageGoldRateBoost"
  },{
    "kind":"constant",
    "value":89,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_HEALTH_BONUS",
    "description":"GetModifierHealthBonus"
  },{
    "kind":"constant",
    "value":86,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT",
    "description":"GetModifierConstantHealthRegen"
  },{
    "kind":"constant",
    "value":87,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE",
    "description":"GetModifierHealthRegenPercentage"
  },{
    "kind":"constant",
    "value":88,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE",
    "description":"GetModifierHealthRegenPercentageUnique"
  },{
    "kind":"constant",
    "value":47,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE",
    "description":"GetModifierHealAmplify_PercentageSource"
  },{
    "kind":"constant",
    "value":48,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET",
    "description":"GetModifierHealAmplify_PercentageTarget"
  },{
    "kind":"constant",
    "value":50,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE",
    "description":"GetModifierHPRegenAmplify_Percentage"
  },{
    "kind":"constant",
    "value":49,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_HP_REGEN_CAN_BE_NEGATIVE",
    "description":"GetModifierHPRegen_CanBeNegative"
  },{
    "kind":"constant",
    "value":32,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_IGNORE_ATTACKSPEED_LIMIT",
    "description":"GetModifierAttackSpeed_Limit"
  },{
    "kind":"constant",
    "value":226,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE",
    "description":"GetModifierIgnoreCastAngle"
  },{
    "kind":"constant",
    "value":237,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_IGNORE_COOLDOWN",
    "description":"GetModifierIgnoreCooldown"
  },{
    "kind":"constant",
    "value":27,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT",
    "description":"GetModifierIgnoreMovespeedLimit"
  },{
    "kind":"constant",
    "value":76,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR",
    "description":"GetModifierIgnorePhysicalArmor"
  },{
    "kind":"constant",
    "value":152,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_ILLUSION_LABEL",
    "description":"GetModifierIllusionLabel"
  },{
    "kind":"constant",
    "value":241,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION"
  },{
    "kind":"constant",
    "value":58,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE",
    "description":"GetModifierIncomingDamage_Percentage"
  },{
    "kind":"constant",
    "value":60,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT",
    "description":"GetModifierIncomingPhysicalDamageConstant"
  },{
    "kind":"constant",
    "value":59,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE",
    "description":"GetModifierIncomingPhysicalDamage_Percentage"
  },{
    "kind":"constant",
    "value":61,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT",
    "description":"GetModifierIncomingSpellDamageConstant"
  },{
    "kind":"constant",
    "value":14,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION",
    "description":"GetModifierInvisibilityAttackBehaviorException"
  },{
    "kind":"constant",
    "value":13,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_INVISIBILITY_LEVEL",
    "description":"GetModifierInvisibilityLevel"
  },{
    "kind":"constant",
    "value":151,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_IS_ILLUSION",
    "description":"GetIsIllusion"
  },{
    "kind":"constant",
    "value":216,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_IS_SCEPTER",
    "description":"GetModifierScepter"
  },{
    "kind":"constant",
    "value":217,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_IS_SHARD",
    "description":"GetModifierShard"
  },{
    "kind":"constant",
    "value":261,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_KNOCKBACK_AMPLIFICATION_PERCENTAGE",
    "description":"GetModifierKnockbackAmplification_Percentage"
  },{
    "kind":"constant",
    "value":51,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE",
    "description":"GetModifierLifestealRegenAmplify_Percentage"
  },{
    "kind":"constant",
    "value":221,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_LIFETIME_FRACTION",
    "description":"GetUnitLifetimeFraction"
  },{
    "kind":"constant",
    "value":130,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK",
    "description":"GetModifierMagical_ConstantBlock"
  },{
    "kind":"constant",
    "value":77,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION",
    "description":"GetModifierMagicalResistanceBaseReduction"
  },{
    "kind":"constant",
    "value":79,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS",
    "description":"GetModifierMagicalResistanceBonus"
  },{
    "kind":"constant",
    "value":80,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS",
    "description":"GetModifierMagicalResistanceBonusIllusions"
  },{
    "kind":"constant",
    "value":81,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE",
    "description":"GetModifierMagicalResistanceDecrepifyUnique"
  },{
    "kind":"constant",
    "value":78,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION",
    "description":"GetModifierMagicalResistanceDirectModification"
  },{
    "kind":"constant",
    "value":123,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE",
    "description":"GetModifierPercentageManacost"
  },{
    "kind":"constant",
    "value":124,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING",
    "description":"GetModifierPercentageManacostStacking"
  },{
    "kind":"constant",
    "value":34,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT",
    "description":"GetModifierManacostReduction_Constant"
  },{
    "kind":"constant",
    "value":90,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MANA_BONUS",
    "description":"GetModifierManaBonus"
  },{
    "kind":"constant",
    "value":54,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE",
    "description":"GetModifierManaDrainAmplify_Percentage"
  },{
    "kind":"constant",
    "value":83,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT",
    "description":"GetModifierConstantManaRegen"
  },{
    "kind":"constant",
    "value":84,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE",
    "description":"GetModifierConstantManaRegenUnique"
  },{
    "kind":"constant",
    "value":85,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE",
    "description":"GetModifierTotalPercentageManaRegen"
  },{
    "kind":"constant",
    "value":111,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MAX_ATTACK_RANGE",
    "description":"GetModifierMaxAttackRange"
  },{
    "kind":"constant",
    "value":169,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MAX_DEBUFF_DURATION",
    "description":"GetModifierMaxDebuffDuration"
  },{
    "kind":"constant",
    "value":147,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MIN_HEALTH",
    "description":"GetMinHealth"
  },{
    "kind":"constant",
    "value":69,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MISS_PERCENTAGE",
    "description":"GetModifierMiss_Percentage"
  },{
    "kind":"constant",
    "value":213,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MODEL_CHANGE",
    "description":"GetModifierModelChange"
  },{
    "kind":"constant",
    "value":214,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MODEL_SCALE",
    "description":"GetModifierModelScale"
  },{
    "kind":"constant",
    "value":215,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MODEL_SCALE_ANIMATE_TIME",
    "description":"GetModifierModelScaleAnimateTime"
  },{
    "kind":"constant",
    "value":24,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE",
    "description":"GetModifierMoveSpeed_Absolute"
  },{
    "kind":"constant",
    "value":26,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX",
    "description":"GetModifierMoveSpeed_AbsoluteMax"
  },{
    "kind":"constant",
    "value":25,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN",
    "description":"GetModifierMoveSpeed_AbsoluteMin"
  },{
    "kind":"constant",
    "value":17,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE",
    "description":"GetModifierMoveSpeedOverride"
  },{
    "kind":"constant",
    "value":16,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT",
    "description":"GetModifierMoveSpeedBonus_Constant"
  },{
    "kind":"constant",
    "value":22,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE",
    "description":"GetModifierMoveSpeedBonus_Constant_Unique"
  },{
    "kind":"constant",
    "value":23,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2",
    "description":"GetModifierMoveSpeedBonus_Constant_Unique_2"
  },{
    "kind":"constant",
    "value":18,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE",
    "description":"GetModifierMoveSpeedBonus_Percentage"
  },{
    "kind":"constant",
    "value":19,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE",
    "description":"GetModifierMoveSpeedBonus_Percentage_Unique"
  },{
    "kind":"constant",
    "value":20,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE",
    "description":"GetModifierMoveSpeedBonus_Special_Boots"
  },{
    "kind":"constant",
    "value":21,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2",
    "description":"GetModifierMoveSpeedBonus_Special_Boots_2"
  },{
    "kind":"constant",
    "value":28,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_LIMIT",
    "description":"GetModifierMoveSpeed_Limit"
  },{
    "kind":"constant",
    "value":251,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE",
    "description":"GetModifierMoveSpeedReductionPercentage"
  },{
    "kind":"constant",
    "value":53,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE",
    "description":"GetModifierMPRegenAmplify_Percentage"
  },{
    "kind":"constant",
    "value":55,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE",
    "description":"GetModifierMPRestoreAmplify_Percentage"
  },{
    "kind":"constant",
    "value":63,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT",
    "description":"GetModifierNegativeEvasion_Constant"
  },{
    "kind":"constant",
    "value":228,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL",
    "description":"GetModifierOverrideAbilitySpecial"
  },{
    "kind":"constant",
    "value":229,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE",
    "description":"GetModifierOverrideAbilitySpecialValue"
  },{
    "kind":"constant",
    "value":135,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION",
    "description":"GetOverrideAnimation"
  },{
    "kind":"constant",
    "value":137,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE",
    "description":"GetOverrideAnimationRate"
  },{
    "kind":"constant",
    "value":136,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT",
    "description":"GetOverrideAnimationWeight"
  },{
    "kind":"constant",
    "value":11,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE",
    "description":"GetModifierOverrideAttackDamage"
  },{
    "kind":"constant",
    "value":162,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL",
    "description":"GetOverrideAttackMagical"
  },{
    "kind":"constant",
    "value":15,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY",
    "description":"GetModifierPersistentInvisibility"
  },{
    "kind":"constant",
    "value":260,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PHYSICALDAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierPhysicalDamageOutgoing_Percentage"
  },{
    "kind":"constant",
    "value":70,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE",
    "description":"GetModifierPhysicalArmorBase_Percentage"
  },{
    "kind":"constant",
    "value":72,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS",
    "description":"GetModifierPhysicalArmorBonus"
  },{
    "kind":"constant",
    "value":75,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_POST",
    "description":"GetModifierPhysicalArmorBonusPost"
  },{
    "kind":"constant",
    "value":73,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE",
    "description":"GetModifierPhysicalArmorBonusUnique"
  },{
    "kind":"constant",
    "value":74,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE",
    "description":"GetModifierPhysicalArmorBonusUniqueActive"
  },{
    "kind":"constant",
    "value":71,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE",
    "description":"GetModifierPhysicalArmorTotal_Percentage"
  },{
    "kind":"constant",
    "value":131,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK",
    "description":"GetModifierPhysical_ConstantBlock"
  },{
    "kind":"constant",
    "value":132,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL",
    "description":"GetModifierPhysical_ConstantBlockSpecial"
  },{
    "kind":"constant",
    "value":0,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE",
    "description":"GetModifierPreAttack_BonusDamage"
  },{
    "kind":"constant",
    "value":3,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT",
    "description":"GetModifierPreAttack_BonusDamagePostCrit"
  },{
    "kind":"constant",
    "value":2,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC",
    "description":"GetModifierPreAttack_BonusDamage_Proc"
  },{
    "kind":"constant",
    "value":1,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET",
    "description":"GetModifierPreAttack_BonusDamage_Target"
  },{
    "kind":"constant",
    "value":128,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE",
    "description":"GetModifierPreAttack_CriticalStrike"
  },{
    "kind":"constant",
    "value":171,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PREATTACK_DEADLY_BLOW",
    "description":"GetModifierPreAttack_DeadlyBlow"
  },{
    "kind":"constant",
    "value":129,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE",
    "description":"GetModifierPreAttack_Target_CriticalStrike"
  },{
    "kind":"constant",
    "value":235,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE",
    "description":"PreserveParticlesOnModelChanged"
  },{
    "kind":"constant",
    "value":12,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PRE_ATTACK",
    "description":"GetModifierPreAttack"
  },{
    "kind":"constant",
    "value":170,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PRIMARY_STAT_DAMAGE_MULTIPLIER",
    "description":"GetPrimaryStatDamageMultiplier"
  },{
    "kind":"constant",
    "value":7,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL",
    "description":"GetModifierProcAttack_BonusDamage_Magical"
  },{
    "kind":"constant",
    "value":9,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL_TARGET",
    "description":"GetModifierProcAttack_BonusDamage_Magical_Target"
  },{
    "kind":"constant",
    "value":5,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL",
    "description":"GetModifierProcAttack_BonusDamage_Physical"
  },{
    "kind":"constant",
    "value":8,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE",
    "description":"GetModifierProcAttack_BonusDamage_Pure"
  },{
    "kind":"constant",
    "value":6,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PROCATTACK_CONVERT_PHYSICAL_TO_MAGICAL",
    "description":"GetModifierProcAttack_ConvertPhysicalToMagical"
  },{
    "kind":"constant",
    "value":10,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK",
    "description":"GetModifierProcAttack_Feedback"
  },{
    "kind":"constant",
    "value":114,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PROJECTILE_NAME",
    "description":"GetModifierProjectileName"
  },{
    "kind":"constant",
    "value":112,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS",
    "description":"GetModifierProjectileSpeedBonus"
  },{
    "kind":"constant",
    "value":113,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE",
    "description":"GetModifierProjectileSpeedBonusPercentage"
  },{
    "kind":"constant",
    "value":222,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION",
    "description":"GetModifierProvidesFOWVision"
  },{
    "kind":"constant",
    "value":218,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION",
    "description":"GetModifierRadarCooldownReduction"
  },{
    "kind":"constant",
    "value":259,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_RAT_PACK",
    "description":"GetModifierIsRatPack"
  },{
    "kind":"constant",
    "value":139,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_REFLECT_SPELL",
    "description":"GetReflectSpell"
  },{
    "kind":"constant",
    "value":115,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_REINCARNATION",
    "description":"ReincarnateTime"
  },{
    "kind":"constant",
    "value":116,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME",
    "description":"GetModifierConstantRespawnTime"
  },{
    "kind":"constant",
    "value":117,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE",
    "description":"GetModifierPercentageRespawnTime"
  },{
    "kind":"constant",
    "value":118,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_RESPAWNTIME_STACKING",
    "description":"GetModifierStackingRespawnTime"
  },{
    "kind":"constant",
    "value":223,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP",
    "description":"GetModifierSpellsRequireHP"
  },{
    "kind":"constant",
    "value":45,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE",
    "description":"GetModifierSpellAmplify_Percentage"
  },{
    "kind":"constant",
    "value":44,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_CREEP",
    "description":"GetModifierSpellAmplify_PercentageCreep"
  },{
    "kind":"constant",
    "value":46,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE",
    "description":"GetModifierSpellAmplify_PercentageUnique"
  },{
    "kind":"constant",
    "value":52,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE",
    "description":"GetModifierSpellLifestealRegenAmplify_Percentage"
  },{
    "kind":"constant",
    "value":257,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_SPELL_REDIRECT_TARGET",
    "description":"GetModifierSpellRedirectTarget"
  },{
    "kind":"constant",
    "value":98,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS",
    "description":"GetModifierBonusStats_Agility"
  },{
    "kind":"constant",
    "value":101,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE",
    "description":"GetModifierBonusStats_Agility_Percentage"
  },{
    "kind":"constant",
    "value":99,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS",
    "description":"GetModifierBonusStats_Intellect"
  },{
    "kind":"constant",
    "value":102,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE",
    "description":"GetModifierBonusStats_Intellect_Percentage"
  },{
    "kind":"constant",
    "value":97,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS",
    "description":"GetModifierBonusStats_Strength"
  },{
    "kind":"constant",
    "value":100,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE",
    "description":"GetModifierBonusStats_Strength_Percentage"
  },{
    "kind":"constant",
    "value":64,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE",
    "description":"GetModifierStatusResistance"
  },{
    "kind":"constant",
    "value":66,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER",
    "description":"GetModifierStatusResistanceCaster"
  },{
    "kind":"constant",
    "value":65,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING",
    "description":"GetModifierStatusResistanceStacking"
  },{
    "kind":"constant",
    "value":153,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_STRONG_ILLUSION",
    "description":"GetModifierStrongIllusion"
  },{
    "kind":"constant",
    "value":154,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_SUPER_ILLUSION",
    "description":"GetModifierSuperIllusion"
  },{
    "kind":"constant",
    "value":155,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE",
    "description":"GetModifierSuperIllusionWithUltimate"
  },{
    "kind":"constant",
    "value":248,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_SUPPRESS_CLEAVE",
    "description":"GetSuppressCleave"
  },{
    "kind":"constant",
    "value":246,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_SUPPRESS_TELEPORT",
    "description":"GetSuppressTeleport"
  },{
    "kind":"constant",
    "value":234,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TEMPEST_DOUBLE",
    "description":"GetModifierTempestDouble"
  },{
    "kind":"constant",
    "value":212,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TOOLTIP",
    "description":"OnTooltip"
  },{
    "kind":"constant",
    "value":243,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TOOLTIP2",
    "description":"OnTooltip2"
  },{
    "kind":"constant",
    "value":43,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE",
    "description":"GetModifierTotalDamageOutgoing_Percentage"
  },{
    "kind":"constant",
    "value":134,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK",
    "description":"GetModifierTotal_ConstantBlock"
  },{
    "kind":"constant",
    "value":133,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR",
    "description":"GetModifierPhysical_ConstantBlockUnavoidablePreArmor"
  },{
    "kind":"constant",
    "value":219,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS",
    "description":"GetActivityTranslationModifiers"
  },{
    "kind":"constant",
    "value":220,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND",
    "description":"GetAttackSound"
  },{
    "kind":"constant",
    "value":168,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK",
    "description":"GetTriggerCosmeticAndEndAttack"
  },{
    "kind":"constant",
    "value":258,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TURN_RATE_CONSTANT",
    "description":"GetModifierTurnRateConstant"
  },{
    "kind":"constant",
    "value":158,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TURN_RATE_OVERRIDE",
    "description":"GetModifierTurnRate_Override"
  },{
    "kind":"constant",
    "value":157,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE",
    "description":"GetModifierTurnRate_Percentage"
  },{
    "kind":"constant",
    "value":166,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING",
    "description":"GetModifierUnitDisllowUpgrading"
  },{
    "kind":"constant",
    "value":163,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH",
    "description":"GetModifierUnitStatsNeedsRefresh"
  },{
    "kind":"constant",
    "value":239,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_VISUAL_Z_DELTA",
    "description":"GetVisualZDelta"
  },{
    "kind":"constant",
    "value":240,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_VISUAL_Z_SPEED_BASE_OVERRIDE",
    "description":"GetVisualZSpeedBaseOverride"
  },{
    "kind":"constant",
    "value":156,
    "enum":"modifierfunction",
    "name":"MODIFIER_PROPERTY_XP_DURING_DEATH",
    "description":"GetModifierXPDuringDeath"
  },{
    "kind":"constant",
    "value":48,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS"
  },{
    "kind":"constant",
    "value":49,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE"
  },{
    "kind":"constant",
    "value":51,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_OBSTRUCTIONS"
  },{
    "kind":"constant",
    "value":38,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES"
  },{
    "kind":"constant",
    "value":47,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_ATTACK_ALLIES"
  },{
    "kind":"constant",
    "value":2,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_ATTACK_IMMUNE"
  },{
    "kind":"constant",
    "value":31,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_BLIND"
  },{
    "kind":"constant",
    "value":12,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_BLOCK_DISABLED"
  },{
    "kind":"constant",
    "value":45,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED"
  },{
    "kind":"constant",
    "value":17,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_CANNOT_MISS"
  },{
    "kind":"constant",
    "value":16,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_CANNOT_TARGET_BUILDINGS"
  },{
    "kind":"constant",
    "value":15,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_CANNOT_TARGET_ENEMIES"
  },{
    "kind":"constant",
    "value":20,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_COMMAND_RESTRICTED"
  },{
    "kind":"constant",
    "value":1,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_DISARMED"
  },{
    "kind":"constant",
    "value":30,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_DOMINATED"
  },{
    "kind":"constant",
    "value":13,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_EVADE_DISABLED"
  },{
    "kind":"constant",
    "value":33,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_FAKE_ALLY"
  },{
    "kind":"constant",
    "value":43,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_FEARED"
  },{
    "kind":"constant",
    "value":25,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_FLYING"
  },{
    "kind":"constant",
    "value":34,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY"
  },{
    "kind":"constant",
    "value":46,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_FORCED_FLYING_VISION"
  },{
    "kind":"constant",
    "value":19,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_FROZEN"
  },{
    "kind":"constant",
    "value":6,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_HEXED"
  },{
    "kind":"constant",
    "value":37,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS"
  },{
    "kind":"constant",
    "value":42,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_IGNORING_STOP_ORDERS"
  },{
    "kind":"constant",
    "value":7,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_INVISIBLE"
  },{
    "kind":"constant",
    "value":8,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_INVULNERABLE"
  },{
    "kind":"constant",
    "value":52,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_LAST"
  },{
    "kind":"constant",
    "value":22,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_LOW_ATTACK_PRIORITY"
  },{
    "kind":"constant",
    "value":9,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_MAGIC_IMMUNE"
  },{
    "kind":"constant",
    "value":4,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_MUTED"
  },{
    "kind":"constant",
    "value":11,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_NIGHTMARED"
  },{
    "kind":"constant",
    "value":21,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_NOT_ON_MINIMAP"
  },{
    "kind":"constant",
    "value":39,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES"
  },{
    "kind":"constant",
    "value":23,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_NO_HEALTH_BAR"
  },{
    "kind":"constant",
    "value":24,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_NO_HEALTH_BAR_FOR_ENEMIES"
  },{
    "kind":"constant",
    "value":27,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_NO_TEAM_MOVE_TO"
  },{
    "kind":"constant",
    "value":28,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_NO_TEAM_SELECT"
  },{
    "kind":"constant",
    "value":26,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_NO_UNIT_COLLISION"
  },{
    "kind":"constant",
    "value":32,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_OUT_OF_GAME"
  },{
    "kind":"constant",
    "value":29,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_PASSIVES_DISABLED"
  },{
    "kind":"constant",
    "value":10,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_PROVIDES_VISION"
  },{
    "kind":"constant",
    "value":0,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_ROOTED"
  },{
    "kind":"constant",
    "value":3,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_SILENCED"
  },{
    "kind":"constant",
    "value":18,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_SPECIALLY_DENIABLE"
  },{
    "kind":"constant",
    "value":50,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_SPECIALLY_UNDENIABLE"
  },{
    "kind":"constant",
    "value":5,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_STUNNED"
  },{
    "kind":"constant",
    "value":44,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_TAUNTED"
  },{
    "kind":"constant",
    "value":41,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_TETHERED"
  },{
    "kind":"constant",
    "value":35,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_TRUESIGHT_IMMUNE"
  },{
    "kind":"constant",
    "value":14,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_UNSELECTABLE"
  },{
    "kind":"constant",
    "value":40,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_UNSLOWABLE"
  },{
    "kind":"constant",
    "value":36,
    "enum":"modifierstate",
    "name":"MODIFIER_STATE_UNTARGETABLE"
  },{
    "kind":"constant",
    "value":0.01023,
    "name":"NDEBUG_PERSIST_TILL_NEXT_SERVER"
  },{
    "kind":"constant",
    "value":11,
    "name":"NEARLYEMPTY"
  },{
    "kind":"constant",
    "value":0,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_ABSORIGIN"
  },{
    "kind":"constant",
    "value":1,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_ABSORIGIN_FOLLOW"
  },{
    "kind":"constant",
    "value":13,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_CENTER_FOLLOW"
  },{
    "kind":"constant",
    "value":2,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_CUSTOMORIGIN"
  },{
    "kind":"constant",
    "value":3,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_CUSTOMORIGIN_FOLLOW"
  },{
    "kind":"constant",
    "value":14,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_CUSTOM_GAME_STATE_1"
  },{
    "kind":"constant",
    "value":6,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_EYES_FOLLOW"
  },{
    "kind":"constant",
    "value":15,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_HEALTHBAR"
  },{
    "kind":"constant",
    "value":-1,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_INVALID"
  },{
    "kind":"constant",
    "value":11,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_MAIN_VIEW"
  },{
    "kind":"constant",
    "value":7,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_OVERHEAD_FOLLOW"
  },{
    "kind":"constant",
    "value":4,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_POINT"
  },{
    "kind":"constant",
    "value":5,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_POINT_FOLLOW"
  },{
    "kind":"constant",
    "value":10,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_RENDERORIGIN_FOLLOW"
  },{
    "kind":"constant",
    "value":9,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_ROOTBONE_FOLLOW"
  },{
    "kind":"constant",
    "value":12,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_WATERWAKE"
  },{
    "kind":"constant",
    "value":8,
    "enum":"ParticleAttachment_t",
    "name":"PATTACH_WORLDORIGIN"
  },{
    "kind":"constant",
    "value":2,
    "name":"POSTSENSING"
  },{
    "kind":"constant",
    "value":1,
    "name":"PRESENSING"
  },{
    "kind":"constant",
    "value":0,
    "name":"PRESIM"
  },{
    "kind":"constant",
    "value":3,
    "name":"RELOAD"
  },{
    "kind":"constant",
    "value":1,
    "name":"SINGLE_SHOT"
  },{
    "kind":"constant",
    "value":0,
    "name":"SPAWN_GROUP_HANDLE_INVALID"
  },{
    "kind":"constant",
    "value":8,
    "name":"SPECIAL1"
  },{
    "kind":"constant",
    "value":9,
    "name":"SPECIAL2"
  },{
    "kind":"constant",
    "value":10,
    "name":"SPECIAL3"
  },{
    "kind":"constant",
    "value":6,
    "name":"ScriptDebugFirstLine"
  },{
    "kind":"constant",
    "value":0,
    "name":"ScriptDebugTextIndent"
  },{
    "kind":"constant",
    "value":20,
    "name":"ScriptDebugTextLines"
  },{
    "kind":"constant",
    "value":10,
    "name":"ScriptDebugTextTime"
  },{
    "kind":"constant",
    "value":26,
    "name":"ScriptDebugWatchFistLine"
  },{
    "kind":"constant",
    "value":9,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_ANCIENT"
  },{
    "kind":"constant",
    "value":22,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_ATTACK_IMMUNE"
  },{
    "kind":"constant",
    "value":6,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_BUILDING"
  },{
    "kind":"constant",
    "value":4,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_CONSIDERED_HERO"
  },{
    "kind":"constant",
    "value":7,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_COURIER"
  },{
    "kind":"constant",
    "value":5,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_CREEP"
  },{
    "kind":"constant",
    "value":23,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_CUSTOM"
  },{
    "kind":"constant",
    "value":15,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_DEAD"
  },{
    "kind":"constant",
    "value":25,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_DISABLE_HELP"
  },{
    "kind":"constant",
    "value":12,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_DOMINATED"
  },{
    "kind":"constant",
    "value":2,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_ENEMY"
  },{
    "kind":"constant",
    "value":1,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_FRIENDLY"
  },{
    "kind":"constant",
    "value":3,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_HERO"
  },{
    "kind":"constant",
    "value":10,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_ILLUSION"
  },{
    "kind":"constant",
    "value":24,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_INVALID_LOCATION"
  },{
    "kind":"constant",
    "value":20,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_INVISIBLE"
  },{
    "kind":"constant",
    "value":18,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_INVULNERABLE"
  },{
    "kind":"constant",
    "value":19,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_IN_FOW"
  },{
    "kind":"constant",
    "value":16,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_MAGIC_IMMUNE_ALLY"
  },{
    "kind":"constant",
    "value":17,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_MAGIC_IMMUNE_ENEMY"
  },{
    "kind":"constant",
    "value":13,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_MELEE"
  },{
    "kind":"constant",
    "value":27,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_NIGHTMARED"
  },{
    "kind":"constant",
    "value":21,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_NOT_PLAYER_CONTROLLED"
  },{
    "kind":"constant",
    "value":28,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_OBSTRUCTED"
  },{
    "kind":"constant",
    "value":8,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_OTHER"
  },{
    "kind":"constant",
    "value":26,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_OUT_OF_WORLD"
  },{
    "kind":"constant",
    "value":14,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_RANGED"
  },{
    "kind":"constant",
    "value":11,
    "enum":"UnitFilterResult",
    "name":"UF_FAIL_SUMMONED"
  },{
    "kind":"constant",
    "value":0,
    "enum":"UnitFilterResult",
    "name":"UF_SUCCESS"
  },{
    "kind":"constant",
    "value":13,
    "name":"__UNKNOWN__"
  },{
    "kind":"constant",
    "value":1778,
    "name":"muerta_debut_satyr_a"
  },{
    "kind":"constant",
    "value":1779,
    "name":"muerta_debut_satyr_b"
  },{
    "kind":"constant",
    "value":1780,
    "name":"muerta_debut_satyr_c"
  },{
    "kind":"constant",
    "value":1767,
    "name":"radiant_melee_mars_shieldbash"
  },{
    "kind":"class",
    "members":[],
    "extend":"C_BaseModelEntity",
    "name":"CBaseAnimGraph"
  },{
    "kind":"class",
    "members":[],
    "extend":"C_BaseModelEntity",
    "name":"CBaseAnimatingActivity"
  },{
    "kind":"class",
    "name":"CBodyComponent",
    "members":[{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"AddImpulseAtPosition",
        "description":"Apply an impulse at a worldspace position to the physics"
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"AddVelocity",
        "description":"Add linear and angular velocity to the physics object"
      },{
        "returns":"void",
        "args":[],
        "name":"DetachFromParent",
        "description":"Detach from its parent"
      },{
        "returns":"int",
        "args":[],
        "name":"GetSequence",
        "description":"Returns the active sequence\n"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsAttachedToParent",
        "description":"Is attached to parent"
      },{
        "returns":"int",
        "args":[{
            "type":"string"
          }],
        "name":"LookupSequence",
        "description":"Returns a sequence id given a name\n"
      },{
        "returns":"float",
        "args":[{
            "type":"string"
          }],
        "name":"SequenceDuration",
        "description":"Returns the duration in seconds of the specified sequence"
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          }],
        "name":"SetAngularVelocity"
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          }],
        "name":"SetAnimation",
        "description":"Pass string for the animation to play on this model"
      },{
        "returns":"void",
        "args":[{
            "type":"utlstringtoken"
          }],
        "name":"SetMaterialGroup"
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          }],
        "name":"SetVelocity"
      }]
  },{
    "instance":"CustomNetTables",
    "kind":"class",
    "name":"CCustomNetTableManager",
    "members":[{
        "returns":"table",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"GetTableValue",
        "description":"( string TableName, string KeyName )"
      }]
  },{
    "instance":"DOTAGameManager",
    "kind":"class",
    "name":"CDOTAGameManager",
    "members":[{
        "returns":"table",
        "args":[{
            "type":"string"
          }],
        "name":"GetHeroDataByName_Script",
        "description":"Get the hero unit "
      },{
        "returns":"int",
        "args":[{
            "type":"string"
          }],
        "name":"GetHeroIDByName",
        "description":"Get the hero ID given the hero name."
      },{
        "returns":"string",
        "args":[{
            "type":"int"
          }],
        "name":"GetHeroNameByID",
        "description":"Get the hero name given a hero ID."
      },{
        "returns":"string",
        "args":[{
            "type":"string"
          }],
        "name":"GetHeroNameForUnitName",
        "description":"Get the hero name given a unit name."
      },{
        "returns":"string",
        "args":[{
            "type":"int"
          }],
        "name":"GetHeroUnitNameByID",
        "description":"Get the hero unit name given the hero ID."
      }]
  },{
    "instance":"GameRules",
    "kind":"class",
    "name":"CDOTAGameRules",
    "members":[{
        "returns":"table",
        "args":[],
        "name":"GetBannedHeroIDs",
        "description":"Returns the hero unit IDs banned in this game, if any"
      },{
        "returns":"table",
        "args":[],
        "name":"GetBannedHeroes",
        "description":"Returns the hero unit names banned in this game, if any"
      },{
        "returns":"int",
        "args":[],
        "name":"GetCustomGameDifficulty",
        "description":"Returns the difficulty level of the custom game mode"
      },{
        "returns":"float",
        "args":[{
            "type":"bool"
          },{
            "type":"bool"
          }],
        "name":"GetDOTATime",
        "description":"(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time."
      },{
        "returns":"int",
        "args":[],
        "name":"GetDifficulty",
        "description":"Returns difficulty level of the custom game mode"
      },{
        "returns":"float",
        "args":[],
        "name":"GetGameFrameTime",
        "description":"Returns the number of seconds elapsed since the last frame was renderered. This time doesn't count up when the game is paused"
      },{
        "returns":"float",
        "args":[],
        "name":"GetGameTime",
        "description":"Returns the number of seconds elapsed since map start. This time doesn't count up when the game is paused"
      },{
        "returns":"float",
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"GetIetmStockDuration",
        "description":"Get the time it takes to add a new item to stock"
      },{
        "returns":"int",
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"GetItemStockCount",
        "description":"Get the stock count of the item"
      },{
        "returns":"float",
        "args":[{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"GetItemStockTime",
        "description":"Get the time an item will be added to stock"
      },{
        "returns":"float",
        "args":[],
        "name":"GetNeutralInitialSpawnOffset",
        "description":"Gets the extra offset to initial neutral creep spawn delay"
      },{
        "returns":"Vector",
        "args":[],
        "name":"GetWeatherWindDirection",
        "description":"Get Weather Wind Direction Vector"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsCheatMode",
        "description":"Are cheats enabled on the server"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsDev"
      },{
        "returns":"bool",
        "args":[{
            "type":"string"
          }],
        "name":"IsHeroEnabledViaLists",
        "description":"Is the hero not blacklisted, and is it either whitelisted or the whitelist is empty?"
      },{
        "returns":"bool",
        "args":[],
        "name":"ShouldHideBlacklistedHeroes",
        "description":"Are blacklisted heroes hidden, or just dimmed, in hero picking?"
      },{
        "returns":"int",
        "args":[],
        "name":"State_Get",
        "description":"Get the current Gamerules state"
      }]
  },{
    "kind":"class",
    "name":"CDOTA_Buff",
    "members":[{
        "returns":"void",
        "args":[{
            "name":"i",
            "type":"int"
          },{
            "name":"bDestroyImmediately",
            "type":"bool"
          },{
            "name":"bStatusEffect",
            "type":"bool"
          },{
            "name":"iPriority",
            "type":"int"
          },{
            "name":"bHeroEffect",
            "type":"bool"
          },{
            "name":"bOverheadEffect",
            "type":"bool"
          }],
        "name":"AddParticle",
        "description":"(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect"
      },{
        "returns":"void",
        "args":[{
            "name":"table",
            "type":"handle"
          }],
        "name":"CheckStateToTable"
      },{
        "returns":"void",
        "args":[],
        "name":"DecrementStackCount",
        "description":"Decrease this modifier's stack count by 1."
      },{
        "returns":"void",
        "args":[],
        "name":"Destroy",
        "description":"Run all associated destroy functions, then remove the modifier."
      },{
        "returns":"bool",
        "args":[],
        "name":"DestroyOnExpire"
      },{
        "returns":"void",
        "args":[],
        "name":"ForceRefresh",
        "description":"Run all associated refresh functions on this modifier as if it was re-applied."
      },{
        "returns":"handle",
        "args":[],
        "name":"GetAbility",
        "description":"Get the ability that generated the modifier."
      },{
        "returns":"float",
        "args":[],
        "name":"GetAuraDuration",
        "description":"Returns aura stickiness (default 0.5)"
      },{
        "returns":"handle",
        "args":[],
        "name":"GetAuraOwner"
      },{
        "returns":"handle",
        "args":[],
        "name":"GetCaster",
        "description":"Get the owner of the ability responsible for the modifier."
      },{
        "returns":"string",
        "args":[],
        "name":"GetClass"
      },{
        "returns":"float",
        "args":[],
        "name":"GetCreationTime"
      },{
        "returns":"float",
        "args":[],
        "name":"GetDieTime"
      },{
        "returns":"float",
        "args":[],
        "name":"GetDuration"
      },{
        "returns":"float",
        "args":[],
        "name":"GetElapsedTime"
      },{
        "returns":"float",
        "args":[],
        "name":"GetLastAppliedTime"
      },{
        "returns":"string",
        "args":[],
        "name":"GetName"
      },{
        "returns":"handle",
        "args":[],
        "name":"GetParent",
        "description":"Get the unit the modifier is parented to."
      },{
        "returns":"float",
        "args":[],
        "name":"GetRemainingTime"
      },{
        "returns":"int",
        "args":[],
        "name":"GetSerialNumber"
      },{
        "returns":"int",
        "args":[],
        "name":"GetStackCount"
      },{
        "returns":"bool",
        "args":[{
            "name":"iFunction",
            "type":"int"
          }],
        "name":"HasFunction"
      },{
        "returns":"void",
        "args":[],
        "name":"IncrementStackCount",
        "description":"Increase this modifier's stack count by 1."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsDebuff"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsHexDebuff"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsStunDebuff"
      },{
        "returns":"void",
        "args":[{
            "name":"flDuration",
            "type":"float"
          },{
            "name":"bInformClient",
            "type":"bool"
          }],
        "name":"SetDuration",
        "description":"(flTime, bInformClients)"
      },{
        "returns":"bool",
        "args":[{
            "name":"flOffset",
            "type":"float"
          }],
        "name":"SetOverheadEffectOffset"
      },{
        "returns":"void",
        "args":[{
            "name":"iCount",
            "type":"int"
          }],
        "name":"SetStackCount"
      },{
        "returns":"void",
        "args":[{
            "name":"flInterval",
            "type":"float"
          }],
        "name":"StartIntervalThink",
        "description":"Start this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1."
      }]
  },{
    "kind":"class",
    "members":[{
        "returns":"bool",
        "args":[],
        "name":"AllowIllusionDuplicate",
        "description":"True/false if this modifier is active on illusions."
      },{
        "returns":"bool",
        "args":[],
        "name":"CanParentBeAutoAttacked"
      },{
        "returns":"bool",
        "args":[],
        "name":"DestroyOnExpire",
        "description":"True/false if this buff is removed when the duration expires."
      },{
        "returns":"int",
        "args":[],
        "name":"GetAttributes",
        "description":"Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t"
      },{
        "returns":"float",
        "args":[],
        "name":"GetAuraDuration",
        "description":"Returns aura stickiness"
      },{
        "returns":"bool",
        "args":[{
            "name":"hEntity",
            "type":"handle"
          }],
        "name":"GetAuraEntityReject",
        "description":"Return true/false if this entity should receive the aura under specific conditions"
      },{
        "returns":"int",
        "args":[],
        "name":"GetAuraRadius",
        "description":"Return the range around the parent this aura tries to apply its buff."
      },{
        "returns":"int",
        "args":[],
        "name":"GetAuraSearchFlags",
        "description":"Return the unit flags this aura respects when placing buffs."
      },{
        "returns":"int",
        "args":[],
        "name":"GetAuraSearchTeam",
        "description":"Return the teams this aura applies its buff to."
      },{
        "returns":"int",
        "args":[],
        "name":"GetAuraSearchType",
        "description":"Return the unit classifications this aura applies its buff to."
      },{
        "returns":"float",
        "args":[],
        "name":"GetCritDamage",
        "description":"A Modifier that listens to MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE has to have a GetCritDamage implementation so we can know when to evaluate it. Value should be in 'times the original value format' e.g: 1.5 not 150"
      },{
        "returns":"int",
        "args":[],
        "name":"GetEffectAttachType",
        "description":"Return the attach type of the particle system from GetEffectName."
      },{
        "returns":"string",
        "args":[],
        "name":"GetEffectName",
        "description":"Return the name of the particle system that is created while this modifier is active."
      },{
        "returns":"string",
        "args":[],
        "name":"GetHeroEffectName",
        "description":"Return the name of the hero effect particle system that is created while this modifier is active."
      },{
        "returns":"string",
        "args":[],
        "name":"GetModifierAura",
        "description":"The name of the secondary modifier that will be applied by this modifier (if it is an aura)."
      },{
        "returns":"int",
        "args":[],
        "name":"GetPriority",
        "description":"Return the priority order this modifier will be applied over others."
      },{
        "returns":"string",
        "args":[],
        "name":"GetStatusEffectName",
        "description":"Return the name of the status effect particle system that is created while this modifier is active."
      },{
        "returns":"string",
        "args":[],
        "name":"GetTexture",
        "description":"Return the name of the buff icon to be shown for this modifier."
      },{
        "returns":"int",
        "args":[],
        "name":"HeroEffectPriority",
        "description":"Relationship of this hero effect with those from other buffs (higher is more likely to be shown)."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsAura",
        "description":"True/false if this modifier is an aura."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsAuraActiveOnDeath",
        "description":"True/false if this aura provides buffs when the parent is dead."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsDebuff",
        "description":"True/false if this modifier should be displayed as a debuff."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsHidden",
        "description":"True/false if this modifier should be displayed on the buff bar."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsPermanent"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsPurgable",
        "description":"True/false if this modifier can be purged."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsPurgeException",
        "description":"True/false if this modifier can be purged by strong dispels."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsStunDebuff",
        "description":"True/false if this modifier is considered a stun for purge reasons."
      },{
        "returns":"void",
        "args":[{
            "name":"table",
            "type":"handle"
          }],
        "name":"OnCreated",
        "description":"Runs when the modifier is created."
      },{
        "returns":"void",
        "args":[],
        "name":"OnDestroy",
        "description":"Runs when the modifier is destroyed (after unit loses modifier)."
      },{
        "returns":"void",
        "args":[],
        "name":"OnIntervalThink",
        "description":"Runs when the think interval occurs."
      },{
        "returns":"void",
        "args":[{
            "name":"table",
            "type":"handle"
          }],
        "name":"OnRefresh",
        "description":"Runs when the modifier is refreshed."
      },{
        "returns":"void",
        "args":[],
        "name":"OnRemoved",
        "description":"Runs when the modifier is destroyed (before unit loses modifier)."
      },{
        "returns":"void",
        "args":[{
            "name":"iStackCount",
            "type":"int"
          }],
        "name":"OnStackCountChanged",
        "description":"Runs when stack count changes (param is old count)."
      },{
        "returns":"bool",
        "args":[],
        "name":"RemoveOnDeath",
        "description":"True/false if this modifier is removed when the parent dies."
      },{
        "returns":"void",
        "args":[{
            "name":"bHasCustomData",
            "type":"bool"
          }],
        "name":"SetHasCustomTransmitterData"
      },{
        "returns":"bool",
        "args":[],
        "name":"ShouldUseOverheadOffset",
        "description":"Apply the overhead offset to the attached effect."
      },{
        "returns":"int",
        "args":[],
        "name":"StatusEffectPriority",
        "description":"Relationship of this status effect with those from other buffs (higher is more likely to be shown)."
      }],
    "extend":"CDOTA_Buff",
    "name":"CDOTA_Modifier_Lua"
  },{
    "kind":"class",
    "members":[],
    "extend":"CDOTA_Modifier_Lua",
    "name":"CDOTA_Modifier_Lua_Horizontal_Motion"
  },{
    "kind":"class",
    "members":[],
    "extend":"CDOTA_Modifier_Lua",
    "name":"CDOTA_Modifier_Lua_Motion_Both"
  },{
    "kind":"class",
    "members":[],
    "extend":"CDOTA_Modifier_Lua",
    "name":"CDOTA_Modifier_Lua_Vertical_Motion"
  },{
    "instance":"debugoverlay",
    "kind":"class",
    "name":"CDebugOverlayScriptHelper",
    "members":[{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"float"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Axis",
        "description":"Draws an axis. Specify origin + orientation in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Box",
        "description":"Draws a world-space axis-aligned box. Specify bounds in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"BoxAngles",
        "description":"Draws an oriented box at the origin. Specify bounds in local space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Capsule",
        "description":"Draws a capsule. Specify base in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Circle",
        "description":"Draws a circle. Specify center in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"CircleScreenOriented",
        "description":"Draws a circle oriented to the screen. Specify center in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Cone",
        "description":"Draws a wireframe cone. Specify endpoint and direction in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Cross",
        "description":"Draws a screen-aligned cross. Specify origin in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Cross3D",
        "description":"Draws a world-aligned cross. Specify origin in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Cross3DOriented",
        "description":"Draws an oriented cross. Specify origin in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"DrawTickMarkedLine",
        "description":"Draws a dashed line. Specify endpoints in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          },{
            "type":"float"
          }],
        "name":"EntityAttachments",
        "description":"Draws the attachments of the entity"
      },{
        "returns":"void",
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"EntityAxis",
        "description":"Draws the axis of the entity origin"
      },{
        "returns":"void",
        "args":[{
            "type":"ehandle"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"EntityBounds",
        "description":"Draws bounds of an entity"
      },{
        "returns":"void",
        "args":[{
            "type":"ehandle"
          },{
            "type":"float"
          }],
        "name":"EntitySkeleton",
        "description":"Draws the skeleton of the entity"
      },{
        "returns":"void",
        "args":[{
            "type":"ehandle"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"EntityText",
        "description":"Draws text on an entity"
      },{
        "returns":"void",
        "args":[{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"FilledRect2D",
        "description":"Draws a screen-space filled 2D rectangle. Coordinates are in pixels."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"HorzArrow",
        "description":"Draws a horizontal arrow. Specify endpoints in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Line",
        "description":"Draws a line between two points"
      },{
        "returns":"void",
        "args":[{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"Line2D",
        "description":"Draws a line between two points in screenspace"
      },{
        "returns":"void",
        "args":[],
        "name":"PopDebugOverlayScope",
        "description":"Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
      },{
        "returns":"void",
        "args":[{
            "type":"utlstringtoken"
          }],
        "name":"PushAndClearDebugOverlayScope",
        "description":"Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id."
      },{
        "returns":"void",
        "args":[{
            "type":"utlstringtoken"
          }],
        "name":"PushDebugOverlayScope",
        "description":"Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
      },{
        "returns":"void",
        "args":[{
            "type":"utlstringtoken"
          }],
        "name":"RemoveAllInScope",
        "description":"Removes all overlays marked with a specific identifier, regardless of their lifetime."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"SolidCone",
        "description":"Draws a solid cone. Specify endpoint and direction in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Sphere",
        "description":"Draws a wireframe sphere. Specify center in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"SweptBox",
        "description":"Draws a swept box. Specify endpoints in world space and the bounds in local space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"Text",
        "description":"Draws 2D text. Specify origin in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector2D"
          },{
            "type":"Vector2D"
          },{
            "type":"float"
          }],
        "name":"Texture",
        "description":"Draws a screen-space texture. Coordinates are in pixels."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"Triangle",
        "description":"Draws a filled triangle. Specify vertices in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"<unknown>"
          },{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"VectorText3D",
        "description":"Draws 3D text. Specify origin + orientation in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"VertArrow",
        "description":"Draws a vertical arrow. Specify endpoints in world space."
      },{
        "returns":"void",
        "args":[{
            "type":"Vector"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"float"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"bool"
          },{
            "type":"float"
          }],
        "name":"YawArrow",
        "description":"Draws a arrow associated with a specific yaw. Specify endpoints in world space."
      }]
  },{
    "instance":"Entities",
    "kind":"class",
    "name":"CEntities",
    "members":[{
        "returns":"handle",
        "args":[],
        "name":"First",
        "description":"Begin an iteration over the list of entities"
      },{
        "returns":"handle",
        "args":[],
        "name":"GetLocalPlayer",
        "description":"Get the local player controller (backcompat)."
      },{
        "returns":"handle",
        "args":[],
        "name":"GetLocalPlayerController",
        "description":"Get the local player controller."
      },{
        "returns":"handle",
        "args":[],
        "name":"GetLocalPlayerPawn",
        "description":"Get the local player pawn."
      },{
        "returns":"handle",
        "args":[{
            "type":"handle"
          }],
        "name":"Next",
        "description":"Continue an iteration over the list of entities, providing reference to a previously found entity"
      }]
  },{
    "kind":"class",
    "name":"CEntityInstance",
    "members":[{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"ConnectOutput",
        "description":"Adds an I/O connection that will call the named function on this entity when the specified output fires."
      },{
        "returns":"void",
        "args":[],
        "name":"Destroy"
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"DisconnectOutput",
        "description":"Removes a connected script function from an I/O event on this entity."
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"DisconnectRedirectedOutput",
        "description":"Removes a connected script function from an I/O event on the passed entity."
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          },{
            "type":"handle"
          },{
            "type":"table"
          },{
            "type":"float"
          }],
        "name":"FireOutput",
        "description":"Fire an entity output"
      },{
        "returns":"string",
        "args":[],
        "name":"GetClassname"
      },{
        "returns":"string",
        "args":[],
        "name":"GetDebugName",
        "description":"Get the entity name w/help if not defined (i.e. classname/etc)"
      },{
        "returns":"ehandle",
        "args":[],
        "name":"GetEntityHandle",
        "description":"Get the entity as an EHANDLE"
      },{
        "returns":"int",
        "args":[],
        "name":"GetEntityIndex"
      },{
        "returns":"int",
        "args":[{
            "type":"string"
          }],
        "name":"GetIntAttr",
        "description":"Get Integer Attribute"
      },{
        "returns":"string",
        "args":[],
        "name":"GetName"
      },{
        "returns":"handle",
        "args":[],
        "name":"GetOrCreatePrivateScriptScope",
        "description":"Retrieve, creating if necessary, the private per-instance script-side data associated with an entity"
      },{
        "returns":"handle",
        "args":[],
        "name":"GetOrCreatePublicScriptScope",
        "description":"Retrieve, creating if necessary, the public script-side data associated with an entity"
      },{
        "returns":"handle",
        "args":[],
        "name":"GetPrivateScriptScope",
        "description":"Retrieve the private per-instance script-side data associated with an entity"
      },{
        "returns":"handle",
        "args":[],
        "name":"GetPublicScriptScope",
        "description":"Retrieve the public script-side data associated with an entity"
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"RedirectOutput",
        "description":"Adds an I/O connection that will call the named function on the passed entity when the specified output fires."
      },{
        "returns":"void",
        "args":[],
        "name":"RemoveSelf",
        "description":"Delete this entity"
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"SetIntAttr",
        "description":"Set Integer Attribute"
      },{
        "returns":"int",
        "args":[],
        "name":"entindex"
      }]
  },{
    "instance":"NativeFunctions",
    "kind":"class",
    "name":"CEntityScriptFramework",
    "members":[]
  },{
    "kind":"class",
    "members":[{
        "returns":"void",
        "args":[],
        "name":"HideWorldLayer",
        "description":"Hides this layer"
      },{
        "returns":"void",
        "args":[],
        "name":"ShowWorldLayer",
        "description":"Shows this layer"
      }],
    "extend":"C_BaseEntity",
    "name":"CInfoWorldLayer"
  },{
    "kind":"class",
    "members":[{
        "returns":"void",
        "args":[{
            "name":"hActivator",
            "type":"handle"
          },{
            "name":"hCaller",
            "type":"handle"
          }],
        "name":"Trigger",
        "description":"Trigger( hActivator, hCaller ) : Triggers the logic_relay"
      }],
    "extend":"C_BaseEntity",
    "name":"CLogicRelay"
  },{
    "kind":"class",
    "name":"CNativeOutputs",
    "members":[{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"AddOutput",
        "description":"Add an output"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          }],
        "name":"Init",
        "description":"Initialize with number of outputs"
      }]
  },{
    "kind":"class",
    "members":[{
        "returns":"void",
        "args":[],
        "name":"DeleteCreatedSpawnGroups",
        "description":"DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this."
      },{
        "returns":"void",
        "args":[],
        "name":"ForceSpawn",
        "description":"ForceSpawn() : Spawns all of the entities the point_template is pointing at."
      },{
        "returns":"handle",
        "args":[],
        "name":"GetSpawnedEntities",
        "description":"GetSpawnedEntities() : Get the list of the most recent spawned entities"
      },{
        "returns":"void",
        "args":[{
            "name":"hCallbackFunc",
            "type":"handle"
          },{
            "name":"hCallbackScope",
            "type":"handle"
          }],
        "name":"SetSpawnCallback",
        "description":"SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array."
      }],
    "extend":"C_BaseEntity",
    "name":"CPointTemplate"
  },{
    "kind":"class",
    "name":"CScriptHTTPRequest",
    "members":[{
        "returns":"bool",
        "args":[{
            "type":"handle"
          }],
        "name":"Send",
        "description":"Send a HTTP request."
      },{
        "returns":"bool",
        "args":[{
            "type":"unsigned"
          }],
        "name":"SetHTTPRequestAbsoluteTimeoutMS",
        "description":"Set the total timeout on the request."
      },{
        "returns":"bool",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"SetHTTPRequestGetOrPostParameter",
        "description":"Set a POST or GET parameter on the request."
      },{
        "returns":"bool",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"SetHTTPRequestHeaderValue",
        "description":"Set a header value on the request."
      },{
        "returns":"bool",
        "args":[{
            "type":"unsigned"
          }],
        "name":"SetHTTPRequestNetworkActivityTimeout",
        "description":"Set the network timeout on the request - this timer is reset when any data is received."
      },{
        "returns":"bool",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"SetHTTPRequestRawPostBody",
        "description":"Set the literal body of a post - invalid after setting a post parameter."
      }]
  },{
    "kind":"class",
    "name":"CScriptKeyValues",
    "members":[{
        "returns":"table",
        "args":[{
            "type":"string"
          }],
        "name":"GetValue",
        "description":"Reads a spawn key"
      }]
  },{
    "instance":"ParticleManager",
    "kind":"class",
    "name":"CScriptParticleManager",
    "members":[{
        "returns":"int",
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          }],
        "name":"CreateParticle",
        "description":"Creates a new particle effect"
      },{
        "returns":"int",
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"handle"
          }],
        "name":"CreateParticleForPlayer",
        "description":"Creates a new particle effect that only plays for the specified player"
      },{
        "returns":"int",
        "args":[{
            "type":"string"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"int"
          }],
        "name":"CreateParticleForTeam",
        "description":"Creates a new particle effect that only plays for the specified team"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          },{
            "type":"bool"
          }],
        "name":"DestroyParticle",
        "description":"(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps."
      },{
        "returns":"string",
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          }],
        "name":"GetParticleReplacement"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          }],
        "name":"ReleaseParticleIndex",
        "description":"Frees the specified particle index"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          }],
        "name":"SetParticleAlwaysSimulate"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControl",
        "description":"Set the control point data for a control on a particle effect"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"handle"
          },{
            "type":"int"
          },{
            "type":"string"
          },{
            "type":"Vector"
          },{
            "type":"bool"
          }],
        "name":"SetParticleControlEnt"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControlFallback",
        "description":"(int iIndex, int iPoint, Vector vecPosition)"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControlForward",
        "description":"[OBSOLETE - Use SetParticleControlTransformForward] (int nFXIndex, int nPoint, vForward)"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControlOrientation",
        "description":"[OBSOLETE - Use SetParticleControlTransform] (int nFXIndex, int nPoint, vForward, vRight, vUp) - Set the orientation for a control on a particle effect (NOTE: This is left handed -- bad!!)"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControlOrientationFLU",
        "description":"[OBSOLETE - Use SetParticleControlTransform] (int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"QAngle"
          }],
        "name":"SetParticleControlTransform",
        "description":"(int nFXIndex, int nPoint, vOrigin, qAngles)"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"Vector"
          },{
            "type":"Vector"
          }],
        "name":"SetParticleControlTransformForward",
        "description":"(int nFXIndex, int nPoint, vOrigin, vForward)"
      },{
        "returns":"void",
        "args":[{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"int"
          },{
            "type":"float"
          }],
        "name":"SetParticleFoWProperties",
        "description":"int nfxindex, int nPoint, int nPoint2, float flRadius"
      },{
        "returns":"bool",
        "args":[{
            "type":"int"
          },{
            "type":"bool"
          }],
        "name":"SetParticleShouldCheckFoW",
        "description":"int nfxindex, bool bCheckFoW"
      }]
  },{
    "kind":"class",
    "name":"CScriptPrecacheContext",
    "members":[{
        "returns":"void",
        "args":[{
            "type":"string"
          }],
        "name":"AddResource",
        "description":"Precaches a specific resource"
      },{
        "returns":"table",
        "args":[{
            "type":"string"
          }],
        "name":"GetValue",
        "description":"Reads a spawn key"
      }]
  },{
    "kind":"class",
    "name":"CScriptUniformRandomStream",
    "members":[{
        "returns":"float",
        "args":[{
            "name":"flMinVal",
            "type":"float"
          },{
            "name":"flMaxVal",
            "type":"float"
          }],
        "name":"RandomFloat"
      },{
        "returns":"float",
        "args":[{
            "name":"flMinVal",
            "type":"float"
          },{
            "name":"flMaxVal",
            "type":"float"
          },{
            "name":"flExponent",
            "type":"float"
          }],
        "name":"RandomFloatExp"
      },{
        "returns":"int",
        "args":[{
            "name":"iMinVal",
            "type":"int"
          },{
            "name":"iMaxVal",
            "type":"int"
          }],
        "name":"RandomInt"
      },{
        "returns":"bool",
        "args":[{
            "name":"iPercentage",
            "type":"int"
          }],
        "name":"RollPercentage"
      }]
  },{
    "kind":"class",
    "members":[],
    "extend":"C_BaseFlex",
    "name":"C_BaseCombatCharacter"
  },{
    "kind":"class",
    "members":[{
        "returns":"Vector",
        "args":[],
        "name":"GetAbsOrigin"
      },{
        "returns":"int",
        "args":[],
        "name":"GetHealth"
      },{
        "returns":"int",
        "args":[],
        "name":"GetMaxHealth"
      },{
        "returns":"int",
        "args":[],
        "name":"GetTeamNumber"
      },{
        "returns":"void",
        "args":[{
            "name":"pszContextName",
            "type":"string"
          },{
            "name":"hThinkFunc",
            "type":"handle"
          },{
            "name":"flInterval",
            "type":"float"
          }],
        "name":"SetContextThink",
        "description":"Set a think function on this entity."
      }],
    "extend":"CEntityInstance",
    "name":"C_BaseEntity"
  },{
    "kind":"class",
    "members":[],
    "extend":"CBaseAnimatingActivity",
    "name":"C_BaseFlex"
  },{
    "kind":"class",
    "members":[{
        "returns":"int",
        "args":[],
        "name":"GetRenderAlpha",
        "description":"GetRenderAlpha(): Get the alpha modulation of this entity."
      }],
    "extend":"C_BaseEntity",
    "name":"C_BaseModelEntity"
  },{
    "kind":"class",
    "members":[{
        "returns":"string",
        "args":[],
        "name":"GetAbilityName",
        "description":"Name of this ability."
      },{
        "returns":"double",
        "args":[],
        "name":"GetBehavior"
      },{
        "returns":"int",
        "args":[],
        "name":"GetBehaviorInt",
        "description":"Get ability behavior flags as an int for compatibility."
      },{
        "returns":"float",
        "args":[],
        "name":"GetCastPointModifier"
      },{
        "returns":"handle",
        "args":[],
        "name":"GetCaster",
        "description":"Get the owner of this ability."
      },{
        "returns":"int",
        "args":[],
        "name":"GetCurrentAbilityCharges",
        "description":"The number of charges remaining on this ability."
      },{
        "returns":"int",
        "args":[],
        "name":"GetLevel",
        "description":"Return the level of the ability"
      },{
        "returns":"table",
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"nLevel",
            "type":"int"
          }],
        "name":"GetLevelSpecialValueFor",
        "description":"Gets a value from this ability's special value block for passed level."
      },{
        "returns":"table",
        "args":[{
            "name":"szName",
            "type":"string"
          },{
            "name":"nLevel",
            "type":"int"
          }],
        "name":"GetLevelSpecialValueNoOverride"
      },{
        "returns":"table",
        "args":[{
            "name":"szName",
            "type":"string"
          }],
        "name":"GetSpecialValueFor",
        "description":"Gets a value from this ability's special value block for its current level."
      },{
        "returns":"bool",
        "args":[],
        "name":"GetToggleState",
        "description":"Whether or not this ability is toggled."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsItem",
        "description":"Whether or not this ability is an item."
      }],
    "extend":"C_BaseEntity",
    "name":"C_DOTABaseAbility"
  },{
    "kind":"class",
    "members":[{
        "returns":"handle",
        "args":[],
        "name":"GetActiveAbility"
      },{
        "returns":"<unknown>",
        "args":[],
        "name":"GetClickBehaviors"
      },{
        "returns":"handle",
        "args":[],
        "name":"GetQueryUnit"
      },{
        "returns":"bool",
        "args":[],
        "name":"ShouldDisplayInWorldUIElements"
      }],
    "extend":"C_BaseEntity",
    "name":"C_DOTAPlayerController"
  },{
    "kind":"class",
    "members":[{
        "returns":"int",
        "args":[],
        "name":"CastFilterResult",
        "description":"Determine whether an issued command with no target is valid."
      },{
        "returns":"int",
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "name":"CastFilterResultLocation",
        "description":"(Vector vLocation) Determine whether an issued command on a location is valid."
      },{
        "returns":"int",
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "name":"CastFilterResultTarget",
        "description":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
      },{
        "returns":"float",
        "args":[],
        "name":"GetAOERadius",
        "description":"Controls the size of the AOE casting cursor."
      },{
        "returns":"float",
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "name":"GetAbilityChargeRestoreTime"
      },{
        "returns":"string",
        "args":[],
        "name":"GetAbilityTextureName",
        "description":"Allows code overriding of the ability texture shown in the HUD."
      },{
        "returns":"uint64",
        "args":[],
        "name":"GetBehavior",
        "description":"Return cast behavior type of this ability."
      },{
        "returns":"float",
        "args":[],
        "name":"GetCastPoint",
        "description":"Return cast point of this ability."
      },{
        "returns":"int",
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "name":"GetCastRange",
        "description":"Return cast range of this ability."
      },{
        "returns":"int",
        "args":[{
            "name":"hTarget",
            "type":"handle"
          },{
            "name":"iPseudoCastRange",
            "type":"int"
          }],
        "name":"GetCastRangeBonus"
      },{
        "returns":"float",
        "args":[],
        "name":"GetChannelStartTime",
        "description":"Return the channel start time of this ability."
      },{
        "returns":"float",
        "args":[],
        "name":"GetChannelTime",
        "description":"Return the channel time of this ability."
      },{
        "returns":"int",
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "name":"GetChannelledManaCostPerSecond",
        "description":"Return mana cost at the given level per second while channeling (-1 is current)."
      },{
        "returns":"float",
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "name":"GetCooldown",
        "description":"Return cooldown of this ability."
      },{
        "returns":"string",
        "args":[],
        "name":"GetCustomCastError",
        "description":"Return the error string of a failed command with no target."
      },{
        "returns":"string",
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "name":"GetCustomCastErrorLocation",
        "description":"(Vector vLocation) Return the error string of a failed command on a location."
      },{
        "returns":"string",
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "name":"GetCustomCastErrorTarget",
        "description":"(HSCRIPT hTarget) Return the error string of a failed command on a target."
      },{
        "returns":"string",
        "args":[{
            "name":"nReason",
            "type":"int"
          }],
        "name":"GetCustomHudErrorMessage",
        "description":"(DOTA_INVALID_ORDERS nReason) Return the error string of a failed order."
      },{
        "returns":"int",
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "name":"GetEffectiveCastRange",
        "description":"Return cast range of this ability, accounting for modifiers."
      },{
        "returns":"int",
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "name":"GetGoldCost",
        "description":"Return gold cost at the given level (-1 is current)."
      },{
        "returns":"int",
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "name":"GetManaCost",
        "description":"Return mana cost at the given level (-1 is current)."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsAttributeBonus",
        "description":"Is this ability an Attribute Bonus."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsHiddenAbilityCastable",
        "description":"Returns true if this ability can be used when not on the action panel."
      }],
    "extend":"C_DOTABaseAbility",
    "name":"C_DOTA_Ability_Lua"
  },{
    "kind":"class",
    "members":[{
        "returns":"void",
        "args":[{
            "name":"nDoubles",
            "type":"int"
          }],
        "name":"SetNumDoubles",
        "description":"Sets the number of doubles to spawn."
      }],
    "extend":"C_DOTABaseAbility",
    "name":"C_DOTA_AghsFort_Ability_ArcWardenBoss_TempestDouble"
  },{
    "kind":"class",
    "members":[{
        "returns":"handle",
        "args":[{
            "name":"pAbilityName",
            "type":"string"
          }],
        "name":"FindAbilityByName",
        "description":"Retrieve an ability by name from the unit."
      },{
        "returns":"int",
        "args":[],
        "name":"GetAbilityCount"
      },{
        "returns":"float",
        "args":[],
        "name":"GetAttackSpeed"
      },{
        "returns":"float",
        "args":[],
        "name":"GetAttacksPerSecond"
      },{
        "returns":"float",
        "args":[],
        "name":"GetBaseAttackTime"
      },{
        "returns":"float",
        "args":[],
        "name":"GetBaseMagicalResistanceValue",
        "description":"Returns base magical armor value."
      },{
        "returns":"float",
        "args":[],
        "name":"GetBaseMoveSpeed"
      },{
        "returns":"float",
        "args":[],
        "name":"GetCastRangeBonus"
      },{
        "returns":"float",
        "args":[],
        "name":"GetCollisionPadding",
        "description":"Returns the size of the collision padding around the hull."
      },{
        "returns":"float",
        "args":[],
        "name":"GetCooldownReduction"
      },{
        "returns":"int",
        "args":[],
        "name":"GetCurrentVisionRange",
        "description":"Gets the current vision range."
      },{
        "returns":"int",
        "args":[],
        "name":"GetDamageMax"
      },{
        "returns":"int",
        "args":[],
        "name":"GetDamageMin"
      },{
        "returns":"int",
        "args":[],
        "name":"GetDayTimeVisionRange",
        "description":"Returns the vision range after modifiers."
      },{
        "returns":"float",
        "args":[],
        "name":"GetHasteFactor"
      },{
        "returns":"int",
        "args":[],
        "name":"GetHealthPercent",
        "description":"Get the current health percent of the unit."
      },{
        "returns":"float",
        "args":[],
        "name":"GetHullRadius",
        "description":"Get the collision hull radius of this NPC."
      },{
        "returns":"float",
        "args":[],
        "name":"GetIdealSpeed",
        "description":"Returns speed after all modifiers."
      },{
        "returns":"float",
        "args":[],
        "name":"GetIdealSpeedNoSlows",
        "description":"Returns speed after all modifiers, but excluding those that reduce speed."
      },{
        "returns":"float",
        "args":[],
        "name":"GetIncreasedAttackSpeed"
      },{
        "returns":"int",
        "args":[],
        "name":"GetLevel",
        "description":"Returns the level of this unit."
      },{
        "returns":"float",
        "args":[],
        "name":"GetMagicalArmorValue",
        "description":"Returns current magical armor value."
      },{
        "returns":"float",
        "args":[],
        "name":"GetMana",
        "description":"Get the mana on this unit."
      },{
        "returns":"float",
        "args":[],
        "name":"GetManaRegen"
      },{
        "returns":"float",
        "args":[],
        "name":"GetMaxMana",
        "description":"Get the maximum mana of this unit."
      },{
        "returns":"float",
        "args":[],
        "name":"GetModelRadius"
      },{
        "returns":"int",
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          },{
            "name":"hCaster",
            "type":"handle"
          }],
        "name":"GetModifierStackCount",
        "description":"Gets the stack count of a given modifier."
      },{
        "returns":"float",
        "args":[{
            "name":"flBaseSpeed",
            "type":"float"
          },{
            "name":"bReturnUnslowed",
            "type":"bool"
          }],
        "name":"GetMoveSpeedModifier"
      },{
        "returns":"int",
        "args":[],
        "name":"GetNightTimeVisionRange",
        "description":"Returns the vision range after modifiers."
      },{
        "returns":"int",
        "args":[],
        "name":"GetOpposingTeamNumber"
      },{
        "returns":"float",
        "args":[],
        "name":"GetPaddedCollisionRadius",
        "description":"Get the collision hull radius (including padding) of this NPC."
      },{
        "returns":"float",
        "args":[],
        "name":"GetPhysicalArmorBaseValue",
        "description":"Returns base physical armor value."
      },{
        "returns":"float",
        "args":[{
            "name":"bIgnoreBase",
            "type":"bool"
          }],
        "name":"GetPhysicalArmorValue",
        "description":"Returns current physical armor value."
      },{
        "returns":"int",
        "args":[],
        "name":"GetPlayerOwnerID",
        "description":"Get the owner player ID for this unit."
      },{
        "returns":"float",
        "args":[],
        "name":"GetSecondsPerAttack"
      },{
        "returns":"int",
        "args":[],
        "name":"GetTotalPurchasedUpgradeGoldCost",
        "description":"Get how much gold has been spent on ability upgrades."
      },{
        "returns":"string",
        "args":[],
        "name":"GetUnitLabel"
      },{
        "returns":"string",
        "args":[],
        "name":"GetUnitName",
        "description":"Get the name of this unit."
      },{
        "returns":"bool",
        "args":[],
        "name":"HasAttackCapability"
      },{
        "returns":"bool",
        "args":[],
        "name":"HasFlyMovementCapability"
      },{
        "returns":"bool",
        "args":[],
        "name":"HasFlyingVision"
      },{
        "returns":"bool",
        "args":[],
        "name":"HasGroundMovementCapability"
      },{
        "returns":"bool",
        "args":[{
            "name":"pItemName",
            "type":"string"
          }],
        "name":"HasItemInInventory",
        "description":"See whether this unit has an item by name."
      },{
        "returns":"bool",
        "args":[{
            "name":"pszScriptName",
            "type":"string"
          }],
        "name":"HasModifier",
        "description":"Sees if this unit has a given modifier."
      },{
        "returns":"bool",
        "args":[],
        "name":"HasMovementCapability"
      },{
        "returns":"bool",
        "args":[],
        "name":"HasScepter"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsAncient",
        "description":"Is this unit an Ancient?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsAttackImmune"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsBarracks",
        "description":"Is this unit a Barracks?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsBlind"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsBoss",
        "description":"Is this unit a boss?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsBuilding",
        "description":"Is this unit a building?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsCommandRestricted"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsConsideredHero",
        "description":"Is this unit a considered a hero for targeting purposes?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsControllableByAnyPlayer",
        "description":"Is this unit controlled by any non-bot player?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsCourier",
        "description":"Is this unit a courier?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsCreature",
        "description":"Is this a Creature type NPC?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsCreep",
        "description":"Is this unit a creep?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsCreepHero",
        "description":"Is this a creep hero?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsDisarmed"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsDominated"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsEvadeDisabled"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsFeared"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsFort",
        "description":"Is this unit an Ancient?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsFrozen"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsHero",
        "description":"Is this a hero or hero illusion?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsHexed"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsIllusion"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsInventoryEnabled",
        "description":"Does this unit have an inventory."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsInvisible"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsInvulnerable"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsLowAttackPriority"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsMagicImmune"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsMoving",
        "description":"Is this unit moving?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsMuted"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsNeutralUnitType",
        "description":"Is this a neutral?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsNightmared"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsOther",
        "description":"Is this unit a ward-type unit?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsOutOfGame"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsOwnedByAnyPlayer",
        "description":"Is this unit owned by any non-bot player?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsPhantom",
        "description":"Is this a phantom unit?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsRangedAttacker",
        "description":"Is this unit a ranged attacker?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsRealHero",
        "description":"Is this a real hero?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsRooted"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsSilenced"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsSpeciallyDeniable"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsSpeciallyUndeniable"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsStrongIllusion"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsStunned"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsSummoned",
        "description":"Is this unit summoned?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsTaunted"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsTower",
        "description":"Is this a tower?"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsUnselectable"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsUntargetable"
      },{
        "returns":"bool",
        "args":[],
        "name":"NoHealthBar"
      },{
        "returns":"bool",
        "args":[],
        "name":"NoTeamMoveTo"
      },{
        "returns":"bool",
        "args":[],
        "name":"NoTeamSelect"
      },{
        "returns":"bool",
        "args":[],
        "name":"NoUnitCollision"
      },{
        "returns":"bool",
        "args":[],
        "name":"NotOnMinimap"
      },{
        "returns":"bool",
        "args":[],
        "name":"NotOnMinimapForEnemies"
      },{
        "returns":"bool",
        "args":[],
        "name":"PassivesDisabled"
      },{
        "returns":"bool",
        "args":[],
        "name":"ProvidesVision"
      },{
        "returns":"float",
        "args":[],
        "name":"Script_GetAttackRange",
        "description":"Gets this unit's attack range after all modifiers."
      },{
        "returns":"bool",
        "args":[],
        "name":"Script_IsDeniable"
      },{
        "returns":"bool",
        "args":[],
        "name":"UnitCanRespawn",
        "description":"Can the unit respawn?"
      }],
    "extend":"C_BaseEntity",
    "name":"C_DOTA_BaseNPC"
  },{
    "kind":"class",
    "members":[{
        "returns":"float",
        "args":[],
        "name":"GetAgility"
      },{
        "returns":"float",
        "args":[],
        "name":"GetIntellect"
      },{
        "returns":"float",
        "args":[],
        "name":"GetStrength"
      }],
    "extend":"C_DOTA_BaseNPC",
    "name":"C_DOTA_BaseNPC_Hero"
  },{
    "kind":"class",
    "members":[{
        "returns":"bool",
        "args":[],
        "name":"CanOnlyPlayerHeroPickup"
      },{
        "returns":"int",
        "args":[],
        "name":"GetCurrentCharges"
      },{
        "returns":"int",
        "args":[],
        "name":"GetInitialCharges"
      },{
        "returns":"int",
        "args":[],
        "name":"GetItemSlot"
      },{
        "returns":"int",
        "args":[],
        "name":"GetSecondaryCharges"
      },{
        "returns":"int",
        "args":[],
        "name":"GetShareability"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsAlertableItem"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsCastOnPickup"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsDisassemblable"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsDroppable"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsInBackpack"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsItem"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsKillable"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsMuted"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsPermanent"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsPurchasable"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsRecipe"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsRecipeGenerated"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsSellable"
      },{
        "returns":"bool",
        "args":[],
        "name":"IsStackable"
      },{
        "returns":"bool",
        "args":[],
        "name":"RequiresCharges"
      }],
    "extend":"C_DOTABaseAbility",
    "name":"C_DOTA_Item"
  },{
    "kind":"class",
    "members":[],
    "extend":"C_DOTA_Item",
    "name":"C_DOTA_Item_EmptyBottle"
  },{
    "kind":"class",
    "members":[{
        "returns":"int",
        "args":[],
        "name":"CastFilterResult",
        "description":"Determine whether an issued command with no target is valid."
      },{
        "returns":"int",
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "name":"CastFilterResultLocation",
        "description":"(Vector vLocation) Determine whether an issued command on a location is valid."
      },{
        "returns":"int",
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "name":"CastFilterResultTarget",
        "description":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
      },{
        "returns":"float",
        "args":[],
        "name":"GetAOERadius",
        "description":"Controls the size of the AOE casting cursor."
      },{
        "returns":"string",
        "args":[],
        "name":"GetAbilityTextureName",
        "description":"Allows code overriding of the item texture shown in the HUD."
      },{
        "returns":"double",
        "args":[],
        "name":"GetBehavior",
        "description":"Return cast behavior type of this ability."
      },{
        "returns":"int",
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "name":"GetCastRange",
        "description":"Return cast range of this ability."
      },{
        "returns":"float",
        "args":[],
        "name":"GetChannelStartTime",
        "description":"Return the channel start time of this ability."
      },{
        "returns":"float",
        "args":[],
        "name":"GetChannelTime",
        "description":"Return the channel time of this ability."
      },{
        "returns":"int",
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "name":"GetChannelledManaCostPerSecond",
        "description":"Return mana cost at the given level per second while channeling (-1 is current)."
      },{
        "returns":"float",
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "name":"GetCooldown",
        "description":"Return cooldown of this ability."
      },{
        "returns":"string",
        "args":[],
        "name":"GetCustomCastError",
        "description":"Return the error string of a failed command with no target."
      },{
        "returns":"string",
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          }],
        "name":"GetCustomCastErrorLocation",
        "description":"(Vector vLocation) Return the error string of a failed command on a location."
      },{
        "returns":"string",
        "args":[{
            "name":"hTarget",
            "type":"handle"
          }],
        "name":"GetCustomCastErrorTarget",
        "description":"(HSCRIPT hTarget) Return the error string of a failed command on a target."
      },{
        "returns":"string",
        "args":[{
            "name":"nReason",
            "type":"int"
          }],
        "name":"GetCustomHudErrorMessage",
        "description":"(DOTA_INVALID_ORDERS nReason) Return the error string of a failed order."
      },{
        "returns":"int",
        "args":[{
            "name":"vLocation",
            "type":"Vector"
          },{
            "name":"hTarget",
            "type":"handle"
          }],
        "name":"GetEffectiveCastRange",
        "description":"Return cast range of this ability, taking modifiers into account."
      },{
        "returns":"int",
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "name":"GetGoldCost",
        "description":"Return gold cost at the given level (-1 is current)."
      },{
        "returns":"int",
        "args":[{
            "name":"iLevel",
            "type":"int"
          }],
        "name":"GetManaCost",
        "description":"Return mana cost at the given level (-1 is current)."
      },{
        "returns":"bool",
        "args":[],
        "name":"IsMuted",
        "description":"Returns whether this item is muted or not."
      }],
    "extend":"C_DOTA_Item",
    "name":"C_DOTA_Item_Lua"
  },{
    "kind":"class",
    "members":[],
    "extend":"C_BaseEntity",
    "name":"C_PointEntity"
  },{
    "kind":"class",
    "members":[{
        "returns":"void",
        "args":[{
            "name":"pMessage",
            "type":"string"
          }],
        "name":"SetMessage",
        "description":"Set the message on this entity."
      }],
    "extend":"C_BaseModelEntity",
    "name":"C_PointWorldText"
  },{
    "instance":"Convars",
    "kind":"class",
    "name":"Convars",
    "members":[{
        "returns":"table",
        "args":[{
            "type":"string"
          }],
        "name":"GetBool",
        "description":"GetBool(name) : returns the convar as a boolean flag."
      },{
        "returns":"handle",
        "args":[],
        "name":"GetCommandClient",
        "description":"GetCommandClient() : returns the player who issued this console command."
      },{
        "returns":"handle",
        "args":[],
        "name":"GetDOTACommandClient",
        "description":"GetDOTACommandClient() : returns the DOTA player who issued this console command."
      },{
        "returns":"table",
        "args":[{
            "type":"string"
          }],
        "name":"GetFloat",
        "description":"GetFloat(name) : returns the convar as a float. May return null if no such convar."
      },{
        "returns":"table",
        "args":[{
            "type":"string"
          }],
        "name":"GetInt",
        "description":"GetInt(name) : returns the convar as an int. May return null if no such convar."
      },{
        "returns":"table",
        "args":[{
            "type":"string"
          }],
        "name":"GetStr",
        "description":"GetStr(name) : returns the convar as a string. May return null if no such convar."
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"handle"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"RegisterCommand",
        "description":"RegisterCommand(name, fn, helpString, flags) : register a console command."
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"RegisterConvar",
        "description":"RegisterConvar(name, defaultValue, helpString, flags): register a new console variable."
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"bool"
          }],
        "name":"SetBool",
        "description":"SetBool(name, val) : sets the value of the convar to the bool."
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"float"
          }],
        "name":"SetFloat",
        "description":"SetFloat(name, val) : sets the value of the convar to the float."
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"SetInt",
        "description":"SetInt(name, val) : sets the value of the convar to the int."
      },{
        "returns":"void",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"SetStr",
        "description":"SetStr(name, val) : sets the value of the convar to the string."
      }]
  },{
    "instance":"GlobalSys",
    "kind":"class",
    "name":"GlobalSys",
    "members":[{
        "returns":"table",
        "args":[{
            "type":"string"
          }],
        "name":"CommandLineCheck",
        "description":"CommandLineCheck(name) : returns true if the command line param was used, otherwise false."
      },{
        "returns":"table",
        "args":[{
            "type":"string"
          },{
            "type":"float"
          }],
        "name":"CommandLineFloat",
        "description":"CommandLineFloat(name) : returns the command line param as a float."
      },{
        "returns":"table",
        "args":[{
            "type":"string"
          },{
            "type":"int"
          }],
        "name":"CommandLineInt",
        "description":"CommandLineInt(name) : returns the command line param as an int."
      },{
        "returns":"table",
        "args":[{
            "type":"string"
          },{
            "type":"string"
          }],
        "name":"CommandLineStr",
        "description":"CommandLineStr(name) : returns the command line param as a string."
      }]
  }]
